var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-T09-B1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"}],"authorContributionMap":{"kengsengg":1,"-":4}},{"path":"docs/team/teyxinhui.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d Tey Xin Hui - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d PROJECT: EduBuddy"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"---"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"EduBuddy is a desktop application designed for secondary school teachers to manage student information better."},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"* *Major enhancement*: Added L1R5 and L1B4 calculation support"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"** What it does: It helps to calculate the streaming score of each student by looking at the list of subjects assigned to the student."},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"** Justification: The streaming score is an important indicator of how well the students are doing academically. The process of calculating the score is tedious as you have to compare across many subjects and grades to obtain the best possible score."},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"Therefore, the calculation support just requires the teacher to key in the subject grades for the student and the teacher would be able to view the score easily as the"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"calculation support will calculate the score for the teacher."},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"* *Minor enhancement*: Created subject database and allow users to add/edit subject details"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B1/main/blob/master/collated/functional/TeyXinHui.md[Functional code]] [https://github.com/CS2103JAN2018-T09-B1/main/blob/master/collated/test/TeyXinHui.md[Test code]]"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"* *Other contributions*:"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"** Project management:"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"*** Opened, closed, and verified some issues on the issue tracker."},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"** Enhancements to existing features:"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"*** Allow `AddCommand` and `EditCommand` to support the `Subject` attribute of the students."},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"*** Prevent students in the _EduBuddy_ from having the same `NRIC` number by enhancing the `AddCommand` and `EditCommand`. This is because `NRIC` number is supposed to be unique to everyone."},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"** Documentation:"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"*** Did revisions to existing contents of the User Guide and Developer Guide"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"include::../UserGuide.adoc[tag \u003d addsubject]"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"include::../UserGuide.adoc[tag \u003d tagdelete]"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d stream]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"include::../DeveloperGuide.adoc[tag \u003d addsubjects]"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"include::../DeveloperGuide.adoc[tag \u003d masstagremoval]"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"include::../DeveloperGuide.adoc[tag \u003d subject]"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":""}],"authorContributionMap":{"kengsengg":33,"TeyXinHui":16,"-":11}},{"path":"docs/team/johnnychan.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d Johnny Chan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d PROJECT: EduBuddy"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"---"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"EduBuddy is a desktop application designed for secondary school teachers to manage student information better."},{"lineNumber":12,"author":{"gitID":"-"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX and HTML. It is written in Java, and has about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"* *Major enhancement*: Add *HTML student profile page* to *display student information*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"** What it does: Allows the user to view updated student information with HTML page built into the Browser Panel."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Justification: This feature improves the product significantly as it allows the user to visualise the student information in a simple and effective way"},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Highlights: This implementation takes in all data from the commands and updates it real time. It uses its own storage method to create and delete user profiles. It incorporates all 4 aspects of the code, Logic (commands), model(User information), UI (Browser Panel), Storage(a separate storage method)."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Credits: -"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Added change theme command for Browser Panel. Allows user to view by dark or light mode."},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B1/main/blob/master/collated/functional/johnnychanjx.md[Functional code]] [https://github.com[Test code]]"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"* *Other contributions*:"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Project management: Worked with every release of EduBuddy."},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"** Enhancements to existing features:"},{"lineNumber":31,"author":{"gitID":"-"},"content":" *** Added a different GUI color scheme to match with the EduBuddy UI."},{"lineNumber":32,"author":{"gitID":"-"},"content":" *** Created a default page to introduce users to EduBuddy."},{"lineNumber":33,"author":{"gitID":"-"},"content":" *** Created official EduBuddy logo."},{"lineNumber":34,"author":{"gitID":"-"},"content":" *** Took out case sensitivity in command input."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"** Documentation:"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Updated User Guide and cleaned up some areas from its original iteration"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Updated developer guide and cleaned up areas from its original iteration (eg. Took out Appendix A)"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"** Community:"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Opened, closed, and verified some issues on the issue tracker."},{"lineNumber":44,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"** Tools:"},{"lineNumber":47,"author":{"gitID":"-"},"content":"*** Integrated Travis CI into the project."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"include::../UserGuide.adoc[tag \u003d theme]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"include::../DeveloperGuide.adoc[tag \u003d browserpanel]"},{"lineNumber":65,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag \u003d theme]"},{"lineNumber":66,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"kengsengg":32,"TeyXinHui":1,"-":33}},{"path":"docs/team/chuakunhong.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d Chua Kun Hong - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d PROJECT: EduBuddy"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"---"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"EduBuddy is a desktop application designed for secondary school teachers to manage student information better."},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"* *Major enhancement*: Added commands which manages student\u0027s administrative information"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"** What it does: It allows the teachers to add other details that are required into the student records."},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"** Justification: These details are important for the teacher is as teachers are able to better justify a student\u0027s performance and would know who to contact to help the student perform better."},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"* *Minor enhancement*: Enhanced tag command functionalities"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B1/main/blob/master/collated/functional/chuakunhong.md[Functional code]] [https://github.com/CS2103JAN2018-T09-B1/main/blob/master/collated/test/chuakunhong.md[Test code]]"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"** Enhancements to existing features:"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"*** Extracted out EditPersonDescriptor as a class on it\u0027s own as it is shared by many other commands. This is to better edit the commands in the future as we add more commands."},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"** Documentation:"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"** Community:"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"** Tools:"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d tags]"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d remarks]"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"include::../UserGuide.adoc[tag \u003d injuries]"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d cca]"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"include::../UserGuide.adoc[tag \u003d NextofKin]"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"include::../DeveloperGuide.adoc[tag \u003d TagReplace]"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"include::../DeveloperGuide.adoc[tag \u003d remark]"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"include::../DeveloperGuide.adoc[tag \u003d InjuriesHistory]"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"include::../DeveloperGuide.adoc[tag \u003d Cca]"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"include::../DeveloperGuide.adoc[tag \u003d NOK]"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":""}],"authorContributionMap":{"chuakunhong":13,"kengsengg":43,"TeyXinHui":2,"-":10}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"EduBuddy was developed by https://github.com/CS2103JAN2018-T09-B1/main[T09-B1] team. +"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Chua Kun Hong"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"image::chuakunhong.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"{empty}[https://github.com/chuakunhong[GitHub]] [\u003c\u003cchuakunhong#, Portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":17,"author":{"gitID":"-"},"content":"Responsibilities: Administrative Component of Data"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Goh Keng Seng"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"image::kengsengg.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"{empty}[https://github.com/kengsengg[GitHub]] [\u003c\u003cgohkengseng#, Portfolio\u003e\u003e]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Responsibilities: Calendar and Appointment Implementations"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Johnny Chan Jun Xun"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"image::johnnychanjx.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"{empty}[http://github.com/johnnychanjx[GitHub]] [\u003c\u003cjohnnychan#, Portfolio\u003e\u003e]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":36,"author":{"gitID":"-"},"content":"Responsibilities: UI and Data Access Centralisation"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Tey Xin Hui"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"image::TeyXinHui.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"{empty}[http://github.com/TeyXinHui[GitHub]] [\u003c\u003cteyxinhui#, Portfolio\u003e\u003e]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"Role: Developer +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"Responsibilities: Subject Data and Algorithms"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"kengsengg":18,"-":29}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d EduBuddy"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"https://travis-ci.org/CS2103JAN2018-T09-B1/main[image:https://travis-ci.org/CS2103JAN2018-T09-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"https://ci.appveyor.com/project/kengsengg/main[image:https://ci.appveyor.com/api/projects/status/imspkq3b5pvh5p1d?svg\u003dtrue[Build status]]"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"https://coveralls.io/github/CS2103JAN2018-T09-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T09-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"https://www.codacy.com/app/kengsengg/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103JAN2018-T09-B1/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/aa9351de0bd0451596b55bf5839464d9[Codacy Badge]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"* This is a desktop student profiling application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* It is a Java sample application intended for secondary school teachers while using Java as the main programming language."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"* The source code for this application is adapted from https://github.com/se-edu/addressbook-level4[AddressBook-Level 4 Project] created by SE-EDU initiative."},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":32,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"kengsengg":8,"-":27}},{"path":"docs/team/gohkengseng.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d Goh Keng Seng - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d PROJECT: EduBuddy"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"---"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"EduBuddy is a desktop application designed for secondary school teachers to manage student information better."},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"* *Major enhancement:* Added the ability to create appointments and display it on the UI."},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"** What it does: Allows the user to manage and keep track of their appointments easily."},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"** Justification: This feature improves the product significantly because nowadays, secondary"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"school teachers tend to have a rather hectic lifestyle due to added on responsibilities, so this"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"feature will help to keep track of any appointments with students in a more organized manner."},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"* *Minor enhancement:* Added a sort command"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"** What it does: Allows the user to sort the list of students based on different parameters."},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"** Justification: This feature helps the user to save time by providing a ordered list"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"instead of sieving through the list and look at each individual contact."},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T09-B1/main/blob/master/collated/functional/kengsengg.md[Functional code]] [https://github.com/CS2103JAN2018-T09-B1/main/blob/master/collated/test/kengsengg.md[Test code]]"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"* *Other contributions*:"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"** Project management:"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"*** Managed releases, milestones on GitHub and code integration"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"*** Kept track of deliverables and deadlines"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"** Enhancements to existing features:"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"*** Enabled different color schemes for different tags"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"** Documentation:"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"*** Fixed errors in format of User and Developer Guide"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"*** Wrote the Google Calendar FAQ Section"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"* Credits: External libraries from https://developers.google.com/calendar/v3/reference/[Google Calendar API]"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":48,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d sort]"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d appointment]"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d delappointment]"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"include::../UserGuide.adoc[tag \u003d view]"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"include::../DeveloperGuide.adoc[tag \u003d Sorting]"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"include::../DeveloperGuide.adoc[tag \u003d appt]"}],"authorContributionMap":{"kengsengg":56,"-":10}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"\u003d EduBuddy - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":":repoURL: https://github.com/CS2103JAN2018-T09-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"By: `CS2103JAN2018-T09-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"Welcome to _EduBuddy_! This is a desktop application designed for secondary school teachers *to store and manage student records*."},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"More importantly, _EduBuddy_ is *optimized for those who prefer to work with a"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"Command Line Interface(CLI)* while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"If you can type fast, _EduBuddy_ can get your student profile management tasks done faster"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"than traditional GUI apps. Interested? Proceed on to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"Not quite sure how to get started? This section helps to guide you through the necessary steps"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"to get _EduBuddy_ up and running."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":".  Download the latest `EduBuddy.jar` link:https://github.com/CS2103JAN2018-T09-B1/main/releases[here]."},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":".  Copy the downloaded jar file to the folder you want to use as the home folder for _EduBuddy_."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"image::Ui.png[width\u003d\"800\"]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"A EduBuddy folder will be created in your operating system\u0027s home directory to facilitate debugging for advanced users."},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"At this point, _EduBuddy_ should be successfully set up. Here are some example commands that you can try:"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"* *`list` or `l`* : lists all students"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"* *`sort` `name`* : sorts the list of students by name"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"* **`delete` or `d`** `3` : deletes the 3rd student shown in the current list"},{"lineNumber":52,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"-The person must be re-selected for the information in the profile to be updated!!"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"-Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window. +"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"-Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"This section provides the information of all the useful and interesting features that _EduBuddy_ has to offer."},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"Here are the guidelines that you may wish to follow when typing in commands. +"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`. +"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"* Parameters can be in *any order* e.g. if the command specifies `n/NAME ic/S9500186H`, `ic/S9500186H n/NAME` is also acceptable. +"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"* Items in square brackets are *optional*. e.g `n/NAME [t/CLASS]` can be used as `n/John Doe t/1A` or as `n/John Doe`. +"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"* Command input is *case insensitive*, e.g `fInD Alex` and `find Alex` works the same. +"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"If you are unsure about the features of the _EduBuddy_, or require any technical assistance, type `help` and you will be shown with the help page. +"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Adding a student: `add` or `a`"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"When students are enrolled in the Secondary School you are teaching and you want to keep track of their information,"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"this feature allows you to add a student and his/her details to _EduBuddy_. +"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"Format: `add n/NAME ic/NRIC [t/CLASS] [r/REMARK] [sub/SUBJECT_NAME SUBJECT_GRADE ...]` +"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"Abbreviation Format: `a n/NAME ic/NRIC [t/CLASS] [r/REMARK] [sub/SUBJECT_NAME SUBJECT_GRADE ...]`"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"-For more examples on what subjects and subject grades can be added, please refer to the \u003c\u003cFAQ\u003e\u003e section below. +"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"-If you want to change the students\u0027 details later, you can use the `Edit` feature at \u003c\u003cEditing a student : `edit` or `e`\u003e\u003e. +"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"-If you want to add additional subjects later, you can use the the `AddSubject` feature at \u003c\u003cAdding subjects to a student : `addsub` [since v1.5]\u003e\u003e"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"[IMPORTANT]"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"-When adding a student, at least a `NAME` and a `NRIC` should be provided. +"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"-A `SPACE` should be inserted between each `SUBJECT_NAME` and `SUBJECT_GRADE`."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"* `add n/John Doe ic/S9500186H t/1A r/English Rep"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"sub/English B3 EMath A2 Chinese A1 Phy A1 AMath A1 Hist A2`"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"* `add n/Betsy Crowe ic/S9511111I`"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"* `a n/John Doe ic/S9500186H t/1A r/English Rep sub/English B3 EMath A2 Chinese A1 Phy A1 AMath A1 Hist A2`"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"* `a n/Betsy Crowe ic/S9511111I`"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Listing all students : `list` or `l`"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"After you have used the `find` feature in \u003c\u003cFinding students by name: `find` or `f`\u003e\u003e, the list only shows the filtered students\u0027 list."},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"Therefore you want to be able to view the list of all the students again."},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"You can just follow the format below and you will be able to see the full list. +"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":116,"author":{"gitID":"kengsengg"},"content":"Format: `list` +"},{"lineNumber":117,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `l`"},{"lineNumber":118,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":121,"author":{"gitID":"kengsengg"},"content":"// tag::sort[]"},{"lineNumber":122,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Sorting all students : `sort` [since v1.2]"},{"lineNumber":123,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":124,"author":{"gitID":"kengsengg"},"content":"Having trouble sieving through the never ending list of contacts so as to make comparisons?"},{"lineNumber":125,"author":{"gitID":"kengsengg"},"content":"Fret not, as this feature helps you to sort the list of all students in _EduBuddy_ according to different parameters. +"},{"lineNumber":126,"author":{"gitID":"kengsengg"},"content":"Format: `sort PARAMETER`"},{"lineNumber":127,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":128,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":129,"author":{"gitID":"kengsengg"},"content":"List of available PARAMETER: name, tag"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"kengsengg"},"content":"Examples:"},{"lineNumber":132,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":133,"author":{"gitID":"kengsengg"},"content":"* `sort name` +"},{"lineNumber":134,"author":{"gitID":"kengsengg"},"content":"Sorts the list of students by name in alphabetical order (case insensitive)."},{"lineNumber":135,"author":{"gitID":"kengsengg"},"content":"* `sort tag` +"},{"lineNumber":136,"author":{"gitID":"kengsengg"},"content":"Sorts the list of students by tag in alphabetical and numerical order (case insensitive)"},{"lineNumber":137,"author":{"gitID":"kengsengg"},"content":"// end::sort[]"},{"lineNumber":138,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":141,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Editing a student : `edit` or `e`"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"When you forgot to add in some details regarding the student, or the student has updated his/her information,"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"you can use this feature to edit an existing student in _EduBuddy_.The existing fields will then be updated accordingly. +"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"Format: `edit INDEX [n/NAME] [ic/NRIC] [t/CLASS] [t/CLASS_REGISTER] [sub/SUBJECT_NAME SUBJECT_GRADE ...]` +"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"Abbreviation Format: `e INDEX [n/NAME] [ic/NRIC] [t/CLASS] [t/CLASS_REGISTER] [sub/SUBJECT_NAME SUBJECT_GRADE ...]`"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":149,"author":{"gitID":"kengsengg"},"content":"Edits the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. +"},{"lineNumber":150,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":151,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"-At least one of the optional fields must be provided. +"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"-`INDEX` *must be a positive integer*: 1, 2, 3, ... +"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"-When editing the fields, for example: subjects, the previous information will be overwritten by the new subjects."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"* `edit 1 ic/S9123456A` +"},{"lineNumber":159,"author":{"gitID":"kengsengg"},"content":"Edits the NRIC number of the 1st student to be `S9123456A`."},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"* `edit 2 n/Betsy Crower sub/English A1 Chinese A1` +"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"Edits the name and subjects of the 2nd student to be `Betsy Crower`."},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"* `e 1 ic/S9123456A` +"},{"lineNumber":163,"author":{"gitID":"kengsengg"},"content":"Edits the NRIC number of the 1st student to be `S9123456A`."},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"* `e 2 n/Betsy Crower sub/English A1 Chinese A1` +"},{"lineNumber":165,"author":{"gitID":"kengsengg"},"content":"Edits the name and subjects of the 2nd student to be `Betsy Crower`. +"},{"lineNumber":166,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"// tag::addsubject[]"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Adding subjects to a student : `addsub` [since v1.5]"},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"If you forgot to add a subject/some subjects to a student earlier and do not want to retype all the subjects using \u003c\u003cEditing a student : `edit` or `e`\u003e\u003e,"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"you can use this feature to save your troubles. +"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"You just need to follow the format below and replace the words in \"[ ]\" with the corresponding subject(s) details. +"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"Format: `addsub INDEX sub/[SUBJECT_NAME SUBJECT_GRADE ...]` +"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":"[NOTE]"},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"-Adds subject(s) the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. +"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":"-If you want to view the subjects of the student, please refer to \u003c\u003cSelecting a person : `select` or `s`\u003e\u003e +"},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":"-This feature is undoable, so if you need to restore the _EduBuddy_ to the state before you enter this command, type in `undo`."},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":"[IMPORTANT]"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"-`INDEX` *must be a positive integer*: 1, 2, 3, ... +"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":"-There should be a `SPACE` between each `SUBJECT_NAME` and `SUBJECT_GRADE`. +"},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":"-If the student is already assigned to the subject that you want to add, that subject will not be overwritten. +"},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":"-If you have typed in duplicate subjects, for example, `addsub 1 sub/English A1 English A1`, the system will return an error message."},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":"You can remove the duplicate subject (`addsub 1 sub/English A1`) and press `Enter` to add the subject(s)."},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"Examples:"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"* `addsub 1 sub/English A2` +"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"Adds a new subject `English A2` to the student at `INDEX` 1."},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"* `addsub 11 sub/Hist A1 EMath A1` +"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"Adds subjects `Hist A1` and `EMath A1` to the student at `INDEX` 11."},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":".Situation: When you forgot or didn\u0027t add all the subjects that the student is taking"},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"image::NotEnoughSubjects.png[width\u003d\"800\"]"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":".Key in the following command"},{"lineNumber":199,"author":{"gitID":"TeyXinHui"},"content":"image::AddSubjectCommand.png[width\u003d\"300\"]"},{"lineNumber":200,"author":{"gitID":"TeyXinHui"},"content":".You will see the name fo the student and the finalised list of subjects when the subjects are successfully added."},{"lineNumber":201,"author":{"gitID":"TeyXinHui"},"content":"image::AddSubjectCommandSuccess.png[width\u003d\"500\"]"},{"lineNumber":202,"author":{"gitID":"TeyXinHui"},"content":".If you want to check the subjects of the student after adding."},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"image::AddSubjectCommandFinish.png[width\u003d\"800\"]"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":205,"author":{"gitID":"TeyXinHui"},"content":"// end::addsubject[]"},{"lineNumber":206,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":207,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":208,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":209,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Finding students by name: `find` or `f`"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"kengsengg"},"content":"Finds a list of students whose name contains any of the given keywords. +"},{"lineNumber":212,"author":{"gitID":"kengsengg"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":213,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":216,"author":{"gitID":"TeyXinHui"},"content":"-The search is case insensitive. e.g `hans` will match `Hans`. +"},{"lineNumber":217,"author":{"gitID":"TeyXinHui"},"content":"-The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`. +"},{"lineNumber":218,"author":{"gitID":"TeyXinHui"},"content":"-Students matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."},{"lineNumber":219,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":220,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":221,"author":{"gitID":"kengsengg"},"content":"Only the name is searched and only exact words will be matched e.g. `Han` will not match `Hans`."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* `find John` or `f John` +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":227,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` or `f Betsy Tim John` +"},{"lineNumber":228,"author":{"gitID":"chuakunhong"},"content":"Returns any student having names `Betsy`, `Tim`, or `John`"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":231,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":232,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Deleting a student : `delete` or `d`"},{"lineNumber":233,"author":{"gitID":"TeyXinHui"},"content":"If the student is not taught by you anymore, and you do not need to keep track of his/her information,"},{"lineNumber":234,"author":{"gitID":"TeyXinHui"},"content":"you can remove the student\u0027s details from _EduBuddy_ using this feature. +"},{"lineNumber":235,"author":{"gitID":"kengsengg"},"content":"Format: `delete INDEX` +"},{"lineNumber":236,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `d INDEX`"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":239,"author":{"gitID":"TeyXinHui"},"content":"-Deletes the student at the specified `INDEX`. +"},{"lineNumber":240,"author":{"gitID":"kengsengg"},"content":"-The index refers to the index number shown in the most recent student listing."},{"lineNumber":241,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":242,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":243,"author":{"gitID":"kengsengg"},"content":"`INDEX` *must be a positive integer*: 1, 2, 3, ..."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`d 2` +"},{"lineNumber":249,"author":{"gitID":"kengsengg"},"content":"Deletes the 2nd student in _EduBuddy_."},{"lineNumber":250,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":251,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":252,"author":{"gitID":"chuakunhong"},"content":"Deletes the 1st student in the results of the `find` command."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":255,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":256,"author":{"gitID":"TeyXinHui"},"content":"// tag::tagdelete[]"},{"lineNumber":257,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Deleting a tag : `tagdelete` or `td` [since v1.1]"},{"lineNumber":258,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":259,"author":{"gitID":"TeyXinHui"},"content":"When you have added the wrong `Class tag`,"},{"lineNumber":260,"author":{"gitID":"TeyXinHui"},"content":"or when the secondary 4 students have moved to the next higher education level,"},{"lineNumber":261,"author":{"gitID":"TeyXinHui"},"content":"and you want to remove the `Class tag` from every student who has the `Class tag` assigned to them."},{"lineNumber":262,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":263,"author":{"gitID":"TeyXinHui"},"content":"This command deletes the specified tag from every student in _EduBuddy_. +"},{"lineNumber":264,"author":{"gitID":"kengsengg"},"content":"Format: `tagdelete TAGNAME` +"},{"lineNumber":265,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `td TAGNAME`"},{"lineNumber":266,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":267,"author":{"gitID":"TeyXinHui"},"content":"[NOTE]"},{"lineNumber":268,"author":{"gitID":"TeyXinHui"},"content":"This feature is undoable, so if you need to restore the _EduBuddy_ to the state before you enter this command, type in `undo`."},{"lineNumber":269,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":270,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":271,"author":{"gitID":"kengsengg"},"content":"The tag must be a valid tag name that is assigned to at least one student in the _EduBuddy_."},{"lineNumber":272,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":273,"author":{"gitID":"TeyXinHui"},"content":"Examples:"},{"lineNumber":274,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":275,"author":{"gitID":"TeyXinHui"},"content":"image::TagDeleteResult.png[width\u003d\"650\"]"},{"lineNumber":276,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":277,"author":{"gitID":"TeyXinHui"},"content":"* `tagdelete 4A` or `td 4A` +"},{"lineNumber":278,"author":{"gitID":"TeyXinHui"},"content":"Deletes the \u00274A\u0027 tag from every student in the _EduBuddy_."},{"lineNumber":279,"author":{"gitID":"TeyXinHui"},"content":"// end::tagdelete[]"},{"lineNumber":280,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":281,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":282,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":283,"author":{"gitID":"TeyXinHui"},"content":"// tag::tags[]"},{"lineNumber":284,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Replacing a tag : `tagreplace` or `tr` [since v1.2]"},{"lineNumber":285,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":286,"author":{"gitID":"kengsengg"},"content":"Replaces the specified tag from every student in _EduBuddy_ with a specific tag. +"},{"lineNumber":287,"author":{"gitID":"chuakunhong"},"content":"Format: `tagreplace t/OLD_TAGNAME t/NEW_TAGNAME`"},{"lineNumber":288,"author":{"gitID":"chuakunhong"},"content":"Abbreviation Format: `tr t/OLD_TAGNAME t/NEW_TAGNAME`"},{"lineNumber":289,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":290,"author":{"gitID":"chuakunhong"},"content":"****"},{"lineNumber":291,"author":{"gitID":"chuakunhong"},"content":"* Replaces the specified tag from every student in Edubuddy with a specific tag."},{"lineNumber":292,"author":{"gitID":"TeyXinHui"},"content":"* The tag must be a valid tag name that is assigned to at least one student in the Edubuddy."},{"lineNumber":293,"author":{"gitID":"TeyXinHui"},"content":"****"},{"lineNumber":294,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":295,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"kengsengg"},"content":"The tag refers to the index number shown in the most recent listing."},{"lineNumber":297,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":298,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":299,"author":{"gitID":"kengsengg"},"content":"The tag must be a valid tag name that is assigned to at least one student in the _EduBuddy_."},{"lineNumber":300,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":301,"author":{"gitID":"chuakunhong"},"content":"Examples:"},{"lineNumber":302,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":303,"author":{"gitID":"chuakunhong"},"content":"image::TagReplaceCommand.png[width\u003d\"650\"]"},{"lineNumber":304,"author":{"gitID":"chuakunhong"},"content":"* `tagreplace t/3G t/4G` or `tr t/3G t/4G` +"},{"lineNumber":305,"author":{"gitID":"chuakunhong"},"content":"Replaces the \u00273G\u0027 tag from every student in _EduBuddy_ with \u0027Class 4G\u0027."},{"lineNumber":306,"author":{"gitID":"kengsengg"},"content":"// end::tags[]"},{"lineNumber":307,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":308,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":309,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":310,"author":{"gitID":"kengsengg"},"content":"// tag::remarks[]"},{"lineNumber":311,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Adding a remark : `addremark` [since v1.4]"},{"lineNumber":312,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":313,"author":{"gitID":"chuakunhong"},"content":"Adds a remark to a specified student in EduBuddy."},{"lineNumber":314,"author":{"gitID":"chuakunhong"},"content":"Format: `addremark INDEX r/REMARK`"},{"lineNumber":315,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":316,"author":{"gitID":"chuakunhong"},"content":"****"},{"lineNumber":317,"author":{"gitID":"chuakunhong"},"content":"* Adds a remark to the the student at the specified `INDEX`."},{"lineNumber":318,"author":{"gitID":"chuakunhong"},"content":"* The remark refers to anything that the teachers wants to comment"},{"lineNumber":319,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":320,"author":{"gitID":"chuakunhong"},"content":"* The index *must be a positive integer* 1, 2, 3, ...`"},{"lineNumber":321,"author":{"gitID":"chuakunhong"},"content":"****"},{"lineNumber":322,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":323,"author":{"gitID":"chuakunhong"},"content":"Examples:"},{"lineNumber":324,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":325,"author":{"gitID":"chuakunhong"},"content":"image::AddRemarkCommand.png[width\u003d\"650\"]"},{"lineNumber":326,"author":{"gitID":"chuakunhong"},"content":"* `list` +"},{"lineNumber":327,"author":{"gitID":"chuakunhong"},"content":"`addremark 3 r/Geo Rep` +"},{"lineNumber":328,"author":{"gitID":"chuakunhong"},"content":"Adds a remark, Geo Rep, to the 3rd student in EduBuddy."},{"lineNumber":329,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":330,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Deleting a remark : `deleteremark` [since v1.4]"},{"lineNumber":331,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":332,"author":{"gitID":"chuakunhong"},"content":"Delete a remark to a specified student in EduBuddy."},{"lineNumber":333,"author":{"gitID":"chuakunhong"},"content":"Format: `deleteremark INDEX r/REMARK`"},{"lineNumber":334,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":335,"author":{"gitID":"chuakunhong"},"content":"****"},{"lineNumber":336,"author":{"gitID":"chuakunhong"},"content":"* Deletes a remark from the the student at the specified `INDEX`."},{"lineNumber":337,"author":{"gitID":"chuakunhong"},"content":"* The remark refers to any part of the existing remark that is in the student profile for the student that you want."},{"lineNumber":338,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":339,"author":{"gitID":"chuakunhong"},"content":"* The index *must be a positive integer* 1, 2, 3, ...`"},{"lineNumber":340,"author":{"gitID":"chuakunhong"},"content":"****"},{"lineNumber":341,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":342,"author":{"gitID":"chuakunhong"},"content":"Examples:"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"chuakunhong"},"content":"* `list` +"},{"lineNumber":345,"author":{"gitID":"chuakunhong"},"content":"`deleteremark 3 r/Geo Rep` +"},{"lineNumber":346,"author":{"gitID":"chuakunhong"},"content":"Deletes the remark, Geo Rep, from the 3rd student in EduBuddy."},{"lineNumber":347,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":348,"author":{"gitID":"chuakunhong"},"content":"image::DeleteRemarkCommand.png[width\u003d\"650\"]"},{"lineNumber":349,"author":{"gitID":"kengsengg"},"content":"// end::remarks[]"},{"lineNumber":350,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":351,"author":{"gitID":"kengsengg"},"content":"// tag::select[]"},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select` or `s`"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"TeyXinHui"},"content":"When you want to view a student\u0027s personal details like academic grades, cca grades etc, you can view it by selecting the student."},{"lineNumber":355,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":356,"author":{"gitID":"chuakunhong"},"content":"Selects the student identified by the index number used in the last student listing. +"},{"lineNumber":357,"author":{"gitID":"kengsengg"},"content":"Format: `select INDEX` +"},{"lineNumber":358,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `s INDEX`"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":361,"author":{"gitID":"TeyXinHui"},"content":"-Selects the student and loads the student profile of the student at the specified `INDEX`. +"},{"lineNumber":362,"author":{"gitID":"TeyXinHui"},"content":"-The index refers to the index number shown in the most recent listing."},{"lineNumber":363,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":364,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":365,"author":{"gitID":"kengsengg"},"content":"The index *must be a positive integer*: 1, 2, 3, ..."},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":370,"author":{"gitID":"kengsengg"},"content":"`select 11` +"},{"lineNumber":371,"author":{"gitID":"kengsengg"},"content":"Selects the 11th student in _EduBuddy_."},{"lineNumber":372,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":373,"author":{"gitID":"kengsengg"},"content":"image::selectcommand.png[width\u003d\"800\"]"},{"lineNumber":374,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":375,"author":{"gitID":"kengsengg"},"content":"// end::select[]"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":378,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `h`"},{"lineNumber":380,"author":{"gitID":"TeyXinHui"},"content":"If you want to view what commands/actions you have made using the _EduBuddy_,"},{"lineNumber":381,"author":{"gitID":"TeyXinHui"},"content":"you can use this command as it lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":382,"author":{"gitID":"kengsengg"},"content":"Format: `history` +"},{"lineNumber":383,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `h`"},{"lineNumber":384,"author":{"gitID":"TeyXinHui"},"content":"You will be able to see a success message and the list of commands you have entered before in the CommandBox, For example: `Entered commands (from most recent to earliest):`."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":388,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":389,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":392,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":394,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `u`"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"kengsengg"},"content":"Restores _EduBuddy_ to the state before the previous _undoable_ command was executed. +"},{"lineNumber":397,"author":{"gitID":"kengsengg"},"content":"Format: `undo` +"},{"lineNumber":398,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `u`"},{"lineNumber":399,"author":{"gitID":"TeyXinHui"},"content":"You will be able to see a success message in the CommandBox, `Undo Success!`."},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":403,"author":{"gitID":"-"},"content":"Use select command after undo command to update Student Profile Page."},{"lineNumber":404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":408,"author":{"gitID":"kengsengg"},"content":"Undoable commands: those commands that modify EduBuddy\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":414,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":415,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":418,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":423,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":424,"author":{"gitID":"-"},"content":"`u` (reverses the `clear` command) +"},{"lineNumber":425,"author":{"gitID":"-"},"content":"`u` (reverses the `delete 1` command) +"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":428,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `r`"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":432,"author":{"gitID":"kengsengg"},"content":"Format: `redo` +"},{"lineNumber":433,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `r`"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":438,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":439,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":442,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":443,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":446,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":447,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":448,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":449,"author":{"gitID":"-"},"content":"`r` (reapplies the `delete 1` command) +"},{"lineNumber":450,"author":{"gitID":"-"},"content":"`r` (reapplies the `clear` command) +"},{"lineNumber":451,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":452,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":453,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":454,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":455,"author":{"gitID":"kengsengg"},"content":"// tag::appointment[]"},{"lineNumber":456,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Creating an appointment: `addappointment` or `addappt` [since v1.4]"},{"lineNumber":457,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":458,"author":{"gitID":"kengsengg"},"content":"If you are too busy with work and want to keep track of your schedule,"},{"lineNumber":459,"author":{"gitID":"kengsengg"},"content":"this feature will definitely come in handy. It helps to create an appointment"},{"lineNumber":460,"author":{"gitID":"kengsengg"},"content":"with the student identified by the index number used in the last student listing."},{"lineNumber":461,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":462,"author":{"gitID":"kengsengg"},"content":"Format: `addappointment n/NAME i/INFO d/DATE s/START_TIME e/END_TIME` +"},{"lineNumber":463,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `addappt n/NAME i/INFO d/DATE s/START_TIME e/END_TIME`"},{"lineNumber":464,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":465,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":466,"author":{"gitID":"kengsengg"},"content":"For first time users of _EduBuddy_, a Google authentication is required so as to sync your"},{"lineNumber":467,"author":{"gitID":"kengsengg"},"content":"appointment data with your own Google Calendar. Please refer to \u003c\u003cGoogle Calendar Authentication\u003e\u003e"},{"lineNumber":468,"author":{"gitID":"kengsengg"},"content":"on how to set it up first."},{"lineNumber":469,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":470,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":471,"author":{"gitID":"TeyXinHui"},"content":"-`DATE` should be in *DDMMYYYY* format e.g. 25th Dec 2018 would be 25122018. +"},{"lineNumber":472,"author":{"gitID":"TeyXinHui"},"content":"-`START_TIME` and `END_TIME` should be in *24 hour* format e.g. 3:30p.m. would be 1530. +"},{"lineNumber":473,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":474,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":475,"author":{"gitID":"kengsengg"},"content":"After the appointment is successfully created, use the `view` command to see it display on"},{"lineNumber":476,"author":{"gitID":"kengsengg"},"content":"your Google Calendar page if it is enabled."},{"lineNumber":477,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":478,"author":{"gitID":"kengsengg"},"content":"Examples:"},{"lineNumber":479,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":480,"author":{"gitID":"kengsengg"},"content":"* `addappointment` OR `addappt` `n/Bernice Yu i/Consultation d/03042018 s/1500 e/1600` +"},{"lineNumber":481,"author":{"gitID":"kengsengg"},"content":"Creates a consultation appointment with Bernice Yu on 3rd Apr 2018 from 3p.m. to 4p.m."},{"lineNumber":482,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":483,"author":{"gitID":"kengsengg"},"content":"image::addapptcommandsuccess.png[width\u003d\"650\"]"},{"lineNumber":484,"author":{"gitID":"kengsengg"},"content":"// end::appointment[]"},{"lineNumber":485,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":486,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":487,"author":{"gitID":"kengsengg"},"content":"// tag::delappointment[]"},{"lineNumber":488,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Deleting an appointment: `deleteappointment` or `deleteappt` [since v1.5]"},{"lineNumber":489,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":490,"author":{"gitID":"kengsengg"},"content":"This feature helps you to delete an appointment if"},{"lineNumber":491,"author":{"gitID":"kengsengg"},"content":"the appointments are already over or you accidentally added wrong details for the appointment"},{"lineNumber":492,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":493,"author":{"gitID":"kengsengg"},"content":"Format: `deleteappointment INDEX` +"},{"lineNumber":494,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `deleteappt INDEX`"},{"lineNumber":495,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":496,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":497,"author":{"gitID":"kengsengg"},"content":"For first time users of _EduBuddy_, a Google authentication is required so as to sync your"},{"lineNumber":498,"author":{"gitID":"kengsengg"},"content":"appointment data with your own Google Calendar. Please refer to \u003c\u003cGoogle Calendar Authentication\u003e\u003e"},{"lineNumber":499,"author":{"gitID":"kengsengg"},"content":"on how to set it up first."},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":502,"author":{"gitID":"TeyXinHui"},"content":"-Deletes the student at the specified `INDEX`. +"},{"lineNumber":503,"author":{"gitID":"kengsengg"},"content":"-The index refers to the index number shown in the most recent appointment listing. +"},{"lineNumber":504,"author":{"gitID":"kengsengg"},"content":"-After the appointment is successfully created, use the `view` command to see it display on"},{"lineNumber":505,"author":{"gitID":"kengsengg"},"content":"your Google Calendar page if it is enabled."},{"lineNumber":506,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":507,"author":{"gitID":"kengsengg"},"content":"Examples:"},{"lineNumber":508,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":509,"author":{"gitID":"kengsengg"},"content":"* `deleteappointment` OR `deleteappt` `3` +"},{"lineNumber":510,"author":{"gitID":"kengsengg"},"content":"Deletes a consultation appointment with Bernice Yu on 3rd Apr 2018 from 3p.m. to 4p.m."},{"lineNumber":511,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":512,"author":{"gitID":"kengsengg"},"content":"image::deleteapptcommandsuccess.png[width\u003d\"650\"]"},{"lineNumber":513,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":514,"author":{"gitID":"kengsengg"},"content":"// end::delappointment[]"},{"lineNumber":515,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":516,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":517,"author":{"gitID":"kengsengg"},"content":"// tag::view[]"},{"lineNumber":518,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Displaying calendar view: `view` [since v1.5]"},{"lineNumber":519,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":520,"author":{"gitID":"kengsengg"},"content":"If you want to view your own Google Calendar to keep track of your appointments, then this"},{"lineNumber":521,"author":{"gitID":"kengsengg"},"content":"is the feature for you."},{"lineNumber":522,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":523,"author":{"gitID":"kengsengg"},"content":"Format: `view GMAIL_ID` +"},{"lineNumber":524,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":525,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":526,"author":{"gitID":"kengsengg"},"content":"In order to succesfully view your own Google calendar, `GMAIL_ID` must be from a valid gmail account and"},{"lineNumber":527,"author":{"gitID":"kengsengg"},"content":"access to the calendar must be made public. Please refer to \u003c\u003cSetting up Google Calendar Permissions\u003e\u003e"},{"lineNumber":528,"author":{"gitID":"kengsengg"},"content":"on how to configure the settings."},{"lineNumber":529,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":530,"author":{"gitID":"kengsengg"},"content":"Examples:"},{"lineNumber":531,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":532,"author":{"gitID":"kengsengg"},"content":"* `view nusedubuddy` +"},{"lineNumber":533,"author":{"gitID":"kengsengg"},"content":"If your gmail account is nusedubuddy@gmail.com, the `GMAIL_ID` will be nusedubuddy"},{"lineNumber":534,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":535,"author":{"gitID":"kengsengg"},"content":"image::viewcommandbefore.png[width\u003d\"650\"]"},{"lineNumber":536,"author":{"gitID":"kengsengg"},"content":"The above image displays the calendar with an appointment before its deleted."},{"lineNumber":537,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":538,"author":{"gitID":"kengsengg"},"content":"image::viewcommandafter.png[width\u003d\"650\"]"},{"lineNumber":539,"author":{"gitID":"kengsengg"},"content":"The above image displays the calendar after the appointment is deleted."},{"lineNumber":540,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":541,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":542,"author":{"gitID":"kengsengg"},"content":"To refresh the calendar page after an appointment is added or deleted, type in the exact `view`"},{"lineNumber":543,"author":{"gitID":"kengsengg"},"content":"command again or right click on the calendar and press `Reload page`"},{"lineNumber":544,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":545,"author":{"gitID":"kengsengg"},"content":"// end::view[]"},{"lineNumber":546,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":547,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":548,"author":{"gitID":"kengsengg"},"content":"// tag::stream[]"},{"lineNumber":549,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Viewing streaming score: `stream` [since v1.5]"},{"lineNumber":550,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":551,"author":{"gitID":"TeyXinHui"},"content":"If you want to know if the student is qualified to enter the next education level, Junior College or Polytechnic, you can view the respective streaming score using this command."},{"lineNumber":552,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":553,"author":{"gitID":"TeyXinHui"},"content":"Format: `stream INDEX STREAM_TYPE`"},{"lineNumber":554,"author":{"gitID":"TeyXinHui"},"content":"You will be able to see a success message in the CommandBox, For example: `Student: John Doe. L1R5 Score: 8`."},{"lineNumber":555,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":556,"author":{"gitID":"TeyXinHui"},"content":"[NOTE]"},{"lineNumber":557,"author":{"gitID":"TeyXinHui"},"content":"-Selects the student at the specified `INDEX`. The index refers to the index number shown in the last student listing. +"},{"lineNumber":558,"author":{"gitID":"TeyXinHui"},"content":"-`STREAM_TYPE` refers to the different streaming categories."},{"lineNumber":559,"author":{"gitID":"TeyXinHui"},"content":"[width\u003d\"85%\",cols\u003d\"\u003c23%,\u003c23%\",options\u003d\"header\",]"},{"lineNumber":560,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":561,"author":{"gitID":"TeyXinHui"},"content":"|STREAM_TYPE|Streaming categories"},{"lineNumber":562,"author":{"gitID":"TeyXinHui"},"content":"|1| L1R5"},{"lineNumber":563,"author":{"gitID":"TeyXinHui"},"content":"|2| L1B4-A or L1R2B2-A"},{"lineNumber":564,"author":{"gitID":"TeyXinHui"},"content":"|3| L1B4-B or L1R2B2-B"},{"lineNumber":565,"author":{"gitID":"TeyXinHui"},"content":"|4| L1B4-C or L1R2B2-C"},{"lineNumber":566,"author":{"gitID":"TeyXinHui"},"content":"|5| L1B4-D or L1R2B2-D"},{"lineNumber":567,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":568,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":569,"author":{"gitID":"TeyXinHui"},"content":"[IMPORTANT]"},{"lineNumber":570,"author":{"gitID":"TeyXinHui"},"content":"-`INDEX` *must be a positive integer*: 1, 2, ..."},{"lineNumber":571,"author":{"gitID":"TeyXinHui"},"content":"-`STREAM_TYPE` *must be a positive integer*: 1, 2, 3, 4, 5."},{"lineNumber":572,"author":{"gitID":"TeyXinHui"},"content":"-The `Student` should have the right subject combination to calculate the respective score, else you will see that the score is 0."},{"lineNumber":573,"author":{"gitID":"TeyXinHui"},"content":"-If you want to change the subject details, you can use the `Edit` feature at \u003c\u003cEditing a student : `edit` or `e`\u003e\u003e."},{"lineNumber":574,"author":{"gitID":"TeyXinHui"},"content":"-If you want to add additional subjects later, you can use the the `AddSubject` feature at \u003c\u003cAdd subjects to a student : `addsub`\u003e\u003e."},{"lineNumber":575,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":576,"author":{"gitID":"TeyXinHui"},"content":"Examples:"},{"lineNumber":577,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":578,"author":{"gitID":"TeyXinHui"},"content":"* `stream 1 1` +"},{"lineNumber":579,"author":{"gitID":"TeyXinHui"},"content":"Returns the L1R5 score obtained by the student based on his/her grades."},{"lineNumber":580,"author":{"gitID":"TeyXinHui"},"content":"* `stream 1 2` +"},{"lineNumber":581,"author":{"gitID":"TeyXinHui"},"content":"Returns the L1B4-A score obtained by the student based on his/her grades."},{"lineNumber":582,"author":{"gitID":"kengsengg"},"content":"// end::stream[]"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":585,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":586,"author":{"gitID":"TeyXinHui"},"content":"// tag::injuries[]"},{"lineNumber":587,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Adding a injury history to a student : `addinjuries` [since v1.5]"},{"lineNumber":588,"author":{"gitID":"chuakunhong"},"content":"Adds an injury history to the student of the specified index, in the student records in _EduBuddy_. +"},{"lineNumber":589,"author":{"gitID":"chuakunhong"},"content":"Format: `addinjuries INDEX injuries/INJURY` +"},{"lineNumber":590,"author":{"gitID":"chuakunhong"},"content":"You will be able to see the success message, +"},{"lineNumber":591,"author":{"gitID":"chuakunhong"},"content":"`Injuries History added: INJURY` +"},{"lineNumber":592,"author":{"gitID":"chuakunhong"},"content":"`Person: NAME`"},{"lineNumber":593,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":594,"author":{"gitID":"chuakunhong"},"content":"[NOTE]"},{"lineNumber":595,"author":{"gitID":"TeyXinHui"},"content":"-Adds an injury history to the student at the specified `INDEX`. +"},{"lineNumber":596,"author":{"gitID":"TeyXinHui"},"content":"-The index refers to the index number shown in the most recent listing."},{"lineNumber":597,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":598,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":599,"author":{"gitID":"kengsengg"},"content":"`INDEX` *must be a positive integer*: 1, 2, 3, ..."},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":604,"author":{"gitID":"chuakunhong"},"content":"`addinjuries 2 injuries/Dislocated Right Shoulder` +"},{"lineNumber":605,"author":{"gitID":"chuakunhong"},"content":"Adds the injury, dislocated right shoulder to the 2nd student in _EduBuddy_."},{"lineNumber":606,"author":{"gitID":"chuakunhong"},"content":"* `find Betsy` +"},{"lineNumber":607,"author":{"gitID":"chuakunhong"},"content":"`addinjuries 1 injuries/Right Ligament Tear` +"},{"lineNumber":608,"author":{"gitID":"chuakunhong"},"content":"Adds the injury, right ligament tear to the 1st student in the results of the `find` command."},{"lineNumber":609,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":610,"author":{"gitID":"chuakunhong"},"content":".Before the command `addinjuries 1 injuries/Right Ligament Tear` was entered."},{"lineNumber":611,"author":{"gitID":"chuakunhong"},"content":"image::InjuriesBeforeAdd.PNG[width\u003d\"800\"]"},{"lineNumber":612,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":613,"author":{"gitID":"chuakunhong"},"content":".Success message when the command is entered successfully."},{"lineNumber":614,"author":{"gitID":"chuakunhong"},"content":"image::AddInjuriesSuccessMessage.png[width\u003d\"800\"]"},{"lineNumber":615,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":616,"author":{"gitID":"chuakunhong"},"content":".After the command is successfully entered."},{"lineNumber":617,"author":{"gitID":"chuakunhong"},"content":"image::InjuriesAfterAdd.png[width\u003d\"800\"]"},{"lineNumber":618,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":619,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":620,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":621,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":622,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Deleting a injuries history from a student : `deleteinjuries` [since v1.5]"},{"lineNumber":623,"author":{"gitID":"chuakunhong"},"content":"Deletes a injury history from the student records in _EduBuddy_. +"},{"lineNumber":624,"author":{"gitID":"chuakunhong"},"content":"Format: `deleteinjuries INDEX injuries/INJURIES` +"},{"lineNumber":625,"author":{"gitID":"chuakunhong"},"content":"You will be able to see the success message, +"},{"lineNumber":626,"author":{"gitID":"chuakunhong"},"content":"`Injuries deleted: INJURIES` +"},{"lineNumber":627,"author":{"gitID":"chuakunhong"},"content":"`Person: NAME`"},{"lineNumber":628,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":629,"author":{"gitID":"chuakunhong"},"content":"[NOTE]"},{"lineNumber":630,"author":{"gitID":"TeyXinHui"},"content":"-Deletes a injury history from the student at the specified `INDEX`. +"},{"lineNumber":631,"author":{"gitID":"TeyXinHui"},"content":"-The index refers to the index number shown in the most recent listing."},{"lineNumber":632,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":633,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":634,"author":{"gitID":"kengsengg"},"content":"`INDEX` *must be a positive integer*: 1, 2, 3, ..."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":639,"author":{"gitID":"chuakunhong"},"content":"`deleteinjuries 2 injuries/Torn Ligament` +"},{"lineNumber":640,"author":{"gitID":"chuakunhong"},"content":"Deletes the injury history,torn ligament from the 2nd student in _EduBuddy_."},{"lineNumber":641,"author":{"gitID":"chuakunhong"},"content":"* `find Betsy` +"},{"lineNumber":642,"author":{"gitID":"chuakunhong"},"content":"`deleteinjuries 1 injuries/Dislocated Shoulder` +"},{"lineNumber":643,"author":{"gitID":"chuakunhong"},"content":"Deletes the injury history from the 1st student in the results of the `find` command."},{"lineNumber":644,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":645,"author":{"gitID":"chuakunhong"},"content":".The success message when command is successfully entered."},{"lineNumber":646,"author":{"gitID":"chuakunhong"},"content":"image::DeleteInjuriesSuccessMessage.png[width\u003d\"400\"]"},{"lineNumber":647,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":648,"author":{"gitID":"chuakunhong"},"content":".What you should see after the command is successfully executed."},{"lineNumber":649,"author":{"gitID":"chuakunhong"},"content":"image::DeleteInjuriesCommand.png[width\u003d\"800\"]"},{"lineNumber":650,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":651,"author":{"gitID":"TeyXinHui"},"content":"// end::injuries[]"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":654,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":655,"author":{"gitID":"kengsengg"},"content":"// tag::cca[]"},{"lineNumber":656,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Editing the details of CCA of a student : `cca` [since v1.5]"},{"lineNumber":657,"author":{"gitID":"chuakunhong"},"content":"edits the CCA details of the student in _EduBuddy_. +"},{"lineNumber":658,"author":{"gitID":"chuakunhong"},"content":"Format: `cca INDEX cca/CCA pos/POSITION` +"},{"lineNumber":659,"author":{"gitID":"chuakunhong"},"content":"You will be able to see the success message, +"},{"lineNumber":660,"author":{"gitID":"chuakunhong"},"content":"`CCA added: CCA: POSITION` +"},{"lineNumber":661,"author":{"gitID":"chuakunhong"},"content":"`Person: NAME`"},{"lineNumber":662,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":663,"author":{"gitID":"chuakunhong"},"content":"[NOTE]"},{"lineNumber":664,"author":{"gitID":"chuakunhong"},"content":"-Adds the CCA details to the student at the specified `INDEX`"},{"lineNumber":665,"author":{"gitID":"chuakunhong"},"content":"if the student does not have any cca details. +"},{"lineNumber":666,"author":{"gitID":"chuakunhong"},"content":"-Edits the CCA details of the student at the specified `INDEX.` +"},{"lineNumber":667,"author":{"gitID":"TeyXinHui"},"content":"-The index refers to the index number shown in the most recent listing."},{"lineNumber":668,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":669,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":670,"author":{"gitID":"kengsengg"},"content":"`INDEX` *must be a positive integer*: 1, 2, 3, ..."},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":675,"author":{"gitID":"chuakunhong"},"content":"`cca 2 cca/Basketball pos/Member` +"},{"lineNumber":676,"author":{"gitID":"chuakunhong"},"content":"Adds the cca details(cca basketball with the position member) to the 2nd student in _EduBuddy_."},{"lineNumber":677,"author":{"gitID":"chuakunhong"},"content":"* `find Betsy` +"},{"lineNumber":678,"author":{"gitID":"chuakunhong"},"content":"`cca 1 cca/Choir pos/Member` +"},{"lineNumber":679,"author":{"gitID":"chuakunhong"},"content":"Adds the cca details(cca Choir with the position member) to the 1st student in the results of the `find` command."},{"lineNumber":680,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":681,"author":{"gitID":"chuakunhong"},"content":".Before adding CCA to Betsy."},{"lineNumber":682,"author":{"gitID":"chuakunhong"},"content":"image::BeforeAddingCca.PNG[width\u003d\"800\"]"},{"lineNumber":683,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":684,"author":{"gitID":"chuakunhong"},"content":".The success message when command is successfully entered."},{"lineNumber":685,"author":{"gitID":"chuakunhong"},"content":"image::AddCcaSuccessMessage.PNG[width\u003d\"800\"]"},{"lineNumber":686,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":687,"author":{"gitID":"chuakunhong"},"content":".After the command is successfully entered."},{"lineNumber":688,"author":{"gitID":"chuakunhong"},"content":"image::AfterAddingCca.png[width\u003d\"800\"]"},{"lineNumber":689,"author":{"gitID":"chuakunhong"},"content":"// end::cca[]"},{"lineNumber":690,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":691,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":692,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":693,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":694,"author":{"gitID":"chuakunhong"},"content":"// tag::NextofKin[]"},{"lineNumber":695,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Editing the details of the next of kin of a student : `nok` [since v1.5]"},{"lineNumber":696,"author":{"gitID":"chuakunhong"},"content":"Edits a next of kin details of the student in _EduBuddy_. +"},{"lineNumber":697,"author":{"gitID":"chuakunhong"},"content":"Format: `nok INDEX n/NAME p/PHONE [e/EMAIL] r/RELATIONSHIP` +"},{"lineNumber":698,"author":{"gitID":"chuakunhong"},"content":"You will be able to see the success message, +"},{"lineNumber":699,"author":{"gitID":"chuakunhong"},"content":"`Next of Kin: NAME Phone: PHONE Email: EMAIL Remark: Father` +"},{"lineNumber":700,"author":{"gitID":"chuakunhong"},"content":"`Person: NAME`"},{"lineNumber":701,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":702,"author":{"gitID":"chuakunhong"},"content":"[NOTE]"},{"lineNumber":703,"author":{"gitID":"chuakunhong"},"content":"-Adds the next of kin details to the student at the specified `INDEX` if the student does not have any next of kin"},{"lineNumber":704,"author":{"gitID":"chuakunhong"},"content":"details. +"},{"lineNumber":705,"author":{"gitID":"chuakunhong"},"content":"-Edits the next of kin details from the student at the specified `INDEX`. +"},{"lineNumber":706,"author":{"gitID":"TeyXinHui"},"content":"-The index refers to the index number shown in the most recent listing."},{"lineNumber":707,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":708,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":709,"author":{"gitID":"kengsengg"},"content":"`INDEX` *must be a positive integer*: 1, 2, 3, ..."},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":714,"author":{"gitID":"chuakunhong"},"content":"`nok 2 n/Dave p/96784561 r/Father` +"},{"lineNumber":715,"author":{"gitID":"chuakunhong"},"content":"Edits the next of kin details(name, phone number and relationship)"},{"lineNumber":716,"author":{"gitID":"chuakunhong"},"content":"of the 2nd student in _EduBuddy_."},{"lineNumber":717,"author":{"gitID":"chuakunhong"},"content":"* `find Betsy` +"},{"lineNumber":718,"author":{"gitID":"chuakunhong"},"content":"`nok 1 n/Dave p/96784561 r/Father` +"},{"lineNumber":719,"author":{"gitID":"chuakunhong"},"content":"Edits the next of kin details(name, phone number and relationship)"},{"lineNumber":720,"author":{"gitID":"chuakunhong"},"content":"of the 1st student in the results of the `find` command."},{"lineNumber":721,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":722,"author":{"gitID":"chuakunhong"},"content":".Before adding the next of kin details to Betsy."},{"lineNumber":723,"author":{"gitID":"chuakunhong"},"content":"image::BeforeAddingNOK.png[width\u003d\"400\"]"},{"lineNumber":724,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":725,"author":{"gitID":"chuakunhong"},"content":".The success message when command is successfully entered."},{"lineNumber":726,"author":{"gitID":"chuakunhong"},"content":"image::AddNOKSuccessMessage.png[width\u003d\"400\"]"},{"lineNumber":727,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":728,"author":{"gitID":"chuakunhong"},"content":".After the command is successfully entered."},{"lineNumber":729,"author":{"gitID":"chuakunhong"},"content":"image::AfterAddingNOK.png[width\u003d\"800\"]"},{"lineNumber":730,"author":{"gitID":"chuakunhong"},"content":"// end::NextofKin[]"},{"lineNumber":731,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":732,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":733,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":734,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":735,"author":{"gitID":"TeyXinHui"},"content":"// tag::theme[]"},{"lineNumber":736,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Changing theme of _EduBuddy_ : `theme` [since v1.5]"},{"lineNumber":737,"author":{"gitID":"-"},"content":"Changes colour theme of  _EduBuddy_ to dark or light theme. +"},{"lineNumber":738,"author":{"gitID":"-"},"content":"Format: `theme colour` +"},{"lineNumber":739,"author":{"gitID":"chuakunhong"},"content":"You will be able to see the success message, +"},{"lineNumber":740,"author":{"gitID":"-"},"content":"`Theme Changed!`"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"[IMPORTANT]"},{"lineNumber":744,"author":{"gitID":"-"},"content":"`colour` *must be \u0027dark\u0027 or \u0027light\u0027"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"* `theme` dark +"},{"lineNumber":749,"author":{"gitID":"-"},"content":"Changes visual theme to dark theme."},{"lineNumber":750,"author":{"gitID":"-"},"content":"* `theme` light +"},{"lineNumber":751,"author":{"gitID":"-"},"content":"Changes visual theme to light theme."},{"lineNumber":752,"author":{"gitID":"TeyXinHui"},"content":"// end::theme[]"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":755,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `c`"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"kengsengg"},"content":"Clears all student entries from _EduBuddy_. +"},{"lineNumber":759,"author":{"gitID":"kengsengg"},"content":"Format: `clear` +"},{"lineNumber":760,"author":{"gitID":"kengsengg"},"content":"Abbreviation Format: `c`"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":763,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"chuakunhong"},"content":"EduBuddy data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":767,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":770,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":774,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":775,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":776,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":777,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":778,"author":{"gitID":"chuakunhong"},"content":"// tag::L.E.A.P.S System[]"},{"lineNumber":779,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d L.E.A.P.S System `[coming in v2.0]`"},{"lineNumber":780,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":781,"author":{"gitID":"chuakunhong"},"content":"_{Allows the teachers to key in the levels attained by the student for the various domains in L.E.A.P.S"},{"lineNumber":782,"author":{"gitID":"chuakunhong"},"content":"  to calculate the Co-Curricular Attainment of the student.}_"},{"lineNumber":783,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":784,"author":{"gitID":"chuakunhong"},"content":"// end::L.E.A.P.S System[]"},{"lineNumber":785,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":786,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":788,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"_{explain how the user can enable/disable data encryption}_"},{"lineNumber":791,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":794,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"kengsengg"},"content":"// tag::googlecalendar[]"},{"lineNumber":798,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Google Calendar Authentication"},{"lineNumber":799,"author":{"gitID":"kengsengg"},"content":"For first time users, when you attempt to add an appointment to _EduBuddy_, you will be redirected"},{"lineNumber":800,"author":{"gitID":"kengsengg"},"content":"to a new window or tab in your default web browser, as shown in the diagram below."},{"lineNumber":801,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":802,"author":{"gitID":"kengsengg"},"content":"image::googlelogin.png[width\u003d\"650\"]"},{"lineNumber":803,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":804,"author":{"gitID":"kengsengg"},"content":"To complete the authentication, you may follow the steps below:"},{"lineNumber":805,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":806,"author":{"gitID":"kengsengg"},"content":"Step 1:Input your gmail ID and password to proceed."},{"lineNumber":807,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":808,"author":{"gitID":"kengsengg"},"content":"[IMPORTANT]"},{"lineNumber":809,"author":{"gitID":"kengsengg"},"content":"If you accidentally closed the pop-up browser at this point, the authentication will terminate and it will cause _EduBuddy_"},{"lineNumber":810,"author":{"gitID":"kengsengg"},"content":"to stop responding. Close _EduBuddy_ and restart it again."},{"lineNumber":811,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":812,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":813,"author":{"gitID":"kengsengg"},"content":"If you currently do not have a Gmail account, but wish to try our appointment feature, you may use"},{"lineNumber":814,"author":{"gitID":"kengsengg"},"content":"the following test account to proceed instead. +"},{"lineNumber":815,"author":{"gitID":"kengsengg"},"content":"-Gmail ID: edubuddytest +"},{"lineNumber":816,"author":{"gitID":"kengsengg"},"content":"-Gmail PW: edubuddy123"},{"lineNumber":817,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":818,"author":{"gitID":"kengsengg"},"content":"Step 2: After successfully logging in to you Gmail account, you will be prompted access. Click `ALLOW`"},{"lineNumber":819,"author":{"gitID":"kengsengg"},"content":"to proceed."},{"lineNumber":820,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":821,"author":{"gitID":"kengsengg"},"content":"image::googleaccess.png[width\u003d\"650\"]"},{"lineNumber":822,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":823,"author":{"gitID":"kengsengg"},"content":"Step 3: Once that is done, the following message will be displayed at the top left corner"},{"lineNumber":824,"author":{"gitID":"kengsengg"},"content":"of your browser page."},{"lineNumber":825,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":826,"author":{"gitID":"kengsengg"},"content":"image::googlesuccess.png[width\u003d\"650\"]"},{"lineNumber":827,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":828,"author":{"gitID":"kengsengg"},"content":"The authentication is successful and you may close the browser and continue"},{"lineNumber":829,"author":{"gitID":"kengsengg"},"content":"with the application."},{"lineNumber":830,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":831,"author":{"gitID":"kengsengg"},"content":"[NOTE]"},{"lineNumber":832,"author":{"gitID":"kengsengg"},"content":"This authentication will only be done once and subsequent execution of _EduBuddy_ will not show the"},{"lineNumber":833,"author":{"gitID":"kengsengg"},"content":"prompt again."},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":836,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":837,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Setting up Google Calendar Permissions"},{"lineNumber":838,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":839,"author":{"gitID":"kengsengg"},"content":"To allow your own Google Calender to be viewed on _EduBuddy_, you may follow these steps:"},{"lineNumber":840,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":841,"author":{"gitID":"kengsengg"},"content":"Step 1: Login to your Google Calendar and click on the `Settings`."},{"lineNumber":842,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":843,"author":{"gitID":"kengsengg"},"content":"image::googlesettings.png[width\u003d\"650\"]"},{"lineNumber":844,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":845,"author":{"gitID":"kengsengg"},"content":"Step 2: At the left hand side panel, under \"Settings for my calendars\", click on your own calendar."},{"lineNumber":846,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":847,"author":{"gitID":"kengsengg"},"content":"image::googlesettings2.png[width\u003d\"300\"]"},{"lineNumber":848,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":849,"author":{"gitID":"kengsengg"},"content":"Step 3: Check the \"Make available to public\" box"},{"lineNumber":850,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":851,"author":{"gitID":"kengsengg"},"content":"image::googlepermissions.png[width\u003d\"650\"]"},{"lineNumber":852,"author":{"gitID":"kengsengg"},"content":"// end::googlecalendar[]"},{"lineNumber":853,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":854,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":855,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Others"},{"lineNumber":856,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":858,"author":{"gitID":"chuakunhong"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous EduBuddy folder."},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"TeyXinHui"},"content":"*Q*: What is L1B4 (as known as L1R2B2)? +"},{"lineNumber":861,"author":{"gitID":"TeyXinHui"},"content":"*A*: A grading system for Secondary School students taking \"O-Level Examination\" at the end of their four years of studies in Secondary School."},{"lineNumber":862,"author":{"gitID":"TeyXinHui"},"content":"     The score obtained from the grading system will be used to determine the eligibility of the students to enter the next level of education, Polytechnic."},{"lineNumber":863,"author":{"gitID":"TeyXinHui"},"content":"     `L1` represents the First language subject and `B4` represents 2 relevant subjects, according to the polytechnic course applied, and 2 other best subjects."},{"lineNumber":864,"author":{"gitID":"TeyXinHui"},"content":"     The category the relevant subject is under(for example: L1B4-A, L1B4-B, L1B4-C, L1B4D), will determine which subjects are the relevant subjects."},{"lineNumber":865,"author":{"gitID":"TeyXinHui"},"content":"The score will be calculated by considering the subjects\u0027 grades. Each subject can only be considered once."},{"lineNumber":866,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":867,"author":{"gitID":"TeyXinHui"},"content":"If you want to find out more about the subject categories (L1B4-A, L1B4-B, L1B4-C, L1B4D),"},{"lineNumber":868,"author":{"gitID":"TeyXinHui"},"content":"please visit:"},{"lineNumber":869,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":870,"author":{"gitID":"TeyXinHui"},"content":"* https://www.sp.edu.sg/wps/portal/vp-spws/!ut/p/a0/04_Sj9CPykssy0xPLMnMz0vMAfGjzOJDPUxdjdxMTQws3J1cDDwt_MJMXZxDDE3cDfQLsh0VAYY7oWE!/?PC_Z7_UH5E2F540G6P00IO8K5AU61JM5027774_WCM_CONTEXT\u003d/wps/wcm/connect/lib-spws/site-spwebsite/future+students/admissions/selection+criteria+for+gce+o+level+holders+-+aggregate+computation++%28admissions+-+course+intakes+and+cut-off+points%29[Singapore Polytechnic]"},{"lineNumber":871,"author":{"gitID":"TeyXinHui"},"content":"* http://www.tp.edu.sg/admissions/gce-o-level-aggregate-scores-computation[Temasek Polytechnic]"},{"lineNumber":872,"author":{"gitID":"TeyXinHui"},"content":"* https://www.moe.gov.sg/education/post-secondary#polytechnics[Other Polytechnics]"},{"lineNumber":873,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":874,"author":{"gitID":"TeyXinHui"},"content":"*Q*: What is L1R5? +"},{"lineNumber":875,"author":{"gitID":"TeyXinHui"},"content":"*A*: L1R5 is a grading system used in Singapore to determine the secondary school students\u0027 proficiency in the subjects taken for \"O-Level Examination\"."},{"lineNumber":876,"author":{"gitID":"TeyXinHui"},"content":"The score is used for the students to enroll into Junior Colleges, which is the next higher level of education. \"L1\" refers to the first language subject taken by the student, while \"R5\" refers to the 5 relevant subjects that are examinable by the students."},{"lineNumber":877,"author":{"gitID":"TeyXinHui"},"content":"The grade of L1R5 is then determined by taking the best grades of each category and summing them up, for example, if a student scores A1 for all 6 subjects are from each category, the score will be 6. Each subject can only be considered once."},{"lineNumber":878,"author":{"gitID":"TeyXinHui"},"content":"For more information, please click https://www.moe.gov.sg/admissions/direct-admissions/dsa-jc/eligibility[here]"},{"lineNumber":879,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":880,"author":{"gitID":"TeyXinHui"},"content":"*Q*: How are the grades for the subjects determined? +"},{"lineNumber":881,"author":{"gitID":"TeyXinHui"},"content":"*A*: The level of achievement in each subject is indicated by the grade obtained, with A1 being the highest achievable grade and F9 the lowest:"},{"lineNumber":882,"author":{"gitID":"TeyXinHui"},"content":"[width\u003d\"85%\",cols\u003d\"22%,\u003c23%\",options\u003d\"header\",]"},{"lineNumber":883,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":884,"author":{"gitID":"TeyXinHui"},"content":"|Grade|Percentage of Competency"},{"lineNumber":885,"author":{"gitID":"TeyXinHui"},"content":"|A1| 75% - 100%"},{"lineNumber":886,"author":{"gitID":"TeyXinHui"},"content":"|A2| 70% - 74%"},{"lineNumber":887,"author":{"gitID":"TeyXinHui"},"content":"|B3| 65% - 69%"},{"lineNumber":888,"author":{"gitID":"TeyXinHui"},"content":"|B4| 60% - 64%"},{"lineNumber":889,"author":{"gitID":"TeyXinHui"},"content":"|C5| 55% - 59%"},{"lineNumber":890,"author":{"gitID":"TeyXinHui"},"content":"|C6| 50% - 54%"},{"lineNumber":891,"author":{"gitID":"TeyXinHui"},"content":"|D7| 45% - 49%"},{"lineNumber":892,"author":{"gitID":"TeyXinHui"},"content":"|E8| 40% - 44%"},{"lineNumber":893,"author":{"gitID":"TeyXinHui"},"content":"|F9| 0% - 39%"},{"lineNumber":894,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":895,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":896,"author":{"gitID":"TeyXinHui"},"content":"*Q*: What are the subjects are in the L1R5 category? +"},{"lineNumber":897,"author":{"gitID":"TeyXinHui"},"content":"*A*: These are the following subjects that are examinable in \"O-level Examinations\" in Singapore (as of Year 2018)."},{"lineNumber":898,"author":{"gitID":"TeyXinHui"},"content":"[NOTE]"},{"lineNumber":899,"author":{"gitID":"TeyXinHui"},"content":"The subjects in the brackets are not to be used as input. The subjects not in brackets are preferred for better efficiency in typing. +"},{"lineNumber":900,"author":{"gitID":"TeyXinHui"},"content":"For example, type in: `Hist A1` *not* `History A1`"},{"lineNumber":901,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":902,"author":{"gitID":"TeyXinHui"},"content":"[width\u003d\"85%\",cols\u003d\"22%,\u003c23%\",options\u003d\"header\",]"},{"lineNumber":903,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":904,"author":{"gitID":"TeyXinHui"},"content":"|Subject Category|Subjects"},{"lineNumber":905,"author":{"gitID":"TeyXinHui"},"content":"|L1| English, HTamil(Higher Tamil), HChi(Higher Chinese), HMalay(Higher Malay)"},{"lineNumber":906,"author":{"gitID":"TeyXinHui"},"content":"|R1| Hist(History), Geog(Geography), ComHum(Combined Humanities), ELit(English Literature), CLit(Chinese Literature),"},{"lineNumber":907,"author":{"gitID":"TeyXinHui"},"content":"     MLit(Malay Literature), TLit(Tamil Literature), HArt(Higher Art), HMusic(Higher Music), BIndo(Bahasa Indonesia),"},{"lineNumber":908,"author":{"gitID":"TeyXinHui"},"content":"     CSP(Chinese Special Programme), MSP(Malay Special Programme)"},{"lineNumber":909,"author":{"gitID":"TeyXinHui"},"content":"|R2| EMath(Elementary Mathematics), AMath(Additional Mathematics), Phy(Physics), Chem(Chemistry), Bio(Biology), Sci(Combined Science)"},{"lineNumber":910,"author":{"gitID":"TeyXinHui"},"content":"|R3| Consist of both R1 and R2 subjects"},{"lineNumber":911,"author":{"gitID":"TeyXinHui"},"content":"|R4| Consist of L1, R1 and R2 subjects. French, German, Spanish, Hindi, Urdu, Gujarati, Panjabi, Bengali, Burmese,"},{"lineNumber":912,"author":{"gitID":"TeyXinHui"},"content":"     Thai, Jap(Japanese), Tamil, Chinese, Malay, DnT(Design and Technology), Comp(Computing), FnN(Food and Nutrition), PoA(Principles of Accounting),"},{"lineNumber":913,"author":{"gitID":"TeyXinHui"},"content":"     Econs(Economics), Drama, PE(Physical Education), Biz(Business Studies), Biotech(Biotechnology), Design(Design Studies)"},{"lineNumber":914,"author":{"gitID":"TeyXinHui"},"content":"|R5| Consist of R4 subjects"},{"lineNumber":915,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":916,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":917,"author":{"gitID":"TeyXinHui"},"content":"* The following subjects can be assigned to students but cannot be contributed to the results: ChiB (Chinese B), MalayB (Malay B), TamilB(Tamil B)."},{"lineNumber":918,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":919,"author":{"gitID":"TeyXinHui"},"content":"*Q*: What is CCA? +"},{"lineNumber":920,"author":{"gitID":"TeyXinHui"},"content":"*A*: CCA stands for Co-Curricular Activities. It functions as a non-academic activity where students can have a more enriching experience in school. Find out more by clicking https://www.moe.gov.sg/education/programmes/co-curricular-activities[here]. +"},{"lineNumber":921,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":922,"author":{"gitID":"TeyXinHui"},"content":"*Q*: What is NRIC? +"},{"lineNumber":923,"author":{"gitID":"TeyXinHui"},"content":"*A*: It stands for National Registration Identity Card, and it is an identification document for the residents in Singapore."},{"lineNumber":924,"author":{"gitID":"TeyXinHui"},"content":"The `NRIC` that we are referring to in the _EduBuddy_ refers to the unique identification number that comes with each `NRIC`."},{"lineNumber":925,"author":{"gitID":"TeyXinHui"},"content":"Please visit https://www.ica.gov.sg/[this website] for more details."},{"lineNumber":926,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":927,"author":{"gitID":"TeyXinHui"},"content":"*Q*: What comprises the post-secondary education? +"},{"lineNumber":928,"author":{"gitID":"TeyXinHui"},"content":"*A*: There are many different platforms of post-secondary education. We are currently focusing on Polytechnics and Junior Colleges."},{"lineNumber":929,"author":{"gitID":"TeyXinHui"},"content":"For more information about the platforms, please visit:"},{"lineNumber":930,"author":{"gitID":"TeyXinHui"},"content":"https://www.moe.gov.sg/education/post-secondary[this website]"},{"lineNumber":931,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":932,"author":{"gitID":"TeyXinHui"},"content":"*Q*: Why the information in the User Guide is not updated? +"},{"lineNumber":933,"author":{"gitID":"TeyXinHui"},"content":"*A*: The _EduBuddy_ is created in the Year 2018, so the information are all based in 2018. And, we are not part of the Ministry of Education so we may be lacking in expertise in this area."},{"lineNumber":934,"author":{"gitID":"TeyXinHui"},"content":"If you want to see the latest update on the education system, you can visit https://www.moe.gov.sg/home[the Ministry of Education\u0027s website]."},{"lineNumber":935,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":936,"author":{"gitID":"TeyXinHui"},"content":"* If you want us to update the _EduBuddy_, you can post issues on our https://github.com/CS2103JAN2018-T09-B1/main/issues[issues website]."},{"lineNumber":937,"author":{"gitID":"TeyXinHui"},"content":"Please go through the following 2 steps to post an issue:"},{"lineNumber":938,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":939,"author":{"gitID":"TeyXinHui"},"content":"[[IMPORTANT]]"},{"lineNumber":940,"author":{"gitID":"TeyXinHui"},"content":"You should have a `GitHub` account to post an issue. If you don\u0027t, you can create one https://github.com/join[here]."},{"lineNumber":941,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":942,"author":{"gitID":"TeyXinHui"},"content":".Step 1: Create new issue"},{"lineNumber":943,"author":{"gitID":"TeyXinHui"},"content":"image::NewIssueStep1.png[width\u003d\"800\"]"},{"lineNumber":944,"author":{"gitID":"TeyXinHui"},"content":".Step 2: Submit new issue"},{"lineNumber":945,"author":{"gitID":"TeyXinHui"},"content":"image::NewIssueStep2.png[width\u003d\"800\"]"},{"lineNumber":946,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":947,"author":{"gitID":"TeyXinHui"},"content":"* If you want to see that your issue is posted, you can follow the next 2 steps."},{"lineNumber":948,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":949,"author":{"gitID":"TeyXinHui"},"content":".Step 3: Return to main issue page"},{"lineNumber":950,"author":{"gitID":"TeyXinHui"},"content":"image::NewIssueStep3.png[width\u003d\"800\"]"},{"lineNumber":951,"author":{"gitID":"TeyXinHui"},"content":"or you can go back to our https://github.com/CS2103JAN2018-T09-B1/main/issues[issue website]."},{"lineNumber":952,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":953,"author":{"gitID":"TeyXinHui"},"content":".Step 4: View issue"},{"lineNumber":954,"author":{"gitID":"TeyXinHui"},"content":"image::NewIssueStep4.png[width\u003d\"800\"]"},{"lineNumber":955,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":956,"author":{"gitID":"TeyXinHui"},"content":"We will let you know through your `GitHub` account or the email linked to your `GitHub` account once we have address your issue."},{"lineNumber":957,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":958,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":959,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":961,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":962,"author":{"gitID":"kengsengg"},"content":"The table below provides a quick summary of all the commands available in EduBuddy."},{"lineNumber":963,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":964,"author":{"gitID":"kengsengg"},"content":"[width\u003d\"90%\",cols\u003d\"20%,\u003c22%,\u003c23%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":965,"author":{"gitID":"kengsengg"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":966,"author":{"gitID":"kengsengg"},"content":"|Command |Function |Format |Example"},{"lineNumber":967,"author":{"gitID":"kengsengg"},"content":"|*Add* |Adds a student entry |`add n/NAME ic/NRIC [t/TAG] [r/REMARK] [sub/SUBJECT_NAME SUBJECT_GRADE...]` +"},{"lineNumber":968,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":969,"author":{"gitID":"kengsengg"},"content":"`a n/NAME ic/NRIC [t/TAG] [r/REMARK] [sub/SUBJECT_NAME SUBJECT_GRADE...]`"},{"lineNumber":970,"author":{"gitID":"kengsengg"},"content":"|`add n/John Doe ic/S9876543H t/3A r/English Rep sub/English A2 Tamil A2 AMath B3 Phy A1 EMath A2 Hist A2` +"},{"lineNumber":971,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":972,"author":{"gitID":"kengsengg"},"content":"`a n/John Doe ic/S9876543H t/3A r/English Rep sub/English A2 Tamil A2 AMath B3 Phy A1 EMath A2 Hist A2`"},{"lineNumber":973,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":974,"author":{"gitID":"kengsengg"},"content":"|*AddAppointment* |Adds an appointment |`addappointment n/NAME i/INFO d/DATE s/START_TIME e/END_TIME` +"},{"lineNumber":975,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":976,"author":{"gitID":"kengsengg"},"content":"`addappt n/NAME i/INFO d/DATE s/START_TIME e/END_TIME`"},{"lineNumber":977,"author":{"gitID":"kengsengg"},"content":"|`addappointment n/John Doe i/Remedial d/25122018 s/1200 e/1300` +"},{"lineNumber":978,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":979,"author":{"gitID":"kengsengg"},"content":"`addappt n/John Doe i/Remedial d/25122018 s/1200 e/1300`"},{"lineNumber":980,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"|*AddInjuries* |Adds a injury history to a specified student |`addinjuries INDEX injuries/INJURY` +"},{"lineNumber":982,"author":{"gitID":"chuakunhong"},"content":"|`addinjuries 2 injuries/Torn Ligament` +"},{"lineNumber":983,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"|*AddRemark* |Adds a remark to a specific student|`addremark 1 r/REMARK` |addremark 2 r/Hardworking"},{"lineNumber":985,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":986,"author":{"gitID":"kengsengg"},"content":"|*AddSubject* |Adds subject(s) to a specified student |`addsub INDEX sub/SUBJECT_NAME SUBJECT_GRADE` +"},{"lineNumber":987,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":988,"author":{"gitID":"TeyXinHui"},"content":"|`addsub 2 sub/English A2 EMath A1` +"},{"lineNumber":989,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":990,"author":{"gitID":"chuakunhong"},"content":"|*Cca* |Edits a student\u0027s cca details |`cca INDEX cca/CCA pos/POSITION` +"},{"lineNumber":991,"author":{"gitID":"chuakunhong"},"content":"|`cca 1 cca/Basketball pos/Member`"},{"lineNumber":992,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":993,"author":{"gitID":"kengsengg"},"content":"|*Clear* |Clears all student entries |`clear` +"},{"lineNumber":994,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":995,"author":{"gitID":"kengsengg"},"content":"`c`"},{"lineNumber":996,"author":{"gitID":"kengsengg"},"content":"|`clear` +"},{"lineNumber":997,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":998,"author":{"gitID":"kengsengg"},"content":"`c`"},{"lineNumber":999,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1000,"author":{"gitID":"kengsengg"},"content":"|*Delete* |Deletes a student entry |`delete INDEX` +"},{"lineNumber":1001,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1002,"author":{"gitID":"kengsengg"},"content":"`d INDEX`"},{"lineNumber":1003,"author":{"gitID":"kengsengg"},"content":"|`delete 3` +"},{"lineNumber":1004,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1005,"author":{"gitID":"kengsengg"},"content":"`d 3`"},{"lineNumber":1006,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1007,"author":{"gitID":"kengsengg"},"content":"|*DeleteAppointment* |Deletes an appointment |`deleteappointment INDEX` +"},{"lineNumber":1008,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1009,"author":{"gitID":"kengsengg"},"content":"`deleteappt INDEX`"},{"lineNumber":1010,"author":{"gitID":"kengsengg"},"content":"|`deleteappointment 3` +"},{"lineNumber":1011,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1012,"author":{"gitID":"kengsengg"},"content":"`deleteappt 3`"},{"lineNumber":1013,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1014,"author":{"gitID":"chuakunhong"},"content":"|*DeleteInjuries* |Deletes a injury history from a specific student|`deleteinjuries INDEX injuries/INJURY` +"},{"lineNumber":1015,"author":{"gitID":"chuakunhong"},"content":"|`deleteinjuries 1 injuries/Torn Ligament`"},{"lineNumber":1016,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"|*DeleteRemark* |Deletes a remark from a specific student|`deleteremark 1 r/REMARK` |`deleteremark 1 r/Hardworking`"},{"lineNumber":1018,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1019,"author":{"gitID":"kengsengg"},"content":"|*Edit* |Edits a student entry |`edit INDEX [n/NAME] [ic/NRIC] [t/CLASS] [sub/SUBJECT_NAME SUBJECT_GRADE]` +"},{"lineNumber":1020,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1021,"author":{"gitID":"kengsengg"},"content":"`e INDEX [n/NAME] [ic/NRIC] [t/CLASS] [sub/SUBJECT_NAME SUBJECT_GRADE]`"},{"lineNumber":1022,"author":{"gitID":"kengsengg"},"content":"|`edit 2 n/James Lee` +"},{"lineNumber":1023,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1024,"author":{"gitID":"kengsengg"},"content":"`e 2 n/James Lee`"},{"lineNumber":1025,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1026,"author":{"gitID":"kengsengg"},"content":"|*Exit* |Exits _EduBuddy_ |`exit` |`exit`"},{"lineNumber":1027,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1028,"author":{"gitID":"kengsengg"},"content":"|*Find* |Finds student by name |`find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":1029,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1030,"author":{"gitID":"kengsengg"},"content":"`f KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":1031,"author":{"gitID":"kengsengg"},"content":"|`find James Jake` +"},{"lineNumber":1032,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1033,"author":{"gitID":"kengsengg"},"content":"`f James Jake`"},{"lineNumber":1034,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1035,"author":{"gitID":"kengsengg"},"content":"|*Help* |Shows the help page |`help` |`help`"},{"lineNumber":1036,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1037,"author":{"gitID":"kengsengg"},"content":"|*History* |Lists the past commands entered |`history` +"},{"lineNumber":1038,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1039,"author":{"gitID":"kengsengg"},"content":"`h`"},{"lineNumber":1040,"author":{"gitID":"kengsengg"},"content":"|`history` +"},{"lineNumber":1041,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1042,"author":{"gitID":"kengsengg"},"content":"`h`"},{"lineNumber":1043,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1044,"author":{"gitID":"kengsengg"},"content":"|*List* |Lists all student entries |`list` +"},{"lineNumber":1045,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1046,"author":{"gitID":"kengsengg"},"content":"`l`"},{"lineNumber":1047,"author":{"gitID":"kengsengg"},"content":"|`list` +"},{"lineNumber":1048,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1049,"author":{"gitID":"kengsengg"},"content":"`l`"},{"lineNumber":1050,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1051,"author":{"gitID":"chuakunhong"},"content":"|*NextofKin* |Edits a student\u0027s next of kin details|"},{"lineNumber":1052,"author":{"gitID":"chuakunhong"},"content":"`nok INDEX n/NAME p/PHONE [e/EMAIL] r/RELATIONSHIP` +"},{"lineNumber":1053,"author":{"gitID":"chuakunhong"},"content":"|`nok 1 n/Dave p/95672341 r/Father` +"},{"lineNumber":1054,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1055,"author":{"gitID":"kengsengg"},"content":"|*Redo* |Redo previous undo command |`redo` +"},{"lineNumber":1056,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1057,"author":{"gitID":"kengsengg"},"content":"`r`"},{"lineNumber":1058,"author":{"gitID":"kengsengg"},"content":"|`redo` +"},{"lineNumber":1059,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1060,"author":{"gitID":"kengsengg"},"content":"`r`"},{"lineNumber":1061,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1062,"author":{"gitID":"kengsengg"},"content":"|*Select* |Selects the student entry |`select INDEX` +"},{"lineNumber":1063,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1064,"author":{"gitID":"kengsengg"},"content":"`s INDEX`"},{"lineNumber":1065,"author":{"gitID":"kengsengg"},"content":"|`select 2` +"},{"lineNumber":1066,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1067,"author":{"gitID":"kengsengg"},"content":"`s 2`"},{"lineNumber":1068,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1069,"author":{"gitID":"kengsengg"},"content":"|*Sort* |Sorts student entries by parameters |`sort PARAMETER`|`sort name` +"},{"lineNumber":1070,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1071,"author":{"gitID":"kengsengg"},"content":"`sort tag`"},{"lineNumber":1072,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1073,"author":{"gitID":"TeyXinHui"},"content":"|*Stream* |Returns a specific streaming score of a student |`stream INDEX STREAM_TYPE`|`stream 1 1` +"},{"lineNumber":1074,"author":{"gitID":"TeyXinHui"},"content":"OR +"},{"lineNumber":1075,"author":{"gitID":"TeyXinHui"},"content":"`stream 1 2`"},{"lineNumber":1076,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1077,"author":{"gitID":"kengsengg"},"content":"|*TagDelete* |Deletes a tag from every student|`tagdelete TAGNAME` +"},{"lineNumber":1078,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1079,"author":{"gitID":"kengsengg"},"content":"`td TAGNAME`"},{"lineNumber":1080,"author":{"gitID":"kengsengg"},"content":"|`tagdelete CLASS2A` +"},{"lineNumber":1081,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1082,"author":{"gitID":"kengsengg"},"content":"`td CLASS2A`"},{"lineNumber":1083,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1084,"author":{"gitID":"chuakunhong"},"content":"|*TagReplace* |Replaces a tag for every student|`tagreplace t/OLD_TAGNAME t/NEW_TAGNAME` +"},{"lineNumber":1085,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1086,"author":{"gitID":"chuakunhong"},"content":"`tr t/OLD_TAGNAME t/NEW_TAGNAME`"},{"lineNumber":1087,"author":{"gitID":"chuakunhong"},"content":"|`tagreplace t/2A t/3A` +"},{"lineNumber":1088,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1089,"author":{"gitID":"chuakunhong"},"content":"`tr t/2A t/3A`"},{"lineNumber":1090,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1091,"author":{"gitID":"kengsengg"},"content":"|*Theme* |Changes theme of _EduBuddy_ |`theme COLOR`|`theme dark`"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"kengsengg"},"content":"|*Undo* |Undo previous command |`undo` +"},{"lineNumber":1094,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1095,"author":{"gitID":"kengsengg"},"content":"`u`"},{"lineNumber":1096,"author":{"gitID":"kengsengg"},"content":"|`undo` +"},{"lineNumber":1097,"author":{"gitID":"kengsengg"},"content":"OR +"},{"lineNumber":1098,"author":{"gitID":"kengsengg"},"content":"`u`"},{"lineNumber":1099,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1100,"author":{"gitID":"kengsengg"},"content":"|*View* |Displays calendar view |`view GMAIL_ID` |`view nusedubuddy`"},{"lineNumber":1101,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1102,"author":{"gitID":"kengsengg"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1103,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1104,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"}],"authorContributionMap":{"chuakunhong":183,"johnnychanjx":2,"kengsengg":388,"TeyXinHui":326,"-":205}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    /*"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":83}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class ErrorDialogGuiTest extends AddressBookSystemTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"    /*"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":24}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    /*"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":34}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        //assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandBoxShowsDefaultStyle();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":2,"-":104}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"    /*"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":56}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(expectedResultMessage.trim(), getResultDisplay().getText().trim());"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"chuakunhong"},"content":"        //assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, expectedUrl);"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":268,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":290,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"TeyXinHui":3,"-":289}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"    //@@author kengsengg"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"     * Asserts that {@code personCard} matches the tag details and color of {@code expectedPerson} correctly"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"    private static void assertTagsMatching(Person expectedPerson, PersonCardHandle personCard) {"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"        assertEquals(expectedTags, personCard.getTags());"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"    //@@author"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"kengsengg":11,"-":75}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedCard.getNric(), actualCard.getNric());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"            assertEquals(expectedCard.getTagStyles(tag), actualCard.getTagStyles(tag)));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedPerson.getNric().value, actualCard.getNric());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":2,"kengsengg":3,"-":67}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":1,"-":156}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"        String defaultConfigAsString \u003d \"App title : EduBuddy\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    private static final String INVALID_NRIC \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_NRIC \u003d \"S9482424X\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_REMARK \u003d \" \";"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_CCA \u003d \" \";"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_INJURIES_HISTORY \u003d \" \";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(0, dataFromFile.getSubjectList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"                null, VALID_NRIC, VALID_TAGS, null, VALID_REMARK, VALID_INJURIES_HISTORY,"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"                VALID_CCA, VALID_NAME);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"                VALID_NAME, INVALID_NRIC, VALID_TAGS, null, VALID_REMARK, VALID_INJURIES_HISTORY,"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"                VALID_CCA, VALID_NAME);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"                VALID_NAME, VALID_NRIC, VALID_TAGS, null, VALID_REMARK, VALID_INJURIES_HISTORY,"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"                VALID_CCA, VALID_NAME);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":137,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":5,"TeyXinHui":8,"-":137}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"\u003d EduBuddy - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"By: `CS2103JAN2018-T09-B1`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"_EduBuddy_! is an application based on Command Line Interface(CLI),"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"and is designed for secondary school teachers to store and manage student records in"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"a simple and efficient manner."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"This developer guide will help to provide you with a detailed walk-through of _EduBuddy_,"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"from the application set up procedure, to the explanation of the features and"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"troubleshooting methods."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"This section helps to guide you through the necessary steps to launch _EduBuddy_."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"Please ensure that you have the following softwares beforehand."},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":52,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":53,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":55,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":56,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":57,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":58,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":59,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":73,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":74,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":77,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":104,"author":{"gitID":"-"},"content":"2. Read up on the individual design parts from Model, Storage, UI and Logic."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":109,"author":{"gitID":"kengsengg"},"content":"This section illustrates the overall design of our application and provides"},{"lineNumber":110,"author":{"gitID":"kengsengg"},"content":"the details of its individual components."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":113,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":116,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":121,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"kengsengg"},"content":"* At app launch: Initializing the components in the correct sequence, and connects them up with each other."},{"lineNumber":126,"author":{"gitID":"kengsengg"},"content":"* At shut down: Shutting down the components and invokes cleanup method where necessary."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":137,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":159,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":175,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"The UI Browser window uses HTML\u0027s w3.css framework. The layout of the Browser Panel is defined from `src/main/resources/StudentPage/template.html`."},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"The UI Browser window then reflects the user profile\u0027s respective HTML file when a user is selected, found in {user.home}/StudentPage."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":190,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":191,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":198,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":204,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":207,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":208,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":209,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":214,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":217,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":220,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":227,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":235,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":250,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":268,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":269,"author":{"gitID":"-"},"content":"----"},{"lineNumber":270,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":279,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":280,"author":{"gitID":"-"},"content":"----"},{"lineNumber":281,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"},{"lineNumber":296,"author":{"gitID":"-"},"content":"----"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":309,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":318,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":327,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":348,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":367,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":370,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":377,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":378,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":381,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":384,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":385,"author":{"gitID":"chuakunhong"},"content":"// tag::Sorting[]"},{"lineNumber":386,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Sort Feature"},{"lineNumber":387,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"kengsengg"},"content":"The sorting feature allows the user to sort the list of students according to certain"},{"lineNumber":391,"author":{"gitID":"kengsengg"},"content":"parameters like name and tag. After the sorting process has completed, the user will be"},{"lineNumber":392,"author":{"gitID":"kengsengg"},"content":"presented with a read only view of the sorted list on the `UI`, and the state of the"},{"lineNumber":393,"author":{"gitID":"kengsengg"},"content":"list will not be modified."},{"lineNumber":394,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":395,"author":{"gitID":"kengsengg"},"content":"The figure below shows the Sequence Diagram for the interactions within the `Logic`"},{"lineNumber":396,"author":{"gitID":"kengsengg"},"content":"component when \"sort name\" is typed into the `CommandBox` by the user."},{"lineNumber":397,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":398,"author":{"gitID":"kengsengg"},"content":"image::SortCommandSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":399,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":400,"author":{"gitID":"kengsengg"},"content":". `Logic` uses `AddressBookParser` class to parse the user command,"},{"lineNumber":401,"author":{"gitID":"kengsengg"},"content":". A `SortCommand` object is created which is then executed by the `LogicManager`."},{"lineNumber":402,"author":{"gitID":"kengsengg"},"content":". The command executes and calls the `sortPersonList(parameter)` method, which then affects"},{"lineNumber":403,"author":{"gitID":"kengsengg"},"content":"  the `Model`."},{"lineNumber":404,"author":{"gitID":"kengsengg"},"content":". After the sorting process has been completed, the result is encapsulated as a"},{"lineNumber":405,"author":{"gitID":"kengsengg"},"content":"  `CommandResult` object, which is then passed back to the `UI` as a message shown"},{"lineNumber":406,"author":{"gitID":"kengsengg"},"content":"  to the user."},{"lineNumber":407,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":408,"author":{"gitID":"kengsengg"},"content":"Below is an example of how the list looks like before and after the command \"sort name\""},{"lineNumber":409,"author":{"gitID":"kengsengg"},"content":"is executed."},{"lineNumber":410,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":411,"author":{"gitID":"kengsengg"},"content":"image::SortCommandByName.png[width\u003d\"650\"]"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How the list appears after sorting is done and the app is restarted"},{"lineNumber":416,"author":{"gitID":"kengsengg"},"content":"* ** Alternative 1 (current choice): ** List remains in its initial state after each"},{"lineNumber":417,"author":{"gitID":"kengsengg"},"content":"                                        restart of the app"},{"lineNumber":418,"author":{"gitID":"kengsengg"},"content":"** Pros: Some users might prefer the default list that was created by themselves e.g. the need"},{"lineNumber":419,"author":{"gitID":"kengsengg"},"content":"         to track which student was added last."},{"lineNumber":420,"author":{"gitID":"kengsengg"},"content":"** Cons: It will be a hassle to sort the list every time the app starts up if there"},{"lineNumber":421,"author":{"gitID":"kengsengg"},"content":"         are not many changes to the list."},{"lineNumber":422,"author":{"gitID":"kengsengg"},"content":"* ** Alternative 2: ** List is in the sorted form after the app is restarted every time"},{"lineNumber":423,"author":{"gitID":"kengsengg"},"content":"** Pros: Reduces the time taken to sort the list for each start up of the app."},{"lineNumber":424,"author":{"gitID":"kengsengg"},"content":"** Cons: If the default list is required, `SortCommand` will have to be implemented"},{"lineNumber":425,"author":{"gitID":"kengsengg"},"content":"         as an `UndoableCommand` as well."},{"lineNumber":426,"author":{"gitID":"chuakunhong"},"content":"// end::Sorting[]"},{"lineNumber":427,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":428,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":429,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":430,"author":{"gitID":"chuakunhong"},"content":"// tag::TagReplace[]"},{"lineNumber":431,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d TagReplace Feature"},{"lineNumber":432,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":434,"author":{"gitID":"chuakunhong"},"content":"The tag replace is a command that replaces the target tag with the tag that we want."},{"lineNumber":435,"author":{"gitID":"chuakunhong"},"content":"The tags would be passed in via the argument multimap which would extract the tags with t/ prefix."},{"lineNumber":436,"author":{"gitID":"chuakunhong"},"content":"It would then be separated into two different tags, tag to be replaced and the tag to be placed."},{"lineNumber":437,"author":{"gitID":"chuakunhong"},"content":"Then the Addressbook would proceed to look for the persons with the unwanted tag to remove the unwanted"},{"lineNumber":438,"author":{"gitID":"chuakunhong"},"content":"tag and to add the new tag to the person."},{"lineNumber":439,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":440,"author":{"gitID":"kengsengg"},"content":"The figure below shows the Sequence Diagram for the interactions within the `Logic`"},{"lineNumber":441,"author":{"gitID":"chuakunhong"},"content":"component when \"tagreplace t/TAGNAME t/TAGNAME\" is typed into the `CommandBox` by the user."},{"lineNumber":442,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":443,"author":{"gitID":"chuakunhong"},"content":"image::TagReplaceCommandSequenceDiagram.png[width\u003d\"650\"]"},{"lineNumber":444,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":445,"author":{"gitID":"chuakunhong"},"content":".  `Logic` uses the `AddressBookParser` class to parse the  command."},{"lineNumber":446,"author":{"gitID":"chuakunhong"},"content":".  This results in a `TagReplaceCommand` object which is executed by the `LogicManager`."},{"lineNumber":447,"author":{"gitID":"chuakunhong"},"content":".  The command execution calls the `replaceTag` method which then affects the `Model`."},{"lineNumber":448,"author":{"gitID":"chuakunhong"},"content":".  The tag is then replaced and the result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":449,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":450,"author":{"gitID":"chuakunhong"},"content":"Below is an example of how the list looks like before and after the command \"tagreplace t/3G t/4G\""},{"lineNumber":451,"author":{"gitID":"chuakunhong"},"content":"is executed."},{"lineNumber":452,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":453,"author":{"gitID":"chuakunhong"},"content":"image::TagReplaceCommand.png[width\u003d\"650\"]"},{"lineNumber":454,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":455,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d Design Considerations."},{"lineNumber":456,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the tag replace command"},{"lineNumber":457,"author":{"gitID":"chuakunhong"},"content":"* ** Alternative 1: ** Reuse the set that exist in the Addressbook."},{"lineNumber":458,"author":{"gitID":"chuakunhong"},"content":"** Pros: Need not introduce a new data structure to store the tags that are passed in."},{"lineNumber":459,"author":{"gitID":"chuakunhong"},"content":"** Cons: A set arranges its elements in alphabetical order. This disrupts the order in which the user has entered,"},{"lineNumber":460,"author":{"gitID":"chuakunhong"},"content":"         and it would cause the wanted tag to be removed instead of the unwanted one."},{"lineNumber":461,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":462,"author":{"gitID":"chuakunhong"},"content":"// end::TagReplace[]"},{"lineNumber":463,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":464,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":465,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":466,"author":{"gitID":"TeyXinHui"},"content":"// tag::subject[]"},{"lineNumber":467,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Subject streaming calculation feature"},{"lineNumber":468,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":469,"author":{"gitID":"TeyXinHui"},"content":"The subject streaming calculation features will be supported by calculation algorithms, `calculateL1R5`, `calculateL1B4A`, `calculateL1B4B, `calculateL1B4C` and `calculateL1B4D, which will be located in `Person.java`. The calculation algorithm will be called by the `SelectCommand`."},{"lineNumber":470,"author":{"gitID":"TeyXinHui"},"content":"It will help to analyse the subjects that are assigned to the student, and determine which combination of subjects will produce the lowest `L1R5`, `L1B4A`, `L1B4B`, `L1B4C` or `L1B4D` score respectively. The score will then be projected in the `Command Box`."},{"lineNumber":471,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":472,"author":{"gitID":"TeyXinHui"},"content":".Sequence Diagram of implementation of Subject streaming calculation"},{"lineNumber":473,"author":{"gitID":"TeyXinHui"},"content":"image::StreamCommand.png[width\u003d\"700\"]"},{"lineNumber":474,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":475,"author":{"gitID":"TeyXinHui"},"content":"** In `StreamCommandParser`"},{"lineNumber":476,"author":{"gitID":"TeyXinHui"},"content":". The user will key in the necessary command, `stream INDEX STREAM_TYPE` to call the `StreamCommand`."},{"lineNumber":477,"author":{"gitID":"TeyXinHui"},"content":". The Logic uses the AddressBookParser to parse the command to `StreamCommandParser`."},{"lineNumber":478,"author":{"gitID":"TeyXinHui"},"content":". The `StreamCommandParser` will take in the values and return a new `StreamCommand` object, with the parameters, `index` and `type`."},{"lineNumber":479,"author":{"gitID":"TeyXinHui"},"content":"** In `StreamCommand`"},{"lineNumber":480,"author":{"gitID":"TeyXinHui"},"content":". When the `StreamCommand` is executing, it retrieves the `Person` object that the user was referencing to using the `index` parameter"},{"lineNumber":481,"author":{"gitID":"TeyXinHui"},"content":" and pass in the `Person` object and `type` parameter into a `scoreCalculation()` method."},{"lineNumber":482,"author":{"gitID":"TeyXinHui"},"content":". In the `scoreCalculation` method, the method will determine what type of streaming score the user wants to get using the `type` paramter."},{"lineNumber":483,"author":{"gitID":"TeyXinHui"},"content":". Then the necessary calculation algorithm in the `Person.java` will be called."},{"lineNumber":484,"author":{"gitID":"TeyXinHui"},"content":"** In `Person.java`"},{"lineNumber":485,"author":{"gitID":"TeyXinHui"},"content":". In the calculation algorithm, it will store the subject list of the student in `List\u003cSubject\u003e subjects` and loop through the list according to the `L1` subject category."},{"lineNumber":486,"author":{"gitID":"TeyXinHui"},"content":". The relevant subjects of the subject category will be saved in a temporary `List\u003cSubject\u003e subjectsToCheck` and the list will be passed into a `checkLowest()` method."},{"lineNumber":487,"author":{"gitID":"TeyXinHui"},"content":". In `checkLowest()`, the subject grades will be compared and the best subject will be removed from the list `subjects`."},{"lineNumber":488,"author":{"gitID":"TeyXinHui"},"content":". The best grade will be returned back to `calculateL1R5/L1B4` and stored in a temporary `int` variable, `score`. The function will then move on to check the other subject categories."},{"lineNumber":489,"author":{"gitID":"TeyXinHui"},"content":". After the calculation, `score` will be returned to the `SelectCommand` which will project the result in the `Command Box`."},{"lineNumber":490,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":491,"author":{"gitID":"TeyXinHui"},"content":"[NOTE]"},{"lineNumber":492,"author":{"gitID":"TeyXinHui"},"content":"The subjects and their respective grades can be assigned to the students by the `AddCommand`, `EditCommand` or `AddSubjectCommand`, with a subject prefix `sub/` followed by the `Subject Name` and `Subject Grade`."},{"lineNumber":493,"author":{"gitID":"TeyXinHui"},"content":"As the students are required to take at least 6 subjects, the subjects will be stored in as a parameter of each individual student as a `List\u003cSubject\u003e`."},{"lineNumber":494,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":495,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of command to call `calculateL1R5` and `calculateL1B4`"},{"lineNumber":496,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":497,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 1 (current choice):** Add new command class `StreamCommand`"},{"lineNumber":498,"author":{"gitID":"TeyXinHui"},"content":"** Pros: It would be easy to implement as there is no need to worry about affecting other classes."},{"lineNumber":499,"author":{"gitID":"TeyXinHui"},"content":"** Cons: More commands for the user to remember."},{"lineNumber":500,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 2 :** Just override `execute()` of `SelectCommand`"},{"lineNumber":501,"author":{"gitID":"TeyXinHui"},"content":"** Pros: Easier to update the `Display Panel` later on when the user wants to access the `Student\u0027s` details."},{"lineNumber":502,"author":{"gitID":"TeyXinHui"},"content":"** Cons: Need to update the test cases accordingly due to the change in the `execute()` function."},{"lineNumber":503,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":504,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of calculation function `L1R5` and `L1B4`"},{"lineNumber":505,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":506,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 1 (current choice):** Add the calculation function in `Person.java`"},{"lineNumber":507,"author":{"gitID":"TeyXinHui"},"content":"** Pros: Easier to understand as the function needs to access the subject list of the student for calculation."},{"lineNumber":508,"author":{"gitID":"TeyXinHui"},"content":"** Cons:"},{"lineNumber":509,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 2 :** Implement the calculation function in `execute()` of `SelectCommand`"},{"lineNumber":510,"author":{"gitID":"TeyXinHui"},"content":"** Pros: Reduce the amount of coupling between `SelectCommand` and `Model`."},{"lineNumber":511,"author":{"gitID":"TeyXinHui"},"content":"** Cons: Makes the `SelectCommand` more complicated as it is performing more than it should."},{"lineNumber":512,"author":{"gitID":"TeyXinHui"},"content":"// end::subject[]"},{"lineNumber":513,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":514,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":515,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":516,"author":{"gitID":"TeyXinHui"},"content":"// tag::masstagremoval[]"},{"lineNumber":517,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Mass Tag Removal Feature"},{"lineNumber":518,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"TeyXinHui"},"content":"The Mass Tag Removal feature is supported through the suggested Tag Removal feature in the Model Component."},{"lineNumber":521,"author":{"gitID":"TeyXinHui"},"content":"The command `TagDeleteCommand` is implemented to call the `deleteTag()` function in the `Model` interface."},{"lineNumber":522,"author":{"gitID":"TeyXinHui"},"content":"The `deleteTag()` function will loop through the students in the `AddressBook` and will remove the specified Tag from every student that has the specified Tag and the students\u0027 `Tag List` will be updated."},{"lineNumber":523,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":524,"author":{"gitID":"TeyXinHui"},"content":"A `TagDeleteCommand` is where the user inputs `tagdelete [TAG_NAME]` or `td [TAG_NAME]` in the `Command Box`. When the user input fulfils the criteria of the expected input format, the command will execute."},{"lineNumber":525,"author":{"gitID":"TeyXinHui"},"content":"The `deleteTag()` function will be called and loops through the students in the `AddressBook`."},{"lineNumber":526,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":527,"author":{"gitID":"TeyXinHui"},"content":"* If the specified tag is not found tagged to any student, a `TagNotFoundException` will be thrown and a error message will be returned to the user."},{"lineNumber":528,"author":{"gitID":"TeyXinHui"},"content":"* Else, the `Tag List` of each student will be loaded and stored in a temporary `List` variable and the specified tag will be removed from it."},{"lineNumber":529,"author":{"gitID":"TeyXinHui"},"content":"Then a new student object with the updated `Tag List` will be replace the original student object. Thus the `AddressBook` will eventually have the updated list of students where the specified tag have been removed."},{"lineNumber":530,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":531,"author":{"gitID":"TeyXinHui"},"content":"** `Parser`"},{"lineNumber":532,"author":{"gitID":"TeyXinHui"},"content":". Logic uses the AddressBookParser class to parse the command into `TagDeleteCommandParser`."},{"lineNumber":533,"author":{"gitID":"TeyXinHui"},"content":". The parser will then return a new TagDeleteCommand object with the parameter `tagName` which is executed by the LogicManager."},{"lineNumber":534,"author":{"gitID":"TeyXinHui"},"content":". The command execution calls the deleteTag method which then cycle through the list of students in the _EduBuddy_ and removes the tags containing the `tagName` from the students."},{"lineNumber":535,"author":{"gitID":"TeyXinHui"},"content":". The tag is then deleted and the result of the command execution will be returned as a CommandResult object which is passed back to the Ui."},{"lineNumber":536,"author":{"gitID":"TeyXinHui"},"content":". The user will see a message on the `Command Box` in the format: `Deleted Tag: [TAG_NAME]` and the `Tag` will be removed."},{"lineNumber":537,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":538,"author":{"gitID":"TeyXinHui"},"content":".Sequence Diagram of TagDeleteCommand if the specified tag exists."},{"lineNumber":539,"author":{"gitID":"TeyXinHui"},"content":"image::TagDeleteCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `TagDeleteCommand`"},{"lineNumber":544,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":545,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 1:** Create a new method in `TagDeleteCommand` to delete tag"},{"lineNumber":546,"author":{"gitID":"TeyXinHui"},"content":"** Pros: Easier to understand the structure of `TagDeleteCommand`."},{"lineNumber":547,"author":{"gitID":"TeyXinHui"},"content":"** Cons: The `deleteTag()` function that was implemented would be redundant."},{"lineNumber":548,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 2 (current choice):** Call the `deleteTag()` function"},{"lineNumber":549,"author":{"gitID":"TeyXinHui"},"content":"** Pros: Implementation of the command would be easier as the main algorithm to delete the tag is within the code."},{"lineNumber":550,"author":{"gitID":"TeyXinHui"},"content":"** Cons: Increases coupling between `Model` and `TagDeleteCommand`."},{"lineNumber":551,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":552,"author":{"gitID":"TeyXinHui"},"content":"// end::masstagremoval[]"},{"lineNumber":553,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":554,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":555,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":556,"author":{"gitID":"TeyXinHui"},"content":"// tag::addsubjects[]"},{"lineNumber":557,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d AddSubjectCommand feature"},{"lineNumber":558,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"TeyXinHui"},"content":"The AddSubjectCommand feature is located in the `Logic` component."},{"lineNumber":561,"author":{"gitID":"TeyXinHui"},"content":"The `AddSubjectCommand` can be used when the user inputs `addsub INDEX sub/[SUBJECT_NAME SUBJECT_GRADE...]` in the `Command Box`. When the user input fulfils the criteria of the expected input format, the command will execute."},{"lineNumber":562,"author":{"gitID":"TeyXinHui"},"content":"The command will then find the student located at the specified `INDEX` and creates a new student with the previous details of the selected student."},{"lineNumber":563,"author":{"gitID":"TeyXinHui"},"content":"The new student will have the updated `Set\u003cSubject\u003e` and will replace the selected student in the _EduBuddy_."},{"lineNumber":564,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":565,"author":{"gitID":"TeyXinHui"},"content":"* If the student already possess the subject that was keyed in, the subject will not be added to the subject list of the student. This is to prevent the student having duplicate subjects assigned to him/her."},{"lineNumber":566,"author":{"gitID":"TeyXinHui"},"content":"* If the user typed in duplicate subjects in the input, for example: `addsub 1 sub/English A1 English A1`, an `IllegalValueException` will be thrown and an error message, \"There should not be duplicate subject(s) assigned to student.\""},{"lineNumber":567,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":568,"author":{"gitID":"TeyXinHui"},"content":"** `Parser`"},{"lineNumber":569,"author":{"gitID":"TeyXinHui"},"content":". Logic uses the `AddressBookParser` class to parse the command into `AddSubjectCommandParser`."},{"lineNumber":570,"author":{"gitID":"TeyXinHui"},"content":". The parser will first parse the `INDEX` and `subjects` using the `parseIndex` and `parseSubjects` in the `ParserUtil` class, to check if they are valid inputs."},{"lineNumber":571,"author":{"gitID":"TeyXinHui"},"content":". The parser will then creates a new `AddSubjectCommand` object with the attributes `index` and `editPersonDescriptor`, which is executed by the LogicManager."},{"lineNumber":572,"author":{"gitID":"TeyXinHui"},"content":"** In `AddSubjectCommand`"},{"lineNumber":573,"author":{"gitID":"TeyXinHui"},"content":". The command execution of `AddSubjectCommand` will create a new student object using a `createEditedPerson()` method, which will call `checkIfSubjectExists()` method."},{"lineNumber":574,"author":{"gitID":"TeyXinHui"},"content":". The method will check if the subjects to be added exist in the original list of subjects assigned to the student. A boolean variable `isPresent` will keep be used to indicate if the subjects exist."},{"lineNumber":575,"author":{"gitID":"TeyXinHui"},"content":". If `isPresent` is false, the subjects will be added to a new `Set\u003cSubject\u003e` object which contains the both the new and old subjects of the student."},{"lineNumber":576,"author":{"gitID":"TeyXinHui"},"content":". A new student containing the previous details and the updated subject list will be created and replace the selected student in the _EduBuddy_."},{"lineNumber":577,"author":{"gitID":"TeyXinHui"},"content":". The result of the command execution will be returned as a CommandResult object which is passed back to the Ui."},{"lineNumber":578,"author":{"gitID":"TeyXinHui"},"content":". The user will see a message on the `Command Box` in the format: `Edited Person: [NAME]. Updated Subjects: [SUBJECT_NAME SUBJECT_GRADE]...` will be removed."},{"lineNumber":579,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":580,"author":{"gitID":"TeyXinHui"},"content":".Sequence Diagram of AddSubjectCommand"},{"lineNumber":581,"author":{"gitID":"TeyXinHui"},"content":"image::AddSubjectCommandActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddSubjectCommand`"},{"lineNumber":586,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":587,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 1:** The user continues to use the `AddCommand` to add all the subjects at one time or use `EditCommand` to change the subjects details."},{"lineNumber":588,"author":{"gitID":"TeyXinHui"},"content":"** Pros: More intuitive for the user as the commands do what the user expects from their names."},{"lineNumber":589,"author":{"gitID":"TeyXinHui"},"content":"** Cons: The user have to key in a long command line as each student has to be assigned to at least 6 subjects."},{"lineNumber":590,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 2 (current choice):** Create a new `AddSubjectCommand`"},{"lineNumber":591,"author":{"gitID":"TeyXinHui"},"content":"** Pros: The user just needs to type in the subjects that he/she did not add earlier."},{"lineNumber":592,"author":{"gitID":"TeyXinHui"},"content":"** Cons: More commands for the user to remember."},{"lineNumber":593,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":594,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: The number of people that the user can add subjects to using the command"},{"lineNumber":595,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":596,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 1:** The command can be implemented as a mass adding command, where the subjects keyed in can be added to all the students in _EduBuddy_."},{"lineNumber":597,"author":{"gitID":"TeyXinHui"},"content":"** Pros: It would be convenient as the teacher do not need to key in similar subjects for everyone."},{"lineNumber":598,"author":{"gitID":"TeyXinHui"},"content":"** Cons: The students may have different subject combination and different grades for different subjects, and this consideration neglects this fact."},{"lineNumber":599,"author":{"gitID":"TeyXinHui"},"content":"* **Alternative 2 (current choice):** The command can only add to one specified student at a time."},{"lineNumber":600,"author":{"gitID":"TeyXinHui"},"content":"** Pros: The algorithm will be slightly less complicated and easier to implement."},{"lineNumber":601,"author":{"gitID":"TeyXinHui"},"content":"** Cons: Depending on the situation, the user may want a mass adding feature implemented as it would be more convenient."},{"lineNumber":602,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":603,"author":{"gitID":"TeyXinHui"},"content":"// end::addsubjects[]"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":606,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"// tag::browserpanel[]"},{"lineNumber":608,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Browser Panel Revamp"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":".First Half of Browser Panel"},{"lineNumber":611,"author":{"gitID":"-"},"content":"image::browser1.png[width\u003d\"600\"]"},{"lineNumber":612,"author":{"gitID":"-"},"content":".Second Half of Browser Panel"},{"lineNumber":613,"author":{"gitID":"-"},"content":"image::browser2.png[width\u003d\"600\"]"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"We will use a html page with w3.css framework support to implement the new Browser Panel."},{"lineNumber":616,"author":{"gitID":"-"},"content":"The browser panel can be controlled from the CLI interface, which manipulates the data in the browser panel."},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"The browser will be invoked by the selection of a student from ui/BrowserPanel. loadPersonPage() invokes the html file"},{"lineNumber":619,"author":{"gitID":"-"},"content":"of the student selected stored in resources/StudentPage."},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"Creation of a html StudentPage file:"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"After add command is called successfully, a template file from StudentPage will be duplicated as a backup,"},{"lineNumber":624,"author":{"gitID":"-"},"content":"and renamed as the name that is called from the add command."},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"Editing StudentPage file:"},{"lineNumber":627,"author":{"gitID":"-"},"content":"After any command that changes the data in the BrowserPanel is called, the HTML file will be stored as a string and edited accordingly."},{"lineNumber":628,"author":{"gitID":"-"},"content":"The file is then output to {user.home}/StudentPage."},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":" When a user inputs new data, the selected \u0027logic\u0027 command invokes the addPage and deletePage method from ModelManager."},{"lineNumber":631,"author":{"gitID":"-"},"content":" From the \u0027model\u0027\u0027s addPage command, \u0027template.html\u0027 from resources/StudentPage is called."},{"lineNumber":632,"author":{"gitID":"-"},"content":" A new folder is created in {user.home}/StudentPage which creates a \u0027storage\u0027 for the user profile pages."},{"lineNumber":633,"author":{"gitID":"-"},"content":" These user-profile pages are updated in real time when called by the UI BrowserPanel object."},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"// end::browserpanel[]"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":638,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"// tag::theme[]"},{"lineNumber":640,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Theme Feature"},{"lineNumber":641,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":642,"author":{"gitID":"-"},"content":"The theme command is a command that changes the theme of the program."},{"lineNumber":643,"author":{"gitID":"-"},"content":"The input from the user would be parsed with a dedicated parser class \u0027ChangeThemeCommandParser\u0027."},{"lineNumber":644,"author":{"gitID":"-"},"content":"We will implement a HashMap to choose the right theme to use from the user input."},{"lineNumber":645,"author":{"gitID":"-"},"content":"The themes are found in resources/view."},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":".  `Logic` uses the `ChangeThemeCommandParser` class to parse the command."},{"lineNumber":648,"author":{"gitID":"-"},"content":".  This results in a `ChangeThemeCommand` object which is executed by the `LogicManager`."},{"lineNumber":649,"author":{"gitID":"-"},"content":".  The command execution calls the `ThemeColourUtil` method which then affects the `Model`, which calls the appropriate theme from /view/."},{"lineNumber":650,"author":{"gitID":"-"},"content":".  The theme is then changed, passed back to the ChangeThemeCommand object which changes the \u0027UI\u0027."},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":653,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d Design Considerations."},{"lineNumber":654,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the tag replace command"},{"lineNumber":655,"author":{"gitID":"chuakunhong"},"content":"* ** Alternative 1: ** Reuse the set that exist in the Addressbook."},{"lineNumber":656,"author":{"gitID":"chuakunhong"},"content":"** Pros: Need not introduce a new data structure to store the tags that are passed in."},{"lineNumber":657,"author":{"gitID":"chuakunhong"},"content":"** Cons: A set arranges its elements in alphabetical order. This disrupts the order in which the user has entered,"},{"lineNumber":658,"author":{"gitID":"chuakunhong"},"content":"         and it would cause the wanted tag to be removed instead of the unwanted one."},{"lineNumber":659,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"// end::Theme[]"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":663,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":664,"author":{"gitID":"kengsengg"},"content":"// tag::remark[]"},{"lineNumber":665,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Remark Feature"},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"chuakunhong"},"content":"A new remark component is added to the person model."},{"lineNumber":669,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":670,"author":{"gitID":"chuakunhong"},"content":"This remark feature allows the user to add remarks to the student profile of the specified student."},{"lineNumber":671,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":672,"author":{"gitID":"chuakunhong"},"content":".Sequence Diagram of AddRemarkCommand"},{"lineNumber":673,"author":{"gitID":"chuakunhong"},"content":"image::RemarkClassSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":674,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":676,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Remark` feature"},{"lineNumber":677,"author":{"gitID":"chuakunhong"},"content":"* ** Alternative 1:** Using just one method to add and delete the remark."},{"lineNumber":678,"author":{"gitID":"chuakunhong"},"content":"** Pros: Need not create 2 command just to add and delete the remarks."},{"lineNumber":679,"author":{"gitID":"chuakunhong"},"content":"** Cons: The remark attached to the student in our student profile would not be able to exceed one line."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":682,"author":{"gitID":"kengsengg"},"content":"// end::remark[]"},{"lineNumber":683,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":684,"author":{"gitID":"kengsengg"},"content":"// tag::appt[]"},{"lineNumber":685,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d AppointmentList Feature"},{"lineNumber":686,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":688,"author":{"gitID":"kengsengg"},"content":"The appointment list feature allows the user to add and delete appointments, whereby the data are then stored"},{"lineNumber":689,"author":{"gitID":"kengsengg"},"content":"locally in the hard disk and also on the Google server."},{"lineNumber":690,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":691,"author":{"gitID":"kengsengg"},"content":"The figure below shows the Sequence Diagram for the interactions between each component when"},{"lineNumber":692,"author":{"gitID":"kengsengg"},"content":"\"deleteappt 1\" is typed into the CommandBox by the user."},{"lineNumber":693,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":694,"author":{"gitID":"kengsengg"},"content":"image::deleteapptsequence.png[width\u003d\"800\"]"},{"lineNumber":695,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":696,"author":{"gitID":"kengsengg"},"content":". Firstly, the user keys in the command `deleteappt 1` and the `UI` takes in the input."},{"lineNumber":697,"author":{"gitID":"kengsengg"},"content":". In the `Logic` section, the `DeleteAppointmentCommandParser`, reads in the input to check if its valid"},{"lineNumber":698,"author":{"gitID":"kengsengg"},"content":"  before returning a valid `DeleteAppointmentCommand` Object."},{"lineNumber":699,"author":{"gitID":"kengsengg"},"content":". The method `deleteAppointment(apptToDelete)` is then executed in `Model` and eventually, the appointment is"},{"lineNumber":700,"author":{"gitID":"kengsengg"},"content":"  removed from the local data file."},{"lineNumber":701,"author":{"gitID":"kengsengg"},"content":". After the deleting process has been completed, the result is encapsulated as a CommandResult object, which is then passed back to the `UI` as a message shown to the user."},{"lineNumber":702,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":703,"author":{"gitID":"kengsengg"},"content":"The appointment data is also stored on the Google server with the help of the Google Calendar API."},{"lineNumber":704,"author":{"gitID":"kengsengg"},"content":"Each appointment is created with an unique ID so that they can be identified as separate events"},{"lineNumber":705,"author":{"gitID":"kengsengg"},"content":"that are not repeated. This ID is derived from the parameters of the appointment that is to be added."},{"lineNumber":706,"author":{"gitID":"kengsengg"},"content":"After that, the appointment to be created and its unique ID is passed into the `createEvent` method. The"},{"lineNumber":707,"author":{"gitID":"kengsengg"},"content":"authorized Google Calendar client service then executes from there, enabling the data to be modified"},{"lineNumber":708,"author":{"gitID":"kengsengg"},"content":"on the Google server. This is done in a similar manner for the deletion of appointment as well."},{"lineNumber":709,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":711,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Creation of unique ID for each appointment"},{"lineNumber":712,"author":{"gitID":"kengsengg"},"content":"* ** Alternative 1 (current choice): ** Unique ID is derived from the parameters of"},{"lineNumber":713,"author":{"gitID":"kengsengg"},"content":"the appointment that is to be added or deleted."},{"lineNumber":714,"author":{"gitID":"kengsengg"},"content":"** Pros: A simple method which guarantees that the ID will be the same for the individual"},{"lineNumber":715,"author":{"gitID":"kengsengg"},"content":"appointment when it is created and removed."},{"lineNumber":716,"author":{"gitID":"kengsengg"},"content":"** Cons: If future implementations for _EduBuddy_ allows appointment parameters to be edited, then"},{"lineNumber":717,"author":{"gitID":"kengsengg"},"content":"this method will not work as the ID will be edited after the appointment has been added. This"},{"lineNumber":718,"author":{"gitID":"kengsengg"},"content":"will cause the calendar client service to be unable to find the actual appointment to be deleted later on."},{"lineNumber":719,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":720,"author":{"gitID":"kengsengg"},"content":"* ** Alternative 2: ** Generate unique ID using random number generator and use a hash map to"},{"lineNumber":721,"author":{"gitID":"kengsengg"},"content":"store them, where the key is the number and the value is the appointment"},{"lineNumber":722,"author":{"gitID":"kengsengg"},"content":"** Pros: This ensures that the appointment ID will not be modified even if its parameters are edited."},{"lineNumber":723,"author":{"gitID":"kengsengg"},"content":"** Cons: Although the ID is derived by random number generator and the limit can be extended, it may result in wastage"},{"lineNumber":724,"author":{"gitID":"kengsengg"},"content":"of memory spaces since the set of keys and values are allocated randomly. Also, there is still a"},{"lineNumber":725,"author":{"gitID":"kengsengg"},"content":"slight chance that there will be a hashing collision."},{"lineNumber":726,"author":{"gitID":"kengsengg"},"content":"// end::appt[]"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":729,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":730,"author":{"gitID":"chuakunhong"},"content":"// tag::InjuriesHistory[]"},{"lineNumber":731,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Injuries History Feature"},{"lineNumber":732,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"chuakunhong"},"content":"A new injuries history component is added to the person model."},{"lineNumber":735,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":736,"author":{"gitID":"chuakunhong"},"content":"This injuries history feature allows the user to add injuries history to the student profile of the specified student."},{"lineNumber":737,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":738,"author":{"gitID":"chuakunhong"},"content":".Sequence Diagram of AddInjuriesCommand"},{"lineNumber":739,"author":{"gitID":"chuakunhong"},"content":"image::InjuriesHistoryClassSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":740,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":742,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Injuries History` feature"},{"lineNumber":743,"author":{"gitID":"chuakunhong"},"content":"* ** Alternative 1:** Using just one method to add and delete the injuries history."},{"lineNumber":744,"author":{"gitID":"chuakunhong"},"content":"** Pros: Need not create 2 command just to add and delete the injuries history."},{"lineNumber":745,"author":{"gitID":"chuakunhong"},"content":"** Cons: The injuries history attached to the student in our student profile would not be able to exceed one line."},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":748,"author":{"gitID":"chuakunhong"},"content":"// end::InjuriesHistory[]"},{"lineNumber":749,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":750,"author":{"gitID":"chuakunhong"},"content":"// tag::Cca[]"},{"lineNumber":751,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d Cca Feature"},{"lineNumber":752,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":753,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":754,"author":{"gitID":"chuakunhong"},"content":"A new cca component is added to the person model."},{"lineNumber":755,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":756,"author":{"gitID":"chuakunhong"},"content":"This cca feature allows the user to add cca and the position to the student profile of the specified student."},{"lineNumber":757,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":758,"author":{"gitID":"chuakunhong"},"content":".Sequence Diagram of CcaCommand"},{"lineNumber":759,"author":{"gitID":"chuakunhong"},"content":"image::CcaClassSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":760,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":762,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Cca` feature"},{"lineNumber":763,"author":{"gitID":"chuakunhong"},"content":"* ** Alternative 1:** Using just two methods to add and delete the details of the cca."},{"lineNumber":764,"author":{"gitID":"chuakunhong"},"content":"** Pros: More than 1 details of the student cca can be added."},{"lineNumber":765,"author":{"gitID":"chuakunhong"},"content":"** Cons: The user has to type separate commands just to add or delete the details."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":768,"author":{"gitID":"chuakunhong"},"content":"// end::Cca[]"},{"lineNumber":769,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":770,"author":{"gitID":"chuakunhong"},"content":"// tag::NOK[]"},{"lineNumber":771,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d NextOfKin Feature"},{"lineNumber":772,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":773,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":774,"author":{"gitID":"chuakunhong"},"content":"A new next of kin component is added to the person model."},{"lineNumber":775,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":776,"author":{"gitID":"chuakunhong"},"content":"This NextOfKin feature allows the user to add the details of the student\u0027s next of kin into the student profile of the specified student."},{"lineNumber":777,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":778,"author":{"gitID":"chuakunhong"},"content":".Sequence Diagram of NextOfKinCommand"},{"lineNumber":779,"author":{"gitID":"chuakunhong"},"content":"image::NextOfKinClassSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":780,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":782,"author":{"gitID":"chuakunhong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `NextOfKin` feature"},{"lineNumber":783,"author":{"gitID":"chuakunhong"},"content":"* ** Alternative 1:** Using just two methods to add and delete the details of the next of kin of the student."},{"lineNumber":784,"author":{"gitID":"chuakunhong"},"content":"** Pros: More than 1 details of the student\u0027s next of kin can be added."},{"lineNumber":785,"author":{"gitID":"chuakunhong"},"content":"** Cons: The user has to type separate commands just to add or delete the details."},{"lineNumber":786,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":787,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":788,"author":{"gitID":"chuakunhong"},"content":"// end::NOK[]"},{"lineNumber":789,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":795,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":796,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":801,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":802,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":803,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":806,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":808,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":813,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":815,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":823,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":829,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":834,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":847,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":848,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":849,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":852,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":853,"author":{"gitID":"-"},"content":""},{"lineNumber":854,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":855,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":857,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":858,"author":{"gitID":"kengsengg"},"content":"This section explains the various testing methods available in our application"},{"lineNumber":859,"author":{"gitID":"kengsengg"},"content":"and also provides some troubleshooting techniques."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":866,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":871,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":878,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":891,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":892,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":893,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":894,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":895,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":896,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":897,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":898,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":899,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":903,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":906,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":909,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":925,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":932,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":933,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":934,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":939,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":940,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":943,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":945,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":946,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"kengsengg"},"content":"[appendix]"},{"lineNumber":957,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"* is a secondary school teacher"},{"lineNumber":962,"author":{"gitID":"kengsengg"},"content":"* needs to know more about the students that they have taught"},{"lineNumber":963,"author":{"gitID":"-"},"content":"* has a need to track results"},{"lineNumber":964,"author":{"gitID":"kengsengg"},"content":"* has a need to manage a significant number of students"},{"lineNumber":965,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":966,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":967,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":968,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":973,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":974,"author":{"gitID":"TeyXinHui"},"content":"[appendix]"},{"lineNumber":975,"author":{"gitID":"-"},"content":"\u003d\u003d Feature Contribution"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"[width\u003d\"85%\",cols\u003d\"22%,\u003c23%,\u003c40%\",options\u003d\"header\",]"},{"lineNumber":978,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":979,"author":{"gitID":"-"},"content":"|Name | Major |Minor"},{"lineNumber":980,"author":{"gitID":"-"},"content":"|Johnny  |Display Panel: Add display panel functionalities to UI window | Data Integration: Integrate data input from user into display window"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"kengsengg"},"content":"|Xin Hui |Academic Section: Help teachers to view and manage students\u0027 academic information | Subject Class Database: Create subject class and integrate input into command. Add L1R5 calculation support into subject inputs."},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"|Kun Hong |Administrative Information: Add student administrative information into EduBuddy | Tag Support: Enhance tag functionalities in EduBuddy"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"kengsengg"},"content":"|Keng Seng |Calendar: Add calendar features which supports different administrative tasks | Sorting feature: Add sorting functionalities based on various parameters"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":993,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":995,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1002,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"kengsengg"},"content":"|`* * *` |teacher |update students\u0027 classes |know which classes they are in easily"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"TeyXinHui"},"content":"|`* * *` |teacher |update students\u0027 academic results |view and obtain students\u0027 streaming score (eg.L1R5)"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"kengsengg"},"content":"|`* * *` |teacher |access student\u0027s academic and non-academic achievements |stream the students properly (e.g. Normal Academic, Normal Technical, Express)"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":"|`* * *` |teacher |access student profiles easily  | have first hand information on all my students without going through a lot of documentation"},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"kengsengg"},"content":"|`* * *` |teacher |edit remarks of each individual student |update the students\u0027 individual needs that occur during class"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |filter and group students |access information of specific students"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |update student\u0027s marks |track the student\u0027s improvement in a certain subject"},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |know the students\u0027 emergency contact information |know who to contact when something happens to the student"},{"lineNumber":1020,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1021,"author":{"gitID":"kengsengg"},"content":"|`* *` |teacher |update student\u0027s attendance records |know if a student has been absent too frequently"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"kengsengg"},"content":"|`*` |teacher |look up on student\u0027s identity |recognize who the student is"},{"lineNumber":1024,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1025,"author":{"gitID":"kengsengg"},"content":"|`*` |teacher |know which subjects that I have taught them before |customize my teaching methods for different students"},{"lineNumber":1026,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1027,"author":{"gitID":"chuakunhong"},"content":"|`*` |teacher |can track the student\u0027s progress in the CCA |decide whether to involve the student more"},{"lineNumber":1028,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1029,"author":{"gitID":"chuakunhong"},"content":"|`*` |teacher |key in the levels attained by the students in the various domains in L.E.A.P.S system"},{"lineNumber":1030,"author":{"gitID":"chuakunhong"},"content":"|calculate the Co-Curricular Attainment achieved by the student."},{"lineNumber":1031,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1032,"author":{"gitID":"chuakunhong"},"content":"|`*` |teacher |view the student\u0027s injuries history |to know the need of my students."},{"lineNumber":1033,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1034,"author":{"gitID":"kengsengg"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":1037,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"kengsengg"},"content":"(For all use cases below, the *System* is `EduBuddy` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1059,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1063,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1066,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"kengsengg"},"content":"[discrete]"},{"lineNumber":1070,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Use case: Retrieve information of selected person"},{"lineNumber":1071,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1072,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1073,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1074,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1076,"author":{"gitID":"kengsengg"},"content":"3.  User requests to select a specific person in the list"},{"lineNumber":1077,"author":{"gitID":"kengsengg"},"content":"4.  AddressBook loads the information of the selected person"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1085,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1089,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1092,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"kengsengg"},"content":"[discrete]"},{"lineNumber":1096,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Use case: Add remarks for person"},{"lineNumber":1097,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1098,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1099,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1100,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1102,"author":{"gitID":"kengsengg"},"content":"3.  User requests to add remarks for a specific person in the list"},{"lineNumber":1103,"author":{"gitID":"kengsengg"},"content":"4.  AddressBook shows the updated information of the selected person"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1111,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1115,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1118,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"kengsengg"},"content":"[discrete]"},{"lineNumber":1122,"author":{"gitID":"kengsengg"},"content":"\u003d\u003d\u003d Use case: Add an appointment"},{"lineNumber":1123,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1124,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1125,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1126,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1128,"author":{"gitID":"kengsengg"},"content":"3.  User requests to add an appointment for a specific person in the list by typing in a date and time"},{"lineNumber":1129,"author":{"gitID":"kengsengg"},"content":"4.  AddressBook shows the updated details of the appointment"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1141,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1143,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1144,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"kengsengg"},"content":"* 3b. The given date or time is in a invalid format."},{"lineNumber":1148,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1149,"author":{"gitID":"kengsengg"},"content":"[none]"},{"lineNumber":1150,"author":{"gitID":"kengsengg"},"content":"** 3b1. AddressBook shows an error message."},{"lineNumber":1151,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1153,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1154,"author":{"gitID":"kengsengg"},"content":"* 3c. The given date or time is already booked by another appointment."},{"lineNumber":1155,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1156,"author":{"gitID":"kengsengg"},"content":"[none]"},{"lineNumber":1157,"author":{"gitID":"kengsengg"},"content":"** 3c1. AddressBook prompts user to input another date or time."},{"lineNumber":1158,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"TeyXinHui"},"content":"[discrete]"},{"lineNumber":1162,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Use case: Add students\u0027 academic results"},{"lineNumber":1163,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1164,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1165,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1166,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1168,"author":{"gitID":"TeyXinHui"},"content":"3.  User requests to update students\u0027 academic results using `AddCommand`"},{"lineNumber":1169,"author":{"gitID":"TeyXinHui"},"content":"4.  AddressBook shows updated details of academic results"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1177,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1181,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1184,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1185,"author":{"gitID":"TeyXinHui"},"content":"* 3b. The given subject(s) is/are invalid, for example, the name or the grade."},{"lineNumber":1186,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1187,"author":{"gitID":"kengsengg"},"content":"[none]"},{"lineNumber":1188,"author":{"gitID":"kengsengg"},"content":"** 3b1. AddressBook shows an error message."},{"lineNumber":1189,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1191,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1192,"author":{"gitID":"TeyXinHui"},"content":"[discrete]"},{"lineNumber":1193,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Use case: View students\u0027 academic results"},{"lineNumber":1194,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1195,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1196,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1197,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1199,"author":{"gitID":"TeyXinHui"},"content":"3.  User requests to view students\u0027 academic results using `SelectCommand`"},{"lineNumber":1200,"author":{"gitID":"TeyXinHui"},"content":"4.  AddressBook shows updated details of academic results"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1208,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1212,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1215,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1216,"author":{"gitID":"TeyXinHui"},"content":"* 3b. No subjects are assigned to the student."},{"lineNumber":1217,"author":{"gitID":"TeyXinHui"},"content":"+"},{"lineNumber":1218,"author":{"gitID":"TeyXinHui"},"content":"[none]"},{"lineNumber":1219,"author":{"gitID":"TeyXinHui"},"content":"** 3b1. UI shows an empty list of subjects."},{"lineNumber":1220,"author":{"gitID":"TeyXinHui"},"content":"+"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1222,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":1223,"author":{"gitID":"TeyXinHui"},"content":"[discrete]"},{"lineNumber":1224,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Use case: View students\u0027 streaming results"},{"lineNumber":1225,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1226,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1227,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1228,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1230,"author":{"gitID":"TeyXinHui"},"content":"3.  User requests to view students\u0027 streaming results using `SelectCommand` or `StreamCommand`"},{"lineNumber":1231,"author":{"gitID":"TeyXinHui"},"content":"4.  AddressBook shows updated details of streaming results"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"TeyXinHui"},"content":"* 3a. The given index or parameter is invalid."},{"lineNumber":1243,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1246,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1247,"author":{"gitID":"TeyXinHui"},"content":"* 3b. No subjects are assigned to the student."},{"lineNumber":1248,"author":{"gitID":"TeyXinHui"},"content":"+"},{"lineNumber":1249,"author":{"gitID":"TeyXinHui"},"content":"[none]"},{"lineNumber":1250,"author":{"gitID":"TeyXinHui"},"content":"** 3b1. Streaming results will be shown as zero."},{"lineNumber":1251,"author":{"gitID":"TeyXinHui"},"content":"+"},{"lineNumber":1252,"author":{"gitID":"TeyXinHui"},"content":"* 3c. Not enough subjects are assigned to the student."},{"lineNumber":1253,"author":{"gitID":"TeyXinHui"},"content":"+"},{"lineNumber":1254,"author":{"gitID":"TeyXinHui"},"content":"[none]"},{"lineNumber":1255,"author":{"gitID":"TeyXinHui"},"content":"** 3c1. Streaming results will be shown as zero."},{"lineNumber":1256,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1257,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"TeyXinHui"},"content":"[discrete]"},{"lineNumber":1260,"author":{"gitID":"TeyXinHui"},"content":"\u003d\u003d\u003d Use case: Update students\u0027 academic results"},{"lineNumber":1261,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1262,"author":{"gitID":"kengsengg"},"content":"*Main Success Scenario*"},{"lineNumber":1263,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":1264,"author":{"gitID":"kengsengg"},"content":"1.  User requests to list or find persons"},{"lineNumber":1265,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1266,"author":{"gitID":"TeyXinHui"},"content":"3.  User requests to update students\u0027 academic results using `EditCommand` or `AddSubjectCommand`"},{"lineNumber":1267,"author":{"gitID":"TeyXinHui"},"content":"4.  AddressBook shows updated details of academic results"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1275,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1279,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1282,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1283,"author":{"gitID":"TeyXinHui"},"content":"* 3b. The given subject(s) is/are invalid, for example, the name or the grade."},{"lineNumber":1284,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1285,"author":{"gitID":"kengsengg"},"content":"[none]"},{"lineNumber":1286,"author":{"gitID":"kengsengg"},"content":"** 3b1. AddressBook shows an error message."},{"lineNumber":1287,"author":{"gitID":"kengsengg"},"content":"+"},{"lineNumber":1288,"author":{"gitID":"TeyXinHui"},"content":"* 3c. There are duplicate subjects in the user input."},{"lineNumber":1289,"author":{"gitID":"TeyXinHui"},"content":"+"},{"lineNumber":1290,"author":{"gitID":"TeyXinHui"},"content":"[none]"},{"lineNumber":1291,"author":{"gitID":"TeyXinHui"},"content":"** 3c1. AddressBook shows an error message."},{"lineNumber":1292,"author":{"gitID":"TeyXinHui"},"content":"+"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":1296,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1301,"author":{"gitID":"chuakunhong"},"content":".  Should be able to hold up to 1,200 students"},{"lineNumber":1302,"author":{"gitID":"-"},"content":" without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1303,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1304,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1305,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"TeyXinHui"},"content":"[[CCA}} CCA::"},{"lineNumber":1311,"author":{"gitID":"TeyXinHui"},"content":"CCA stands for Co-Curricular Activities. It functions as a non-academic activity where students can have a more enriching experience in school. Find out more by clicking https://www.moe.gov.sg/education/programmes/co-curricular-activities[here]."},{"lineNumber":1312,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1313,"author":{"gitID":"TeyXinHui"},"content":"[[Grade]] Grade::"},{"lineNumber":1314,"author":{"gitID":"TeyXinHui"},"content":"The grading of the subjects by the level of competence the students show during the \"O-Level examination\"."},{"lineNumber":1315,"author":{"gitID":"TeyXinHui"},"content":"The level of achievement in each subject is indicated by the grade obtained, with A1 being the highest achievable grade and F9 the lowest:"},{"lineNumber":1316,"author":{"gitID":"TeyXinHui"},"content":"[width\u003d\"30%\",cols\u003d\"22%,\u003c23%\",options\u003d\"header\",]"},{"lineNumber":1317,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1318,"author":{"gitID":"TeyXinHui"},"content":"|Grade|Percentage of Competency"},{"lineNumber":1319,"author":{"gitID":"TeyXinHui"},"content":"|A1| 75% - 100%"},{"lineNumber":1320,"author":{"gitID":"TeyXinHui"},"content":"|A2| 70% - 74%"},{"lineNumber":1321,"author":{"gitID":"TeyXinHui"},"content":"|B3| 65% - 69%"},{"lineNumber":1322,"author":{"gitID":"TeyXinHui"},"content":"|B4| 60% - 64%"},{"lineNumber":1323,"author":{"gitID":"TeyXinHui"},"content":"|C5| 55% - 59%"},{"lineNumber":1324,"author":{"gitID":"TeyXinHui"},"content":"|C6| 50% - 54%"},{"lineNumber":1325,"author":{"gitID":"TeyXinHui"},"content":"|D7| 45% - 49%"},{"lineNumber":1326,"author":{"gitID":"TeyXinHui"},"content":"|E8| 40% - 44%"},{"lineNumber":1327,"author":{"gitID":"TeyXinHui"},"content":"|F9| 0% - 39%"},{"lineNumber":1328,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1329,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1330,"author":{"gitID":"TeyXinHui"},"content":"[[L1B4]] L1B4::"},{"lineNumber":1331,"author":{"gitID":"TeyXinHui"},"content":"A grading system for Secondary School students taking \"O-Level Examination\" at the end of their four years of studies in Secondary School."},{"lineNumber":1332,"author":{"gitID":"TeyXinHui"},"content":"The score obtained from the grading system will be used to determine the eligibility of the students to enter the next level of education, Polytechnic."},{"lineNumber":1333,"author":{"gitID":"TeyXinHui"},"content":"`L1` represents the First language subject and `B4` represents 2 relevant subjects, according to the polytechnic course applied, and 2 other best subjects."},{"lineNumber":1334,"author":{"gitID":"TeyXinHui"},"content":"The category the relevant subject is under(for example: L1B4-A, L1B4-B, L1B4-C, L1B4D), will determine which subjects are the relevant subjects."},{"lineNumber":1335,"author":{"gitID":"TeyXinHui"},"content":"The score will be calculated by considering the subjects\u0027 grades. Each subject can only be considered once."},{"lineNumber":1336,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1337,"author":{"gitID":"TeyXinHui"},"content":"If you want to find out more about the subject categories (L1B4-A, L1B4-B, L1B4-C, L1B4D),"},{"lineNumber":1338,"author":{"gitID":"TeyXinHui"},"content":"please visit:"},{"lineNumber":1339,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1340,"author":{"gitID":"TeyXinHui"},"content":"* https://www.sp.edu.sg/wps/portal/vp-spws/!ut/p/a0/04_Sj9CPykssy0xPLMnMz0vMAfGjzOJDPUxdjdxMTQws3J1cDDwt_MJMXZxDDE3cDfQLsh0VAYY7oWE!/?PC_Z7_UH5E2F540G6P00IO8K5AU61JM5027774_WCM_CONTEXT\u003d/wps/wcm/connect/lib-spws/site-spwebsite/future+students/admissions/selection+criteria+for+gce+o+level+holders+-+aggregate+computation++%28admissions+-+course+intakes+and+cut-off+points%29[Singapore Polytechnic]"},{"lineNumber":1341,"author":{"gitID":"TeyXinHui"},"content":"* http://www.tp.edu.sg/admissions/gce-o-level-aggregate-scores-computation[Temasek Polytechnic]"},{"lineNumber":1342,"author":{"gitID":"TeyXinHui"},"content":"* https://www.moe.gov.sg/education/post-secondary#polytechnics[Other Polytechnics]"},{"lineNumber":1343,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1344,"author":{"gitID":"TeyXinHui"},"content":"[[L1R5]] L1R5::"},{"lineNumber":1345,"author":{"gitID":"TeyXinHui"},"content":"1R5 is a grading system used in Singapore to determine the secondary school students\u0027 proficiency in the subjects taken for \"O-Level Examination\"."},{"lineNumber":1346,"author":{"gitID":"TeyXinHui"},"content":"The score is used for the students to enroll into Junior Colleges, which is the next higher level of education. \"L1\" refers to the first language subject taken by the student, while \"R5\" refers to the 5 relevant subjects that are examinable by the students."},{"lineNumber":1347,"author":{"gitID":"TeyXinHui"},"content":"The grade of L1R5 is then determined by taking the best grades of each category and summing them up, for example, if a student scores A1 for all 6 subjects are from each category, the score will be 6. Each subject can only be considered once."},{"lineNumber":1348,"author":{"gitID":"TeyXinHui"},"content":"For more information, please click https://www.moe.gov.sg/admissions/direct-admissions/dsa-jc/eligibility[here]"},{"lineNumber":1349,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1351,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"TeyXinHui"},"content":"[[NRIC]] NRIC::"},{"lineNumber":1354,"author":{"gitID":"TeyXinHui"},"content":"It stands for National Registration Identity Card, and it is an identification document for the residents in Singapore."},{"lineNumber":1355,"author":{"gitID":"TeyXinHui"},"content":"The `NRIC` that we are referring to in the _EduBuddy_ refers to the unique identification number that comes with each `NRIC`."},{"lineNumber":1356,"author":{"gitID":"TeyXinHui"},"content":"Please visit https://www.ica.gov.sg/[this website] for more details."},{"lineNumber":1357,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"TeyXinHui"},"content":"[[Subject]] Subject::"},{"lineNumber":1362,"author":{"gitID":"TeyXinHui"},"content":"These are the following subjects that are examinable in O-level Examinations in Singapore (as of Year 2018)."},{"lineNumber":1363,"author":{"gitID":"TeyXinHui"},"content":"[NOTE]"},{"lineNumber":1364,"author":{"gitID":"TeyXinHui"},"content":"The subjects in the brackets are not to be used as input. The subjects not in brackets are preferred for better efficiency in typing. +"},{"lineNumber":1365,"author":{"gitID":"TeyXinHui"},"content":"For example, type in: `Hist A1` *not* `History A1`"},{"lineNumber":1366,"author":{"gitID":"TeyXinHui"},"content":"[width\u003d\"85%\",cols\u003d\"22%,\u003c23%\",options\u003d\"header\",]"},{"lineNumber":1367,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1368,"author":{"gitID":"TeyXinHui"},"content":"|Subject Category|Subjects"},{"lineNumber":1369,"author":{"gitID":"TeyXinHui"},"content":"|L1| English, HTamil(Higher Tamil), HChi(Higher Chinese), HMalay(Higher Malay)"},{"lineNumber":1370,"author":{"gitID":"TeyXinHui"},"content":"|R1| Hist(History), Geog(Geography), ComHum(Combined Humanities), ELit(English Literature), CLit(Chinese Literature),"},{"lineNumber":1371,"author":{"gitID":"TeyXinHui"},"content":"     MLit(Malay Literature), TLit(Tamil Literature), HArt(Higher Art), HMusic(Higher Music), BIndo(Bahasa Indonesia),"},{"lineNumber":1372,"author":{"gitID":"TeyXinHui"},"content":"     CSP(Chinese Special Programme), MSP(Malay Special Programme)"},{"lineNumber":1373,"author":{"gitID":"TeyXinHui"},"content":"|R2| EMath(Elementary Mathematics), AMath(Additional Mathematics), Phy(Physics), Chem(Chemistry), Bio(Biology), Sci(Combined Science)"},{"lineNumber":1374,"author":{"gitID":"TeyXinHui"},"content":"|R3| Consist of both R1 and R2 subjects"},{"lineNumber":1375,"author":{"gitID":"TeyXinHui"},"content":"|R4| Consist of L1, R1 and R2 subjects. French, German, Spanish, Hindi, Urdu, Gujarati, Panjabi, Bengali, Burmese,"},{"lineNumber":1376,"author":{"gitID":"TeyXinHui"},"content":"     Thai, Jap(Japanese), Tamil, Chinese, Malay, DnT(Design and Technology), Comp(Computing), FnN(Food and Nutrition), PoA(Principles of Accounting),"},{"lineNumber":1377,"author":{"gitID":"TeyXinHui"},"content":"     Econs(Economics), Drama, PE(Physical Education), Biz(Business Studies), Biotech(Biotechnology), Design(Design Studies)"},{"lineNumber":1378,"author":{"gitID":"TeyXinHui"},"content":"|R5| Consist of R4 subjects"},{"lineNumber":1379,"author":{"gitID":"TeyXinHui"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1380,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1381,"author":{"gitID":"TeyXinHui"},"content":"* The following subjects can be assigned to students but cannot be contributed to the results: ChiB (Chinese B), MalayB (Malay B), TamilB(Tamil B)."},{"lineNumber":1382,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1383,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"},{"lineNumber":1384,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1386,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1387,"author":{"gitID":"-"},"content":""},{"lineNumber":1388,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1389,"author":{"gitID":"-"},"content":""},{"lineNumber":1390,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1391,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1398,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1399,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1404,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1405,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1406,"author":{"gitID":"-"},"content":""},{"lineNumber":1407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1412,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1413,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1414,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1415,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1416,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1417,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1422,"author":{"gitID":"-"},"content":""},{"lineNumber":1423,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"TeyXinHui"},"content":"*_return to \u003c\u003ctoc,Table of Contents\u003e\u003e_*"}],"authorContributionMap":{"chuakunhong":110,"johnnychanjx":1,"kengsengg":182,"TeyXinHui":281,"-":851}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.AddRemarkCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\", AddRemarkCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS); // invalid nric"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        // valid nric followed by invalid nric. The test case for invalid nric followed by valid nric"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + NRIC_DESC_BOB + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_NRIC_AMY,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"                + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + NRIC_DESC_BOB;"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        userInput \u003d targetIndex.getOneBased() + NRIC_DESC_AMY;"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_AMY).build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased()  + NRIC_DESC_AMY"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"                + TAG_DESC_FRIEND + NRIC_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"                + NRIC_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB)"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":157,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_NRIC_DESC + NRIC_DESC_BOB;"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":163,"author":{"gitID":"chuakunhong"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_NRIC_DESC + NRIC_DESC_BOB;"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withNric(VALID_NRIC_BOB).build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":22,"TeyXinHui":7,"-":150}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"public class SortCommandParserTest {"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"}"}],"authorContributionMap":{"kengsengg":13,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.StreamCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":71,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":89,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        //assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":114,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":150,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":152,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":155,"author":{"gitID":"chuakunhong"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"        } catch (ParseException pe) {"},{"lineNumber":157,"author":{"gitID":"chuakunhong"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":158,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":172,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":173,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":175,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":179,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":184,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":187,"author":{"gitID":"chuakunhong"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":188,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":189,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"    public void parseCommand_stream() throws Exception {"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"        StreamCommand command \u003d (StreamCommand) parser.parseCommand("},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":"                StreamCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" 1\");"},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(new StreamCommand(INDEX_FIRST_PERSON, 1), command);"},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":206,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":208,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":209,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":210,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":212,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":220,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"chuakunhong"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":222,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":223,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":224,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":226,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":88,"TeyXinHui":10,"-":142}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    private static final String INVALID_NRIC \u003d \"+651234\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    private static final Collection\u003cString\u003e INVALID_SUBJECT_NAME_SET \u003d Arrays.asList(\"efwjblkjnwef A1\");"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    private static final Collection\u003cString\u003e INVALID_SUBJECT_GRADE_SET \u003d Arrays.asList(\"English B2\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_NRIC \u003d \"S1234561Z\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((Optional\u003cString\u003e) null));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseNric(Optional.of(INVALID_NRIC)));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"    public void parseNric_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(ParserUtil.parseNric(Optional.empty()).isPresent());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"    public void parseNric_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(Optional.of(expectedNric), ParserUtil.parseNric(Optional.of(VALID_NRIC)));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedNric() throws Exception {"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"        assertEquals(Optional.of(expectedNric), ParserUtil.parseNric(Optional.of(nricWithWhitespace)));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"    public void parseSubject_null_throwsNullPointerException() throws Exception {"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":"        ParserUtil.parseSubject(null, null);"},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"    public void parseSubject_invalidSubjectName_throwsIllegalValueException() throws Exception {"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"        ParserUtil.parseSubject(INVALID_SUBJECT_NAME_SET, null);"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"    public void parseSubject_invalidSubjectGrade_throwsIllegalValueException() throws Exception {"},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":"        ParserUtil.parseSubject(INVALID_SUBJECT_GRADE_SET, null);"},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":199,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"TeyXinHui"},"content":"    public void parseSubjects_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":201,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(ParserUtil.parseSubjects(Collections.emptyList()).isEmpty());"},{"lineNumber":202,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":18,"TeyXinHui":30,"-":157}},{"path":"src/test/java/seedu/address/logic/parser/TagDeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.TagDeleteCommand;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"public class TagDeleteCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"    private TagDeleteCommandParser parser \u003d new TagDeleteCommandParser();"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_validArgs_returnsTagDeleteCommand() {"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"        assertParseSuccess(parser, \"removeTag\", new TagDeleteCommand(new Tag(\"removeTag\")));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":16,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/AddRemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.AddRemarkCommand;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"public class AddRemarkCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemarkCommand.MESSAGE_USAGE);"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    private AddRemarkCommandParser parser \u003d new AddRemarkCommandParser();"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        // no index specified"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        // empty remark"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_REMARK_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        // no index and no field specified"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        // negative index"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"-5\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        // zero index"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"0\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + REMARK_DESC_BOB;"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRemark(REMARK_DESC_BOB).build();"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand expectedCommand \u003d new AddRemarkCommand(targetIndex, descriptor);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":58,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/AddInjuriesCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INJURIES_HISTORY_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_INJURIES_HISTORY_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.AddInjuriesHistoryCommand;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"public class AddInjuriesCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInjuriesHistoryCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    private AddInjuriesHistoryCommandParser parser \u003d new AddInjuriesHistoryCommandParser();"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"        // no index specified"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        // empty remark"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        // no index and no field specified"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"        // negative index"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"-5\" + INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        // zero index"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"0\" + INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + INJURIES_HISTORY_DESC;"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRemark(INJURIES_HISTORY_DESC).build();"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand expectedCommand \u003d new AddInjuriesHistoryCommand(targetIndex, descriptor);"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":57,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/StreamCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.StreamCommand;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"public class StreamCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"    private StreamCommandParser parser \u003d new StreamCommandParser();"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_validInput_success() {"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"        assertParseSuccess(parser, \" 1 1\", new StreamCommand(INDEX_FIRST_PERSON, 1));"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_emptyArgs_failure() {"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"\","},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        //invalid Index input"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \" A 1\","},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"        //invalid type input"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \" 1 A\","},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        //insufficient input"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \" 1\","},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"        //too much unnecessary input"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \" 1 1 2 3\","},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":42,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NOK_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_AMY + NRIC_DESC_BOB +  TAG_DESC_FRIEND,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"                .withTags().build();"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB, expectedMessage);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_NRIC_BOB + NOK_DESC_AMY,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":33,"-":81}},{"path":"src/test/java/seedu/address/logic/parser/TagReplaceCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.TagReplaceCommand;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"public class TagReplaceCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"    private TagReplaceCommandParser parser \u003d new TagReplaceCommandParser();"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"    public void parse_validArgs_returnsTagReplaceCommand() {"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003cTag\u003e(){};"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"        tagList.add(new Tag(\"friend\"));"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        tagList.add(new Tag(\"husband\"));"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"t/ \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"                            TagReplaceCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        //assertParseFailure(parser, \"t/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        //                   TagReplaceCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        //assertParseSuccess(parser, \"t/friend t/husband\", new TagReplaceCommand(tagList));"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"                                                                TagReplaceCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":33,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/DeleteRemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.DeleteRemarkCommand;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"public class DeleteRemarkCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRemarkCommand.MESSAGE_USAGE);"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    private DeleteRemarkCommandParser parser \u003d new DeleteRemarkCommandParser();"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        // no index specified"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        // empty remark"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_REMARK_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        // no index and no field specified"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        // negative index"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"-5\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        // zero index"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"0\" + REMARK_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + REMARK_DESC_BOB;"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRemark(REMARK_DESC_BOB).build();"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand expectedCommand \u003d new DeleteRemarkCommand(targetIndex, descriptor);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":55,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/CcaCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_CCA_DESC;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_CCA_POSITION_DESC;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NO_CCA_POSITION_STATED;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NO_CCA_STATED;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CCA;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CCA_DESC;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CCA_POSITION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.CcaCommand;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"public class CcaCommandParserTest {"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    private CcaCommandParser parser \u003d new CcaCommandParser();"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        // no index specified"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, VALID_CCA_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        // no field specified"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        // no index and no field specified"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        // negative index"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"-5\" + VALID_CCA_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        // zero index"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"0\" + VALID_CCA_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"        //empty cca"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + EMPTY_CCA_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"        //empty cca position"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + EMPTY_CCA_POSITION_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_oneFieldSpecified_failure() {"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        //Cca position field not stated"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        String userInput \u003d targetIndex.getOneBased() + NO_CCA_POSITION_STATED;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        //Cca field not stated"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"        Index index \u003d INDEX_SECOND_PERSON;"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        String nextUserInput \u003d index.getOneBased() + NO_CCA_STATED;"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, nextUserInput, MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        String userInput \u003d targetIndex.getOneBased() + VALID_CCA_DESC;"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"                .withCca(VALID_CCA, VALID_CCA_POSITION).build();"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand expectedCommand \u003d new CcaCommand(targetIndex, descriptor);"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"TeyXinHui":76,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand."},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"public class SortCommandTest {"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    private SortCommand sortCommand;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"        String parameter \u003d \"name\";"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        sortCommand \u003d new SortCommand(parameter);"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"    public void showsSortedList() throws IOException {"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS_SORT_BY_NAME, expectedModel);"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":39,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/DeleteInjuriesCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INJURIES_HISTORY_DESC;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_INJURIES_HISTORY_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.DeleteInjuriesHistoryCommand;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"public class DeleteInjuriesCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteInjuriesHistoryCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    private DeleteInjuriesHistoryCommandParser parser \u003d new DeleteInjuriesHistoryCommandParser();"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"        // no index specified"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        // empty remark"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1\" + INVALID_INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        // no index and no field specified"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"        // negative index"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"-5\" + INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        // zero index"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"0\" + INJURIES_HISTORY_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        String userInput \u003d targetIndex.getOneBased() + INJURIES_HISTORY_DESC;"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRemark(INJURIES_HISTORY_DESC).build();"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand expectedCommand \u003d new DeleteInjuriesHistoryCommand(targetIndex, descriptor);"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":57,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ChangeThemeCommandParser;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"johnnychanjx"},"content":"//@@author johnnychanjx"},{"lineNumber":13,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":14,"author":{"gitID":"johnnychanjx"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"johnnychanjx"},"content":"    private ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":16,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":17,"author":{"gitID":"johnnychanjx"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"johnnychanjx"},"content":"    public void parse_validArgs_returnsThemeCommand() {"},{"lineNumber":19,"author":{"gitID":"johnnychanjx"},"content":"        assertParseSuccess(parser, \"dark\", new ChangeThemeCommand(\"dark\"));"},{"lineNumber":20,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":22,"author":{"gitID":"johnnychanjx"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"johnnychanjx"},"content":"    public void parser_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"johnnychanjx"},"content":"        assertParseFailure(parser, \"invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"johnnychanjx"},"content":"                ChangeThemeCommand.MESSAGE_INVALID_THEME_COLOUR));"},{"lineNumber":26,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":27,"author":{"gitID":"johnnychanjx"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"johnnychanjx"},"content":"                ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"johnnychanjx"},"content":"}"},{"lineNumber":31,"author":{"gitID":"johnnychanjx"},"content":""}],"authorContributionMap":{"johnnychanjx":20,"-":11}},{"path":"src/test/java/seedu/address/logic/parser/AddSubjectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_GRADE_DESC;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_NAME_DESC;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BIOLOGY;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_HISTORY;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_MATHEMATICS;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.AddSubjectCommand;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"public class AddSubjectCommandParserTest {"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubjectCommand.MESSAGE_USAGE);"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    private AddSubjectCommandParser parser \u003d new AddSubjectCommandParser();"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        // no index specified"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, VALID_SUBJECT_BIOLOGY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        // no field specified"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\", AddSubjectCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        // no index and no field specified"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        // negative index"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"-5\" + SUBJECT_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        // zero index"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"0\" + SUBJECT_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + INVALID_SUBJECT_NAME_DESC,"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"                Subject.MESSAGE_SUBJECT_NAME_CONSTRAINTS); // invalid subject name"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + INVALID_SUBJECT_GRADE_DESC,"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"                Subject.MESSAGE_SUBJECT_GRADE_CONSTRAINTS); // invalid subject grade"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        // valid subject followed by invalid subject. The test case for invalid subject followed by valid subject"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS + \" \""},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"                        + \"wqfqwf A1\", Subject.MESSAGE_SUBJECT_NAME_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS + \" \""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"                        + \"English aswfwef\", Subject.MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_HISTORY;"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSubjects(VALID_SUBJECT_HISTORY).build();"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand expectedCommand \u003d new AddSubjectCommand(targetIndex, descriptor);"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_addDuplicateSubject_success() {"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS;"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSubjects(VALID_SUBJECT_MATHEMATICS)"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"                .build();"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand expectedCommand \u003d new AddSubjectCommand(targetIndex, descriptor);"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_duplicateSubjectsInInput_throwsException() {"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS + \" \""},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"                + VALID_SUBJECT_MATHEMATICS;"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d \"There should not be duplicate subject(s) assigned to student.\";"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, userInput, expectedMessage);"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_noSubjectInput_success() {"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_SUBJECT;"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSubjects().build();"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand expectedCommand \u003d new AddSubjectCommand(targetIndex, descriptor);"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":1,"TeyXinHui":103,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":" * Contains integration tests and unit tests for AddAppointmentCommand."},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"public class AddAppointmentCommandTest {"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"    private String name;"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"    private String info;"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"    private String date;"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"    private String startTime;"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"    private String endTime;"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"        new AddAppointmentCommand(null);"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"    public void execute_duplicateAppointment_throwsCommandException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"        AddAppointmentCommandTest.ModelStub modelStub \u003d new AddAppointmentCommandTest"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"                .ModelStubThrowingDuplicateAppointmentException();"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"        Appointment validAppointment \u003d new Appointment(name, info, date, startTime, endTime);"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"        thrown.expectMessage(AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        getAddAppointmentCommand(validAppointment, modelStub).execute();"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":"    public void equals() {"},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"        Appointment a1 \u003d new Appointment(\"Alex Yeoh\", \"Consultation\", \"04042018\", \"1200\","},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"                \"1300\");"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"        Appointment a2 \u003d new Appointment(\"David Li\", \"Remedial\", \"05052018\", \"1400\","},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"                \"1600\");"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"        AddAppointmentCommand adda1Command \u003d new AddAppointmentCommand(a1);"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"        AddAppointmentCommand adda2Command \u003d new AddAppointmentCommand(a2);"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"        // same appointment -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"        assertEquals(adda1Command, adda1Command);"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"        // different appointment -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"        assertFalse(adda1Command.equals(adda2Command));"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"        AddAppointmentCommand adda1CommandCopy \u003d new AddAppointmentCommand(a1);"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"        assertTrue(adda1Command.equals(adda1CommandCopy));"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"        assertFalse(adda1Command.equals(1));"},{"lineNumber":93,"author":{"gitID":"kengsengg"},"content":"        assertFalse(adda1Command.equals(\"abc\"));"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"        assertFalse(adda1Command.equals(null));"},{"lineNumber":97,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":"     * Generates a new AppointmentCommand with the details of the given person."},{"lineNumber":101,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"kengsengg"},"content":"    private AddAppointmentCommand getAddAppointmentCommand(Appointment appointment, Model model) {"},{"lineNumber":103,"author":{"gitID":"kengsengg"},"content":"        AddAppointmentCommand command \u003d new AddAppointmentCommand(appointment);"},{"lineNumber":104,"author":{"gitID":"kengsengg"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":105,"author":{"gitID":"kengsengg"},"content":"        return command;"},{"lineNumber":106,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":108,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"kengsengg"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":110,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"kengsengg"},"content":"    private class ModelStub implements Model {"},{"lineNumber":112,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":113,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"kengsengg"},"content":"        public void replaceTag(List\u003cTag\u003e tagList) {"},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":118,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"kengsengg"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":120,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":123,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"kengsengg"},"content":"        public void addPage(Person person) throws IOException {}"},{"lineNumber":125,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":126,"author":{"gitID":"kengsengg"},"content":"        public void deletePage(Person person) {}"},{"lineNumber":127,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":128,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"kengsengg"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":130,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":133,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"kengsengg"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":135,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"kengsengg"},"content":"            return null;"},{"lineNumber":137,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":139,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"kengsengg"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":141,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":144,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"kengsengg"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":146,"author":{"gitID":"kengsengg"},"content":"                throws DuplicatePersonException {"},{"lineNumber":147,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":150,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"kengsengg"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":152,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"kengsengg"},"content":"            return null;"},{"lineNumber":154,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":156,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"kengsengg"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":158,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":161,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"kengsengg"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":163,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":166,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"kengsengg"},"content":"        public void sortPersonList(String parameter) {"},{"lineNumber":168,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":169,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":171,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"kengsengg"},"content":"        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":173,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":174,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":176,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"kengsengg"},"content":"        public void deleteAppointment(Appointment appointment) {"},{"lineNumber":178,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":179,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":181,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"kengsengg"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":183,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"kengsengg"},"content":"            return null;"},{"lineNumber":185,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":187,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"kengsengg"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":189,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":193,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"kengsengg"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":195,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"kengsengg"},"content":"    private class ModelStubThrowingDuplicateAppointmentException extends AddAppointmentCommandTest.ModelStub {"},{"lineNumber":197,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"kengsengg"},"content":"        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":199,"author":{"gitID":"kengsengg"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":200,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":202,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"kengsengg"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":204,"author":{"gitID":"kengsengg"},"content":"            return new AddressBook();"},{"lineNumber":205,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":208,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"kengsengg"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":210,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"kengsengg"},"content":"    private class ModelStubAcceptingAppointmentAdded extends AddAppointmentCommandTest.ModelStub {"},{"lineNumber":212,"author":{"gitID":"kengsengg"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":213,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":214,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"kengsengg"},"content":"        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":216,"author":{"gitID":"kengsengg"},"content":"            requireNonNull(appointment);"},{"lineNumber":217,"author":{"gitID":"kengsengg"},"content":"            appointmentsAdded.add(appointment);"},{"lineNumber":218,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":220,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"kengsengg"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":222,"author":{"gitID":"kengsengg"},"content":"            return new AddressBook();"},{"lineNumber":223,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":226,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":227,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":216,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"//import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d new PersonBuilder().withNric(\"S9838467H\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_HUSBAND).withRemark(VALID_REMARK).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws IOException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).withRemark(\" \").build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicateNricUnfilteredList_failure() throws IOException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(editCommand, model, \"This NRIC already exists in the address book\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() throws IOException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws IOException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":6,"TeyXinHui":20,"-":197}},{"path":"src/test/java/seedu/address/logic/commands/TagDeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"public class TagDeleteCommandTest {"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    private Tag tagToDelete \u003d new Tag(\"removeTag\");"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_validTagToRemoveEntered_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cTag\u003e tagList \u003d addressBook.getTagList();"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        Tag removeTag \u003d tagList.get(0);"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d prepareCommand(removeTag);"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(TagDeleteCommand.MESSAGE_DELETE_TAG_SUCCESS, removeTag);"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.deleteTag(removeTag);"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandSuccess(tagDeleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_invalidTagToRemoveEntered_throwsCommandException() throws IOException {"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(tagDeleteCommand, model, Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"    public void executeUndoRedo_invalidTagToRemoveEntered_failure() throws IOException {"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(tagDeleteCommand, model, Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"    private TagDeleteCommand prepareCommand(Tag removeTag) {"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        TagDeleteCommand tagDeleteCommand \u003d new TagDeleteCommand(removeTag);"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        tagDeleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        return tagDeleteCommand;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":58,"-":15}},{"path":"src/test/java/seedu/address/logic/parser/NextOfKinCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOK_EMAIL_DESC;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOK_NAME_DESC;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOK_PHONE_DESC;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOK_REMARK_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NOK_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.MESSAGE_REMARK_CONSTRAINTS;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.NextOfKinCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"public class NextOfKinCommandParserTest {"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, NextOfKinCommand.MESSAGE_USAGE);"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    private NextOfKinCommandParser parser \u003d new NextOfKinCommandParser();"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        // no index specified"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, VALID_NOK_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        // no field specified"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        // no index and no field specified"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        // negative index"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        // zero index"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        //invalid name"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NOK_NAME_DESC, MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        //invalid phone"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NOK_PHONE_DESC, MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        //invalid email"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NOK_EMAIL_DESC, MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        //invalid remark"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NOK_REMARK_DESC, MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        String userInput \u003d targetIndex.getOneBased() + VALID_NOK_DESC;"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"                .withNextOfKin(\"Bob 98765433 email@gmail.com Father\").build();"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand expectedCommand \u003d new NextOfKinCommand(targetIndex, descriptor);"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"chuakunhong":6,"TeyXinHui":67,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withNric(VALID_NRIC_BOB).build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":1,"TeyXinHui":1,"-":45}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA_POSITION;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INJURIES_HISTORY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NOK;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    public static final String VALID_NRIC_AMY \u003d \"S1111111Z\";"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S2222222Z\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_TAG_REMOVE \u003d \"remove\";"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_MATHEMATICS \u003d \"EMath A1\";"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_ENGLISH \u003d \"English A1\";"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_PHYSICS \u003d \"Phy A1\";"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_MALAY \u003d \"Malay A1\";"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_BIOLOGY \u003d \"Bio A1\";"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_SUBJECT_HISTORY \u003d \"Hist A1\";"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    public static final String VALID_REMARK \u003d \"Hardworking\";"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    public static final String VALID_INJURIES_HISTORY \u003d \"Right Ligament Tear\";"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    public static final String INVALID_REMARK \u003d \" \";"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_PHONE \u003d \"98765433\";"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_EMAIL \u003d \"email@gmail.com\";"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_RELATIONSHIP_REMARK \u003d \"Father\";"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_CCA \u003d \"Basketball\";"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_CCA_POSITION \u003d \"Member\";"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_NOK_DESC \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB + \" \" + PREFIX_PHONE + VALID_PHONE"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"            + \" \" + PREFIX_EMAIL + VALID_EMAIL + \" \" + PREFIX_REMARK + VALID_RELATIONSHIP_REMARK;"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    public static final String INVALID_NOK_NAME_DESC \u003d \" \" + PREFIX_NAME + \"$%^\u0026\u0026\" + \" \" + PREFIX_PHONE"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"            + VALID_PHONE + \" \" + PREFIX_EMAIL + VALID_EMAIL + \" \" + PREFIX_REMARK + VALID_RELATIONSHIP_REMARK;"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"    public static final String INVALID_NOK_PHONE_DESC \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB + \" \" + PREFIX_PHONE"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"            + \"adgeg2\" + \" \" + PREFIX_EMAIL + VALID_EMAIL + \" \" + PREFIX_REMARK + VALID_RELATIONSHIP_REMARK;"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"    public static final String INVALID_NOK_EMAIL_DESC \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB + \" \" + PREFIX_PHONE"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"            + VALID_PHONE + \" \" + PREFIX_EMAIL + \"ef2dfwe\" + \" \" + PREFIX_REMARK + VALID_RELATIONSHIP_REMARK;"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"    public static final String INVALID_NOK_REMARK_DESC \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB + \" \" + PREFIX_PHONE"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"            + VALID_PHONE + \" \" + PREFIX_EMAIL + VALID_EMAIL + \" \" + PREFIX_REMARK + \"funny\";"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"    public static final String VALID_CCA_DESC \u003d \" \" + PREFIX_CCA + VALID_CCA + \" \" + PREFIX_CCA_POSITION"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"            + VALID_CCA_POSITION;"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"    public static final String EMPTY_CCA_DESC \u003d \" \" + PREFIX_CCA + \"\" + \" \" + PREFIX_CCA_POSITION + VALID_CCA_POSITION;"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"    public static final String EMPTY_CCA_POSITION_DESC \u003d \" \" + PREFIX_CCA + VALID_CCA + \" \" + PREFIX_CCA_POSITION + \"\";"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"    public static final String NO_CCA_POSITION_STATED \u003d \" \" + PREFIX_CCA + VALID_CCA;"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"    public static final String NO_CCA_STATED \u003d \" \" + PREFIX_CCA_POSITION + VALID_CCA_POSITION;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"    public static final String NOK_DESC_AMY \u003d \" \" + PREFIX_NOK + VALID_NAME_AMY;"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"    public static final String NOK_DESC_BOB \u003d \" \" + PREFIX_NOK + VALID_NAME_BOB;"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS + \" \""},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_PHYSICS + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_ENGLISH + \" \""},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_MALAY + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BIOLOGY + \" \""},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_HISTORY;"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_MATHEMATICS + \" \""},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_PHYSICS + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_ENGLISH + \" \""},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_MALAY + \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BIOLOGY + \" \""},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_SUBJECT + VALID_SUBJECT_HISTORY;"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK;"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK;"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"    public static final String INJURIES_HISTORY_DESC \u003d \" \" + PREFIX_INJURIES_HISTORY + VALID_INJURIES_HISTORY;"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"    public static final String INVALID_INJURIES_HISTORY_DESC \u003d \" \" + PREFIX_INJURIES_HISTORY + INVALID_REMARK;"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK + INVALID_REMARK;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"    public static final String INVALID_SUBJECT_NAME_DESC \u003d \" \" + PREFIX_SUBJECT + \"sasf A1\";"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"    public static final String INVALID_SUBJECT_GRADE_DESC \u003d \" \" + PREFIX_SUBJECT + \"English hihi\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"    public static final EditPersonDescriptor DESC_AMY;"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"    public static final EditPersonDescriptor DESC_BOB;"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"                .withTags(VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS, VALID_SUBJECT_PHYSICS,"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"                        VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY, VALID_SUBJECT_BIOLOGY, VALID_SUBJECT_HISTORY)"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"                .withRemark(REMARK_DESC_AMY).withInjuriesHistory(INJURIES_HISTORY_DESC).build();"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS,"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"                        VALID_SUBJECT_PHYSICS, VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY, VALID_SUBJECT_BIOLOGY,"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"                        VALID_SUBJECT_HISTORY).withRemark(REMARK_DESC_BOB).withInjuriesHistory(VALID_INJURIES_HISTORY)"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"                        .build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            Model expectedModel) throws IOException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":28,"TeyXinHui":47,"-":130}},{"path":"src/test/java/seedu/address/logic/commands/StreamCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.StreamCommand.MESSAGE_L1B4A_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.StreamCommand.MESSAGE_L1B4B_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.StreamCommand.MESSAGE_L1B4C_SUCCESS;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.StreamCommand.MESSAGE_L1B4D_SUCCESS;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.StreamCommand.MESSAGE_L1R5_SUCCESS;"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.StreamCommand.MESSAGE_SELECT_STUDENT_SUCCESS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":" * Contains integration tests (interaction with the Model) for {@code StreamCommand}."},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"public class StreamCommandTest {"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"    private Model model;"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_indexOutOfBounds_throwCommandException() {"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        int type \u003d 1;"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"        assertExecutionFailure(outOfBoundsIndex, type, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_validInput_success() {"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, 1);"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON, 2);"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, 3);"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, 4);"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        assertExecutionSuccess(lastPersonIndex, 5);"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"        StreamCommand streamFirstCommand \u003d new StreamCommand(INDEX_FIRST_PERSON, 1);"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"        StreamCommand streamSecondCommand \u003d new StreamCommand(INDEX_SECOND_PERSON, 1);"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(streamFirstCommand.equals(streamFirstCommand));"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        StreamCommand streamFirstCommandCopy \u003d new StreamCommand(INDEX_FIRST_PERSON, 1);"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(streamFirstCommand.equals(streamFirstCommandCopy));"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(streamFirstCommand.equals(1));"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(streamFirstCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(streamFirstCommand.equals(streamSecondCommand));"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"     * is raised with the correct index."},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"    private void assertExecutionSuccess (Index index, int type) {"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"        StreamCommand streamCommand \u003d prepareCommand(index, type);"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        Person selectedPerson \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        String message \u003d \"\";"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 5;"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"        switch(type) {"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        case(1):"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1R5_SUCCESS;"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d 6;"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        case(2):"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4A_SUCCESS;"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        case(3):"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4B_SUCCESS;"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        case(4):"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4C_SUCCESS;"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"        case(5):"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4D_SUCCESS;"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"        default:"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"            CommandResult commandResult \u003d streamCommand.execute();"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"            assertEquals(result.append(String.format(MESSAGE_SELECT_STUDENT_SUCCESS, selectedPerson.getName()))"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"                    .append(String.format(message, score)).toString(),"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"        } catch (CommandException ce) {"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"     * Executes a {@code StreamCommand} with the given {@code index} and {@code type},"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"     * and checks that a {@code CommandException}"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"    private void assertExecutionFailure(Index index, int type, String expectedMessage) {"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"        StreamCommand streamCommand \u003d prepareCommand(index, type);"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"            streamCommand.execute();"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"        } catch (CommandException ce) {"},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"    private StreamCommand prepareCommand(Index index, int type) {"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"        StreamCommand streamCommand \u003d new StreamCommand(index, type);"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"        streamCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"        return streamCommand;"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":135,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/TagReplaceCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"public class TagReplaceCommandTest {"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    private Tag tagToDelete \u003d new Tag(\"removeTag\");"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    private Tag tagToBePlace \u003d new Tag(\"replaceTag\");"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    public void execute_validTagToReplaceEntered_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        List\u003cTag\u003e tagList \u003d model.getAddressBook().getTagList();"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        TagReplaceCommand tagReplaceCommand \u003d prepareCommand(tagList);"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(TagReplaceCommand.MESSAGE_REPLACE_TAG_SUCCESS, tagList.get(0),"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"                                                tagList.get(1));"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.replaceTag(tagList);"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(tagReplaceCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    public void execute_invalidTagToRemoveEntered_throwsCommandException() throws IOException {"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        tagList.add(tagToDelete);"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        tagList.add(tagToBePlace);"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        TagReplaceCommand tagReplaceCommand \u003d prepareCommand(tagList);"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(tagReplaceCommand, model, Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    public void executeUndoRedo_invalidTagToReplaceEntered_failure() throws IOException {"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        tagList.add(tagToDelete);"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        tagList.add(tagToBePlace);"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        TagReplaceCommand tagReplaceCommand \u003d prepareCommand(tagList);"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        // execution failed -\u003e replaceCommand not pushed into undoRedoStack"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(tagReplaceCommand, model, Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"    private TagReplaceCommand prepareCommand(List\u003cTag\u003e tagList) {"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"        TagReplaceCommand tagReplaceCommand \u003d new TagReplaceCommand(tagList);"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        tagReplaceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        return tagReplaceCommand;"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":63,"TeyXinHui":3,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/NextOfKinCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"import org.junit.Assert;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"public class NextOfKinCommandTest {"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public void constructor_nullIndexAndPerson_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"        new NextOfKinCommand(null, null);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        new NextOfKinCommand(INDEX_FIRST_PERSON, null);"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        new NextOfKinCommand(null, new EditPersonDescriptor());"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(NextOfKinCommand.MESSAGE_ADD_NOK_SUCCESS, editedPerson.getNextOfKin(),"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"                editedPerson.getName());"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandSuccess(nextOfKinCommand, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d personInList.build();"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"                .withNextOfKin(\"John 98765432 john@gmail.com Father\").build();"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(NextOfKinCommand.MESSAGE_ADD_NOK_SUCCESS, editedPerson.getNextOfKin(),"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"                editedPerson.getName());"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandSuccess(nextOfKinCommand, model, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws IOException {"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(NextOfKinCommand.MESSAGE_ADD_NOK_SUCCESS, editedPerson.getNextOfKin(),"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"                editedPerson.getName());"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandSuccess(nextOfKinCommand, model, expectedMessage, expectedModel);"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).build();"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder().withNextOfKin(\"John 98765432 john@gmail.com Father\").build());"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(NextOfKinCommand.MESSAGE_ADD_NOK_SUCCESS, editedPerson.getNextOfKin(),"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"                editedPerson.getName());"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(nextOfKinCommand, model, NextOfKinCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicatePersonFilteredList_failure() throws IOException {"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(nextOfKinCommand, model, NextOfKinCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"                .withNextOfKin(\"John 98765432 john@gmail.com Father\").build();"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(nextOfKinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"     * but smaller than size of address book"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws IOException {"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder().withNextOfKin(\"John 98765432 john@gmail.com Father\").build());"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(nextOfKinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"                .withNextOfKin(\"John 98765432 john@gmail.com Father\").build();"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"        // execution failed -\u003e nextOfKinCommand not pushed into undoRedoStack"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(nextOfKinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"            Assert.fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"            Assert.fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"            Assert.fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":199,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"TeyXinHui"},"content":"    public void equals() throws Exception {"},{"lineNumber":201,"author":{"gitID":"TeyXinHui"},"content":"        final NextOfKinCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":202,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"        // same values -\u003e returns true"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":205,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":206,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":207,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":208,"author":{"gitID":"TeyXinHui"},"content":"        // same object -\u003e returns true"},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":210,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":211,"author":{"gitID":"TeyXinHui"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":212,"author":{"gitID":"TeyXinHui"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":213,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":214,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":215,"author":{"gitID":"TeyXinHui"},"content":"        // null -\u003e returns false"},{"lineNumber":216,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":217,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":218,"author":{"gitID":"TeyXinHui"},"content":"        // different types -\u003e returns false"},{"lineNumber":219,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":220,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":221,"author":{"gitID":"TeyXinHui"},"content":"        // different index -\u003e returns false"},{"lineNumber":222,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new NextOfKinCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":223,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":224,"author":{"gitID":"TeyXinHui"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":225,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new NextOfKinCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":226,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":228,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"TeyXinHui"},"content":"     * Returns an {@code NextOfKinCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":230,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"TeyXinHui"},"content":"    private NextOfKinCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":232,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKinCommand nextOfKinCommand \u003d new NextOfKinCommand(index, descriptor);"},{"lineNumber":233,"author":{"gitID":"TeyXinHui"},"content":"        nextOfKinCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":234,"author":{"gitID":"TeyXinHui"},"content":"        return nextOfKinCommand;"},{"lineNumber":235,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":237,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":205,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/AddRemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"chuakunhong"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import java.io.IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"public class AddRemarkCommandTest {"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand addRemarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(addRemarkCommand.MESSAGE_REMARK_PERSON_SUCCESS, editedPerson.getRemark(),"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"                                                editedPerson.getName());"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(addRemarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d personInList.withName(GEORGE.getName().toString()).withNric(VALID_NRIC_BOB)"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_HUSBAND).withRemark(VALID_REMARK).build();"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(GEORGE.getName().toString())"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).withRemark(\"\").build();"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand addRemarkCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(AddRemarkCommand.MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"                descriptor.getRemark().get(), editedPerson.getName());"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(addRemarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand addRemarkCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(addRemarkCommand, model, addRemarkCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand addRemarkCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(addRemarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"    public void equals() throws Exception {"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        final AddRemarkCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        // same values -\u003e returns true"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        // same object -\u003e returns true"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        // null -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        // different types -\u003e returns false"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"        // different index -\u003e returns false"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(new AddRemarkCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(new AddRemarkCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"    private AddRemarkCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand addRemarkCommand \u003d new AddRemarkCommand(index, descriptor);"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":"        addRemarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"        return addRemarkCommand;"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"     * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":"    public class EditPersonDescriptorBuilder {"},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"        private EditPersonDescriptor descriptor;"},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder() {"},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new seedu.address.logic.commands.EditPersonDescriptor();"},{"lineNumber":150,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":152,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":"            this.descriptor \u003d new seedu.address.logic.commands.EditPersonDescriptor();"},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":157,"author":{"gitID":"chuakunhong"},"content":"         * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":158,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":159,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":160,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new seedu.address.logic.commands.EditPersonDescriptor();"},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(person.getName());"},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(person.getNric());"},{"lineNumber":163,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(person.getTags());"},{"lineNumber":164,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(person.getSubjects());"},{"lineNumber":165,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(person.getRemark());"},{"lineNumber":166,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":168,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":170,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":171,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":172,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(new Name(name));"},{"lineNumber":173,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":174,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":177,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":178,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":179,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withNric(String nric) {"},{"lineNumber":180,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(new Nric(nric));"},{"lineNumber":181,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":182,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":184,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":187,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":188,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":189,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":190,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(tagSet);"},{"lineNumber":191,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":192,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":194,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":195,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":196,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":197,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":198,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withSubjects(String... subjects) {"},{"lineNumber":199,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cSubject\u003e subjectSet \u003d Stream.of(subjects).map(Subject::new).collect(Collectors.toSet());"},{"lineNumber":200,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(subjectSet);"},{"lineNumber":201,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":202,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":204,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":205,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":206,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":207,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withRemark(String remark) {"},{"lineNumber":208,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(new Remark(remark));"},{"lineNumber":209,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":210,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":212,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptor build() {"},{"lineNumber":213,"author":{"gitID":"chuakunhong"},"content":"            return descriptor;"},{"lineNumber":214,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":217,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":199,"TeyXinHui":1,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/DeleteRemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"chuakunhong"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":" * DeleteRemarkCommand."},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"public class DeleteRemarkCommandTest {"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d new PersonBuilder().withRemark(VALID_REMARK).build();"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand deleteRemarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(deleteRemarkCommand.MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"                                                editedPerson.getRemark(), editedPerson.getName());"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(deleteRemarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d personInList.withName(GEORGE.getName().toString()).withNric(VALID_NRIC_BOB)"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_HUSBAND).withRemark(VALID_REMARK).build();"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(GEORGE.getName().toString())"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).withRemark(\"\").build();"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand deleteRemarkCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(DeleteRemarkCommand.MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"                editedPerson.getRemark(), editedPerson.getName());"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(deleteRemarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand deleteRemarkCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(deleteRemarkCommand, model, deleteRemarkCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand deleteRemarkCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(deleteRemarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"    public void equals() throws Exception {"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        final DeleteRemarkCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        // same values -\u003e returns true"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"        // same object -\u003e returns true"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"     * Returns an {@code DeleteRemarkCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"    private DeleteRemarkCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand deleteRemarkCommand \u003d new DeleteRemarkCommand(index, descriptor);"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        deleteRemarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        return deleteRemarkCommand;"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"     * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"    public class EditPersonDescriptorBuilder {"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"        private EditPersonDescriptor descriptor;"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder() {"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"            this.descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"         * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(person.getName());"},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(person.getNric());"},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(person.getTags());"},{"lineNumber":150,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(person.getSubjects());"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(person.getRemark());"},{"lineNumber":152,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":155,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":157,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":158,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(new Name(name));"},{"lineNumber":159,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":160,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":163,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":164,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":165,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withNric(String nric) {"},{"lineNumber":166,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(new Nric(nric));"},{"lineNumber":167,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":168,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":170,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":171,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":172,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":173,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":174,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":175,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(tagSet);"},{"lineNumber":177,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":178,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":180,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":181,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":182,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":183,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":184,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withSubjects(String... subjects) {"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cSubject\u003e subjectSet \u003d Stream.of(subjects).map(Subject::new).collect(Collectors.toSet());"},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(subjectSet);"},{"lineNumber":187,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":188,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":190,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":191,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":192,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":193,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withRemark(String remark) {"},{"lineNumber":194,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(new Remark(remark));"},{"lineNumber":195,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":196,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":198,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptor build() {"},{"lineNumber":199,"author":{"gitID":"chuakunhong"},"content":"            return descriptor;"},{"lineNumber":200,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":203,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":185,"TeyXinHui":1,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ThemeSwitchRequestEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"johnnychanjx"},"content":"//@@author johnnychanjx"},{"lineNumber":15,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":16,"author":{"gitID":"johnnychanjx"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":17,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":18,"author":{"gitID":"johnnychanjx"},"content":"    private static final String VALID_THEME \u003d \"light\";"},{"lineNumber":19,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":20,"author":{"gitID":"johnnychanjx"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"johnnychanjx"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":22,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":23,"author":{"gitID":"johnnychanjx"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"johnnychanjx"},"content":"    public void execute_themeSwitch_success() {"},{"lineNumber":25,"author":{"gitID":"johnnychanjx"},"content":"        CommandResult result \u003d new ChangeThemeCommand(VALID_THEME).execute();"},{"lineNumber":26,"author":{"gitID":"johnnychanjx"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":27,"author":{"gitID":"johnnychanjx"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ThemeSwitchRequestEvent);"},{"lineNumber":28,"author":{"gitID":"johnnychanjx"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":29,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":31,"author":{"gitID":"johnnychanjx"},"content":"}"},{"lineNumber":32,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":33,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":34,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":35,"author":{"gitID":"johnnychanjx"},"content":""}],"authorContributionMap":{"chuakunhong":1,"johnnychanjx":22,"TeyXinHui":1,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicateNric_throwsCommandException() throws IOException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model,"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"                \"This NRIC already exists in the address book\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"TeyXinHui":3,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/AddInjuriesCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"chuakunhong"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INJURIES_HISTORY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import java.io.IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"public class AddInjuriesCommandTest {"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand addInjuriesHistoryCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(addInjuriesHistoryCommand.MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"                                                editedPerson.getInjuriesHistory(), editedPerson.getName());"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(addInjuriesHistoryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d personInList.withName(GEORGE.getName().toString()).withNric(VALID_NRIC_BOB)"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_HUSBAND).withInjuriesHistory(VALID_INJURIES_HISTORY)"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"                .build();"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(GEORGE.getName().toString())"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).withInjuriesHistory(\"\").build();"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand addInjuriesHistoryCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(AddInjuriesHistoryCommand.MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"                descriptor.getInjuriesHistory().get(), editedPerson.getName());"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(addInjuriesHistoryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand addInjuriesHistoryCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(addInjuriesHistoryCommand, model, addInjuriesHistoryCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand addInjuriesHistoryCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(addInjuriesHistoryCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"    public void equals() throws Exception {"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        final AddInjuriesHistoryCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"        // same values -\u003e returns true"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        // same object -\u003e returns true"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        // null -\u003e returns false"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        // different types -\u003e returns false"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"        // different index -\u003e returns false"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(new AddInjuriesHistoryCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(standardCommand.equals(new AddInjuriesHistoryCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":"     * Returns an {@code AddInjuriesHistoryCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"    private AddInjuriesHistoryCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand addInjuriesHistoryCommand \u003d new AddInjuriesHistoryCommand(index, descriptor);"},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"        addInjuriesHistoryCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"        return addInjuriesHistoryCommand;"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"     * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":"    public class EditPersonDescriptorBuilder {"},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":150,"author":{"gitID":"chuakunhong"},"content":"        private EditPersonDescriptor descriptor;"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":152,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder() {"},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":157,"author":{"gitID":"chuakunhong"},"content":"            this.descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":158,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":160,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":"         * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":163,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":164,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":165,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(person.getName());"},{"lineNumber":166,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(person.getNric());"},{"lineNumber":167,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(person.getTags());"},{"lineNumber":168,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(person.getSubjects());"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(person.getRemark());"},{"lineNumber":170,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setInjuriesHistory(person.getInjuriesHistory());"},{"lineNumber":171,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":173,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":174,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":175,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":177,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(new Name(name));"},{"lineNumber":178,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":179,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":181,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":182,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":183,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":184,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withNric(String nric) {"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(new Nric(nric));"},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":187,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":189,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":190,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":191,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":192,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":193,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":194,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":195,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(tagSet);"},{"lineNumber":196,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":197,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":199,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":200,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":201,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":202,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":203,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withSubjects(String... subjects) {"},{"lineNumber":204,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cSubject\u003e subjectSet \u003d Stream.of(subjects).map(Subject::new).collect(Collectors.toSet());"},{"lineNumber":205,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(subjectSet);"},{"lineNumber":206,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":207,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":209,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":210,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":211,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":212,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withRemark(String remark) {"},{"lineNumber":213,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(new Remark(remark));"},{"lineNumber":214,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":215,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":217,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":218,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code InjuriesHistory} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":219,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":220,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withInjuriesHistory(String injuriesHistory) {"},{"lineNumber":221,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setInjuriesHistory(new InjuriesHistory(injuriesHistory));"},{"lineNumber":222,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":223,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":225,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptor build() {"},{"lineNumber":226,"author":{"gitID":"chuakunhong"},"content":"            return descriptor;"},{"lineNumber":227,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":230,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":207,"TeyXinHui":2,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute() throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":1,"TeyXinHui":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws IOException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() throws IOException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess (Index index) throws IOException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        Person selectedPerson \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"            assertEquals(String.format(MESSAGE_SELECT_PERSON_SUCCESS, selectedPerson.getName()),"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) throws IOException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":6,"-":142}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    @org.junit.Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    @org.junit.Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        Person validPerson \u003d new PersonBuilder().withName(\"Altria\").withNric(\"S8375768H\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"    @org.junit.Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        Person validPerson \u003d new PersonBuilder().withName(\"Jacky\").withNric(\"S9783287J\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"    @org.junit.Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        public void replaceTag(List\u003cTag\u003e tagList) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public void addPage(Person person) throws IOException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public void updatePage(Person person) throws IOException{"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public void deletePage(Person person) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"            return model.getFilteredPersonList();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":169,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"kengsengg"},"content":"        public void sortPersonList(String parameter) {"},{"lineNumber":171,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":172,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":174,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"kengsengg"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":176,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":177,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":179,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"kengsengg"},"content":"        public void deleteAppointment(Appointment appointment) {"},{"lineNumber":181,"author":{"gitID":"kengsengg"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":182,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":184,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"kengsengg"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":190,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"kengsengg"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":193,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":10,"TeyXinHui":14,"kengsengg":23,"-":182}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":1,"-":100}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"    private static final String INVALID_NRIC \u003d \"+651234\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_CCA \u003d BENSON.getCca().value;"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_CCA_POS \u003d BENSON.getCca().pos;"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_INJURIES_HISTORY \u003d BENSON.getInjuriesHistory().toString();"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_NEXT_OF_KIN \u003d BENSON.getNextOfKin().toString();"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_NAME_OF_KIN \u003d BENSON.getNextOfKin().fullName;"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_PHONE_OF_KIN \u003d BENSON.getNextOfKin().phone;"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_EMAIL_OF_KIN \u003d BENSON.getNextOfKin().email;"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    private static final String VALID_RELATIONSHIP_OF_KIN \u003d BENSON.getNextOfKin().remark;"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"    /*private static final List\u003cXmlAdaptedSubject\u003e VALID_SUBJECTS \u003d BENSON.getSubjects().stream()"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"            .map(XmlAdaptedSubject::new)"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"            .collect(Collectors.toList());*/"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_NRIC, VALID_TAGS, null, VALID_REMARK,"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"                                    VALID_CCA, VALID_INJURIES_HISTORY, VALID_NEXT_OF_KIN);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_NRIC, VALID_TAGS, null, VALID_REMARK,"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"                                                        VALID_CCA, VALID_INJURIES_HISTORY, VALID_NAME);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_NRIC, VALID_TAGS, null, VALID_REMARK,"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"                                    VALID_CCA, VALID_INJURIES_HISTORY, VALID_NAME);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_TAGS, null, VALID_REMARK,"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"                                                        VALID_CCA, VALID_INJURIES_HISTORY, VALID_NAME);"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_NRIC, invalidTags, null, VALID_REMARK, VALID_CCA,"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"                                        VALID_INJURIES_HISTORY, VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":25,"TeyXinHui":3,"-":64}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chuakunhong"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        //Modify data, overwrite existing file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"        original.removePerson(CARL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"        //assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":1,"TeyXinHui":5,"-":119}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    /* trailing whitespace in expected cant be removed"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"    */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":47}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"S1234567Z\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withNric(\"S1234567Z\")"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"                .build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":3,"-":72}},{"path":"src/test/java/seedu/address/model/person/NricTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"public class NricTest {"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Nric(null));"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"    public void constructor_invalidNric_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"        String invalidNric \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public void isValidNric() {"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"        // null nric number"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"        // invalid nric numbers"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"ic\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        assertFalse(Nric.isValidNric(\"S9312 153A\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        // valid nric number"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(Nric.isValidNric(\"S9312154Z\"));"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":32,"-":8}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_REMOVE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(Collections.emptyList(), addressBook.getSubjectList());"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAppointmentList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cSubject\u003e newSubjects \u003d new ArrayList\u003c\u003e(ALICE.getSubjects());"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newSubjects);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"    public void getSubjectList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        addressBook.getSubjectList().remove(0);"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":"    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":93,"author":{"gitID":"kengsengg"},"content":"        addressBook.getAppointmentList().remove(0);"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTag_tagNotFound_throwsTagNotFoundException() {"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook testCase \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"            testCase.removeTag(new Tag(VALID_TAG_REMOVE));"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"            assertEquals(error.getMessage(), \"Specific tag is not used in the address book.\");"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedAddressBook, testCase);"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTag_tagFoundOnMultiplePersons_tagRemoved() {"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook testCase \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"            testCase.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"            thrown.expect(TagNotFoundException.class);"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(expectedAddressBook, testCase);"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        private final ObservableList\u003cSubject\u003e subjects \u003d FXCollections.observableArrayList();"},{"lineNumber":131,"author":{"gitID":"kengsengg"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"kengsengg"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":134,"author":{"gitID":"kengsengg"},"content":"                        Collection\u003c? extends Subject\u003e subjects) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"            this.subjects.setAll(subjects);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"        public ObservableList\u003cSubject\u003e getSubjectList() {"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"            return subjects;"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":155,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"kengsengg"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":157,"author":{"gitID":"kengsengg"},"content":"            return appointments;"},{"lineNumber":158,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":52,"kengsengg":15,"-":94}},{"path":"src/test/java/seedu/address/model/subject/UniqueSubjectListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.subject;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"TeyXinHui"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"public class UniqueSubjectListTest {"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"        UniqueSubjectList uniqueSubjectList \u003d new UniqueSubjectList();"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"        uniqueSubjectList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"    public void testEquals_similarObject_returnTrue() {"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"        UniqueSubjectList uniqueSubjectList \u003d new UniqueSubjectList();"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"        UniqueSubjectList uniqueSubjectList1 \u003d new UniqueSubjectList();"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(uniqueSubjectList, uniqueSubjectList1);"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    public void hashCode_checkForHashCode_sameHashCode() {"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"        UniqueSubjectList uniqueSubjectList \u003d new UniqueSubjectList();"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        UniqueSubjectList uniqueSubjectList1 \u003d new UniqueSubjectList();"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(uniqueSubjectList.hashCode(), uniqueSubjectList1.hashCode());"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":32,"-":3}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setNric(person.getNric());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        descriptor.setSubjects(person.getSubjects());"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setRemark(person.getRemark());"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setCca(person.getCca());"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setInjuriesHistory(person.getInjuriesHistory());"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"        descriptor.setNextOfKin(person.getNextOfKin());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"    public EditPersonDescriptorBuilder withNric(String nric) {"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setNric(new Nric(nric));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"    public EditPersonDescriptorBuilder withSubjects(String... subjects) {"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectSet \u003d Stream.of(subjects).map(Subject::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"        descriptor.setSubjects(subjectSet);"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"    public EditPersonDescriptorBuilder withRemark(String remark) {"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setRemark(new Remark(remark));"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"    public EditPersonDescriptorBuilder withCca(String cca, String pos) {"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setCca(new Cca(cca, pos));"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"    public EditPersonDescriptorBuilder withInjuriesHistory(String injuriesHistory) {"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        descriptor.setInjuriesHistory(new InjuriesHistory(injuriesHistory));"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"     * Sets the {@code NextOfKin} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"    public EditPersonDescriptorBuilder withNextOfKin(String nok) {"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        String[] details \u003d nok.split(\"\\\\s+\");"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        descriptor.setNextOfKin(new NextOfKin(details[0], details[1], details[2], details[3]));"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":33,"TeyXinHui":22,"-":65}},{"path":"src/test/java/seedu/address/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"TeyXinHui"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"    public void testEquals_similarObject_returnTrue() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(uniqueTagList, uniqueTagList1);"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    public void hashCode_checkForHashCode_sameHashCode() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"        assertEquals(uniqueTagList.hashCode(), uniqueTagList1.hashCode());"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":14,"-":21}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NOK;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        sb.append(PREFIX_NRIC + person.getNric().value + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":32,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"        person.getSubjects().stream().forEach("},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"            s -\u003e sb.append(PREFIX_SUBJECT + s.subjectName + \" \" + s.subjectGrade + \" \")"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        );"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        sb.append(PREFIX_NOK + person.getNextOfKin().fullName + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":4,"TeyXinHui":4,"-":32}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_NRIC \u003d \"S8535525Z\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] DEFAULT_SUBJECTS \u003d {\"English A1\",  \"EMath A1\", \"Hist A1\", \"HTamil A1\","},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"                                                     \"Chem A1\", \"Phy A1\"};"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_REMARK \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_CCA \u003d \"Basketball\";"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_CCA_POSITION \u003d \"Member\";"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_INJURIES_HISTORY \u003d \" \";"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_NAME_OF_KIN \u003d \"Betty\";"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_PHONE \u003d \"98763451\";"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_EMAIL \u003d \"betty@gmail.com\";"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    public static final String DEFAULT_RELATIONSHIP \u003d \"Mother\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    private Nric nric;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"    private Set\u003cSubject\u003e subjects;"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    private Remark remark;"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    private Cca cca;"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    private InjuriesHistory injuriesHistory;"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    private NextOfKin nextOfKin;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d SampleDataUtil.getSubjectSet(DEFAULT_SUBJECTS);"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        cca \u003d new Cca(DEFAULT_CCA, DEFAULT_CCA_POSITION);"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"        injuriesHistory \u003d new InjuriesHistory(DEFAULT_INJURIES_HISTORY);"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        nextOfKin \u003d new NextOfKin(DEFAULT_NAME_OF_KIN, DEFAULT_PHONE, DEFAULT_EMAIL, DEFAULT_RELATIONSHIP);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        nric \u003d personToCopy.getNric();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new HashSet\u003c\u003e(personToCopy.getSubjects());"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"        remark \u003d personToCopy.getRemark();"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"        cca \u003d personToCopy.getCca();"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        injuriesHistory \u003d personToCopy.getInjuriesHistory();"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"        nextOfKin \u003d personToCopy.getNextOfKin();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Nric} of the {@code Person} that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"    public PersonBuilder withNric(String nric) {"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"        this.nric \u003d new Nric(nric);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"     * Parses the {@code subjects} into a {@code Set\u003cSubject\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"    public PersonBuilder withSubjects(String ... subjects) {"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        this.subjects \u003d SampleDataUtil.getSubjectSet(subjects);"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code Cca} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"    public PersonBuilder withCca(String cca, String pos) {"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"        this.cca \u003d new Cca(cca, pos);"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code InjuriesHistory} of the {@code Person} that we are building."},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"    public PersonBuilder withInjuriesHistory(String injuriesHistory) {"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        this.injuriesHistory \u003d new InjuriesHistory(injuriesHistory);"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"     * Sets the {@code NextOfKin} of the {@code Person} that we are building."},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"    public PersonBuilder withNameOfKin(String nameOfKin, String phone, String email, String remark) {"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"        this.nextOfKin \u003d new NextOfKin(nameOfKin, phone, email, remark);"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"        return new Person(name, nric, tags, subjects, remark, cca, injuriesHistory, nextOfKin);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":65,"TeyXinHui":13,"-":64}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INJURIES_HISTORY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BIOLOGY;"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_ENGLISH;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_HISTORY;"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_MALAY;"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_MATHEMATICS;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_PHYSICS;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withNric(\"S8535525Z\")"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"            .withTags(\"friends\").withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\", \"\").withInjuriesHistory(VALID_INJURIES_HISTORY)"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            .withNameOfKin(\"Betty\", \"98763451\", \"betty@gmail.com\", \"Mother\").build();"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withNric(\"S9123456X\")"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            .withTags(\"owesMoney\", \"friends\").withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\","},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"                    \"Chem A1\", \"Phy A2\").withRemark(VALID_REMARK).withCca(\"\", \"\")"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            .withInjuriesHistory(VALID_INJURIES_HISTORY)"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"            .withNameOfKin(\"Ben\", \"90875674\", \"ben@gmail.com\", \"Father\").build();"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withNric(\"S9535256J\")"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"            .withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\",  \"\").withInjuriesHistory(\"\").build();"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withNric(\"S8765253I\")"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"            .withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\", \"\").withInjuriesHistory(\"\").build();"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withNric(\"S9482224A\")"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"            .withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\", \"\").withInjuriesHistory(\"\").build();"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withNric(\"S9482427J\")"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"            .withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\", \"\").withInjuriesHistory(\"\").build();"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withNric(\"S9482442U\")"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"            .withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\", \"\").withInjuriesHistory(VALID_INJURIES_HISTORY).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withNric(\"S8482424Z\")"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"            .withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\", \"\").withInjuriesHistory(\"\").build();"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withNric(\"S8482131K\")"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"            .withSubjects(\"English A1\", \"EMath A1\", \"Hist A1\", \"HTamil A1\", \"Chem A1\", \"Phy A1\")"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(\"\", \"\").withInjuriesHistory(\"\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"            .withTags(VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS, VALID_SUBJECT_PHYSICS,"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"                      VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY , VALID_SUBJECT_BIOLOGY, VALID_SUBJECT_HISTORY)"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"            .withRemark(VALID_REMARK).withCca(VALID_REMARK, VALID_REMARK).withInjuriesHistory(VALID_REMARK).build();"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withSubjects(VALID_SUBJECT_MATHEMATICS,"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"                      VALID_SUBJECT_PHYSICS, VALID_SUBJECT_ENGLISH, VALID_SUBJECT_MALAY , VALID_SUBJECT_BIOLOGY,"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"                      VALID_SUBJECT_HISTORY).withRemark(\"\").withCca(VALID_REMARK, VALID_REMARK)"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"                    .withInjuriesHistory(VALID_REMARK).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"    //Appointments"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"    public static final Appointment A1 \u003d new Appointment(\"Alex Yeoh\", \"Consultation\", \"04042018\","},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"            \"1200\", \"1300\");"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"    public static final Appointment A2 \u003d new Appointment(\"David Li\", \"Remedial\", \"05052018\","},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"            \"1400\", \"1600\");"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"    public static final Appointment A3 \u003d new Appointment(\"Bon\", \"Remedial\", \"01052018\","},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"            \"0800\", \"1000\");"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"    public static final Appointment A4 \u003d new Appointment(\"Carl\", \"Consultation\", \"18042018\","},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"            \"1400\", \"1500\");"},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"    public static final Appointment A5 \u003d new Appointment(\"Emily\", \"Remedial\", \"01042018\","},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"            \"0900\", \"1000\");"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"kengsengg"},"content":"        for (Appointment appointment : getTypicalAppointments()) {"},{"lineNumber":106,"author":{"gitID":"kengsengg"},"content":"            try {"},{"lineNumber":107,"author":{"gitID":"kengsengg"},"content":"                ab.addAppointment(appointment);"},{"lineNumber":108,"author":{"gitID":"kengsengg"},"content":"            } catch (DuplicateAppointmentException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":119,"author":{"gitID":"kengsengg"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":120,"author":{"gitID":"kengsengg"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(A1, A2, A3, A4, A5));"},{"lineNumber":121,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":35,"TeyXinHui":13,"kengsengg":23,"-":51}},{"path":"src/test/java/seedu/address/logic/commands/DeleteInjuriesCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"chuakunhong"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INJURIES_HISTORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":" * DeleteRemarkCommand."},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"public class DeleteInjuriesCommandTest {"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d new PersonBuilder().withInjuriesHistory(VALID_INJURIES_HISTORY).build();"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand deleteInjuriesHistoryCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(deleteInjuriesHistoryCommand.MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"                                                editedPerson.getInjuriesHistory(), editedPerson.getName());"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(deleteInjuriesHistoryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        Person editedPerson \u003d personInList.withName(GEORGE.getName().toString()).withNric(VALID_NRIC_BOB)"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"                .withTags(VALID_TAG_HUSBAND).withInjuriesHistory(VALID_INJURIES_HISTORY).build();"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(GEORGE.getName().toString())"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).withInjuriesHistory(\" \").build();"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand deleteInjuriesCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        String expectedMessage \u003d String.format(DeleteInjuriesHistoryCommand.MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"                editedPerson.getInjuriesHistory(), editedPerson.getName());"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        assertCommandSuccess(deleteInjuriesCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand deleteInjuriesHistoryCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(deleteInjuriesHistoryCommand, model,"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"                deleteInjuriesHistoryCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand deleteInjuriesHistoryCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        assertCommandFailure(deleteInjuriesHistoryCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"    public void equals() throws Exception {"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        final DeleteInjuriesHistoryCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"        // same values -\u003e returns true"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        // same object -\u003e returns true"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"     * Returns an {@code DeleteRemarkCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"    private DeleteInjuriesHistoryCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand deleteInjuriesHistoryCommand \u003d"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"                new DeleteInjuriesHistoryCommand(index, descriptor);"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"        deleteInjuriesHistoryCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"        return deleteInjuriesHistoryCommand;"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"     * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":"    public class EditPersonDescriptorBuilder {"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"        private EditPersonDescriptor descriptor;"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder() {"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"            this.descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":150,"author":{"gitID":"chuakunhong"},"content":"         * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":152,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":"            descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(person.getName());"},{"lineNumber":155,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(person.getNric());"},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(person.getTags());"},{"lineNumber":157,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(person.getSubjects());"},{"lineNumber":158,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(person.getRemark());"},{"lineNumber":159,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setInjuriesHistory(person.getInjuriesHistory());"},{"lineNumber":160,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":163,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":164,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":165,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":166,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setName(new Name(name));"},{"lineNumber":167,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":168,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":170,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":171,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":172,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":173,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withNric(String nric) {"},{"lineNumber":174,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setNric(new Nric(nric));"},{"lineNumber":175,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":176,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":178,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":179,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":180,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":181,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":182,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":183,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":184,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setTags(tagSet);"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":188,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":189,"author":{"gitID":"chuakunhong"},"content":"         * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":190,"author":{"gitID":"chuakunhong"},"content":"         * that we are building."},{"lineNumber":191,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":192,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withSubjects(String... subjects) {"},{"lineNumber":193,"author":{"gitID":"chuakunhong"},"content":"            Set\u003cSubject\u003e subjectSet \u003d Stream.of(subjects).map(Subject::new).collect(Collectors.toSet());"},{"lineNumber":194,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setSubjects(subjectSet);"},{"lineNumber":195,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":196,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":198,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":199,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code Remark} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":200,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":201,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withRemark(String remark) {"},{"lineNumber":202,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setRemark(new Remark(remark));"},{"lineNumber":203,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":204,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":206,"author":{"gitID":"chuakunhong"},"content":"        /**"},{"lineNumber":207,"author":{"gitID":"chuakunhong"},"content":"         * Sets the {@code InjuriesHistory} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":208,"author":{"gitID":"chuakunhong"},"content":"         */"},{"lineNumber":209,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptorBuilder withInjuriesHistory(String injuriesHistory) {"},{"lineNumber":210,"author":{"gitID":"chuakunhong"},"content":"            descriptor.setInjuriesHistory(new InjuriesHistory(injuriesHistory));"},{"lineNumber":211,"author":{"gitID":"chuakunhong"},"content":"            return this;"},{"lineNumber":212,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":214,"author":{"gitID":"chuakunhong"},"content":"        public EditPersonDescriptor build() {"},{"lineNumber":215,"author":{"gitID":"chuakunhong"},"content":"            return descriptor;"},{"lineNumber":216,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":219,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":197,"TeyXinHui":2,"-":20}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"    private static final String NRIC_FIELD_ID \u003d \"#nric\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    private final Label nricLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        this.nricLabel \u003d getChildNode(NRIC_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    public String getNric() {"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        return nricLabel.getText();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"    //@@author kengsengg"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"    public List\u003cString\u003e getTagStyles(String tag) {"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"        return tagLabels"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"                .stream()"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"                .findFirst()"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":4,"TeyXinHui":1,"kengsengg":11,"-":52}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"import seedu.address.commons.events.ui.DisplayCalendarRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d \"https\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"           + \"://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String PERSON_PAGE \u003d \".html\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String PROFILE_DIRECTORY \u003d \"/StudentPage/\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"    private ViewCommand viewCommand;"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":45,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"johnnychanjx"},"content":"     * @@author johnnychanjx"},{"lineNumber":52,"author":{"gitID":"johnnychanjx"},"content":"    * To load person page according to person name"},{"lineNumber":53,"author":{"gitID":"johnnychanjx"},"content":"    */"},{"lineNumber":54,"author":{"gitID":"johnnychanjx"},"content":"    public void loadPersonPage(Person person) throws IOException {"},{"lineNumber":55,"author":{"gitID":"johnnychanjx"},"content":"        URL personPage \u003d MainApp.class.getResource(File.separator + \"StudentPage\" + File.separator"},{"lineNumber":56,"author":{"gitID":"johnnychanjx"},"content":"                + \"template.html\");"},{"lineNumber":57,"author":{"gitID":"johnnychanjx"},"content":"        loadPage(\"file:\" + System.getProperty(\"user.home\") + File.separator + \"StudentPage\""},{"lineNumber":58,"author":{"gitID":"johnnychanjx"},"content":"                + File.separator + person.getName() + \".html\");"},{"lineNumber":59,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"johnnychanjx"},"content":"    //@@author johnnychanjx"},{"lineNumber":61,"author":{"gitID":"johnnychanjx"},"content":"    public void loadPage(String url) {"},{"lineNumber":62,"author":{"gitID":"johnnychanjx"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":63,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":65,"author":{"gitID":"johnnychanjx"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"johnnychanjx"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":67,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"johnnychanjx"},"content":"    public void loadDefaultPage() {"},{"lineNumber":69,"author":{"gitID":"johnnychanjx"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":70,"author":{"gitID":"johnnychanjx"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":71,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"     * Loads the Google Calendar page"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"    public void loadCalendarPage(String parameter) {"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"        loadPage(\"https://calendar.google.com/calendar/embed?src\u003d\" + parameter"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"                + \"%40gmail.com\u0026ctz\u003dAsia%2FSingapore\");"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) throws IOException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":"    @Subscribe"},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"    private void handleDisplayCalendarEvent(DisplayCalendarRequestEvent event) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":"        loadCalendarPage(event.toString());"},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"johnnychanjx":22,"kengsengg":17,"-":61}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":" * An UI component that displays information of an {@code Appointment}."},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"    public final Appointment appointment;"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    private Label id;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    private Label name;"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    private Label info;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"    private Label date;"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"    private Label startTime;"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"    private Label endTime;"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"        info.setText(appointment.getInfo());"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"        name.setText(\"Name: \" + appointment.getName());"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"        date.setText(\"Date: \" + appointment.getDate());"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"        startTime.setText(\"Start Time: \" + appointment.getStartTime());"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"        endTime.setText(\"End Time:  \" + appointment.getEndTime());"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"        // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"        // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"        if (!(other instanceof AppointmentCard)) {"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"        // state check"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 appointment.equals(card.appointment);"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":57,"-":6}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.ThemeColourUtil.getThemeHashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ThemeSwitchRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String EXTENSIONS_STYLESHEET \u003d \"view/Extensions.css\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String DEFAULT_THEME_COLOUR \u003d \"light\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final HashMap\u003cString, String\u003e themeHashMap;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"    private AppointmentListPanel appointmentListPanel;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private String themeColour;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"    private StackPane appointmentListPanelPlaceholder;"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        themeHashMap \u003d getThemeHashMap();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setThemeColour();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":115,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":121,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"kengsengg"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"},{"lineNumber":145,"author":{"gitID":"kengsengg"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"},{"lineNumber":146,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"kengsengg"},"content":"    public AppointmentListPanel getAppointmentListPanel() {"},{"lineNumber":211,"author":{"gitID":"kengsengg"},"content":"        return this.appointmentListPanel;"},{"lineNumber":212,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    private void setThemeColour() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        setThemeColour(DEFAULT_THEME_COLOUR);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void setThemeColour(String themeColour) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(EXTENSIONS_STYLESHEET);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(themeHashMap.get(themeColour));"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    private void changeThemeColour() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().clear();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        setThemeColour(themeColour);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void handleChangeThemeEvent(ThemeSwitchRequestEvent event) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        themeColour \u003d event.themeToChangeTo;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Platform.runLater(this::changeThemeColour);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":11,"-":233}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    private static final String[] tagColors \u003d { \"red\" , \"orange\", \"yellow\", \"green\", \"blue\", \"violet\", \"indigo\","},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"                                                \"purple\" , \"pink\" , \"grey\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    private Label nric;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    private Label remark;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        nric.setText(person.getNric().value);"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"        setTags(person);"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        remark.setText(person.getRemark().value);"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"    //@@author kengsengg;"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"     * Generates different colors for different tag labels"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"     * @param tagName"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"     * @return a color style that is listed under tagColors array"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"    private String generateTagColor(String tagName) {"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"        return tagColors[Math.abs(tagName.hashCode()) % tagColors.length];"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"     * Creates the tag labels for {@code person} with different colors assigned to different tag names"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"    private void setTags(Person person) {"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":"            tagLabel.getStyleClass().add(generateTagColor(tag.tagName));"},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"        });"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"    //@@author"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":5,"kengsengg":28,"-":63}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"            \"The appointment index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_INVALID_TAG_ENTERED \u003d \"The person tag provided is invalid\";"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_INSUFFICIENT_SUBJECTS \u003d \". Insufficient subjects to calculate score\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"TeyXinHui":2,"-":13}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    private String appTitle \u003d \"EduBuddy\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":1,"-":71}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"import seedu.address.commons.events.ui.AppointmentPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":" * Panel containing the list of appointments"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    private ListView\u003cAppointmentCard\u003e appointmentListView;"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"        setConnections(appointmentList);"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"    private void setConnections(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"        ObservableList\u003cAppointmentCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"                appointmentList, (appointment) -\u003e new AppointmentCard("},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"                        appointment, appointmentList.indexOf(appointment) + 1));"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"        appointmentListView.setItems(mappedList);"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"        appointmentListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"                        logger.fine(\"Selection in appointment list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"                        raise(new AppointmentPanelSelectionChangedEvent(newValue));"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"                    }"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"                });"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"     * Scrolls to the {@code AppointmentCard} at the {@code index} and selects it."},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"    private void scrollTo(int index) {"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"            appointmentListView.scrollTo(index);"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"            appointmentListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"        });"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"    @Subscribe"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code AppointmentCard}."},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointmentCard\u003e {"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"        @Override"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"        protected void updateItem(AppointmentCard appointment, boolean empty) {"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"            super.updateItem(appointment, empty);"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"            if (empty || appointment \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"                setGraphic(null);"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"                setText(null);"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"            } else {"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"                setGraphic(appointment.getRoot());"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":74,"-":16}},{"path":"src/main/java/seedu/address/ui/CalendarDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"import com.google.api.services.calendar.Calendar;"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":" * Calendar of the App"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"public class CalendarDisplay {"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"    private static final String APPLICATION_NAME \u003d  \"Google Calendar API Java Quickstart\";"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"    private static FileDataStoreFactory DATA_STORE_FACTORY;"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"    private static HttpTransport HTTP_TRANSPORT;"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"    /** Global instance of the scopes required by this quickstart."},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"     * If modifying these scopes, delete your previously saved credentials"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"     * at ~/.credentials/calendar-java-quickstart"},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"    private static final List\u003cString\u003e SCOPES \u003d Arrays.asList(CalendarScopes.CALENDAR);"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"    static {"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"            HTTP_TRANSPORT \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"            DATA_STORE_FACTORY \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"        } catch (Throwable t) {"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"            t.printStackTrace();"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"            System.exit(1);"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"     * Creates an authorized Credential object."},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"     * @return an authorized Credential object."},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"     * @throws IOException"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"    private Credential authorize() throws IOException {"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"        // Load client secrets."},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"        InputStream in \u003d Calendar.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"        GoogleClientSecrets clientSecrets \u003d  GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"                .setDataStoreFactory(DATA_STORE_FACTORY)"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":"                .setAccessType(\"offline\")"},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"                .build();"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"        return credential;"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"     * Build and return an authorized Calendar client service."},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"     * @return an authorized Calendar client service"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"     * @throws IOException"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"    private Calendar getCalendarService() throws IOException {"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"        return new Calendar.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)"},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"                .build();"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"kengsengg"},"content":"     * Creates an event on the Google Calendar"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"     * @throws IOException"},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"    public void createEvent(Appointment toAdd, String id) throws IOException {"},{"lineNumber":97,"author":{"gitID":"kengsengg"},"content":"        Calendar service \u003d getCalendarService();"},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"        Event event \u003d new Event().setSummary(toAdd.getName());"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":101,"author":{"gitID":"kengsengg"},"content":"        event.setId(String.valueOf(id));"},{"lineNumber":102,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":103,"author":{"gitID":"kengsengg"},"content":"        DateTime startDateTime \u003d new DateTime(formattedStartDateTime(toAdd));"},{"lineNumber":104,"author":{"gitID":"kengsengg"},"content":"        EventDateTime start \u003d new EventDateTime().setDateTime(startDateTime);"},{"lineNumber":105,"author":{"gitID":"kengsengg"},"content":"        event.setStart(start);"},{"lineNumber":106,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":107,"author":{"gitID":"kengsengg"},"content":"        DateTime endDateTime \u003d new DateTime(formattedEndDateTime(toAdd));"},{"lineNumber":108,"author":{"gitID":"kengsengg"},"content":"        EventDateTime end \u003d new EventDateTime().setDateTime(endDateTime);"},{"lineNumber":109,"author":{"gitID":"kengsengg"},"content":"        event.setEnd(end);"},{"lineNumber":110,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":111,"author":{"gitID":"kengsengg"},"content":"        service.events().insert(\"primary\", event).execute();"},{"lineNumber":112,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":114,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":"     * Removes an event on the Google Calendar"},{"lineNumber":116,"author":{"gitID":"kengsengg"},"content":"     * @throws IOException"},{"lineNumber":117,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"kengsengg"},"content":"    public void removeEvent(String id) throws IOException {"},{"lineNumber":119,"author":{"gitID":"kengsengg"},"content":"        Calendar service \u003d getCalendarService();"},{"lineNumber":120,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":121,"author":{"gitID":"kengsengg"},"content":"        service.events().delete(\"primary\", id).execute();"},{"lineNumber":122,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":124,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"kengsengg"},"content":"     * Sets the required format for start time"},{"lineNumber":126,"author":{"gitID":"kengsengg"},"content":"     * @param toAdd appointment details provided by the user"},{"lineNumber":127,"author":{"gitID":"kengsengg"},"content":"     * @return the start time in the required format"},{"lineNumber":128,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"kengsengg"},"content":"    private String formattedStartDateTime(Appointment toAdd) {"},{"lineNumber":130,"author":{"gitID":"kengsengg"},"content":"        String date \u003d toAdd.getDate();"},{"lineNumber":131,"author":{"gitID":"kengsengg"},"content":"        String startTime \u003d toAdd.getStartTime();"},{"lineNumber":132,"author":{"gitID":"kengsengg"},"content":"        return (date.substring(4, 8)).concat(\"-\").concat(date.substring(2, 4)).concat(\"-\")"},{"lineNumber":133,"author":{"gitID":"kengsengg"},"content":"                .concat(date.substring(0, 2)).concat(\"T\").concat(startTime.substring(0, 2))"},{"lineNumber":134,"author":{"gitID":"kengsengg"},"content":"                .concat(\":\").concat(startTime.substring(2, 4)).concat(\":00+08:00\");"},{"lineNumber":135,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":137,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"kengsengg"},"content":"     * Sets the required format for end time"},{"lineNumber":139,"author":{"gitID":"kengsengg"},"content":"     * @param toAdd appointment details provided by the user"},{"lineNumber":140,"author":{"gitID":"kengsengg"},"content":"     * @return the end time in the required format"},{"lineNumber":141,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"kengsengg"},"content":"    private String formattedEndDateTime(Appointment toAdd) {"},{"lineNumber":143,"author":{"gitID":"kengsengg"},"content":"        String date \u003d toAdd.getDate();"},{"lineNumber":144,"author":{"gitID":"kengsengg"},"content":"        String endTime \u003d toAdd.getEndTime();"},{"lineNumber":145,"author":{"gitID":"kengsengg"},"content":"        return (date.substring(4, 8)).concat(\"-\").concat(date.substring(2, 4)).concat(\"-\")"},{"lineNumber":146,"author":{"gitID":"kengsengg"},"content":"                .concat(date.substring(0, 2)).concat(\"T\").concat(endTime.substring(0, 2))"},{"lineNumber":147,"author":{"gitID":"kengsengg"},"content":"                .concat(\":\").concat(endTime.substring(2, 4)).concat(\":00+08:00\");"},{"lineNumber":148,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":150,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":147,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/AddSubjectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_ENGLISH;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":" * for AddSubjectCommand."},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"public class AddSubjectCommandTest {"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d result.append(AddSubjectCommand.MESSAGE_ADD_SUBJECT_SUCCESS)"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getName()).append(AddSubjectCommand.MESSAGE_NEW_SUBJECTS)"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getSubjects()).toString();"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandSuccess(addSubjectCommand, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_fieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"                .withTags(VALID_TAG_HUSBAND).withRemark(VALID_REMARK).withSubjects(VALID_SUBJECT_ENGLISH).build();"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).withRemark(VALID_REMARK)"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"                .withSubjects(VALID_SUBJECT_ENGLISH).build();"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d result.append(AddSubjectCommand.MESSAGE_ADD_SUBJECT_SUCCESS)"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getName()).append(AddSubjectCommand.MESSAGE_NEW_SUBJECTS)"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getSubjects()).toString();"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandSuccess(addSubjectCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws IOException {"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d result.append(AddSubjectCommand.MESSAGE_ADD_SUBJECT_SUCCESS)"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getName()).append(AddSubjectCommand.MESSAGE_NEW_SUBJECTS)"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getSubjects()).toString();"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandSuccess(addSubjectCommand, model, expectedMessage, expectedModel);"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB)"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"                .withSubjects(VALID_SUBJECT_ENGLISH).build();"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withSubjects(VALID_SUBJECT_ENGLISH).build());"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d result.append(AddSubjectCommand.MESSAGE_ADD_SUBJECT_SUCCESS)"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getName()).append(AddSubjectCommand.MESSAGE_NEW_SUBJECTS)"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"                .append(editedPerson.getSubjects()).toString();"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"        //assertCommandSuccess(addSubjectCommand, model, expectedMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(addSubjectCommand, model, AddSubjectCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicatePersonFilteredList_failure() throws IOException {"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(addSubjectCommand, model, AddSubjectCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(addSubjectCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"     * but smaller than size of address book"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws IOException {"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(addSubjectCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"        // execution failed -\u003e addSubjectCommand not pushed into undoRedoStack"},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(addSubjectCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":200,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":202,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"    public void equals() throws Exception {"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":"        final AddSubjectCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":205,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":206,"author":{"gitID":"TeyXinHui"},"content":"        // same values -\u003e returns true"},{"lineNumber":207,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":208,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":210,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":211,"author":{"gitID":"TeyXinHui"},"content":"        // same object -\u003e returns true"},{"lineNumber":212,"author":{"gitID":"TeyXinHui"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":213,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":214,"author":{"gitID":"TeyXinHui"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":215,"author":{"gitID":"TeyXinHui"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":216,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":217,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":218,"author":{"gitID":"TeyXinHui"},"content":"        // null -\u003e returns false"},{"lineNumber":219,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":220,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":221,"author":{"gitID":"TeyXinHui"},"content":"        // different types -\u003e returns false"},{"lineNumber":222,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":223,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":224,"author":{"gitID":"TeyXinHui"},"content":"        // different index -\u003e returns false"},{"lineNumber":225,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new AddSubjectCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":226,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":227,"author":{"gitID":"TeyXinHui"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":228,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new AddSubjectCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":229,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":231,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"TeyXinHui"},"content":"     * Returns an {@code AddSubjectCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":233,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"TeyXinHui"},"content":"    private AddSubjectCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":235,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand addSubjectCommand \u003d new AddSubjectCommand(index, descriptor);"},{"lineNumber":236,"author":{"gitID":"TeyXinHui"},"content":"        addSubjectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":237,"author":{"gitID":"TeyXinHui"},"content":"        return addSubjectCommand;"},{"lineNumber":238,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":240,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"chuakunhong":2,"TeyXinHui":207,"-":31}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"                + \", number of appointments \" + data.getAppointmentList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":2,"-":18}},{"path":"src/main/java/seedu/address/commons/events/ui/AppointmentPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import seedu.address.ui.AppointmentCard;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":" * Represents a selection change in the Appointment List Panel"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"public class AppointmentPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    private final AppointmentCard newSelection;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    public AppointmentPanelSelectionChangedEvent(AppointmentCard newSelection) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":""}],"authorContributionMap":{"kengsengg":12,"-":10}},{"path":"src/main/java/seedu/address/commons/events/ui/DisplayCalendarRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":" * Indicates a request to display Calendar"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"public class DisplayCalendarRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    private String parameter;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    public DisplayCalendarRequestEvent(String parameter) {"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"        this.parameter \u003d parameter;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"        return this.parameter;"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":17,"-":4}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":4,"-":29}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_TAG, PREFIX_SUBJECT, PREFIX_REMARK);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        if (!(argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_NRIC))"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"            Set\u003cSubject\u003e subjectList \u003d ParserUtil.parseSubjects(argMultimap.getAllValues(PREFIX_SUBJECT));"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"            Remark remark;"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"            Cca cca \u003d ParserUtil.parseCca(\"\", \"\");"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"            InjuriesHistory injuriesHistory \u003d ParserUtil.parseInjuriesHistory(\" \");"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"            NextOfKin nextOfKin \u003d ParserUtil.parseNextOfKin(\" \", \" \", \" \", \" \");"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"            if (!(argMultimap.getValue(PREFIX_REMARK)).isPresent()) {"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"                remark \u003d ParserUtil.parseRemark(\" \");"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"            } else {"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"                remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"            Person person \u003d new Person(name, nric, tagList, subjectList, remark, cca, injuriesHistory, nextOfKin);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":20,"TeyXinHui":3,"-":42}},{"path":"src/main/java/seedu/address/commons/events/ui/ThemeSwitchRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"johnnychanjx"},"content":"//@@author johnnychanjx"},{"lineNumber":7,"author":{"gitID":"johnnychanjx"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"johnnychanjx"},"content":" * Indicates that a theme switch is called."},{"lineNumber":9,"author":{"gitID":"johnnychanjx"},"content":" */"},{"lineNumber":10,"author":{"gitID":"johnnychanjx"},"content":"public class ThemeSwitchRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"johnnychanjx"},"content":"    public final String themeToChangeTo;"},{"lineNumber":12,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":13,"author":{"gitID":"johnnychanjx"},"content":"    public ThemeSwitchRequestEvent(String themeToChangeTo) {"},{"lineNumber":14,"author":{"gitID":"johnnychanjx"},"content":"        this.themeToChangeTo \u003d themeToChangeTo;"},{"lineNumber":15,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":17,"author":{"gitID":"johnnychanjx"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"johnnychanjx"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"johnnychanjx"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"johnnychanjx"},"content":"}"},{"lineNumber":22,"author":{"gitID":"johnnychanjx"},"content":""}],"authorContributionMap":{"johnnychanjx":17,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    public boolean arePrefixesPresent(Prefix... prefixes) {"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e this.getValue(prefix).isPresent());"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":11,"-":60}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.AddInjuriesHistoryCommand;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.AddRemarkCommand;"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.AddSubjectCommand;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.CcaCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.DeleteInjuriesHistoryCommand;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.DeleteRemarkCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.NextOfKinCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.StreamCommand;"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.TagDeleteCommand;"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.TagReplaceCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        case CcaCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"            return new CcaCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        case AddInjuriesHistoryCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"            return new AddInjuriesHistoryCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        case DeleteInjuriesHistoryCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"            return new DeleteInjuriesHistoryCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        case AddSubjectCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"            return new AddSubjectCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        case TagDeleteCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        case TagDeleteCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"            return new TagDeleteCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        case TagReplaceCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        case TagReplaceCommand.COMMAND_ALIAS:"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"            return new TagReplaceCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":112,"author":{"gitID":"kengsengg"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"kengsengg"},"content":"        case AddAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"kengsengg"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"        case NextOfKinCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"            return new NextOfKinCommandParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        case AddRemarkCommand.COMMAND_WORD:"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"            return new AddRemarkCommandParser().parse(arguments);"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        case DeleteRemarkCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"            return new DeleteRemarkCommandParser().parse(arguments);"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"        case StreamCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"            return new StreamCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":132,"author":{"gitID":"kengsengg"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"kengsengg"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"kengsengg"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":154,"author":{"gitID":"kengsengg"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":29,"kengsengg":13,"TeyXinHui":13,"-":106}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":" * Parses input arguments and creates a new AppointmentCommand object"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"     * Parses the given {@code String} of arguments in the context of the AppointmentCommand"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"     * and returns an AppointmentCommand object for execution."},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INFO, PREFIX_DATE, PREFIX_START_TIME,"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"                        PREFIX_END_TIME);"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"        if (!(argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_INFO, PREFIX_DATE, PREFIX_START_TIME,"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"                PREFIX_END_TIME)) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"            String name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get().toString();"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"            String info \u003d ParserUtil.parseInfo(argMultimap.getValue(PREFIX_INFO)).get();"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"            String date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"            String startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"            String endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"            Appointment appointment \u003d new Appointment(name, info, date, startTime, endTime);"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"            return new AddAppointmentCommand(appointment);"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":64}},{"path":"src/main/java/seedu/address/logic/parser/AddRemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.AddRemarkCommand;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"public class AddRemarkCommandParser implements Parser\u003cAddRemarkCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public AddRemarkCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_REMARK)) {"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemarkCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemarkCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"        if (ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get().toString().isEmpty()) {"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRemarkCommand.MESSAGE_USAGE)));"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).ifPresent(editPersonDescriptor::setRemark);"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        return new AddRemarkCommand(index, editPersonDescriptor);"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":42,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/CcaCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"import org.junit.Assert;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"public class CcaCommandTest {"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public void constructor_nullIndexAndPerson_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"        new CcaCommand(null, null);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        new CcaCommand(INDEX_FIRST_PERSON, null);"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        new CcaCommand(null, new EditPersonDescriptor());"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(CcaCommand.MESSAGE_REMARK_PERSON_SUCCESS, editedPerson.getCca(),"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"                editedPerson.getName());"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandSuccess(ccaCommand, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d personInList.build();"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"                .withCca(\"Basketball\", \"Member\").build();"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(CcaCommand.MESSAGE_REMARK_PERSON_SUCCESS, editedPerson.getCca(),"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"                editedPerson.getName());"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).build();"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder().withCca(\"Basketball\", \"Member\").build());"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"        String expectedMessage \u003d String.format(CcaCommand.MESSAGE_REMARK_PERSON_SUCCESS, editedPerson.getCca(),"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"                editedPerson.getName());"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws IOException {"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(ccaCommand, model, CcaCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_duplicatePersonFilteredList_failure() throws IOException {"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(ccaCommand, model, CcaCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws IOException {"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"                .withCca(\"Basketball\", \"Member\").build();"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(ccaCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"     * but smaller than size of address book"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws IOException {"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"                new EditPersonDescriptorBuilder().withCca(\"Basketball\", \"Member\").build());"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"        assertCommandFailure(ccaCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"                .withCca(\"Basketball\", \"Member\").build();"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"        // execution failed -\u003e ccaCommand not pushed into undoRedoStack"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(ccaCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"            Assert.fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"            Assert.fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"            assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IOException e) {"},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":"            Assert.fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":"    public void equals() throws Exception {"},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":"        final CcaCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"        // same values -\u003e returns true"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"        // same object -\u003e returns true"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"        Assert.assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":199,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":200,"author":{"gitID":"TeyXinHui"},"content":"        // null -\u003e returns false"},{"lineNumber":201,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":202,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"        // different types -\u003e returns false"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":205,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":206,"author":{"gitID":"TeyXinHui"},"content":"        // different index -\u003e returns false"},{"lineNumber":207,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new CcaCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":208,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":210,"author":{"gitID":"TeyXinHui"},"content":"        assertFalse(standardCommand.equals(new CcaCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":211,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":213,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"TeyXinHui"},"content":"     * Returns an {@code CcaCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":215,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"TeyXinHui"},"content":"    private CcaCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":217,"author":{"gitID":"TeyXinHui"},"content":"        CcaCommand ccaCommand \u003d new CcaCommand(index, descriptor);"},{"lineNumber":218,"author":{"gitID":"TeyXinHui"},"content":"        ccaCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":219,"author":{"gitID":"TeyXinHui"},"content":"        return ccaCommand;"},{"lineNumber":220,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":222,"author":{"gitID":"TeyXinHui"},"content":"}"}],"authorContributionMap":{"TeyXinHui":190,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/DeleteInjuriesHistoryCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INJURIES_HISTORY;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.DeleteInjuriesHistoryCommand;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"public class DeleteInjuriesHistoryCommandParser implements Parser\u003cDeleteInjuriesHistoryCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    public DeleteInjuriesHistoryCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INJURIES_HISTORY);"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_INJURIES_HISTORY)) {"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"                                    DeleteInjuriesHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"                                    DeleteInjuriesHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        if (ParserUtil.parseInjuriesHistory(argMultimap.getValue(PREFIX_INJURIES_HISTORY)).get().toString().isEmpty()) {"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"                                                    DeleteInjuriesHistoryCommand.MESSAGE_USAGE)));"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseInjuriesHistory(argMultimap.getValue(PREFIX_INJURIES_HISTORY))"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"                    .ifPresent(editPersonDescriptor::setInjuriesHistory);"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        return new DeleteInjuriesHistoryCommand(index, editPersonDescriptor);"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":48,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddSubjectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.AddSubjectCommand;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":" * Parses input arguments and creates a new AddSubjectCommand object"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"public class AddSubjectCommandParser implements Parser\u003cAddSubjectCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"     * Parses the given {@code String} of arguments in the context of the EditSubjectCommand"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"     * and returns an EditSubjectCommand object for execution."},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    public AddSubjectCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_SUBJECT);"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        Index index;"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSubjectCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"            parseSubjectsForEdit(argMultimap.getAllValues(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubjects);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"            throw new ParseException(AddSubjectCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        return new AddSubjectCommand(index, editPersonDescriptor);"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject\u003e} if {@code subjects} is non-empty."},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"     * If {@code subjects} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"     * {@code Set\u003cSubject\u003e} containing zero subjects."},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"    private Optional\u003cSet\u003cSubject\u003e\u003e parseSubjectsForEdit(Collection\u003cString\u003e subjects) throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        assert subjects !\u003d null;"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        if (subjects.isEmpty()) {"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"            return Optional.empty();"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        Collection\u003cString\u003e subjectSet \u003d subjects.size() \u003d\u003d 1 \u0026\u0026 subjects.contains(\"\")"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"                ? Collections.emptySet() : subjects;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"        return Optional.of(ParserUtil.parseSubjects(subjectSet));"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":1,"TeyXinHui":60,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import java.util.LinkedList;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import com.google.common.collect.Iterables;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"     * Parses a {@code String nric} into a {@code Nric}."},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"     * @throws IllegalValueException if the given {@code nric} is invalid."},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"    public static Nric parseNric(String nric) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(nric);"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"        String trimmedNric \u003d nric.trim();"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"        if (!Nric.isValidNric(trimmedNric)) {"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"        return new Nric(trimmedNric);"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"     * Parses a {@code Optional\u003cString\u003e nric} into an {@code Optional\u003cNric\u003e} if {@code nric} is present."},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"    public static Optional\u003cNric\u003e parseNric(Optional\u003cString\u003e nric) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(nric);"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        return nric.isPresent() ? Optional.of(parseNric(nric.get())) : Optional.empty();"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code List\u003cTag\u003e}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"    public static List\u003cTag\u003e parseTagsForReplacement(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(tags);"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"        final List\u003cTag\u003e tagSet \u003d new LinkedList\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"     * Splits a {@code String subjects} into {@code String subjectName} and {@code String subjectGrade}"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"     * Parses {@code String subjectName} and {@code String subjectGrade}into a {@code Subject}."},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"     * Add {@code Subject} into a {@code Set\u003cSubject\u003e subjectSet}."},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"     * @throws IllegalValueException if the given {@code subjects} is invalid"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"    public static void parseSubject(Collection\u003cString\u003e subjects, Set\u003cSubject\u003e subjectSet) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subjects);"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"        String subjectsStr \u003d Iterables.get(subjects, 0);"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"        String[] splitSubjectStr \u003d subjectsStr.trim().split(\"\\\\s+\");"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"        Subject subjectToAdd;"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"        for (int i \u003d 0; i \u003c splitSubjectStr.length; i++) {"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"            String subjectName \u003d splitSubjectStr[i];"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"            if (!Subject.isValidSubjectName(subjectName)) {"},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"                throw new IllegalValueException(Subject.MESSAGE_SUBJECT_NAME_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"            i +\u003d 1;"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"            String subjectGrade;"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"            if (i \u003e\u003d splitSubjectStr.length) {"},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"                throw new IllegalValueException(Subject.MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"            } else {"},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"                subjectGrade \u003d splitSubjectStr[i];"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"            if (!Subject.isValidSubjectGrade(subjectGrade)) {"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"                throw new IllegalValueException(Subject.MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"            subjectToAdd \u003d new Subject(subjectName, subjectGrade);"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject s : subjectSet) {"},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":"                if (s.subjectName.equals(subjectToAdd.subjectName)) {"},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"                    throw new IllegalValueException(Subject.MESSAGE_DUPLICATE_SUBJECT);"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"            subjectSet.add(new Subject(subjectName, subjectGrade));"},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":"     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject}."},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":"    public static Set\u003cSubject\u003e parseSubjects(Collection\u003cString\u003e subjects) throws IllegalValueException {"},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subjects);"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e subjectSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"        if (subjects.size() \u003d\u003d 1) {"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"            parseSubject(subjects, subjectSet);"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"        return subjectSet;"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"chuakunhong"},"content":"     * Parses a {@code String remark} into a {@code Remark}."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"chuakunhong"},"content":"    public static Remark parseRemark(String remark) {"},{"lineNumber":204,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":205,"author":{"gitID":"chuakunhong"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":206,"author":{"gitID":"chuakunhong"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":207,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":209,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"chuakunhong"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"chuakunhong"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) {"},{"lineNumber":214,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":215,"author":{"gitID":"chuakunhong"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":216,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":218,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code String info} into a {@code String}."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":221,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"kengsengg"},"content":"    public static String parseInfo(String info) {"},{"lineNumber":223,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(info);"},{"lineNumber":224,"author":{"gitID":"kengsengg"},"content":"        String trimmedInfo \u003d info.trim();"},{"lineNumber":225,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":226,"author":{"gitID":"kengsengg"},"content":"        return trimmedInfo;"},{"lineNumber":227,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":229,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e info} into an {@code Optional\u003cString\u003e} if {@code info} is present."},{"lineNumber":231,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"kengsengg"},"content":"    public static Optional\u003cString\u003e parseInfo (Optional\u003cString\u003e info) {"},{"lineNumber":233,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(info);"},{"lineNumber":234,"author":{"gitID":"kengsengg"},"content":"        return info.isPresent() ? Optional.of(parseInfo(info.get())) : Optional.empty();"},{"lineNumber":235,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":237,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code String date} into a {@code String}."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":241,"author":{"gitID":"kengsengg"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":242,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"kengsengg"},"content":"    public static String parseDate(String date) throws IllegalValueException {"},{"lineNumber":244,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(date);"},{"lineNumber":245,"author":{"gitID":"kengsengg"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":246,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentDate(trimmedDate)) {"},{"lineNumber":247,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_DATE_CONSTRAINTS);"},{"lineNumber":248,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"kengsengg"},"content":"        return new String(trimmedDate);"},{"lineNumber":250,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":252,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cString\u003e} if {@code date} is present."},{"lineNumber":254,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"kengsengg"},"content":"    public static Optional\u003cString\u003e parseDate (Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":256,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(date);"},{"lineNumber":257,"author":{"gitID":"kengsengg"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":258,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":260,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code String startTime} into a {@code String}."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":264,"author":{"gitID":"kengsengg"},"content":"     * @throws IllegalValueException if the given {@code startTime} is invalid."},{"lineNumber":265,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"kengsengg"},"content":"    public static String parseStartTime(String startTime) throws IllegalValueException {"},{"lineNumber":267,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(startTime);"},{"lineNumber":268,"author":{"gitID":"kengsengg"},"content":"        String trimmedStartTime \u003d startTime.trim();"},{"lineNumber":269,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentStartTime(trimmedStartTime)) {"},{"lineNumber":270,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_START_TIME_CONSTRAINTS);"},{"lineNumber":271,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"kengsengg"},"content":"        return new String(trimmedStartTime);"},{"lineNumber":273,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":275,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e startTime} into an {@code Optional\u003cString\u003e} if {@code startTime} is present."},{"lineNumber":277,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"kengsengg"},"content":"    public static Optional\u003cString\u003e parseStartTime (Optional\u003cString\u003e startTime) throws IllegalValueException {"},{"lineNumber":279,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(startTime);"},{"lineNumber":280,"author":{"gitID":"kengsengg"},"content":"        return startTime.isPresent() ? Optional.of(parseStartTime(startTime.get())) : Optional.empty();"},{"lineNumber":281,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":283,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code String endTime} into a {@code String}."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":286,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":287,"author":{"gitID":"kengsengg"},"content":"     * @throws IllegalValueException if the given {@code endTime} is invalid."},{"lineNumber":288,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"kengsengg"},"content":"    public static String parseEndTime(String endTime) throws IllegalValueException {"},{"lineNumber":290,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(endTime);"},{"lineNumber":291,"author":{"gitID":"kengsengg"},"content":"        String trimmedEndTime \u003d endTime.trim();"},{"lineNumber":292,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentEndTime(trimmedEndTime)) {"},{"lineNumber":293,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_END_TIME_CONSTRAINTS);"},{"lineNumber":294,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"kengsengg"},"content":"        return new String(trimmedEndTime);"},{"lineNumber":296,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":298,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"kengsengg"},"content":"     * Parses a {@code Optional\u003cString\u003e endTime} into an {@code Optional\u003cString\u003e} if {@code endTime} is present."},{"lineNumber":300,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"kengsengg"},"content":"    public static Optional\u003cString\u003e parseEndTime (Optional\u003cString\u003e endTime) throws IllegalValueException {"},{"lineNumber":302,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(endTime);"},{"lineNumber":303,"author":{"gitID":"kengsengg"},"content":"        return endTime.isPresent() ? Optional.of(parseEndTime(endTime.get())) : Optional.empty();"},{"lineNumber":304,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":309,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"chuakunhong"},"content":"    public static Cca parseCca(String cca, String pos) {"},{"lineNumber":313,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(cca);"},{"lineNumber":314,"author":{"gitID":"chuakunhong"},"content":"        String trimmedCca \u003d cca.trim();"},{"lineNumber":315,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":316,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(pos);"},{"lineNumber":317,"author":{"gitID":"chuakunhong"},"content":"        String trimmedPos \u003d pos.trim();"},{"lineNumber":318,"author":{"gitID":"chuakunhong"},"content":"        return new Cca(trimmedCca, trimmedPos);"},{"lineNumber":319,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":324,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":325,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":326,"author":{"gitID":"chuakunhong"},"content":"    public static Optional\u003cCca\u003e parseCca(Optional\u003cString\u003e cca, Optional\u003cString\u003e pos) {"},{"lineNumber":327,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(cca);"},{"lineNumber":328,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(pos);"},{"lineNumber":329,"author":{"gitID":"chuakunhong"},"content":"        return (cca.isPresent() \u0026\u0026 pos.isPresent()) ? Optional.of(parseCca(cca.get(), pos.get())) : Optional.empty();"},{"lineNumber":330,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":335,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":337,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":338,"author":{"gitID":"chuakunhong"},"content":"    public static InjuriesHistory parseInjuriesHistory(String injuriesHistory) {"},{"lineNumber":339,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(injuriesHistory);"},{"lineNumber":340,"author":{"gitID":"chuakunhong"},"content":"        String trimmedInjuriesHistory \u003d injuriesHistory.trim();"},{"lineNumber":341,"author":{"gitID":"chuakunhong"},"content":"        return new InjuriesHistory(trimmedInjuriesHistory);"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":345,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":346,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":347,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":348,"author":{"gitID":"chuakunhong"},"content":"    public static Optional\u003cInjuriesHistory\u003e parseInjuriesHistory(Optional\u003cString\u003e injuriesHistory) {"},{"lineNumber":349,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(injuriesHistory);"},{"lineNumber":350,"author":{"gitID":"chuakunhong"},"content":"        return injuriesHistory.isPresent() ? Optional.of(parseInjuriesHistory(injuriesHistory.get()))"},{"lineNumber":351,"author":{"gitID":"chuakunhong"},"content":"                : Optional.empty();"},{"lineNumber":352,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":355,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":356,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":357,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":358,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":359,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":360,"author":{"gitID":"chuakunhong"},"content":"    public static NextOfKin parseNextOfKin(String name, String phone, String email, String remark)"},{"lineNumber":361,"author":{"gitID":"chuakunhong"},"content":"            throws IllegalValueException {"},{"lineNumber":362,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":364,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(phone);"},{"lineNumber":365,"author":{"gitID":"chuakunhong"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":366,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(email);"},{"lineNumber":367,"author":{"gitID":"chuakunhong"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":368,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":369,"author":{"gitID":"chuakunhong"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":370,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":371,"author":{"gitID":"chuakunhong"},"content":"        return new NextOfKin(trimmedName, trimmedPhone, trimmedEmail, trimmedRemark);"},{"lineNumber":372,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":375,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":376,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":377,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":378,"author":{"gitID":"chuakunhong"},"content":"    public static Optional\u003cNextOfKin\u003e parseNextOfKin(Optional\u003cString\u003e name, Optional\u003cString\u003e phone,"},{"lineNumber":379,"author":{"gitID":"chuakunhong"},"content":"                                                     Optional\u003cString\u003e email, Optional\u003cString\u003e remark)"},{"lineNumber":380,"author":{"gitID":"chuakunhong"},"content":"                                                    throws IllegalValueException {"},{"lineNumber":381,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(name);"},{"lineNumber":382,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(phone);"},{"lineNumber":383,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(email);"},{"lineNumber":384,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":385,"author":{"gitID":"chuakunhong"},"content":"        if (!email.isPresent()) {"},{"lineNumber":386,"author":{"gitID":"chuakunhong"},"content":"            Optional\u003cString\u003e na \u003d Optional.of(\"N.A\");"},{"lineNumber":387,"author":{"gitID":"chuakunhong"},"content":"            return name.isPresent() ? Optional.of(parseNextOfKin(name.get(), phone.get(), na.get(), remark.get()))"},{"lineNumber":388,"author":{"gitID":"chuakunhong"},"content":"                    : Optional.empty();"},{"lineNumber":389,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":390,"author":{"gitID":"chuakunhong"},"content":"        return name.isPresent() ? Optional.of(parseNextOfKin(name.get(), phone.get(), email.get(), remark.get()))"},{"lineNumber":391,"author":{"gitID":"chuakunhong"},"content":"                : Optional.empty();"},{"lineNumber":392,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":393,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":103,"TeyXinHui":57,"kengsengg":83,"-":150}},{"path":"src/main/java/seedu/address/logic/parser/StreamCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.StreamCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":" * Parses input arguments and creates a new StreamCommand object"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"public class StreamCommandParser implements Parser\u003cStreamCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"    public StreamCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"        Index targetIndex;"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"            targetIndex \u003d ParserUtil.parseIndex(nameKeywords[0]);"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        if (nameKeywords.length !\u003d 2 || !nameKeywords[1].matches(\"-?\\\\d+\")) {"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StreamCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        int type \u003d Integer.parseInt(nameKeywords[1]);"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"        return new StreamCommand(targetIndex, type);"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":36,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_CCA \u003d new Prefix(\"cca/\");"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_CCA_POSITION \u003d new Prefix(\"pos/\");"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_INJURIES_HISTORY \u003d new Prefix(\"injuries/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"    public static final Prefix PREFIX_NOK \u003d new Prefix(\"nok/\");"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"sub/\");"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    public static final Prefix PREFIX_INFO \u003d new Prefix(\"i/\");"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":8,"TeyXinHui":1,"kengsengg":4,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/NextOfKinCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.model.person.Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.MESSAGE_REMARK_CONSTRAINTS;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.isValidEmail;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.model.person.NextOfKin.isValidName;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.isValidPhone;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.NextOfKin.isValidRemark;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.NextOfKinCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"public class NextOfKinCommandParser implements Parser\u003cNextOfKinCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    public NextOfKinCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_REMARK);"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NextOfKinCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        if (!(argMultimap.arePrefixesPresent(PREFIX_NAME, PREFIX_PHONE, PREFIX_REMARK))) {"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NextOfKinCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseNextOfKin(argMultimap.getValue(PREFIX_NAME),"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"                        argMultimap.getValue(PREFIX_PHONE),"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"                        argMultimap.getValue(PREFIX_EMAIL),"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"                        argMultimap.getValue(PREFIX_REMARK)).ifPresent(editPersonDescriptor::setNextOfKin);"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"        if (argMultimap.getValue(PREFIX_NAME).get().isEmpty() \u0026\u0026 argMultimap.getValue(PREFIX_PHONE).get().isEmpty()"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 argMultimap.getValue(PREFIX_NAME).get().isEmpty()) {"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(NextOfKinCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        if (!isValidName(argMultimap.getValue(PREFIX_NAME).get())) {"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        if (!isValidPhone(argMultimap.getValue(PREFIX_PHONE).get())) {"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"            if (!isValidEmail(argMultimap.getValue(PREFIX_EMAIL).get())) {"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"                throw new ParseException(MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        if (!isValidRemark(argMultimap.getValue(PREFIX_REMARK).get())) {"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"        return new NextOfKinCommand(index, editPersonDescriptor);"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":78,"TeyXinHui":2,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/DeleteRemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.DeleteRemarkCommand;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"public class DeleteRemarkCommandParser implements Parser\u003cDeleteRemarkCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"    public DeleteRemarkCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_REMARK)) {"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRemarkCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        Index index;"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRemarkCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        if (ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get().toString().isEmpty()) {"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"                                                    DeleteRemarkCommand.MESSAGE_USAGE)));"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).ifPresent(editPersonDescriptor::setRemark);"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        return new DeleteRemarkCommand(index, editPersonDescriptor);"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":43,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.ThemeColourUtil.getThemeHashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"johnnychanjx"},"content":"//@@author johnnychanjx"},{"lineNumber":13,"author":{"gitID":"johnnychanjx"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"johnnychanjx"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":15,"author":{"gitID":"johnnychanjx"},"content":" */"},{"lineNumber":16,"author":{"gitID":"johnnychanjx"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":18,"author":{"gitID":"johnnychanjx"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"johnnychanjx"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":20,"author":{"gitID":"johnnychanjx"},"content":"     * and returns a ThemeCommand object for execution."},{"lineNumber":21,"author":{"gitID":"johnnychanjx"},"content":"     * @throws ParseException if the user input does not use the expected format"},{"lineNumber":22,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"johnnychanjx"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"johnnychanjx"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"johnnychanjx"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"johnnychanjx"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"johnnychanjx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"johnnychanjx"},"content":"        if (!isValidThemeColour(trimmedArgs)) {"},{"lineNumber":30,"author":{"gitID":"johnnychanjx"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"johnnychanjx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_INVALID_THEME_COLOUR));"},{"lineNumber":32,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":33,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"johnnychanjx"},"content":"        return new ChangeThemeCommand(trimmedArgs);"},{"lineNumber":35,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":37,"author":{"gitID":"johnnychanjx"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"johnnychanjx"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"johnnychanjx"},"content":"     * @param themeColour"},{"lineNumber":40,"author":{"gitID":"johnnychanjx"},"content":"     * @return"},{"lineNumber":41,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"johnnychanjx"},"content":"    private boolean isValidThemeColour(String themeColour) {"},{"lineNumber":43,"author":{"gitID":"johnnychanjx"},"content":"        HashMap\u003cString, String\u003e themes \u003d getThemeHashMap();"},{"lineNumber":44,"author":{"gitID":"johnnychanjx"},"content":"        if (themes.containsKey(themeColour.toLowerCase())) {"},{"lineNumber":45,"author":{"gitID":"johnnychanjx"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"johnnychanjx"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"johnnychanjx"},"content":"            return false;"},{"lineNumber":48,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":50,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"johnnychanjx"},"content":"}"},{"lineNumber":52,"author":{"gitID":"johnnychanjx"},"content":"//@@author"},{"lineNumber":53,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"johnnychanjx":41,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/TagReplaceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.TagReplaceCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"public class TagReplaceCommandParser implements Parser\u003cTagReplaceCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the TagReplaceCommand"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     * and returns an TagReplaceCommand object for execution."},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    public TagReplaceCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagReplaceCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            List\u003cTag\u003e tagSet \u003d ParserUtil.parseTagsForReplacement(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"            return new TagReplaceCommand(tagSet);"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException("},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagReplaceCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":45,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/CcaCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA_POSITION;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.CcaCommand;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"public class CcaCommandParser implements Parser\u003cCcaCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    public CcaCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CCA, PREFIX_CCA_POSITION);"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_CCA, PREFIX_CCA_POSITION)) {"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        if (argMultimap.getValue(PREFIX_CCA).get().isEmpty()"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"                || argMultimap.getValue(PREFIX_CCA_POSITION).get().isEmpty()) {"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, CcaCommand.MESSAGE_USAGE)));"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseCca(argMultimap.getValue(PREFIX_CCA), argMultimap.getValue(PREFIX_CCA_POSITION))"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"                    .ifPresent(editPersonDescriptor::setCca);"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        return new CcaCommand(index, editPersonDescriptor);"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":47,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":" * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":" * and returns an ViewCommand object for execution."},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":" * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"        return new ViewCommand(trimmedArgs);"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":27,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"    private static final String[] ALLOWED_PARAMETERS \u003d {\"name\", \"tag\"};"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    private int arrayCounter \u003d 0;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    private boolean validParameter \u003d false;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"        while (arrayCounter \u003c ALLOWED_PARAMETERS.length) {"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"            if (trimmedArgs.equals(ALLOWED_PARAMETERS[arrayCounter++])) {"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"                validParameter \u003d true;"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"                break;"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"            }"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"        if (!validParameter) {"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"        return new SortCommand(trimmedArgs);"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":40,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_TAG, PREFIX_SUBJECT);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).ifPresent(editPersonDescriptor::setNric);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"            parseSubjectsForEdit(argMultimap.getAllValues(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubjects);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"     * Parses {@code Collection\u003cString\u003e subjects} into a {@code Set\u003cSubject\u003e} if {@code subjects} is non-empty."},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"     * If {@code subjects} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"     * {@code Set\u003cSubject\u003e} containing zero subjects."},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"    private Optional\u003cSet\u003cSubject\u003e\u003e parseSubjectsForEdit(Collection\u003cString\u003e subjects) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"        assert subjects !\u003d null;"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        if (subjects.isEmpty()) {"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"            return Optional.empty();"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        Collection\u003cString\u003e subjectSet \u003d subjects.size() \u003d\u003d 1 \u0026\u0026 subjects.contains(\"\")"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"                ? Collections.emptySet() : subjects;"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        return Optional.of(ParserUtil.parseSubjects(subjectSet));"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":3,"TeyXinHui":21,"-":71}},{"path":"src/main/java/seedu/address/logic/parser/TagDeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.logic.commands.TagDeleteCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"public class TagDeleteCommandParser implements Parser\u003cTagDeleteCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"     * Parses the given {@code String} of arguments in the context of the TagDeleteCommand"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"     * and returns an TagDeleteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"    public TagDeleteCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"            Tag tag \u003d ParserUtil.parseTag(args.trim());"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"            return new TagDeleteCommand(tag);"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagDeleteCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":24,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import seedu.address.commons.events.ui.DisplayCalendarRequestEvent;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":" * Shows the calendar display"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"public class ViewCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Calendar view displayed\";"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"            + \": Shows the Google Calendar page of the gmail ID keyed in by the user.\\n\""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"            + \"Parameters: GMAIL_ID \\n\""},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_WORD + \" edubuddytest\\n\";"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    private final String parameter;"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    public ViewCommand(String parameter) {"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"        this.parameter \u003d parameter;"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"        EventsCenter.getInstance().post(new DisplayCalendarRequestEvent(this.parameter));"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"        return new CommandResult(MESSAGE_VIEW_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":29,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":" * Parses input arguments and creates a new DeleteAppointmentCommand object"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"     * and returns an DeleteAppointmentCommand object for execution."},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"     * @throws ParseException if the user input does not conform with the expected format"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"            return new DeleteAppointmentCommand(index);"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":23,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/AddInjuriesHistoryCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INJURIES_HISTORY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.AddInjuriesHistoryCommand;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.commands.EditPersonDescriptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"public class AddInjuriesHistoryCommandParser implements Parser\u003cAddInjuriesHistoryCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    public AddInjuriesHistoryCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_INJURIES_HISTORY);"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"        if (!argMultimap.arePrefixesPresent(PREFIX_INJURIES_HISTORY)) {"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"                                    AddInjuriesHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"                                    AddInjuriesHistoryCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        if (ParserUtil.parseInjuriesHistory(argMultimap.getValue(PREFIX_INJURIES_HISTORY)).get().toString().isEmpty()) {"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"            throw new ParseException((String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"                                        AddInjuriesHistoryCommand.MESSAGE_USAGE)));"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"            ParserUtil.parseInjuriesHistory(argMultimap.getValue(PREFIX_INJURIES_HISTORY))"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"                    .ifPresent(editPersonDescriptor::setInjuriesHistory);"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        return new AddInjuriesHistoryCommand(index, editPersonDescriptor);"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":46,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/NextOfKinCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":" * Adds the details of a nextOfKin to an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"public class NextOfKinCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"nok\";"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the Next of Kin details of the person identified\""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            + \" \""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"RELATIONSHIP\\n\""},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_NAME + \"John \""},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_PHONE + \"96784213 \""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"Father\";"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_ADD_NOK_SUCCESS \u003d \"Next of Kin: %1$s\\nPerson: %2$s\";"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"    private final Index index;"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"    private Person personToEdit;"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"    private Person editedPerson;"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    public NextOfKinCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(index);"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        this.index \u003d index;"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"            model.addPage(editedPerson);"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_NOK_SUCCESS, editedPerson.getNextOfKin(),"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"                                                editedPerson.getName()));"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        InjuriesHistory updatedInjuriesHistory \u003d editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"                .orElse(personToEdit.getInjuriesHistory());"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin().orElse(personToEdit.getNextOfKin());"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"                            updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"        // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"        // instanceof handles nulls"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"        if (!(other instanceof NextOfKinCommand)) {"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"        NextOfKinCommand e \u003d (NextOfKinCommand) other;"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":"        return index.equals(e.index)"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":120,"TeyXinHui":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/StreamCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":" * Finds student at the specified index and returns a streaming score based on the streaming type provided."},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"public class StreamCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_WORD \u003d \"stream\";"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds student at the specified index given and \""},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"            + \"returns a streaming score based on the streaming type provided.\\n\""},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"            + \"Parameters: [INDEX] [STREAMING_TYPE]\\n\""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 1\";"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_SELECT_STUDENT_SUCCESS \u003d \"Student: %1$s\";"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_L1R5_SUCCESS \u003d \". L1R5 Score: %1$s\";"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_L1B4A_SUCCESS \u003d \". L1B4A Score: %1$s\";"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_L1B4B_SUCCESS \u003d \". L1B4B Score: %1$s\";"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_L1B4C_SUCCESS \u003d \". L1B4C Score: %1$s\";"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_L1B4D_SUCCESS \u003d \". L1B4D Score: %1$s\";"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    private int type;"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"    public StreamCommand(Index index, int type) {"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        this.type \u003d type;"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"        String message;"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        Person selectedPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        message \u003d scoreCalculation(selectedPerson, type);"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        return new CommandResult(message);"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"     * Returns a {@String result} message according to the subject combination"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"     * of {@Person selectedPerson} and {@int type}."},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"     * @return message to user"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"    public static String scoreCalculation(Person selectedPerson, int type) {"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        String message \u003d \"\";"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        switch (type) {"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"        case(1):"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d selectedPerson.calculateL1R5();"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1R5_SUCCESS;"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"        case(2):"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d selectedPerson.calculateL1B4A();"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4A_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        case(3):"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d selectedPerson.calculateL1B4B();"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4B_SUCCESS;"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        case(4):"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d selectedPerson.calculateL1B4C();"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4C_SUCCESS;"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"        case(5):"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"            score \u003d selectedPerson.calculateL1B4D();"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"            message \u003d MESSAGE_L1B4D_SUCCESS;"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        default:"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"            break;"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"        return result.append(String.format(MESSAGE_SELECT_STUDENT_SUCCESS, selectedPerson.getName()))"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"                .append(String.format(message, score)).toString();"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"                || (other instanceof StreamCommand // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.targetIndex.equals(((StreamCommand) other).targetIndex)"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 (this.type \u003d\u003d (((StreamCommand) other).type))); // state check"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":92,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.ui.CalendarDisplay;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":" * Removes an appointment at the specified index."},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"public class DeleteAppointmentCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_WORD \u003d \"deleteappointment\";"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_ALIAS \u003d \"deleteappt\";"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"            + \": Removes the appointment identified by the index number used in the last appointment listing.\\n\""},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1\\n\";"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Appointment removed: %1$s\";"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"    private Appointment toDelete;"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"    private CalendarDisplay calendarDisplay \u003d new CalendarDisplay();"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"     * Creates a DeleteAppointmentCommand to delete the specified {@code Appointment}"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"    public DeleteAppointmentCommand(Index targetIndex) {"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"    public CommandResult execute() throws CommandException, IOException {"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"        toDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(toDelete);"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"            model.deleteAppointment(toDelete);"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"            getDetails();"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"            deleteEventOnCalendar();"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, getDetails()));"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"        } catch (AppointmentNotFoundException e) {"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"            throw new AssertionError(\"The target appointment cannot be missing\");"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"    private String getDetails() {"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"        return toDelete.getInfo() + \": \" + toDelete.getStartTime() + \" to \" + toDelete.getEndTime() + \" on \""},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"                + toDelete.getDate();"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"    private void deleteEventOnCalendar() throws IOException {"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"        String id \u003d toDelete.getDate() + toDelete.getStartTime() +  toDelete.getEndTime();"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        calendarDisplay.removeEvent(id);"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"                || (other instanceof DeleteAppointmentCommand // instanceof handles nulls"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 toDelete.equals(((DeleteAppointmentCommand) other).toDelete));"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":3,"kengsengg":75,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ThemeSwitchRequestEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"johnnychanjx"},"content":"//@@author johnnychanjx"},{"lineNumber":10,"author":{"gitID":"johnnychanjx"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"johnnychanjx"},"content":" * Changes the EduBuddy colour theme"},{"lineNumber":12,"author":{"gitID":"johnnychanjx"},"content":" */"},{"lineNumber":13,"author":{"gitID":"johnnychanjx"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"johnnychanjx"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":16,"author":{"gitID":"johnnychanjx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Theme changed!\";"},{"lineNumber":17,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":18,"author":{"gitID":"johnnychanjx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the theme to the theme word entered.\\n\""},{"lineNumber":19,"author":{"gitID":"johnnychanjx"},"content":"            + \"Parameters: COLOUR THEME\\n\""},{"lineNumber":20,"author":{"gitID":"johnnychanjx"},"content":"            + \"(Available Themes: dark, light)\\n\""},{"lineNumber":21,"author":{"gitID":"johnnychanjx"},"content":"            + \"Example: \" + COMMAND_WORD + \" dark\\n\";"},{"lineNumber":22,"author":{"gitID":"johnnychanjx"},"content":"    public static final String MESSAGE_INVALID_THEME_COLOUR \u003d \"Invalid theme color. \\n\""},{"lineNumber":23,"author":{"gitID":"johnnychanjx"},"content":"            + \"(Themes: dark, light)\\n\";"},{"lineNumber":24,"author":{"gitID":"johnnychanjx"},"content":"    private final String themeToChangeTo;"},{"lineNumber":25,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":26,"author":{"gitID":"johnnychanjx"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"johnnychanjx"},"content":"     * Creates a ThemeCommand based on the specified themeColour."},{"lineNumber":28,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"johnnychanjx"},"content":"    public ChangeThemeCommand (String themeToChangeTo) {"},{"lineNumber":30,"author":{"gitID":"johnnychanjx"},"content":"        requireNonNull(themeToChangeTo);"},{"lineNumber":31,"author":{"gitID":"johnnychanjx"},"content":"        this.themeToChangeTo \u003d themeToChangeTo;"},{"lineNumber":32,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":34,"author":{"gitID":"johnnychanjx"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"johnnychanjx"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":37,"author":{"gitID":"johnnychanjx"},"content":"        EventsCenter.getInstance().post(new ThemeSwitchRequestEvent(themeToChangeTo));"},{"lineNumber":38,"author":{"gitID":"johnnychanjx"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, themeToChangeTo));"},{"lineNumber":39,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":41,"author":{"gitID":"johnnychanjx"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"johnnychanjx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"johnnychanjx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"johnnychanjx"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"johnnychanjx"},"content":"                \u0026\u0026 themeToChangeTo.equals(((ChangeThemeCommand) other).themeToChangeTo));"},{"lineNumber":46,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"johnnychanjx":39,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/TagDeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":" * Keyword matching is case insensitive."},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"public class TagDeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_WORD \u003d \"tagdelete\";"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_ALIAS \u003d \"td\";"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes specified tag from everyone in the \""},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"            + \"in the address book.\\n\""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"            + \"Parameters: Tag \\n\""},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1A\\n\""},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1A\";"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"    private Tag tagToDelete;"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    public TagDeleteCommand(Tag tagToDelete) {"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"        this.tagToDelete \u003d tagToDelete;"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(tagToDelete);"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"            model.deleteTag(tagToDelete);"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"            throw new AssertionError(\"The target tag cannot be missing\");"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, tagToDelete));"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cTag\u003e lastShownList \u003d addressBook.getTagList();"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"        if (!lastShownList.contains(tagToDelete)) {"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"                || (other instanceof TagDeleteCommand // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.tagToDelete.equals(((TagDeleteCommand) other).tagToDelete)); // state check"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":57,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":" * Sorts all the people in the list by their names in alphabetical order (case insensitive)"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"public class SortCommand extends Command {"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_SUCCESS_SORT_BY_NAME \u003d \"Sorted all persons by name in alphabetical order\";"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_SUCCESS_SORT_BY_TAG \u003d \"Sorted all persons by tag in alphabetical order\";"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the student list by the parameter provided \""},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"            + \"by the user.\\n\""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"            + \"Parameters: KEYWORD (valid keyword: name, tag)\\n\""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_WORD + \" name\\n\";"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"    private final String parameter;"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public SortCommand(String parameter) {"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"        this.parameter \u003d parameter;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"        model.sortPersonList(parameter);"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"        if ((\"name\").equals(parameter)) {"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"            return new CommandResult(MESSAGE_SUCCESS_SORT_BY_NAME);"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"        return new CommandResult(MESSAGE_SUCCESS_SORT_BY_TAG);"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"}],"authorContributionMap":{"kengsengg":34}},{"path":"src/main/java/seedu/address/logic/commands/TagReplaceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":" * Keyword matching is case insensitive."},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":" *"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":" *"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"public class TagReplaceCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"tagreplace\";"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_ALIAS \u003d \"tr\";"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Replace specified tag from everyone in the \""},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"            + \"address book with the intended tag.\" + \"Parameters: Tag \\n\""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"1A \" + PREFIX_TAG + \"2A\\n\""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" \" + PREFIX_TAG + \"1A \" + PREFIX_TAG + \"2A\";"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REPLACE_TAG_SUCCESS \u003d \"Replaced Tag: From %1$s to %2$s\";"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    private List\u003cTag\u003e tagSet \u003d new LinkedList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    private Tag[] tagArray \u003d new Tag[2];"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    public TagReplaceCommand(List\u003cTag\u003e tagSet) {"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(tagSet);"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        this.tagSet \u003d tagSet;"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(tagSet);"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        model.replaceTag(tagSet);"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REPLACE_TAG_SUCCESS, tagArray[0], tagArray[1]));"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"        ReadOnlyAddressBook addressBook \u003d model.getAddressBook();"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        List\u003cTag\u003e lastShownList \u003d addressBook.getTagList();"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"        tagSet.toArray(tagArray);"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"        if (!lastShownList.contains(tagArray[0]) \u0026\u0026 !tagSet.isEmpty()) {"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG_ENTERED);"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":55,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/DeleteInjuriesHistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INJURIES_HISTORY;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.ParserUtil.parseInjuriesHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"public class DeleteInjuriesHistoryCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"deleteinjuries\";"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete injuries history from the \""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            + \"student that you want. \""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_INJURIES_HISTORY + \"INJURIES_HISTORY...\\n\""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_INJURIES_HISTORY + \"Torn Ligament\" + \"\\n\";"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_PERSON_SUCCESS \u003d \"Injuries Deleted: %1$s\\nPerson: %2$s\";"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    private final Index index;"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    private Person personToEdit;"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    private Person editedPerson;"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"    public DeleteInjuriesHistoryCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(index);"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        this.index \u003d index;"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"        this.editPersonDescriptor \u003d editPersonDescriptor;"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"            model.addPage(editedPerson);"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REMARK_PERSON_SUCCESS, editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"                        .get(), personToEdit.getName()));"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor)"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"            throws CommandException {"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse((personToEdit.getRemark()));"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        String[] injuriesHistoryArray \u003d personToEdit.getInjuriesHistory().toString().split(\"\\n\");"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        String updateInjuriesHistory \u003d \"\";"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin().orElse(personToEdit.getNextOfKin());"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"        boolean injuriesHistoryIsFound \u003d false;"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        for (String injuriesHistory : injuriesHistoryArray) {"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"            if (!injuriesHistory.contains(editPersonDescriptor.getInjuriesHistory().get().toString())) {"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"                updateInjuriesHistory \u003d updateInjuriesHistory + injuriesHistory + \"\\n\";"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"            } else {"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"                editPersonDescriptor.setInjuriesHistory(parseInjuriesHistory(injuriesHistory));"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"                injuriesHistoryIsFound \u003d true;"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"        if (injuriesHistoryIsFound) {"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"            InjuriesHistory updatedInjuriesHistory \u003d parseInjuriesHistory(updateInjuriesHistory);"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"            return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"                    updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(\"The target injuriesHistory cannot be missing.\");"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"        // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"            return true;"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"        // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":"        if (!(other instanceof DeleteInjuriesHistoryCommand)) {"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"        DeleteInjuriesHistoryCommand e \u003d (DeleteInjuriesHistoryCommand) other;"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"        return index.equals(e.index)"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":130,"TeyXinHui":1,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to EduBuddy \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"            + \"[\" + PREFIX_TAG + \"TAG] \""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \""},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_SUBJECT + \"SUBJECT_NAME SUBJECT_GRADE...]\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_NRIC + \"S9876543H \""},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_TAG + \"3A \""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_REMARK + \"English Rep \""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_SUBJECT + \"English A2 Tamil A2 AMath B3 Phy A1 EMath A2 Hist A2\\n\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_NRIC + \"S9876543H \""},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_TAG + \"3A \""},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_REMARK + \"English Rep \""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_SUBJECT + \"English A2 Tamil A2 AMath B3 Phy A1 EMath A2 Hist A2\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"            for (Person p : model.getFilteredPersonList()) {"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"                if (toAdd.getNric().equals(p.getNric())) {"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"                    throw new CommandException(\"This NRIC already exists in the address book\");"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            model.addPage(toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":5,"kengsengg":8,"TeyXinHui":8,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/EditPersonDescriptor.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * corresponding field value of the person."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"public class EditPersonDescriptor {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    private Nric nric;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    private Set\u003cSubject\u003e  subjects;"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    private Remark remark;"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    private Cca cca;"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    private InjuriesHistory injuriesHistory;"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"    private NextOfKin nextOfKin;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor() {}"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Copy constructor."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        setName(toCopy.name);"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        setNric(toCopy.nric);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setTags(toCopy.tags);"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"        setSubjects(toCopy.subjects);"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        setRemark(toCopy.remark);"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        setCca(toCopy.cca);"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        setInjuriesHistory(toCopy.injuriesHistory);"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        setNextOfKin(toCopy.nextOfKin);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if at least one field is edited."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean isAnyFieldEdited() {"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        return CollectionUtil.isAnyNonNull(this.name, this.nric, this.tags, this.subjects, this.remark, this.cca,"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"                this.injuriesHistory, this.nextOfKin);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public Optional\u003cName\u003e getName() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(name);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"    public void setNric(Nric nric) {"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"        this.nric \u003d nric;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"    public Optional\u003cNric\u003e getNric() {"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        return Optional.ofNullable(nric);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"    public void setNextOfKin(NextOfKin nextOfKin) {"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        this.nextOfKin \u003d nextOfKin;"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"    public Optional\u003cNextOfKin\u003e getNextOfKin() {"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"        return Optional.ofNullable(nextOfKin);"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"     * Sets {@code subjects} to this object\u0027s {@code subjects}."},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"     * A defensive copy of {@code subjects} is used internally."},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"    public void setSubjects(Set\u003cSubject\u003e subjects) {"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        this.subjects \u003d (subjects !\u003d null) ? new HashSet\u003c\u003e(subjects) : null;"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"     * Sets {@code remarks} to this object\u0027s {@code remarks}."},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"     * A defensive copy of {@code remarks} is used internally."},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"    public void setRemark(Remark remark) {"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d remark;"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"     * Sets {@code remarks} to this object\u0027s {@code remarks}."},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"     * A defensive copy of {@code remarks} is used internally."},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"    public Optional\u003cRemark\u003e getRemark() {"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        return Optional.ofNullable(remark);"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"     * Sets {@code cca} to this object\u0027s {@code cca}."},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"     * A defensive copy of {@code cca} is used internally."},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"    public void setCca(Cca cca) {"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"        this.cca \u003d cca;"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"     * Sets {@code cca} to this object\u0027s {@code cca}."},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"     * A defensive copy of {@code cca} is used internally."},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"    public Optional\u003cCca\u003e getCca() {"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"        return Optional.ofNullable(cca);"},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":"     * Sets {@code injuriesHistory} to this object\u0027s {@code injuriesHistory}."},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"     * A defensive copy of {@code injuriesHistory} is used internally."},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"    public Optional\u003cInjuriesHistory\u003e getInjuriesHistory() {"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"        return Optional.ofNullable(injuriesHistory);"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"     * Sets {@code injuriesHistory} to this object\u0027s {@code injuriesHistory}."},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":"     * A defensive copy of {@code injuriesHistory} is used internally."},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"chuakunhong"},"content":"    public void setInjuriesHistory(InjuriesHistory injuriesHistory) {"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":"        this.injuriesHistory \u003d injuriesHistory;"},{"lineNumber":152,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"     * Returns an unmodifiable subject set, which throws {@code UnsupportedOperationException}"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"     * Returns {@code Optional#empty()} if {@code subjects} is null."},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"    public Optional\u003cSet\u003cSubject\u003e\u003e getSubjects() {"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"        return (subjects !\u003d null) ? Optional.of(Collections.unmodifiableSet(subjects)) : Optional.empty();"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"     * Returns an unmodifiable subject set, which throws {@code UnsupportedOperationException}"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"     * if modification is attempted."},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"     * Returns {@code Optional#empty()} if {@code subjects} is null."},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"    public Set\u003cSubject\u003e getSubjectsAsSet() {"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"        return (subjects !\u003d null) ? Collections.unmodifiableSet(subjects) : Collections.emptySet();"},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":186,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return getName().equals(e.getName())"},{"lineNumber":190,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 getNric().equals(e.getNric())"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 getSubjects().equals(e.getSubjects());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":85,"TeyXinHui":31,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/AddRemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.ParserUtil.parseRemark;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":" * Adds a remark to an existing person in the address book."},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"public class AddRemarkCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"addremark\";"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds remarks to the student that you want. \""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"REMARKS...\\n\""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"Need help\" + \"\\n\";"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_PERSON_SUCCESS \u003d \"Remark added: %1$s\\nPerson: %2$s\";"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    private final Index index;"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    private Person personToEdit;"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    private Person editedPerson;"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"    public AddRemarkCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(index);"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        this.index \u003d index;"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        this.editPersonDescriptor \u003d editPersonDescriptor;"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"            model.addPage(editedPerson);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REMARK_PERSON_SUCCESS, editPersonDescriptor.getRemark().get(),"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"                                                personToEdit.getName()));"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d parseRemark(((personToEdit.getRemark()).toString() + \"\\n\""},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"                                            + editPersonDescriptor.getRemark().get().toString()));"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        InjuriesHistory updatedInjuriesHistory \u003d editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"                                                .orElse(personToEdit.getInjuriesHistory());"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin().orElse(personToEdit.getNextOfKin());"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"                            updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"            return true;"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"        // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        if (!(other instanceof AddRemarkCommand)) {"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"            return false;"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"        AddRemarkCommand e \u003d (AddRemarkCommand) other;"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"        return index.equals(e.index)"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":122,"TeyXinHui":1,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":" * Calls L1R5 function in Model to calculate L1R5 score and outputs L1R5 score of selected person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException, IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        Person selectedPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        model.deletePage(selectedPerson);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        model.addPage(selectedPerson);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, selectedPerson.getName()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":4,"-":55}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \""},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\""},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_SUBJECT + \"SUBJECT SUBJECT_GRADE...]...\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_NRIC + \"S9123457A\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" 1 \""},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"            + PREFIX_NRIC + \"S9123457A\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"            //check if there is duplicate nric in the application"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"            for (Person p : model.getFilteredPersonList()) {"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"                if (editedPerson.getNric().equals(p.getNric()) \u0026\u0026 !editedPerson.getNric()"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"                        .equals(personToEdit.getNric())) {"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"                    throw new CommandException(\"This NRIC already exists in the address book\");"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            model.addPage(editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"        InjuriesHistory updatedInjuriesHistory \u003d editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"                .orElse(personToEdit.getInjuriesHistory());"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin().orElse(personToEdit.getNextOfKin());"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"                            updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":14,"TeyXinHui":15,"-":116}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INFO;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.ui.CalendarDisplay;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":" * Creates an appointment for the student at the specified index."},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"public class AddAppointmentCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_WORD \u003d \"addappointment\";"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    public static final String COMMAND_ALIAS \u003d \"addappt\";"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates an appointment for the student \""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"            + \"at the specified index.\\n\""},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_INFO + \"INFO \""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_START_TIME + \"START TIME \""},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_END_TIME + \"END TIME \\n\""},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_NAME + \"Alex Yeoh \""},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_INFO + \"Consultation \""},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_DATE + \"28042018 \""},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_START_TIME + \"1500 \""},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_END_TIME + \"1600 \\n\""},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"            + \"Example: \" + COMMAND_ALIAS + \" \""},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_NAME + \"Alex Yeoh \""},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_INFO + \"Consultation \""},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_DATE + \"28042018 \""},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_START_TIME + \"1500 \""},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"            + PREFIX_END_TIME + \"1600 \";"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in EduBuddy or \""},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"            + \"there is an overlap in appointments\";"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"    private Appointment toAdd;"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"    private CalendarDisplay calendarDisplay \u003d new CalendarDisplay();"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"     * Creates an AddAppointmentCommand to add the specified {@code Appointment}"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"    public AddAppointmentCommand(Appointment appointment) {"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(appointment);"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"        this.toAdd \u003d appointment;"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"    public CommandResult execute() throws CommandException, IOException {"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"            model.addAppointment(toAdd);"},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"            getDetails();"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"            addEventOnCalendar();"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, getDetails()));"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"    private String getDetails() {"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"        return toAdd.getInfo() + \": \" + toAdd.getStartTime() + \" to \" + toAdd.getEndTime() + \" on \" + toAdd.getDate()"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"                + \" with \" + toAdd.getName();"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"     * Generates an unique ID for each event and adds the event on calendar"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"    private void addEventOnCalendar() throws IOException {"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"        String id \u003d toAdd.getDate() + toAdd.getStartTime() +  toAdd.getEndTime();"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"        calendarDisplay.createEvent(toAdd, id);"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd));"},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":91,"-":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":6,"-":59}},{"path":"src/main/java/seedu/address/logic/commands/DeleteRemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.ParserUtil.parseRemark;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"public class DeleteRemarkCommand extends UndoableCommand {"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"deleteremark\";"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete remarks from the student that you want. \""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"REMARKS...\\n\""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_REMARK + \"Need help\" + \"\\n\";"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_PERSON_SUCCESS \u003d \"Remark deleted: %1$s\\nPerson: %2$s\";"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    private final Index index;"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    private Person personToEdit;"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    private Person editedPerson;"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"    public DeleteRemarkCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(index);"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        this.index \u003d index;"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"            model.addPage(editedPerson);"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REMARK_PERSON_SUCCESS, editPersonDescriptor.getRemark().get(),"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"                                                personToEdit.getName()));"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor)"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"        throws CommandException {"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        String[] remarkArray \u003d personToEdit.getRemark().toString().split(\"\\n\");"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        String updateRemark \u003d \"\";"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin().orElse(personToEdit.getNextOfKin());"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        InjuriesHistory updatedInjuriesHistory \u003d editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"                .orElse(personToEdit.getInjuriesHistory());"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        boolean remarkIsFound \u003d false;"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        for (String remark: remarkArray) {"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"            if (!remark.contains(editPersonDescriptor.getRemark().get().toString())) {"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"                updateRemark \u003d updateRemark + remark + \"\\n\";"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"            } else {"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"                editPersonDescriptor.setRemark(parseRemark(remark));"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"                remarkIsFound \u003d true;"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"        if (remarkIsFound) {"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"            Remark updatedRemark \u003d parseRemark(updateRemark);"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"            return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"                    updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(\"The target remark cannot be missing.\");"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"        // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"            return true;"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"        // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"        if (!(other instanceof DeleteRemarkCommand)) {"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":"            return false;"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":141,"author":{"gitID":"chuakunhong"},"content":"        DeleteRemarkCommand e \u003d (DeleteRemarkCommand) other;"},{"lineNumber":142,"author":{"gitID":"chuakunhong"},"content":"        return index.equals(e.index)"},{"lineNumber":143,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":136,"TeyXinHui":1,"-":10}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */String getAddressBookFilePath();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"johnnychanjx"},"content":"    //@@author johnnychanjx"},{"lineNumber":42,"author":{"gitID":"johnnychanjx"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":43,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"johnnychanjx":3,"-":41}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"johnnychanjx"},"content":"    //@@author johnnychanjx"},{"lineNumber":81,"author":{"gitID":"johnnychanjx"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"johnnychanjx"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":83,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":85,"author":{"gitID":"johnnychanjx"},"content":"    //@author"},{"lineNumber":86,"author":{"gitID":"johnnychanjx"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"johnnychanjx"},"content":"    @Subscribe"},{"lineNumber":88,"author":{"gitID":"johnnychanjx"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":89,"author":{"gitID":"johnnychanjx"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":90,"author":{"gitID":"johnnychanjx"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"johnnychanjx"},"content":"            saveAddressBook(event.data);"},{"lineNumber":92,"author":{"gitID":"johnnychanjx"},"content":"        } catch (IOException e) {"},{"lineNumber":93,"author":{"gitID":"johnnychanjx"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":94,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":97,"author":{"gitID":"johnnychanjx"},"content":"}"}],"authorContributionMap":{"johnnychanjx":18,"-":79}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"johnnychanjx"},"content":"    //@@author johnnychanjx"},{"lineNumber":79,"author":{"gitID":"johnnychanjx"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"johnnychanjx"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":81,"author":{"gitID":"johnnychanjx"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":82,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":83,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"johnnychanjx":7,"-":83}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedSubject.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"TeyXinHui"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":" *"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":"public class XmlAdaptedSubject {"},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"    private String subjectName;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"    private String subjectGrade;"},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs an XmlAdaptedSubject."},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"    public XmlAdaptedSubject() {}"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs a {@code XmlAdaptedSubject} with the given {@code subject}."},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"    public XmlAdaptedSubject(String subject) {"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"        String[] splitSubjectStr \u003d subject.trim().split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"        String subjectName \u003d splitSubjectStr[0];"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"        String subjectGrade \u003d splitSubjectStr[1];"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d subjectName;"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d subjectGrade;"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"     * Converts a given Subject into this class for JAXB use."},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    public XmlAdaptedSubject(Subject source) {"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"        subjectName \u003d source.subjectName;"},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"        subjectGrade \u003d source.subjectGrade;"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"     * Converts this jaxb-friendly adapted subject object into the model\u0027s subject object."},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"    public Subject toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"        if (!Subject.isValidSubjectName(subjectName)) {"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_NAME_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"        if (!Subject.isValidSubjectGrade(subjectGrade)) {"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        return new Subject(subjectName, subjectGrade);"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        if (this \u003d\u003d other) { //same object"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"            return true;"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        if (!(other instanceof XmlAdaptedSubject)) {"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"        XmlAdaptedSubject object \u003d (XmlAdaptedSubject) other;"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        return this.subjectName \u003d\u003d object.subjectName \u0026\u0026 this.subjectGrade \u003d\u003d object.subjectGrade;"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":73,"-":2}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"    private String nric;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"    private List\u003cXmlAdaptedSubject\u003e subjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    private String remark;"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    private String cca;"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    private String pos;"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    private String injuriesHistory;"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    private String nextOfKin;"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    private String nameOfKin;"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    private String phone;"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    private String email;"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    @XmlElement"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    private String remarkOfKin;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"    public XmlAdaptedPerson(String name, String nric, List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedSubject\u003e subjects,"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"                            String remark, String cca, String injuriesHistory, String nextOfKin) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        this.nric \u003d nric;"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d remark;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"        if (subjects !\u003d null) {"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"            this.subjects \u003d new ArrayList\u003c\u003e(subjects);"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        this.cca \u003d cca;"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"        this.injuriesHistory \u003d injuriesHistory;"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        this.nextOfKin \u003d nextOfKin;"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"        this.nameOfKin \u003d nameOfKin;"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"        this.phone \u003d phone;"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"        this.email \u003d email;"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"        this.remarkOfKin \u003d remarkOfKin;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"        nric \u003d source.getNric().value;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        for (Subject subject : source.getSubjects()) {"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"            subjects.add(new XmlAdaptedSubject(subject));"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        cca \u003d source.getCca().value;"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        pos \u003d source.getCca().pos;"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        injuriesHistory \u003d source.getInjuriesHistory().value;"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        nameOfKin \u003d source.getNextOfKin().fullName;"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        phone \u003d source.getNextOfKin().phone;"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        email \u003d source.getNextOfKin().email;"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        remarkOfKin \u003d source.getNextOfKin().remark;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"        final List\u003cSubject\u003e personSubjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"        for (XmlAdaptedSubject subject : subjects) {"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"            personSubjects.add(subject.toModelType());"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":"        if (this.nric \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"chuakunhong"},"content":"        if (!Nric.isValidNric(this.nric)) {"},{"lineNumber":138,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"chuakunhong"},"content":"        final Nric nric \u003d new Nric(this.nric);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(personSubjects);"},{"lineNumber":144,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":145,"author":{"gitID":"chuakunhong"},"content":"        if (this.remark \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"},{"lineNumber":147,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"chuakunhong"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":149,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":150,"author":{"gitID":"chuakunhong"},"content":"        if (this.cca \u003d\u003d null || this.pos \u003d\u003d null) {"},{"lineNumber":151,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cca.class.getSimpleName()));"},{"lineNumber":152,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"        final Cca cca \u003d new Cca(this.cca, this.pos);"},{"lineNumber":155,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":156,"author":{"gitID":"chuakunhong"},"content":"        if (this.injuriesHistory \u003d\u003d null) {"},{"lineNumber":157,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":158,"author":{"gitID":"chuakunhong"},"content":"                    InjuriesHistory.class.getSimpleName()));"},{"lineNumber":159,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":161,"author":{"gitID":"chuakunhong"},"content":"        final InjuriesHistory injuriesHistory \u003d new InjuriesHistory(this.injuriesHistory);"},{"lineNumber":162,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":163,"author":{"gitID":"chuakunhong"},"content":"        if (this.nameOfKin \u003d\u003d null || this.phone \u003d\u003d null || this.email \u003d\u003d null || this.remarkOfKin \u003d\u003d null) {"},{"lineNumber":164,"author":{"gitID":"chuakunhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":165,"author":{"gitID":"chuakunhong"},"content":"                    NextOfKin.class.getSimpleName()));"},{"lineNumber":166,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":168,"author":{"gitID":"chuakunhong"},"content":"        final NextOfKin nextOfKin \u003d new NextOfKin(this.nameOfKin, this.phone, this.email, this.remarkOfKin);"},{"lineNumber":169,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":170,"author":{"gitID":"chuakunhong"},"content":"        return new Person(name, nric, tags, subjects, remark, cca, injuriesHistory, nextOfKin);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":185,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(nric, otherPerson.nric)"},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged)"},{"lineNumber":187,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 subjects.equals(otherPerson.subjects)"},{"lineNumber":188,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 remark.equals(otherPerson.remark)"},{"lineNumber":189,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 cca.equals(otherPerson.cca);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":79,"TeyXinHui":16,"-":96}},{"path":"src/main/java/seedu/address/logic/commands/CcaCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CCA_POSITION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":" * Edits the cca details of an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"public class CcaCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"cca\";"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the CCA and the position \""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            + \"to the student that you want. \""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_CCA + \"CCA \" + PREFIX_CCA_POSITION + \"POSITION\\n\""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_CCA + \"Basketball \" + PREFIX_CCA_POSITION + \"Member\\n\";"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_PERSON_SUCCESS \u003d \"CCA added: %1$s\\nPerson: %2$s\";"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    private final Index index;"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    private Person personToEdit;"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    private Person editedPerson;"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"    public CcaCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(index);"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        this.index \u003d index;"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"            model.addPage(editedPerson);"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REMARK_PERSON_SUCCESS, editPersonDescriptor.getCca().get(),"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"                personToEdit.getName()));"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        InjuriesHistory updatedInjuriesHistory \u003d editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"                .orElse(personToEdit.getInjuriesHistory());"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin()"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"                .orElse(personToEdit.getNextOfKin());"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"                updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"            return true;"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        if (!(other instanceof CcaCommand)) {"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"            return false;"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"        CcaCommand e \u003d (CcaCommand) other;"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":135,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":123,"TeyXinHui":1,"-":12}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    private List\u003cXmlAdaptedSubject\u003e subjects;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        subjects.addAll(src.getSubjectList().stream().map(XmlAdaptedSubject::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"        appointments.addAll(src.getAppointmentList().stream().map(XmlAdaptedAppointment::new)"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"        for (XmlAdaptedSubject s: subjects) {"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"            addressBook.addSubject(s.toModelType());"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        for (XmlAdaptedAppointment a : appointments) {"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"            addressBook.addAppointment(a.toModelType());"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 subjects.equals(otherAb.subjects);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TeyXinHui":8,"kengsengg":8,"-":72}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"import java.text.ParseException;"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":" * Represents an appointment in EduBuddy."},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"public class Appointment {"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_APPOINTMENT_DATE_CONSTRAINTS \u003d \"Appointment date should be in DDMMYYYY format\";"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_APPOINTMENT_START_TIME_CONSTRAINTS \u003d \"Appointment start time should be in \""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"            + \"24 hour format\";"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"    public static final String MESSAGE_APPOINTMENT_END_TIME_CONSTRAINTS \u003d \"Appointment end time should be in \""},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"            + \"24 hour format and later than the start time\";"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"    public static final String APPOINTMENT_DATE_VALIDATION_REGEX \u003d \"^[0-9]{8}$\";"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    public static final String APPOINTMENT_START_TIME_VALIDATION_REGEX \u003d \"^[0-9]{4}$\";"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    public static final String APPOINTMENT_END_TIME_VALIDATION_REGEX \u003d \"^[0-9]{4}$\";"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    public final String name;"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    public final String info;"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    public final String date;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    public final String startTime;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"    public final String endTime;"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"    public Appointment(String name, String info, String date, String startTime, String endTime) {"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"        this.info \u003d info;"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"        this.date \u003d date;"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    public String getName() {"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"        return name;"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"    public String getInfo() {"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"        return info;"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"    public String getDate() {"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"        return date;"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"    public String getStartTime() {"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"        return startTime;"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"    public String getEndTime() {"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"        return endTime;"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"     * Returns true if a given string is a valid appointment date."},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"    public static boolean isValidAppointmentDate(String date) {"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(date);"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"ddMMyyyy\");"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"        dateFormat.setLenient(false);"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"            dateFormat.parse(date.trim());"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"        } catch (ParseException pe) {"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"            return false;"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        return date.matches(APPOINTMENT_DATE_VALIDATION_REGEX);"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"     * Returns true if a given string is a valid appointment start time."},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"    public static boolean isValidAppointmentStartTime(String startTime) {"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(startTime);"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"        return ((0 \u003c Integer.valueOf(startTime)) \u0026\u0026 (Integer.valueOf(startTime) \u003c\u003d 2359)"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 startTime.matches(APPOINTMENT_START_TIME_VALIDATION_REGEX));"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"     * Returns true if a given string is a valid appointment end time."},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"    public static boolean isValidAppointmentEndTime(String endTime) {"},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(endTime);"},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"        return ((0 \u003c Integer.valueOf(endTime)) \u0026\u0026 (Integer.valueOf(endTime) \u003c\u003d 2359)"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 endTime.matches(APPOINTMENT_END_TIME_VALIDATION_REGEX));"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":92}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":" * Signals that the operation will result in duplicate Appointment objects."},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":12,"-":1}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":11,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"kengsengg"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":"    private String name;"},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"    private String info;"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    private String date;"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":"    private String startTime;"},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"    private String endTime;"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given appointment details."},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    public XmlAdaptedAppointment(String name, String info, String date, String startTime, String endTime) {"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":"        this.name \u003d name;"},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"        this.info \u003d info;"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"        name \u003d source.getName();"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"        info \u003d source.getInfo();"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"        date \u003d source.getDate();"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"        startTime \u003d source.getStartTime();"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"        endTime \u003d source.getEndTime();"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentDate(this.date)) {"},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_DATE_CONSTRAINTS);"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentStartTime(this.startTime)) {"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_START_TIME_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":"        if (!Appointment.isValidAppointmentEndTime(this.endTime)) {"},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_APPOINTMENT_END_TIME_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"        return new Appointment(name, info, date, startTime, endTime);"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"            return false;"},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":"        return Objects.equals(info, otherAppointment.info)"},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 Objects.equals(date, otherAppointment.date)"},{"lineNumber":93,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 Objects.equals(startTime, otherAppointment.startTime)"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"                \u0026\u0026 Objects.equals(endTime, otherAppointment.endTime);"},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":97,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":94,"TeyXinHui":1,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/AddInjuriesHistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INJURIES_HISTORY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":" * Adds the injuries history to an existing person in the address book."},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"public class AddInjuriesHistoryCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    public static final String COMMAND_WORD \u003d \"addinjuries\";"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a injuries history to the student that you want. \""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_INJURIES_HISTORY + \"INJURYHISTORY\\n\""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"            + PREFIX_INJURIES_HISTORY + \"Torn ligament\" + \"\\n\";"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_PERSON_SUCCESS \u003d \"Injuries History added: %1$s\\nPerson: %2$s\";"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    private final Index index;"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    private Person personToEdit;"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    private Person editedPerson;"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"    public AddInjuriesHistoryCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(index);"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"        this.index \u003d index;"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"            model.addPage(editedPerson);"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"        return new CommandResult(String.format(MESSAGE_REMARK_PERSON_SUCCESS, editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"                        .get(), personToEdit.getName()));"},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d editPersonDescriptor.getSubjects().orElse(personToEdit.getSubjects());"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"        InjuriesHistory updatedInjuriesHistory \u003d ParserUtil.parseInjuriesHistory(personToEdit"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"                .getInjuriesHistory().toString() + \"\\n\" + editPersonDescriptor.getInjuriesHistory().get().toString());"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin().orElse(personToEdit.getNextOfKin());"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"                        updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"            return true;"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"        // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":"        if (!(other instanceof AddInjuriesHistoryCommand)) {"},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"            return false;"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"        // state check"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"        AddInjuriesHistoryCommand e \u003d (AddInjuriesHistoryCommand) other;"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"        return index.equals(e.index)"},{"lineNumber":129,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":130,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":131,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":133,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":115,"TeyXinHui":1,"-":17}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Nric(\"S8743880X\"), getTagSet(\"3A\"),"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"                getSubjectSet(\"English A2\"), new Remark(\"Class Rep\"), new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\"\"), new NextOfKin(\"James Yeoh\", \"978\","},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"                    \"j@gmail.com\", \"\")),"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Bernice Yu\"), new Nric(\"S9927275Z\"),"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"3A\"), getSubjectSet(\"EMath A1\"), new Remark(\"Math Rep\"),"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"James Yu\", \"789\","},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"                    \"h@gmail.com\", \"\")),"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Nric(\"S9321028H\"),"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"3G\"), getSubjectSet(\"Chem B3\"), new Remark(\"Chemistry Rep\"),"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\"\"), new NextOfKin(\"James Oliveiro\", \"456\","},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"                    \"jo@gmail.com\", \"\")),"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"David Li\"), new Nric(\"S9103128J\"),"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"4D\"), getSubjectSet(\"Phy B3\"), new Remark(\"Physics Rep\"),"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"James Li\", \"345\", \"jl@gmail.com\","},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"                    \"\")),"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Nric(\"S9249202K\"),"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"3G\"), getSubjectSet(\"Geog B4\"), new Remark(\"Geography Rep\"),"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"James Ibrahim\", \"456\","},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"                    \"ji@gmail.com\", \"\")),"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Nric(\"S9262441U\"),"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"4G\"), getSubjectSet(\"Chinese C5\"), new Remark(\"Chinese Rep\"),"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"James Balakrishnan\", \"3457\","},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"                    \"jb@gmail.com\", \"\")),"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"            new Person(new Name(\"John\"), new Nric(\"S9123123A\"),"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"4G\"), getSubjectSet(\"ELit C5\"), new Remark(\"\"),"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"James\", \"5678\", \"james@gmail.com\","},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"                    \"\")),"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"            new Person(new Name(\"Ben\"), new Nric(\"S9456456B\"),"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"3G\"), getSubjectSet(\"Econs A1\"), new Remark(\"Econs Rep\"),"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"Jon\", \"98745623\", \"jon@gmail.com\","},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"                    \"\")),"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"            new Person(new Name(\"Jill\"), new Nric(\"S9321321C\"),"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"4G\"), getSubjectSet(\"German C5\"), new Remark(\"\"),"},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"Jack\", \"98567321\", \"jack@gmail.com\","},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"                    \"\")),"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"            new Person(new Name(\"Tom\"), new Nric(\"S9789789A\"),"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"3A\"), getSubjectSet(\"Bio A2\"), new Remark(\"\"),"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"),"},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"                    new InjuriesHistory(\" \"), new NextOfKin(\"Tim\", \"96784562\", \"tim@gmail.com\","},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"                    \"\")),"},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":"            new Person(new Name(\"Mary\"), new Nric(\"S9654654B\"),"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"                getTagSet(\"5D\"), getSubjectSet(\"HChi A1\"), new Remark(\"Higher Chinese Rep\"),"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"                    new Cca(\"BasketBall\", \"Member\"), new InjuriesHistory(\" \"), new NextOfKin(\"Martha\","},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":"                    \"98562341\", \"martha@gmail.com\", \"\"))"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"    public static Appointment[] getSampleAppointments() {"},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":"        return new Appointment[] {"},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"            new Appointment(\"Alex Yeoh\", \"Consultation\", \"04042018\", \"1200\","},{"lineNumber":97,"author":{"gitID":"kengsengg"},"content":"                    \"1300\"),"},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":"            new Appointment(\"David Li\", \"Remedial\", \"05052018\", \"1400\","},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"                    \"1600\")"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":"        };"},{"lineNumber":101,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"kengsengg"},"content":"            for (Appointment sampleAppointment : getSampleAppointments()) {"},{"lineNumber":110,"author":{"gitID":"kengsengg"},"content":"                sampleAb.addAppointment(sampleAppointment);"},{"lineNumber":111,"author":{"gitID":"kengsengg"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":116,"author":{"gitID":"kengsengg"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate appointments\", e);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"     * Returns a subject set containing the list of strings given."},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"    public static Set\u003cSubject\u003e getSubjectSet(String... strings) {"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"        HashSet\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e();"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"        for (String s : strings) {"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"            subjects.add(new Subject(s));"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"        return subjects;"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":145,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":64,"kengsengg":21,"TeyXinHui":14,"-":46}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"     * Sorts {@code internalList} by name in alphabetical order (case insensitive)"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"kengsengg"},"content":"    public void sortNames() {"},{"lineNumber":102,"author":{"gitID":"kengsengg"},"content":"        Comparator\u003cPerson\u003e compareName \u003d (person1, person2) -\u003e +person1.getName().toString()"},{"lineNumber":103,"author":{"gitID":"kengsengg"},"content":"                .compareToIgnoreCase(person2.getName().toString());"},{"lineNumber":104,"author":{"gitID":"kengsengg"},"content":"        internalList.sort(compareName);"},{"lineNumber":105,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":107,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"kengsengg"},"content":"     * Sorts {@code internalList} by tag in alphabetical order (case insensitive)"},{"lineNumber":109,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"kengsengg"},"content":"    public void sortTags() {"},{"lineNumber":111,"author":{"gitID":"kengsengg"},"content":"        Comparator\u003cPerson\u003e compareTags \u003d (person1, person2) -\u003e +person1.getTags().toString()"},{"lineNumber":112,"author":{"gitID":"kengsengg"},"content":"                .compareToIgnoreCase(person2.getTags().toString());"},{"lineNumber":113,"author":{"gitID":"kengsengg"},"content":"        internalList.sort(compareTags);"},{"lineNumber":114,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":19,"-":120}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":3,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":" * Signals that the operation is unable to find the specified appointment"},{"lineNumber":5,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"public class AppointmentNotFoundException extends Exception {}"}],"authorContributionMap":{"kengsengg":6}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"kengsengg"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"kengsengg"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"//@@author kengsengg"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"kengsengg"},"content":" *"},{"lineNumber":19,"author":{"gitID":"kengsengg"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":" *"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":" */"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"kengsengg"},"content":"     * Constructs empty AppointmentList."},{"lineNumber":30,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"kengsengg"},"content":"    public UniqueAppointmentList() {}"},{"lineNumber":32,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":33,"author":{"gitID":"kengsengg"},"content":"    public UniqueAppointmentList(Set\u003cAppointment\u003e appointments) {"},{"lineNumber":34,"author":{"gitID":"kengsengg"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":35,"author":{"gitID":"kengsengg"},"content":"        internalList.addAll(appointments);"},{"lineNumber":36,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":37,"author":{"gitID":"kengsengg"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":40,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"kengsengg"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":42,"author":{"gitID":"kengsengg"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":43,"author":{"gitID":"kengsengg"},"content":"        return internalList.iterator();"},{"lineNumber":44,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":46,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"     * Adds an Appointment to the list."},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":"     * @throws DuplicateAppointmentException if the Appointment to add is a duplicate of an existing Appointment"},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"     * in the list."},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"    public void add(Appointment toAdd) throws DuplicateAppointmentException {"},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"        requireNonNull(toAdd);"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"        if (isAppointmentOverlapped(toAdd)) {"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":56,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"kengsengg"},"content":"        internalList.add(toAdd);"},{"lineNumber":58,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":59,"author":{"gitID":"kengsengg"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":60,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":62,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"kengsengg"},"content":"     * Removes the equivalent appointment from the list."},{"lineNumber":64,"author":{"gitID":"kengsengg"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"kengsengg"},"content":"     * @throws AppointmentNotFoundException if no such appointment could be found in the list."},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"kengsengg"},"content":"    public boolean remove(Appointment toRemove) throws AppointmentNotFoundException {"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":"        final boolean appointmentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"        if (!appointmentFoundAndDeleted) {"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"        return appointmentFoundAndDeleted;"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":75,"author":{"gitID":"kengsengg"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {"},{"lineNumber":76,"author":{"gitID":"kengsengg"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":77,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException {"},{"lineNumber":80,"author":{"gitID":"kengsengg"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":81,"author":{"gitID":"kengsengg"},"content":"        final UniqueAppointmentList replacement \u003d new UniqueAppointmentList();"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"        for (final Appointment appointment : appointments) {"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":"            replacement.add(appointment);"},{"lineNumber":84,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"kengsengg"},"content":"        setAppointments(replacement);"},{"lineNumber":86,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":88,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"kengsengg"},"content":"     * Returns true if the list contains an equivalent Appointment as the given argument or there is an overlap"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"     * in appointments"},{"lineNumber":91,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"kengsengg"},"content":"    public boolean isAppointmentOverlapped(Appointment toAdd) {"},{"lineNumber":93,"author":{"gitID":"kengsengg"},"content":"        for (Appointment appointment : internalList) {"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"            if (toAdd.getDate().equals(appointment.getDate())) {"},{"lineNumber":95,"author":{"gitID":"kengsengg"},"content":"                if ((Integer.valueOf(toAdd.getStartTime()) \u003e Integer.valueOf(appointment.getStartTime()))"},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"                    \u0026\u0026 (Integer.valueOf(toAdd.getStartTime()) \u003c Integer.valueOf(appointment.getEndTime()))) {"},{"lineNumber":97,"author":{"gitID":"kengsengg"},"content":"                    return true;"},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":"                }"},{"lineNumber":99,"author":{"gitID":"kengsengg"},"content":"                if ((Integer.valueOf(toAdd.getEndTime()) \u003e Integer.valueOf(appointment.getStartTime()))"},{"lineNumber":100,"author":{"gitID":"kengsengg"},"content":"                    \u0026\u0026 (Integer.valueOf(toAdd.getEndTime()) \u003c Integer.valueOf(appointment.getEndTime()))) {"},{"lineNumber":101,"author":{"gitID":"kengsengg"},"content":"                    return true;"},{"lineNumber":102,"author":{"gitID":"kengsengg"},"content":"                }"},{"lineNumber":103,"author":{"gitID":"kengsengg"},"content":"                if ((Integer.valueOf(toAdd.getStartTime()) \u003c\u003d Integer.valueOf(appointment.getStartTime()))"},{"lineNumber":104,"author":{"gitID":"kengsengg"},"content":"                    \u0026\u0026 (Integer.valueOf(toAdd.getEndTime()) \u003e\u003d Integer.valueOf(appointment.getEndTime()))) {"},{"lineNumber":105,"author":{"gitID":"kengsengg"},"content":"                    return true;"},{"lineNumber":106,"author":{"gitID":"kengsengg"},"content":"                }"},{"lineNumber":107,"author":{"gitID":"kengsengg"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"kengsengg"},"content":"        return false;"},{"lineNumber":110,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":112,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"kengsengg"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":114,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"kengsengg"},"content":"    public ObservableList\u003cAppointment\u003e asObservableList() {"},{"lineNumber":116,"author":{"gitID":"kengsengg"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":117,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"kengsengg"},"content":"}"},{"lineNumber":119,"author":{"gitID":"kengsengg"},"content":"//@@author"}],"authorContributionMap":{"kengsengg":111,"-":8}},{"path":"src/main/java/seedu/address/model/person/Nric.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":" * Represents a Person\u0027s nric number in the address book."},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":"public class Nric {"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"            \"Nric should start with a S, should be at 7 digits long\""},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"                    + \" and should end with a capital letter.\";"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"    public static final String NRIC_VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"     * Constructs a {@code Nric}."},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"     * @param nric A valid nric number."},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public Nric(String nric) {"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(nric);"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        checkArgument(isValidNric(nric), MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"        this.value \u003d nric;"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if a given string is a valid person nric number."},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    public static boolean isValidNric(String test) {"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        return test.matches(NRIC_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof Nric // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.value.equals(((Nric) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":51,"-":4}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.UniqueSubjectList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    private final Nric nric;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"    private final UniqueSubjectList subjects;"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    private final Remark remark;"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    private final Cca cca;"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"    private final InjuriesHistory injuriesHistory;"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"    private final NextOfKin nextOfKin;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public Person(Name name, Nric nric, Set\u003cTag\u003e tags, Set\u003cSubject\u003e subjects, Remark remark, Cca cca,"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"                  InjuriesHistory injuriesHistory, NextOfKin nextOfKin) {"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"        requireAllNonNull(name, nric, tags, subjects, cca);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"        this.nric \u003d nric;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"        this.subjects \u003d new UniqueSubjectList(subjects);"},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d remark;"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"        this.cca \u003d cca;"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        this.injuriesHistory \u003d injuriesHistory;"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"        this.nextOfKin \u003d nextOfKin;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"    public Nric getNric() {"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        return nric;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"    public Remark getRemark() {"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"        return remark;"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    public Cca getCca() {"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"        return cca;"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"    public InjuriesHistory getInjuriesHistory() {"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        return injuriesHistory;"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"    public NextOfKin getNextOfKin() {"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":"        return nextOfKin;"},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public List\u003cTag\u003e getTagArray () {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d getTags();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e listTag \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        listTag.addAll(tagSet);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return listTag;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"    public Set\u003cSubject\u003e getSubjects() {"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        return Collections.unmodifiableSet(subjects.toSet());"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public List\u003cSubject\u003e getSubjectArray () {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Set\u003cSubject\u003e set \u003d getSubjects();"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cSubject\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        list.addAll(set);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return list;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"     * Calculates the lowest possible score from the grades of the subjects of the selected person."},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"     * @return L1R5 score"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"    public int calculateL1R5() {"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(this.getSubjects());"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectsToCheck \u003d new HashSet\u003c\u003e();"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject subject: subjects) {"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"                switch (i) {"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a L1 subject"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"                case 0:"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.L1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R1 subject"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"                case 1:"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R2 subject"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"                case 2:"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R2_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R3 subject"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"                case 3:"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R3_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R4 or R5 subject"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"                case 4:"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"                case 5:"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R4_R5_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"                default:"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"            // Check that if the student has at least one subject in each L1R5 category, else return error message"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"            if (checkLowest(subjectsToCheck, subjects) \u003d\u003d 10) {"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"                return 0;"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"            } else {"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"                score +\u003d checkLowest(subjectsToCheck, subjects);"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"            subjectsToCheck.clear();"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"        return score;"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"     * Calculates the lowest possible score from the grades of the subjects of the selected person."},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"     * @return L1B4-A score"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"    public int calculateL1B4A() {"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":166,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(this.getSubjects());"},{"lineNumber":167,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectsToCheck \u003d new HashSet\u003c\u003e();"},{"lineNumber":168,"author":{"gitID":"TeyXinHui"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":169,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject subject: subjects) {"},{"lineNumber":170,"author":{"gitID":"TeyXinHui"},"content":"                switch (i) {"},{"lineNumber":171,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a L1 subject"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"                case 0:"},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.L1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":175,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":177,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R1 subject"},{"lineNumber":178,"author":{"gitID":"TeyXinHui"},"content":"                case 1:"},{"lineNumber":179,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R1A_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":183,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R2 subject"},{"lineNumber":184,"author":{"gitID":"TeyXinHui"},"content":"                case 2:"},{"lineNumber":185,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R2A_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":186,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":187,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R3 or R4 subject"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"                case 3:"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"                case 4:"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R3_R4_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":193,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":194,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":195,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":"                default:"},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":199,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"TeyXinHui"},"content":"            // Check that if the student has at least one subject in each L1R5 category, else return error message"},{"lineNumber":201,"author":{"gitID":"TeyXinHui"},"content":"            if (checkLowest(subjectsToCheck, subjects) \u003d\u003d 10) {"},{"lineNumber":202,"author":{"gitID":"TeyXinHui"},"content":"                return 0;"},{"lineNumber":203,"author":{"gitID":"TeyXinHui"},"content":"            } else {"},{"lineNumber":204,"author":{"gitID":"TeyXinHui"},"content":"                score +\u003d checkLowest(subjectsToCheck, subjects);"},{"lineNumber":205,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":206,"author":{"gitID":"TeyXinHui"},"content":"            subjectsToCheck.clear();"},{"lineNumber":207,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"TeyXinHui"},"content":"        return score;"},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":211,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"TeyXinHui"},"content":"     * Calculates the lowest possible score from the grades of the subjects of the selected person."},{"lineNumber":213,"author":{"gitID":"TeyXinHui"},"content":"     * @return L1B4-B score"},{"lineNumber":214,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"TeyXinHui"},"content":"    public int calculateL1B4B() {"},{"lineNumber":216,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":217,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(this.getSubjects());"},{"lineNumber":218,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectsToCheck \u003d new HashSet\u003c\u003e();"},{"lineNumber":219,"author":{"gitID":"TeyXinHui"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":220,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject subject: subjects) {"},{"lineNumber":221,"author":{"gitID":"TeyXinHui"},"content":"                switch (i) {"},{"lineNumber":222,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a L1 subject"},{"lineNumber":223,"author":{"gitID":"TeyXinHui"},"content":"                case 0:"},{"lineNumber":224,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.L1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":225,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":226,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":227,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":228,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R1 subject"},{"lineNumber":229,"author":{"gitID":"TeyXinHui"},"content":"                case 1:"},{"lineNumber":230,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R1BCD_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":231,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":232,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":233,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":234,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R2 subject"},{"lineNumber":235,"author":{"gitID":"TeyXinHui"},"content":"                case 2:"},{"lineNumber":236,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R2B_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":237,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":238,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":239,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":240,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R3 or R4 subject"},{"lineNumber":241,"author":{"gitID":"TeyXinHui"},"content":"                case 3:"},{"lineNumber":242,"author":{"gitID":"TeyXinHui"},"content":"                case 4:"},{"lineNumber":243,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R3_R4_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":244,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":245,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":246,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":247,"author":{"gitID":"TeyXinHui"},"content":"                default:"},{"lineNumber":248,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":249,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":250,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":251,"author":{"gitID":"TeyXinHui"},"content":"            // Check that if the student has at least one subject in each L1R5 category, else return error message"},{"lineNumber":252,"author":{"gitID":"TeyXinHui"},"content":"            if (checkLowest(subjectsToCheck, subjects) \u003d\u003d 10) {"},{"lineNumber":253,"author":{"gitID":"TeyXinHui"},"content":"                return 0;"},{"lineNumber":254,"author":{"gitID":"TeyXinHui"},"content":"            } else {"},{"lineNumber":255,"author":{"gitID":"TeyXinHui"},"content":"                score +\u003d checkLowest(subjectsToCheck, subjects);"},{"lineNumber":256,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":257,"author":{"gitID":"TeyXinHui"},"content":"            subjectsToCheck.clear();"},{"lineNumber":258,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"TeyXinHui"},"content":"        return score;"},{"lineNumber":260,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":262,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"TeyXinHui"},"content":"     * Calculates the lowest possible score from the grades of the subjects of the selected person."},{"lineNumber":264,"author":{"gitID":"TeyXinHui"},"content":"     * @return L1B4-C score"},{"lineNumber":265,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"TeyXinHui"},"content":"    public int calculateL1B4C() {"},{"lineNumber":267,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":268,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(this.getSubjects());"},{"lineNumber":269,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectsToCheck \u003d new HashSet\u003c\u003e();"},{"lineNumber":270,"author":{"gitID":"TeyXinHui"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":271,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject subject: subjects) {"},{"lineNumber":272,"author":{"gitID":"TeyXinHui"},"content":"                switch (i) {"},{"lineNumber":273,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a L1 subject"},{"lineNumber":274,"author":{"gitID":"TeyXinHui"},"content":"                case 0:"},{"lineNumber":275,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.L1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":276,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":277,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":278,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":279,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R1 subject"},{"lineNumber":280,"author":{"gitID":"TeyXinHui"},"content":"                case 1:"},{"lineNumber":281,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R1BCD_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":282,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":283,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":284,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":285,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R2 subject"},{"lineNumber":286,"author":{"gitID":"TeyXinHui"},"content":"                case 2:"},{"lineNumber":287,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R2C_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":288,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":289,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":290,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":291,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R3 or R4 subject"},{"lineNumber":292,"author":{"gitID":"TeyXinHui"},"content":"                case 3:"},{"lineNumber":293,"author":{"gitID":"TeyXinHui"},"content":"                case 4:"},{"lineNumber":294,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R3_R4_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":295,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":296,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":297,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":298,"author":{"gitID":"TeyXinHui"},"content":"                default:"},{"lineNumber":299,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":300,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":301,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":302,"author":{"gitID":"TeyXinHui"},"content":"            // Check that if the student has at least one subject in each L1R5 category, else return 0"},{"lineNumber":303,"author":{"gitID":"TeyXinHui"},"content":"            if (checkLowest(subjectsToCheck, subjects) \u003d\u003d 10) {"},{"lineNumber":304,"author":{"gitID":"TeyXinHui"},"content":"                return 0;"},{"lineNumber":305,"author":{"gitID":"TeyXinHui"},"content":"            } else {"},{"lineNumber":306,"author":{"gitID":"TeyXinHui"},"content":"                score +\u003d checkLowest(subjectsToCheck, subjects);"},{"lineNumber":307,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":308,"author":{"gitID":"TeyXinHui"},"content":"            subjectsToCheck.clear();"},{"lineNumber":309,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":310,"author":{"gitID":"TeyXinHui"},"content":"        return score;"},{"lineNumber":311,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":313,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":314,"author":{"gitID":"TeyXinHui"},"content":"     * Calculates the lowest possible score from the grades of the subjects of the selected person."},{"lineNumber":315,"author":{"gitID":"TeyXinHui"},"content":"     * @return L1B4-D score"},{"lineNumber":316,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"TeyXinHui"},"content":"    public int calculateL1B4D() {"},{"lineNumber":318,"author":{"gitID":"TeyXinHui"},"content":"        int score \u003d 0;"},{"lineNumber":319,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjects \u003d new HashSet\u003c\u003e(this.getSubjects());"},{"lineNumber":320,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e subjectsToCheck \u003d new HashSet\u003c\u003e();"},{"lineNumber":321,"author":{"gitID":"TeyXinHui"},"content":"        for (int i \u003d 0; i \u003c 5; i++) {"},{"lineNumber":322,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject subject: subjects) {"},{"lineNumber":323,"author":{"gitID":"TeyXinHui"},"content":"                switch (i) {"},{"lineNumber":324,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a L1 subject"},{"lineNumber":325,"author":{"gitID":"TeyXinHui"},"content":"                case 0:"},{"lineNumber":326,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.L1_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":327,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":328,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":329,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":330,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R1 subject"},{"lineNumber":331,"author":{"gitID":"TeyXinHui"},"content":"                case 1:"},{"lineNumber":332,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R1BCD_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":333,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":334,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":335,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":336,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R2 subject"},{"lineNumber":337,"author":{"gitID":"TeyXinHui"},"content":"                case 2:"},{"lineNumber":338,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R2D_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":339,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":340,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":341,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":342,"author":{"gitID":"TeyXinHui"},"content":"                // Check if the subject is a R3 or R4 subject"},{"lineNumber":343,"author":{"gitID":"TeyXinHui"},"content":"                case 3:"},{"lineNumber":344,"author":{"gitID":"TeyXinHui"},"content":"                case 4:"},{"lineNumber":345,"author":{"gitID":"TeyXinHui"},"content":"                    if (Arrays.asList(Subject.R3_R4_SUBJECT).contains(subject.subjectName)) {"},{"lineNumber":346,"author":{"gitID":"TeyXinHui"},"content":"                        subjectsToCheck.add(subject);"},{"lineNumber":347,"author":{"gitID":"TeyXinHui"},"content":"                    }"},{"lineNumber":348,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":349,"author":{"gitID":"TeyXinHui"},"content":"                default:"},{"lineNumber":350,"author":{"gitID":"TeyXinHui"},"content":"                    break;"},{"lineNumber":351,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":352,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":353,"author":{"gitID":"TeyXinHui"},"content":"            // Check that if the student has at least one subject in each L1R5 category, else return error message"},{"lineNumber":354,"author":{"gitID":"TeyXinHui"},"content":"            if (checkLowest(subjectsToCheck, subjects) \u003d\u003d 10) {"},{"lineNumber":355,"author":{"gitID":"TeyXinHui"},"content":"                return 0;"},{"lineNumber":356,"author":{"gitID":"TeyXinHui"},"content":"            } else {"},{"lineNumber":357,"author":{"gitID":"TeyXinHui"},"content":"                score +\u003d checkLowest(subjectsToCheck, subjects);"},{"lineNumber":358,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":359,"author":{"gitID":"TeyXinHui"},"content":"            subjectsToCheck.clear();"},{"lineNumber":360,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":361,"author":{"gitID":"TeyXinHui"},"content":"        return score;"},{"lineNumber":362,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":364,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":365,"author":{"gitID":"TeyXinHui"},"content":"     * Takes in a set of subjects under the category of L1 or R5 and find the smallest grade score."},{"lineNumber":366,"author":{"gitID":"TeyXinHui"},"content":"     * Removes the best subject from the full list of subjects of the student to prevent the same subject being"},{"lineNumber":367,"author":{"gitID":"TeyXinHui"},"content":"     * considered in the L1R5 score more than once."},{"lineNumber":368,"author":{"gitID":"TeyXinHui"},"content":"     * @param subjectsToCheck"},{"lineNumber":369,"author":{"gitID":"TeyXinHui"},"content":"     * @return lowest grade score"},{"lineNumber":370,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":371,"author":{"gitID":"TeyXinHui"},"content":"    public static int checkLowest(Set\u003cSubject\u003e subjectsToCheck, Set\u003cSubject\u003e subjects) {"},{"lineNumber":372,"author":{"gitID":"TeyXinHui"},"content":"        int lowest \u003d 10;"},{"lineNumber":373,"author":{"gitID":"TeyXinHui"},"content":"        Subject bestSubject \u003d new Subject();"},{"lineNumber":374,"author":{"gitID":"TeyXinHui"},"content":"        for (Subject subject: subjectsToCheck) {"},{"lineNumber":375,"author":{"gitID":"TeyXinHui"},"content":"            if (Character.getNumericValue(subject.subjectGrade.charAt(1)) \u003c lowest) {"},{"lineNumber":376,"author":{"gitID":"TeyXinHui"},"content":"                lowest \u003d Character.getNumericValue(subject.subjectGrade.charAt(1));"},{"lineNumber":377,"author":{"gitID":"TeyXinHui"},"content":"                bestSubject \u003d subject;"},{"lineNumber":378,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":379,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":380,"author":{"gitID":"TeyXinHui"},"content":"        subjects.remove(bestSubject);"},{"lineNumber":381,"author":{"gitID":"TeyXinHui"},"content":"        return lowest;"},{"lineNumber":382,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":384,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":385,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":388,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":389,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":392,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":393,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":396,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":397,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 otherPerson.getNric().equals(this.getNric());"},{"lineNumber":398,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":401,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":402,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":403,"author":{"gitID":"chuakunhong"},"content":"        return Objects.hash(name, nric, tags, subjects, remark, cca, injuriesHistory, nextOfKin);"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":408,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":409,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":410,"author":{"gitID":"chuakunhong"},"content":"                .append(\" Nric: \")"},{"lineNumber":411,"author":{"gitID":"chuakunhong"},"content":"                .append(getNric())"},{"lineNumber":412,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":413,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":414,"author":{"gitID":"TeyXinHui"},"content":"        builder.append(\" Subjects: \");"},{"lineNumber":415,"author":{"gitID":"TeyXinHui"},"content":"        getSubjects().forEach(builder::append);"},{"lineNumber":416,"author":{"gitID":"chuakunhong"},"content":"        builder.append(\" Remarks: \")"},{"lineNumber":417,"author":{"gitID":"chuakunhong"},"content":"                .append(getRemark());"},{"lineNumber":418,"author":{"gitID":"chuakunhong"},"content":"        builder.append(\" Cca: \").append(getCca());"},{"lineNumber":419,"author":{"gitID":"chuakunhong"},"content":"        builder.append(\" InjuriesHistory: \").append(getInjuriesHistory());"},{"lineNumber":420,"author":{"gitID":"chuakunhong"},"content":"        builder.append(\" NameOfKin: \").append(getNextOfKin());"},{"lineNumber":421,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":422,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":40,"TeyXinHui":297,"-":87}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":" * Represents a remarks of the person in the address book."},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"public class Remark {"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d \"Remark can contain anything that you want.\";"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"    public final String value;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"     * Constructs a {@code Remark}."},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"     * @param remark A valid remark."},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"    public Remark(String remark) {"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"        this.value \u003d remark;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"        return value;"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public int hashCode() {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        return value.hashCode();"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":39,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/AddSubjectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Cca;"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.InjuriesHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.NextOfKin;"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":" * Edits the subject details of the student at a specified index."},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"public class AddSubjectCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    public static final String COMMAND_WORD \u003d \"addsub\";"},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds on the new subjects to the student\u0027s \""},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"            + \"subjects identified by the index number used in the last student listing. Duplicate subject input \""},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"            + \"will not alter the original subject in the subject list.\\n\""},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"            + \"[\" + PREFIX_SUBJECT + \"SUBJECT SUBJECT_GRADE...]...\\n\""},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 sub/Jap A1\";"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_ADD_SUBJECT_SUCCESS \u003d \"Edited Person: \";"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_NEW_SUBJECTS \u003d \". Updated Subjects: \";"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to add must be provided.\";"},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    private final Index index;"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"    private Person personToEdit;"},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"    private Person editedPerson;"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"    public AddSubjectCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(index);"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"        this.index \u003d index;"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"    public CommandResult executeUndoableCommand() throws CommandException, IOException {"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"            model.deletePage(personToEdit);"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":"            model.addPage(editedPerson);"},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"        return new CommandResult(result.append(MESSAGE_ADD_SUBJECT_SUCCESS).append(editedPerson.getName())"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"                .append(MESSAGE_NEW_SUBJECTS).append(editedPerson.getSubjects()).toString());"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e updatedSubjects \u003d new HashSet\u003c\u003e(personToEdit.getSubjects());"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cSubject\u003e newSubjects \u003d new HashSet\u003c\u003e(editPersonDescriptor.getSubjectsAsSet());"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"        checkIfSubjectExists(newSubjects, updatedSubjects);"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        Remark updatedRemark \u003d editPersonDescriptor.getRemark().orElse(personToEdit.getRemark());"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"        Cca updatedCca \u003d editPersonDescriptor.getCca().orElse(personToEdit.getCca());"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"        InjuriesHistory updatedInjuriesHistory \u003d editPersonDescriptor.getInjuriesHistory()"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"                .orElse(personToEdit.getInjuriesHistory());"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"        NextOfKin updatedNextOfKin \u003d editPersonDescriptor.getNextOfKin().orElse(personToEdit.getNextOfKin());"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        return new Person(updatedName, updatedNric, updatedTags, updatedSubjects, updatedRemark, updatedCca,"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"                updatedInjuriesHistory, updatedNextOfKin);"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"     * Checks if the new subjects to be added exist in original subject list."},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"     * If the subject exists, the subject will not be added to the list. Else, it will be added."},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"    public static void checkIfSubjectExists(Set\u003cSubject\u003e newSubjects, Set\u003cSubject\u003e subjectList) {"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"        boolean isPresent \u003d false;"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"        for (Subject subToAdd : newSubjects) {"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"            for (Subject sub : subjectList) {"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"                if (subToAdd.subjectName.equals(sub.subjectName)) {"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"                    isPresent \u003d true;"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"                }"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"            if (!isPresent) {"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"                subjectList.add(subToAdd);"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":"            isPresent \u003d false;"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"        // short circuit if same object"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"            return true;"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"        // instanceof handles nulls"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"        if (!(other instanceof AddSubjectCommand)) {"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"        // state check"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"        AddSubjectCommand e \u003d (AddSubjectCommand) other;"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":"        return index.equals(e.index)"},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":154,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":6,"TeyXinHui":129,"-":19}},{"path":"src/main/java/seedu/address/model/ThemeColourUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"johnnychanjx"},"content":" * //@@author johnnychanjx"},{"lineNumber":8,"author":{"gitID":"johnnychanjx"},"content":" * Util for Theme Selection"},{"lineNumber":9,"author":{"gitID":"johnnychanjx"},"content":" */"},{"lineNumber":10,"author":{"gitID":"johnnychanjx"},"content":"public class ThemeColourUtil {"},{"lineNumber":11,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":12,"author":{"gitID":"johnnychanjx"},"content":"    private static final HashMap\u003cString, String\u003e themes;"},{"lineNumber":13,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":14,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":15,"author":{"gitID":"johnnychanjx"},"content":"    static {"},{"lineNumber":16,"author":{"gitID":"johnnychanjx"},"content":"        themes \u003d new HashMap\u003c\u003e();"},{"lineNumber":17,"author":{"gitID":"johnnychanjx"},"content":"        themes.put(\"light\", \"view/LightTheme.css\");"},{"lineNumber":18,"author":{"gitID":"johnnychanjx"},"content":"        themes.put(\"dark\", \"view/DarkTheme.css\");"},{"lineNumber":19,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":21,"author":{"gitID":"johnnychanjx"},"content":"    public static HashMap\u003cString, String\u003e getThemeHashMap() {"},{"lineNumber":22,"author":{"gitID":"johnnychanjx"},"content":"        return themes;"},{"lineNumber":23,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"johnnychanjx"},"content":"}"},{"lineNumber":25,"author":{"gitID":"johnnychanjx"},"content":""}],"authorContributionMap":{"johnnychanjx":19,"-":6}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"kengsengg"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":22,"author":{"gitID":"kengsengg"},"content":"     * This list will not contain any duplicate appointments."},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"kengsengg"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":25,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"     * Returns an unmodifiable view of the subjects list."},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"     * This list will not contain any duplicate subjects."},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"    ObservableList\u003cSubject\u003e getSubjectList();"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kengsengg":7,"TeyXinHui":7,"-":24}},{"path":"src/main/java/seedu/address/model/person/NextOfKin.java","lines":[{"lineNumber":1,"author":{"gitID":"chuakunhong"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import static seedu.address.model.person.Name.NAME_VALIDATION_REGEX;"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":" * Represents a Next Of Kin in the address book."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"public class NextOfKin {"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public static final String[] REMARK_VALIDATION_REGEX \u003d new String[] {\"Father\", \"Mother\", \"Guardian\"};"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of the format local-part@domain \""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    // alphanumeric and special characters"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"            \"Remarks for the Next of Kin should be one of the following: \""},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"                    + (Arrays.deepToString(REMARK_VALIDATION_REGEX) + \".\");"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    public final String fullName;"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":"    public final String phone;"},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    public final String email;"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    public final String remark;"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"     * Constructs a {@code Name}."},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"     * @param name A valid name."},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":62,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":63,"author":{"gitID":"chuakunhong"},"content":"    public NextOfKin(String name, String phone, String email, String remark) {"},{"lineNumber":64,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(name);"},{"lineNumber":65,"author":{"gitID":"chuakunhong"},"content":"        this.fullName \u003d name;"},{"lineNumber":66,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":67,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(email);"},{"lineNumber":68,"author":{"gitID":"chuakunhong"},"content":"        this.email \u003d email;"},{"lineNumber":69,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":70,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(phone);"},{"lineNumber":71,"author":{"gitID":"chuakunhong"},"content":"        this.phone \u003d phone;"},{"lineNumber":72,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":73,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(remark);"},{"lineNumber":74,"author":{"gitID":"chuakunhong"},"content":"        this.remark \u003d remark;"},{"lineNumber":75,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":77,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":79,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"chuakunhong"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":81,"author":{"gitID":"chuakunhong"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":82,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":84,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":86,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"chuakunhong"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":88,"author":{"gitID":"chuakunhong"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":89,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":91,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"     * Returns true if a given string is a valid remark."},{"lineNumber":101,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"chuakunhong"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":103,"author":{"gitID":"chuakunhong"},"content":"        for (String name : REMARK_VALIDATION_REGEX) {"},{"lineNumber":104,"author":{"gitID":"chuakunhong"},"content":"            if (name.equals(test)) {"},{"lineNumber":105,"author":{"gitID":"chuakunhong"},"content":"                return true;"},{"lineNumber":106,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"chuakunhong"},"content":"        return false;"},{"lineNumber":109,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":111,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"chuakunhong"},"content":"    public String toString() {"},{"lineNumber":113,"author":{"gitID":"chuakunhong"},"content":"        return (fullName + \" Phone: \" + phone + \" Email: \" + email + \" Remark: \" + remark);"},{"lineNumber":114,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":116,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"chuakunhong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":119,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof NextOfKin // instanceof handles nulls"},{"lineNumber":120,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.fullName.equals(((NextOfKin) other).fullName)); // state check"},{"lineNumber":121,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":123,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"chuakunhong"},"content":"    public int hashCode() {"},{"lineNumber":125,"author":{"gitID":"chuakunhong"},"content":"        return fullName.hashCode();"},{"lineNumber":126,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":128,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":126,"-":2}},{"path":"src/main/java/seedu/address/model/person/Cca.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":" * Represents a remarks of the person in the address book."},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"public class Cca {"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":"    public final String pos;"},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"     * Constructs a {@code Cca}."},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"     * @param cca A valid cca."},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"     * @param pos A valid position."},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"    public Cca(String cca, String pos) {"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(cca);"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":"        this.value \u003d cca;"},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(pos);"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"        this.pos \u003d pos;"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        if (value !\u003d \"\" \u0026\u0026 pos !\u003d \"\") {"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"            return value + \", \" + pos;"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"            return \"\";"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"    public String getValue() {"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"    public String getPos() {"},{"lineNumber":42,"author":{"gitID":"chuakunhong"},"content":"        return pos;"},{"lineNumber":43,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":45,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"chuakunhong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof Cca // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.value.equals(((Cca) other).value)); // state check"},{"lineNumber":50,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":52,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"chuakunhong"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitID":"chuakunhong"},"content":"        int hash \u003d 17;"},{"lineNumber":55,"author":{"gitID":"chuakunhong"},"content":"        hash \u003d 37 * hash + value.hashCode();"},{"lineNumber":56,"author":{"gitID":"chuakunhong"},"content":"        hash \u003d 37 * hash + pos.hashCode();"},{"lineNumber":57,"author":{"gitID":"chuakunhong"},"content":"        return hash;"},{"lineNumber":58,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":60,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":61,"author":{"gitID":"chuakunhong"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":58,"-":3}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":16,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":17,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.subject.UniqueSubjectList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"    private final UniqueSubjectList subjects;"},{"lineNumber":38,"author":{"gitID":"kengsengg"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"        subjects \u003d new UniqueSubjectList();"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException {"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":"        this.appointments.setAppointments(appointments);"},{"lineNumber":72,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"    public void setSubjects(Set\u003cSubject\u003e subjects) {"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":"        this.subjects.setSubjects(subjects);"},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"                .map(this::syncWithMasterTagSubjectList)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":90,"author":{"gitID":"kengsengg"},"content":"        List\u003cAppointment\u003e syncedAppointmentList \u003d newData.getAppointmentList().stream()"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":94,"author":{"gitID":"kengsengg"},"content":"            setAppointments(syncedAppointmentList);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":96,"author":{"gitID":"kengsengg"},"content":"            throw new AssertionError(\"EduBuddy should not have duplicate persons\");"},{"lineNumber":97,"author":{"gitID":"kengsengg"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":98,"author":{"gitID":"kengsengg"},"content":"            throw new AssertionError(\"EduBuddy should not have duplicate appointments\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"     * Also checks the new person\u0027s tags and subjects and updates {@link #tags #subjects} with any new"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"     * tags or subjects found, and updates the Tag objects and Subject objects in the person"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"     * to point to those in {@link #tags #subjects}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"        Person person \u003d syncWithMasterTagSubjectList(p);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":117,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"     * {@code AddressBook}\u0027s tag and subject list will be updated with the tags and subjects of {@code editedPerson}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"     * @see #syncWithMasterTagSubjectList(Person)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagSubjectList(editedPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":138,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"        removeUnusedTags();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"kengsengg"},"content":"    //@@author kengsengg"},{"lineNumber":143,"author":{"gitID":"kengsengg"},"content":"    public void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":144,"author":{"gitID":"kengsengg"},"content":"        appointments.add(appointment);"},{"lineNumber":145,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":147,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"kengsengg"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":149,"author":{"gitID":"kengsengg"},"content":"     * @throws AppointmentNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":150,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"kengsengg"},"content":"    public boolean removeAppointment(Appointment key) throws AppointmentNotFoundException {"},{"lineNumber":152,"author":{"gitID":"kengsengg"},"content":"        if (appointments.remove(key)) {"},{"lineNumber":153,"author":{"gitID":"kengsengg"},"content":"            return true;"},{"lineNumber":154,"author":{"gitID":"kengsengg"},"content":"        } else {"},{"lineNumber":155,"author":{"gitID":"kengsengg"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":156,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":159,"author":{"gitID":"kengsengg"},"content":"    //@author TeyXinHui"},{"lineNumber":160,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"kengsengg"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} in this {@code AddressBook}."},{"lineNumber":162,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"kengsengg"},"content":"    private void removeUnusedTags() {"},{"lineNumber":164,"author":{"gitID":"kengsengg"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":165,"author":{"gitID":"kengsengg"},"content":"                .map(Person::getTags)"},{"lineNumber":166,"author":{"gitID":"kengsengg"},"content":"                .flatMap(Set::stream)"},{"lineNumber":167,"author":{"gitID":"kengsengg"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":168,"author":{"gitID":"kengsengg"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":169,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"kengsengg"},"content":"    //@@author"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"TeyXinHui"},"content":"     *  Updates the master tag list to include tags and subjects in {@code person} that are not in the list."},{"lineNumber":173,"author":{"gitID":"TeyXinHui"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object"},{"lineNumber":174,"author":{"gitID":"TeyXinHui"},"content":"     *  and a Subject Object in the master list."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"TeyXinHui"},"content":"    private Person syncWithMasterTagSubjectList(Person person) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"TeyXinHui"},"content":"        final UniqueSubjectList personSubjects \u003d new UniqueSubjectList((person.getSubjects()));"},{"lineNumber":181,"author":{"gitID":"TeyXinHui"},"content":"        subjects.mergeFrom(personSubjects);"},{"lineNumber":182,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"TeyXinHui"},"content":"        // Create map with values \u003d subject object references in the master list"},{"lineNumber":189,"author":{"gitID":"TeyXinHui"},"content":"        // used for checking person subject references"},{"lineNumber":190,"author":{"gitID":"TeyXinHui"},"content":"        final Map\u003cSubject, Subject\u003e masterSubjectObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"TeyXinHui"},"content":"        subjects.forEach(subject -\u003e masterSubjectObjects.put(subject, subject));"},{"lineNumber":192,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":194,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":196,"author":{"gitID":"TeyXinHui"},"content":"        // Rebuild the list of person subjects to point to the relevant subjects in the master subject list."},{"lineNumber":197,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e correctSubjectReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":198,"author":{"gitID":"TeyXinHui"},"content":"        personSubjects.forEach(subject -\u003e correctSubjectReferences.add(masterSubjectObjects.get(subject)));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":200,"author":{"gitID":"chuakunhong"},"content":"                person.getName(), person.getNric(), correctTagReferences, correctSubjectReferences, person.getRemark(),"},{"lineNumber":201,"author":{"gitID":"chuakunhong"},"content":"                person.getCca(), person.getInjuriesHistory(), person.getNextOfKin());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"kengsengg"},"content":"    //@@author kengsengg"},{"lineNumber":217,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"kengsengg"},"content":"     * Chooses the sorting method based on the parameter given"},{"lineNumber":219,"author":{"gitID":"kengsengg"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"kengsengg"},"content":"    public void sort(String parameter) {"},{"lineNumber":221,"author":{"gitID":"kengsengg"},"content":"        if ((\"name\").equals(parameter)) {"},{"lineNumber":222,"author":{"gitID":"kengsengg"},"content":"            persons.sortNames();"},{"lineNumber":223,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"kengsengg"},"content":"        if ((\"tag\").equals(parameter)) {"},{"lineNumber":225,"author":{"gitID":"kengsengg"},"content":"            persons.sortTags();"},{"lineNumber":226,"author":{"gitID":"kengsengg"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"kengsengg"},"content":"    //@@author"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":236,"author":{"gitID":"TeyXinHui"},"content":"    public void addSubject(Subject s) throws UniqueSubjectList.DuplicateSubjectException {"},{"lineNumber":237,"author":{"gitID":"TeyXinHui"},"content":"        subjects.add(s);"},{"lineNumber":238,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":240,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"TeyXinHui"},"content":"     * Calls removeTagFromPerson method when tag is found in tags."},{"lineNumber":242,"author":{"gitID":"TeyXinHui"},"content":"     * @param t"},{"lineNumber":243,"author":{"gitID":"TeyXinHui"},"content":"     * @throws TagNotFoundException"},{"lineNumber":244,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTag(Tag t) throws TagNotFoundException {"},{"lineNumber":246,"author":{"gitID":"TeyXinHui"},"content":"        if (tags.contains(t)) {"},{"lineNumber":247,"author":{"gitID":"TeyXinHui"},"content":"            for (Person person : persons) {"},{"lineNumber":248,"author":{"gitID":"TeyXinHui"},"content":"                removeTagFromPerson(t, person);"},{"lineNumber":249,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":250,"author":{"gitID":"TeyXinHui"},"content":"        } else {"},{"lineNumber":251,"author":{"gitID":"TeyXinHui"},"content":"            throw new TagNotFoundException(\"Specific tag is not used in the address book.\");"},{"lineNumber":252,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":255,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":256,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"chuakunhong"},"content":"     * Calls replaceTagForPerson method when tag is found in tags."},{"lineNumber":258,"author":{"gitID":"chuakunhong"},"content":"     * @param tagSet"},{"lineNumber":259,"author":{"gitID":"chuakunhong"},"content":"     * @throws TagNotFoundException"},{"lineNumber":260,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"chuakunhong"},"content":"    public void replaceTag(List\u003cTag\u003e tagSet) {"},{"lineNumber":262,"author":{"gitID":"chuakunhong"},"content":"        Tag[] tagArray \u003d new Tag[2];"},{"lineNumber":263,"author":{"gitID":"chuakunhong"},"content":"        tagSet.toArray(tagArray);"},{"lineNumber":264,"author":{"gitID":"chuakunhong"},"content":"        Tag tagToBeReplaced \u003d tagArray[0];"},{"lineNumber":265,"author":{"gitID":"chuakunhong"},"content":"        Tag tagToBePlaced \u003d tagArray[1];"},{"lineNumber":266,"author":{"gitID":"chuakunhong"},"content":"        if (tags.contains(tagToBeReplaced)) {"},{"lineNumber":267,"author":{"gitID":"chuakunhong"},"content":"            for (Person person : persons) {"},{"lineNumber":268,"author":{"gitID":"chuakunhong"},"content":"                replaceTagForPerson(tagToBeReplaced, tagToBePlaced, person);"},{"lineNumber":269,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":270,"author":{"gitID":"chuakunhong"},"content":"        } else {"},{"lineNumber":271,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":274,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":275,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"TeyXinHui"},"content":"     * Removes a specific tag from an individual person and updates the person\u0027s information."},{"lineNumber":277,"author":{"gitID":"TeyXinHui"},"content":"     * Person needs to have the specific tag in his/her tag list."},{"lineNumber":278,"author":{"gitID":"TeyXinHui"},"content":"     * @param tag"},{"lineNumber":279,"author":{"gitID":"TeyXinHui"},"content":"     * @param person"},{"lineNumber":280,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"TeyXinHui"},"content":"    public void removeTagFromPerson(Tag tag, Person person) {"},{"lineNumber":282,"author":{"gitID":"TeyXinHui"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":283,"author":{"gitID":"TeyXinHui"},"content":"        if (tagList.remove(tag)) {"},{"lineNumber":284,"author":{"gitID":"TeyXinHui"},"content":"            Person newPerson \u003d new Person(person.getName(), person.getNric(), tagList, person.getSubjects(),"},{"lineNumber":285,"author":{"gitID":"TeyXinHui"},"content":"                                        person.getRemark(), person.getCca(), person.getInjuriesHistory(),"},{"lineNumber":286,"author":{"gitID":"TeyXinHui"},"content":"                                        person.getNextOfKin());"},{"lineNumber":287,"author":{"gitID":"TeyXinHui"},"content":"            try {"},{"lineNumber":288,"author":{"gitID":"TeyXinHui"},"content":"                updatePerson(person, newPerson);"},{"lineNumber":289,"author":{"gitID":"TeyXinHui"},"content":"            } catch (DuplicatePersonException error1) {"},{"lineNumber":290,"author":{"gitID":"TeyXinHui"},"content":"                throw new AssertionError(\"Updating person after removing tag should not have duplicate persons.\");"},{"lineNumber":291,"author":{"gitID":"TeyXinHui"},"content":"            } catch (PersonNotFoundException error2) {"},{"lineNumber":292,"author":{"gitID":"TeyXinHui"},"content":"                throw new AssertionError(\"Person should exist in the address book.\");"},{"lineNumber":293,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":294,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":296,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":298,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":299,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"chuakunhong"},"content":"     * Removes a specific tag from an individual person and updates the person\u0027s information."},{"lineNumber":301,"author":{"gitID":"chuakunhong"},"content":"     * @param tagToBeReplaced"},{"lineNumber":302,"author":{"gitID":"chuakunhong"},"content":"     * @param tagToBePlaced"},{"lineNumber":303,"author":{"gitID":"chuakunhong"},"content":"     * @param person"},{"lineNumber":304,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"chuakunhong"},"content":"    public void replaceTagForPerson(Tag tagToBeReplaced, Tag tagToBePlaced, Person person) {"},{"lineNumber":306,"author":{"gitID":"chuakunhong"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":307,"author":{"gitID":"chuakunhong"},"content":"        if (tagList.remove(tagToBeReplaced)) {"},{"lineNumber":308,"author":{"gitID":"chuakunhong"},"content":"            tagList.add(tagToBePlaced);"},{"lineNumber":309,"author":{"gitID":"chuakunhong"},"content":"            Person newPerson \u003d new Person(person.getName(), person.getNric(), tagList, person.getSubjects(),"},{"lineNumber":310,"author":{"gitID":"chuakunhong"},"content":"                                        person.getRemark(), person.getCca(), person.getInjuriesHistory(),"},{"lineNumber":311,"author":{"gitID":"chuakunhong"},"content":"                                        person.getNextOfKin());"},{"lineNumber":312,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":313,"author":{"gitID":"chuakunhong"},"content":"            try {"},{"lineNumber":314,"author":{"gitID":"chuakunhong"},"content":"                updatePerson(person, newPerson);"},{"lineNumber":315,"author":{"gitID":"chuakunhong"},"content":"            } catch (DuplicatePersonException error1) {"},{"lineNumber":316,"author":{"gitID":"chuakunhong"},"content":"                throw new AssertionError(\"Updating person after removing tag should not have duplicate persons.\");"},{"lineNumber":317,"author":{"gitID":"chuakunhong"},"content":"            } catch (PersonNotFoundException error2) {"},{"lineNumber":318,"author":{"gitID":"chuakunhong"},"content":"                throw new AssertionError(\"Person should exist in the address book.\");"},{"lineNumber":319,"author":{"gitID":"chuakunhong"},"content":"            }"},{"lineNumber":320,"author":{"gitID":"chuakunhong"},"content":"        }"},{"lineNumber":321,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":323,"author":{"gitID":"chuakunhong"},"content":"    //// util methods"},{"lineNumber":324,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":325,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":328,"author":{"gitID":"TeyXinHui"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":329,"author":{"gitID":"TeyXinHui"},"content":"                + subjects.asObservableList().size() + \" subjects\";"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":334,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":336,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":339,"author":{"gitID":"kengsengg"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":340,"author":{"gitID":"kengsengg"},"content":"        return appointments.asObservableList();"},{"lineNumber":341,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":344,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":346,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":349,"author":{"gitID":"TeyXinHui"},"content":"    public ObservableList\u003cSubject\u003e getSubjectList() {"},{"lineNumber":350,"author":{"gitID":"TeyXinHui"},"content":"        return subjects.asObservableList();"},{"lineNumber":351,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":356,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":357,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":358,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":359,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.subjects.equalsOrderInsensitive(((AddressBook) other).subjects));"},{"lineNumber":360,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":363,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":364,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":365,"author":{"gitID":"TeyXinHui"},"content":"        return Objects.hash(persons, tags, subjects);"},{"lineNumber":366,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":50,"kengsengg":62,"TeyXinHui":86,"-":169}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kengsengg"},"content":" * Represents a Tag in EduBuddy."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"johnnychanjx"},"content":"     * @@author johnnychanjx"},{"lineNumber":56,"author":{"gitID":"johnnychanjx"},"content":"     * Returns tag name without [] for Browser Panel"},{"lineNumber":57,"author":{"gitID":"johnnychanjx"},"content":"     * @return"},{"lineNumber":58,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"johnnychanjx"},"content":"    public String tagForBrowser() {"},{"lineNumber":60,"author":{"gitID":"johnnychanjx"},"content":"        return tagName;"},{"lineNumber":61,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"johnnychanjx"},"content":"}"}],"authorContributionMap":{"johnnychanjx":8,"kengsengg":1,"-":53}},{"path":"src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":3,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":4,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"TeyXinHui"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":6,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":7,"author":{"gitID":"TeyXinHui"},"content":"public class TagNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"    public TagNotFoundException(String message) {"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":13}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.BufferedWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.common.base.Charsets;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.google.common.io.Resources;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":25,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":26,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":28,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":31,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.subject.Subject;"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":42,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String PROFILE_DIRECTORY \u003d \"/StudentPage/\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":66,"author":{"gitID":"kengsengg"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"johnnychanjx"},"content":"     * @@author johnnychanjx"},{"lineNumber":76,"author":{"gitID":"johnnychanjx"},"content":"     * @param person"},{"lineNumber":77,"author":{"gitID":"johnnychanjx"},"content":"     * @throws IOException"},{"lineNumber":78,"author":{"gitID":"johnnychanjx"},"content":"     * Adds a BrowserPanel html Page into StudentPage"},{"lineNumber":79,"author":{"gitID":"johnnychanjx"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":82,"author":{"gitID":"johnnychanjx"},"content":"    public void addPage(Person person) throws IOException {"},{"lineNumber":83,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":84,"author":{"gitID":"johnnychanjx"},"content":"        String userHome \u003d System.getProperty(\"user.home\") + File.separator + \"StudentPage\";"},{"lineNumber":85,"author":{"gitID":"johnnychanjx"},"content":"        String locatie \u003d userHome;"},{"lineNumber":86,"author":{"gitID":"johnnychanjx"},"content":"        File folder \u003d new File(locatie);"},{"lineNumber":87,"author":{"gitID":"johnnychanjx"},"content":"        if (!folder.exists()) {"},{"lineNumber":88,"author":{"gitID":"johnnychanjx"},"content":"            folder.mkdirs();"},{"lineNumber":89,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":91,"author":{"gitID":"johnnychanjx"},"content":"        URL personPage \u003d MainApp.class.getResource(PROFILE_DIRECTORY + \"template.html\");"},{"lineNumber":92,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":93,"author":{"gitID":"johnnychanjx"},"content":"        String htmlString \u003d Resources.toString(personPage, Charsets.UTF_8);"},{"lineNumber":94,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":95,"author":{"gitID":"johnnychanjx"},"content":"        File f \u003d new File(System.getProperty(\"user.home\") + File.separator + \"StudentPage\""},{"lineNumber":96,"author":{"gitID":"johnnychanjx"},"content":"                + File.separator + person.getName() + \".html\");"},{"lineNumber":97,"author":{"gitID":"johnnychanjx"},"content":"        if (!f.exists()) {"},{"lineNumber":98,"author":{"gitID":"johnnychanjx"},"content":"            f.createNewFile();"},{"lineNumber":99,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":101,"author":{"gitID":"johnnychanjx"},"content":"        Name titleName \u003d person.getName();"},{"lineNumber":102,"author":{"gitID":"johnnychanjx"},"content":"        String title \u003d titleName.toString();"},{"lineNumber":103,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"$title\", title);"},{"lineNumber":104,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":105,"author":{"gitID":"johnnychanjx"},"content":"        Nric identityNumberClass \u003d person.getNric();"},{"lineNumber":106,"author":{"gitID":"johnnychanjx"},"content":"        String identityNumber \u003d identityNumberClass.toString();"},{"lineNumber":107,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"$identityNumber\", identityNumber);"},{"lineNumber":108,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":109,"author":{"gitID":"johnnychanjx"},"content":"        List\u003cTag\u003e tagList \u003d person.getTagArray();"},{"lineNumber":110,"author":{"gitID":"johnnychanjx"},"content":"        int taglistSize \u003d tagList.size();"},{"lineNumber":111,"author":{"gitID":"johnnychanjx"},"content":"        if (taglistSize !\u003d 0) {"},{"lineNumber":112,"author":{"gitID":"johnnychanjx"},"content":"            htmlString \u003d htmlString.replace(\"Class Not Specified\", tagList.get(0).tagForBrowser());"},{"lineNumber":113,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":115,"author":{"gitID":"johnnychanjx"},"content":"        List\u003cSubject\u003e subjectList \u003d person.getSubjectArray();"},{"lineNumber":116,"author":{"gitID":"johnnychanjx"},"content":"        int listSize \u003d subjectList.size();"},{"lineNumber":117,"author":{"gitID":"johnnychanjx"},"content":"        System.out.println(person.getSubjects());"},{"lineNumber":118,"author":{"gitID":"johnnychanjx"},"content":"        int i \u003d 0;"},{"lineNumber":119,"author":{"gitID":"johnnychanjx"},"content":"        while (i \u003c listSize) {"},{"lineNumber":120,"author":{"gitID":"johnnychanjx"},"content":"            String iString \u003d Integer.toString(i + 1);"},{"lineNumber":121,"author":{"gitID":"johnnychanjx"},"content":"            htmlString \u003d htmlString.replace(\"Subject \" + iString, subjectList.get(i).nameToString());"},{"lineNumber":122,"author":{"gitID":"johnnychanjx"},"content":"            htmlString \u003d htmlString.replace(\"$percent\" + iString, subjectList.get(i).gradeToPercent());"},{"lineNumber":123,"author":{"gitID":"johnnychanjx"},"content":"            htmlString \u003d htmlString.replace(\"Grade \" + iString, subjectList.get(i).gradeToString());"},{"lineNumber":124,"author":{"gitID":"johnnychanjx"},"content":"            i++;"},{"lineNumber":125,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":127,"author":{"gitID":"johnnychanjx"},"content":"        // ADD L1R5"},{"lineNumber":128,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":129,"author":{"gitID":"johnnychanjx"},"content":"        int score \u003d person.calculateL1R5();"},{"lineNumber":130,"author":{"gitID":"johnnychanjx"},"content":"        String scoreString \u003d \"-\";"},{"lineNumber":131,"author":{"gitID":"johnnychanjx"},"content":"        if (score \u003d\u003d 0) {"},{"lineNumber":132,"author":{"gitID":"johnnychanjx"},"content":"            scoreString \u003d \"-\";"},{"lineNumber":133,"author":{"gitID":"johnnychanjx"},"content":"        } else {"},{"lineNumber":134,"author":{"gitID":"johnnychanjx"},"content":"            scoreString \u003d Integer.toString(score);"},{"lineNumber":135,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"STUDENTS SCORE\", scoreString);"},{"lineNumber":137,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":138,"author":{"gitID":"johnnychanjx"},"content":"        // L1B4A"},{"lineNumber":139,"author":{"gitID":"johnnychanjx"},"content":"        int scoreL1B4A \u003d person.calculateL1B4A();"},{"lineNumber":140,"author":{"gitID":"johnnychanjx"},"content":"        String scoreL1B4AString \u003d \"-\";"},{"lineNumber":141,"author":{"gitID":"johnnychanjx"},"content":"        if (scoreL1B4A \u003d\u003d 0) {"},{"lineNumber":142,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4AString \u003d \"-\";"},{"lineNumber":143,"author":{"gitID":"johnnychanjx"},"content":"        } else {"},{"lineNumber":144,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4AString \u003d Integer.toString(scoreL1B4A);"},{"lineNumber":145,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"STUDENTS L1B4A\", scoreL1B4AString);"},{"lineNumber":147,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":148,"author":{"gitID":"johnnychanjx"},"content":"        //L1B4B"},{"lineNumber":149,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":150,"author":{"gitID":"johnnychanjx"},"content":"        int scoreL1B4B \u003d person.calculateL1B4B();"},{"lineNumber":151,"author":{"gitID":"johnnychanjx"},"content":"        String scoreL1B4BString \u003d \"-\";"},{"lineNumber":152,"author":{"gitID":"johnnychanjx"},"content":"        if (scoreL1B4B \u003d\u003d 0) {"},{"lineNumber":153,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4BString \u003d \"-\";"},{"lineNumber":154,"author":{"gitID":"johnnychanjx"},"content":"        } else {"},{"lineNumber":155,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4BString \u003d Integer.toString(scoreL1B4B);"},{"lineNumber":156,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"STUDENTS L1B4B\", scoreL1B4BString);"},{"lineNumber":158,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":159,"author":{"gitID":"johnnychanjx"},"content":"        //L1B4C"},{"lineNumber":160,"author":{"gitID":"johnnychanjx"},"content":"        int scoreL1B4C \u003d person.calculateL1B4C();"},{"lineNumber":161,"author":{"gitID":"johnnychanjx"},"content":"        String scoreL1B4CString \u003d \"-\";"},{"lineNumber":162,"author":{"gitID":"johnnychanjx"},"content":"        if (scoreL1B4C \u003d\u003d 0) {"},{"lineNumber":163,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4CString \u003d \"-\";"},{"lineNumber":164,"author":{"gitID":"johnnychanjx"},"content":"        } else {"},{"lineNumber":165,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4CString \u003d Integer.toString(scoreL1B4C);"},{"lineNumber":166,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"STUDENTS L1B4C\", scoreL1B4CString);"},{"lineNumber":168,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":169,"author":{"gitID":"johnnychanjx"},"content":"        //L1B4D"},{"lineNumber":170,"author":{"gitID":"johnnychanjx"},"content":"        int scoreL1B4D \u003d person.calculateL1B4D();"},{"lineNumber":171,"author":{"gitID":"johnnychanjx"},"content":"        String scoreL1B4DString \u003d \"-\";"},{"lineNumber":172,"author":{"gitID":"johnnychanjx"},"content":"        if (scoreL1B4D \u003d\u003d 0) {"},{"lineNumber":173,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4DString \u003d \"-\";"},{"lineNumber":174,"author":{"gitID":"johnnychanjx"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"johnnychanjx"},"content":"            scoreL1B4DString \u003d Integer.toString(scoreL1B4D);"},{"lineNumber":176,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"STUDENTS L1B4D\", scoreL1B4DString);"},{"lineNumber":178,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":179,"author":{"gitID":"johnnychanjx"},"content":"        // ADD CCA"},{"lineNumber":180,"author":{"gitID":"johnnychanjx"},"content":"        String ccaString \u003d person.getCca().getValue();"},{"lineNumber":181,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"CCA\", ccaString);"},{"lineNumber":182,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":183,"author":{"gitID":"johnnychanjx"},"content":"        //ADD CCA Rank"},{"lineNumber":184,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":185,"author":{"gitID":"johnnychanjx"},"content":"        String ccaRank \u003d person.getCca().getPos();"},{"lineNumber":186,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"STUDENT RANK\", ccaRank);"},{"lineNumber":187,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":188,"author":{"gitID":"johnnychanjx"},"content":"        // ADD REMARK"},{"lineNumber":189,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":190,"author":{"gitID":"johnnychanjx"},"content":"        String remark \u003d person.getRemark().toString();"},{"lineNumber":191,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"Remarks to facilitate teaching should be included here.\", remark);"},{"lineNumber":192,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":193,"author":{"gitID":"johnnychanjx"},"content":"        //ADD INJURY"},{"lineNumber":194,"author":{"gitID":"johnnychanjx"},"content":"        String injury \u003d person.getInjuriesHistory().toString();"},{"lineNumber":195,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"Insert injury history here\", injury);"},{"lineNumber":196,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":197,"author":{"gitID":"johnnychanjx"},"content":"        // NOK Details"},{"lineNumber":198,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":199,"author":{"gitID":"johnnychanjx"},"content":"        String nokName \u003d person.getNextOfKin().fullName;"},{"lineNumber":200,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"NOK Name\", nokName);"},{"lineNumber":201,"author":{"gitID":"johnnychanjx"},"content":"        String nokGender \u003d person.getNextOfKin().remark;"},{"lineNumber":202,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"NOK Gender\", nokGender);"},{"lineNumber":203,"author":{"gitID":"johnnychanjx"},"content":"        String nokEmail \u003d person.getNextOfKin().email;"},{"lineNumber":204,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"NOK Email\", nokEmail);"},{"lineNumber":205,"author":{"gitID":"johnnychanjx"},"content":"        String nokPhone \u003d person.getNextOfKin().phone;"},{"lineNumber":206,"author":{"gitID":"johnnychanjx"},"content":"        htmlString \u003d htmlString.replace(\"NOK Phone\", nokPhone);"},{"lineNumber":207,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":208,"author":{"gitID":"johnnychanjx"},"content":"        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(f));"},{"lineNumber":209,"author":{"gitID":"johnnychanjx"},"content":"        bw.write(htmlString);"},{"lineNumber":210,"author":{"gitID":"johnnychanjx"},"content":"        bw.close();"},{"lineNumber":211,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":212,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"johnnychanjx"},"content":"     * @@author johnnychanjx"},{"lineNumber":217,"author":{"gitID":"johnnychanjx"},"content":"     * Deletes BrowserPanel html"},{"lineNumber":218,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"johnnychanjx"},"content":"    public void deletePage(Person person) {"},{"lineNumber":220,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":221,"author":{"gitID":"johnnychanjx"},"content":"        File f \u003d new File(System.getProperty(\"user.home\") + File.separator + \"StudentPage\""},{"lineNumber":222,"author":{"gitID":"johnnychanjx"},"content":"                + File.separator + person.getName() + \".html\");"},{"lineNumber":223,"author":{"gitID":"johnnychanjx"},"content":"        boolean bool \u003d f.delete();"},{"lineNumber":224,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"kengsengg"},"content":"    //@@author kengsengg"},{"lineNumber":266,"author":{"gitID":"kengsengg"},"content":"    /** Adds the given appointment */"},{"lineNumber":267,"author":{"gitID":"kengsengg"},"content":"    public synchronized void addAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":268,"author":{"gitID":"kengsengg"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":269,"author":{"gitID":"kengsengg"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":270,"author":{"gitID":"kengsengg"},"content":"        indicateAddressBookChanged();"},{"lineNumber":271,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":273,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":274,"author":{"gitID":"kengsengg"},"content":"    public synchronized void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"},{"lineNumber":275,"author":{"gitID":"kengsengg"},"content":"        addressBook.removeAppointment(target);"},{"lineNumber":276,"author":{"gitID":"kengsengg"},"content":"        indicateAddressBookChanged();"},{"lineNumber":277,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"kengsengg"},"content":"    //@@author"},{"lineNumber":279,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":296,"author":{"gitID":"kengsengg"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":298,"author":{"gitID":"kengsengg"},"content":"        filteredAppointments.setPredicate(predicate);"},{"lineNumber":299,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":301,"author":{"gitID":"kengsengg"},"content":"    //@@author kengsengg"},{"lineNumber":302,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":303,"author":{"gitID":"kengsengg"},"content":"    public void sortPersonList(String parameter) {"},{"lineNumber":304,"author":{"gitID":"kengsengg"},"content":"        addressBook.sort(parameter);"},{"lineNumber":305,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":307,"author":{"gitID":"kengsengg"},"content":"    @Override"},{"lineNumber":308,"author":{"gitID":"kengsengg"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":309,"author":{"gitID":"kengsengg"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointments);"},{"lineNumber":310,"author":{"gitID":"kengsengg"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":312,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":313,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":314,"author":{"gitID":"TeyXinHui"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":315,"author":{"gitID":"TeyXinHui"},"content":"        try {"},{"lineNumber":316,"author":{"gitID":"TeyXinHui"},"content":"            addressBook.removeTag(tag);"},{"lineNumber":317,"author":{"gitID":"TeyXinHui"},"content":"        } catch (TagNotFoundException error) {"},{"lineNumber":318,"author":{"gitID":"TeyXinHui"},"content":"            throw new AssertionError();"},{"lineNumber":319,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":320,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":322,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":323,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":324,"author":{"gitID":"chuakunhong"},"content":"    public void replaceTag(List\u003cTag\u003e tagSet) {"},{"lineNumber":325,"author":{"gitID":"chuakunhong"},"content":"        Tag[] tagArray \u003d new Tag[2];"},{"lineNumber":326,"author":{"gitID":"chuakunhong"},"content":"        tagSet.toArray(tagArray);"},{"lineNumber":327,"author":{"gitID":"chuakunhong"},"content":"        addressBook.replaceTag(tagSet);"},{"lineNumber":328,"author":{"gitID":"chuakunhong"},"content":"        indicateAddressBookChanged();"},{"lineNumber":329,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":331,"author":{"gitID":"chuakunhong"},"content":"    //@@author"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":347,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":348,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chuakunhong":11,"johnnychanjx":151,"kengsengg":36,"TeyXinHui":12,"-":140}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":10,"author":{"gitID":"kengsengg"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":23,"author":{"gitID":"kengsengg"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"johnnychanjx"},"content":"    //@@author johnnychanjx"},{"lineNumber":32,"author":{"gitID":"johnnychanjx"},"content":"    /** Deletes the Person\u0027s page */"},{"lineNumber":33,"author":{"gitID":"johnnychanjx"},"content":"    void deletePage(Person target);"},{"lineNumber":34,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"johnnychanjx"},"content":"    //@@author johnnychanjx"},{"lineNumber":43,"author":{"gitID":"johnnychanjx"},"content":"    /** Adds the given person\u0027s page*/"},{"lineNumber":44,"author":{"gitID":"johnnychanjx"},"content":"    void addPage(Person person) throws IOException;"},{"lineNumber":45,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"kengsengg"},"content":"    /** Adds the given appointment */"},{"lineNumber":48,"author":{"gitID":"kengsengg"},"content":"    void addAppointment(Appointment appointment) throws DuplicateAppointmentException;"},{"lineNumber":49,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":50,"author":{"gitID":"kengsengg"},"content":"    /** Deletes the given appointment */"},{"lineNumber":51,"author":{"gitID":"kengsengg"},"content":"    void deleteAppointment(Appointment appointment) throws AppointmentNotFoundException;"},{"lineNumber":52,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":53,"author":{"gitID":"kengsengg"},"content":"    /** Sorts the person list by name in alphabetical order */"},{"lineNumber":54,"author":{"gitID":"kengsengg"},"content":"    void sortPersonList(String parameter);"},{"lineNumber":55,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":68,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":69,"author":{"gitID":"kengsengg"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":70,"author":{"gitID":"kengsengg"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":71,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"kengsengg"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"kengsengg"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"kengsengg"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"},{"lineNumber":83,"author":{"gitID":"kengsengg"},"content":""},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"    //@@author TeyXinHui"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"     * Removes a specific tag from everyone in the address book."},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"     * @param tag"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"     * @throws TagNotFoundException"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"    void deleteTag(Tag tag) throws TagNotFoundException;"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":93,"author":{"gitID":"chuakunhong"},"content":"    //@@author chuakunhong"},{"lineNumber":94,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"chuakunhong"},"content":"     * Replaces a specific tag for everyone in the address book."},{"lineNumber":96,"author":{"gitID":"chuakunhong"},"content":"     * @param tagSet"},{"lineNumber":97,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"chuakunhong"},"content":"    void replaceTag(List\u003cTag\u003e tagSet);"},{"lineNumber":99,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":100,"author":{"gitID":"chuakunhong"},"content":"}"}],"authorContributionMap":{"chuakunhong":9,"johnnychanjx":8,"kengsengg":21,"TeyXinHui":11,"-":51}},{"path":"src/main/java/seedu/address/model/subject/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.subject;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":9,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"TeyXinHui"},"content":" * Represents a subject in the address book."},{"lineNumber":11,"author":{"gitID":"TeyXinHui"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":13,"author":{"gitID":"TeyXinHui"},"content":"public class Subject {"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] SUBJECT_NAME \u003d new String[] {\"English\", \"Chinese\", \"HChi\", \"CSP\","},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"ChiB\", \"French\", \"German\", \"Spanish\", \"Hindi\","},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Urdu\", \"Gujarati\", \"Panjabi\", \"Bengali\", \"Burmese\","},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Thai\", \"Jap\", \"BIndo\", \"Tamil\","},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"HTamil\", \"TamilB\", \"Malay\", \"HMalay\", \"MalayB\","},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"MSP\", \"EMath\", \"AMath\", \"Phy\", \"Chem\", \"Bio\", \"Sci\","},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Hist\", \"Geog\", \"ComHum\", \"ELit\", \"CLit\", \"MLit\", \"TLit\","},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Music\", \"HMusic\", \"Art\", \"HArt\", \"DnT\", \"Comp\","},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"FnN\", \"PoA\", \"Econs\", \"Drama\", \"PE\", \"Biz\", \"Biotech\","},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"                                                              \"Design\"};"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_SUBJECT_NAME_CONSTRAINTS \u003d \"Subject names should be alphabetic and should be \""},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"            + \"one of the following: \\n\" + Arrays.toString(Arrays.copyOfRange(SUBJECT_NAME, 0, 9)) + \"\\n\""},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"            + Arrays.toString(Arrays.copyOfRange(SUBJECT_NAME, 10, 19)) + \"\\n\""},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"            + Arrays.toString(Arrays.copyOfRange(SUBJECT_NAME, 20, 29)) + \"\\n\""},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"            + Arrays.toString(Arrays.copyOfRange(SUBJECT_NAME, 30, 39)) + \"\\n\""},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":"            + Arrays.toString(Arrays.copyOfRange(SUBJECT_NAME, 40, SUBJECT_NAME.length)) + \".\";"},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] SUBJECT_GRADE \u003d new String[] {\"A1\", \"A2\", \"B3\", \"B4\", \"C5\", \"C6\", \"D7\", \"E8\", \"F9\"};"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_SUBJECT_GRADE_CONSTRAINTS \u003d \"Subject grade should be alphanumeric and should be\""},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"            + \" one of the following: \\n\" + Arrays.deepToString(SUBJECT_GRADE) + \".\";"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"    public static final String MESSAGE_DUPLICATE_SUBJECT \u003d \"There should not be duplicate subject(s) assigned \""},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"            + \"to student.\";"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"    // Use for the calculation of the L1R5 subjects"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] L1_SUBJECT \u003d {\"English\", \"HChi\", \"HTamil\", \"HMalay\"};"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R1_SUBJECT \u003d {\"Hist\", \"Geog\", \"Com.Hum\",  \"ELit\", \"CLit\", \"MLit\", \"TLit\", \"HArt\","},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"                                               \"HMusic\", \"BIndo\", \"CSP\", \"MSP\"};"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R2_SUBJECT \u003d {\"EMath\", \"AMath\", \"Phy\", \"Chem\", \"Bio\", \"Sci\"};"},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R3_SUBJECT \u003d {\"Hist\", \"Geog\", \"ComHum\",  \"ELit\", \"CLit\", \"MLit\", \"TLit\", \"HArt\","},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"                                               \"H.Music\", \"BIndo\", \"CSP\", \"MSP\", \"EMath\", \"AMath\", \"Phy\", \"Chem\","},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"                                               \"Bio\", \"Sci\"};"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R4_R5_SUBJECT \u003d {\"English\", \"Chinese\", \"HChi\", \"CSP\", \"French\", \"German\", \"Spanish\","},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"                                                  \"Hindi\", \"Urdu\", \"Gujarati\", \"Panjabi\", \"Bengali\", \"Burmese\","},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"                                                  \"Thai\", \"Jap\", \"BIndo\", \"Tamil\", \"HTamil\", \"Malay\", \"HMalay\","},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":"                                                  \"MSP\", \"EMath\", \"AMath\", \"Phy\", \"Chem\", \"Bio\", \"Sci\", \"Hist\", \"Geog\","},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"                                                  \"ComHum\", \"ELit\", \"CLit\", \"MLit\", \"TLit\", \"Music\", \"HMusic\", \"Art\","},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"                                                  \"HArt\", \"DnT\", \"Comp\", \"FnN\", \"PoA\", \"Econs\", \"Drama\", \"PE\","},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"                                                  \"Biz\", \"Biotech\", \"Design\"};"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"    // Use for the calculation of the L1B4 subjects (A, B, C, D)"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R1A_SUBJECT \u003d {\"Art\", \"Biz\", \"ComHum\", \"Econs\", \"Geog\", \"HArt\", \"HMusic\", \"Hist\","},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"                                                \"ELit\", \"CLit\", \"MLit\", \"TLit\", \"Music\"};"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R1BCD_SUBJECT \u003d {\"EMath\", \"AMath\"};"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R2A_SUBJECT \u003d {\"AMath\", \"Art\", \"Biz\", \"Chinese\", \"ComHum\", \"DnT\", \"Design\", \"Econs\","},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"                                                \"EMath\", \"FnN\", \"Geog\", \"HArt\", \"HChi\", \"HMalay\", \"HTamil\", \"Hist\","},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"                                                \"ELit\", \"CLit\", \"MLit\", \"TLit\", \"Malay\", \"Music\", \"PoA\", \"Tamil\"};"},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R2B_SUBJECT \u003d {\"Art\", \"Biz\", \"ComHum\", \"Econs\", \"Geog\", \"HArt\", \"HMusic\", \"Hist\","},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"                                                \"ELit\", \"CLit\", \"TLit\", \"MLit\", \"Music\", \"PoA\"};"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R2C_SUBJECT \u003d {\"Bio\", \"Biotech\", \"Chem\", \"Sci\", \"DnT\", \"FnN\", \"Phy\", \"Comp\"};"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R2D_SUBJECT \u003d {\"Art\", \"Bio\", \"Biotech\", \"Chem\", \"Sci\", \"Comp\", \"DnT\", \"Design\", \"FnN\","},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"                                                \"HArt\", \"Phy\", \"Sci\"};"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"    public static final String[] R3_R4_SUBJECT \u003d R4_R5_SUBJECT;"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"    public final String subjectName;"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"    public final String subjectGrade;"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"     * Default constructor of Subject Object"},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"    public Subject() {"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d \"\";"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d \"\";"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs a {@code Subject}."},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"     * @param subjectName  A valid subject name."},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"     * @param subjectGrade A valid subject grade."},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"    public Subject(String subjectName, String subjectGrade) {"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subjectName);"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"        checkArgument(isValidSubjectName(subjectName), MESSAGE_SUBJECT_NAME_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d subjectName;"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subjectGrade);"},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        checkArgument(isValidSubjectGrade(subjectGrade), MESSAGE_SUBJECT_GRADE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d subjectGrade;"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs a {@code Subject} by splitting the subject string into {@code subjectName}."},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"     * @param subject A valid subject string."},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"    public Subject(String subject) {"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(subject);"},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"        String[] splitSubjectStr \u003d subject.trim().split(\"\\\\s+\");"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"        String subjectName \u003d splitSubjectStr[0];"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        String subjectGrade \u003d splitSubjectStr[1];"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectName \u003d subjectName;"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"        this.subjectGrade \u003d subjectGrade;"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"     * Returns true if a given string is a valid subject name."},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"    public static boolean isValidSubjectName(String test) {"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"        for (String validSubjectName : SUBJECT_NAME) {"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"            if (test.equals(validSubjectName)) {"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":"                return true;"},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"        return false;"},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"     * Returns true if a given string is a valid subject grade."},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":"    public static boolean isValidSubjectGrade(String test) {"},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"        for (String validSubjectGrade : SUBJECT_GRADE) {"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"            if (test.equals(validSubjectGrade)) {"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"                return true;"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":"        return false;"},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"        if (other \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"        if (this \u003d\u003d other) { //same object"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":"            return true;"},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"        if (!(other instanceof Subject)) {"},{"lineNumber":144,"author":{"gitID":"TeyXinHui"},"content":"            return false;"},{"lineNumber":145,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"TeyXinHui"},"content":"        Subject object \u003d (Subject) other;"},{"lineNumber":147,"author":{"gitID":"TeyXinHui"},"content":"        return (this.subjectName.equals(object.subjectName) \u0026\u0026 this.subjectGrade.equals(object.subjectGrade));"},{"lineNumber":148,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":150,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"TeyXinHui"},"content":"    public int hashCode() {"},{"lineNumber":152,"author":{"gitID":"TeyXinHui"},"content":"        int hash \u003d 17;"},{"lineNumber":153,"author":{"gitID":"TeyXinHui"},"content":"        hash \u003d 37 * hash + subjectName.hashCode();"},{"lineNumber":154,"author":{"gitID":"TeyXinHui"},"content":"        hash \u003d 37 * hash + subjectGrade.hashCode();"},{"lineNumber":155,"author":{"gitID":"TeyXinHui"},"content":"        return hash;"},{"lineNumber":156,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":158,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"TeyXinHui"},"content":"     * Format state as text for viewing."},{"lineNumber":160,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"TeyXinHui"},"content":"    public String toString() {"},{"lineNumber":162,"author":{"gitID":"TeyXinHui"},"content":"        return \u0027[\u0027 + subjectName + \u0027 \u0027 + subjectGrade + \u0027]\u0027;"},{"lineNumber":163,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"TeyXinHui"},"content":"    //@@author"},{"lineNumber":165,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    //@@ author johnnychanjx"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public String nameToString() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return subjectName;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"johnnychanjx"},"content":"    //@@author johnnychanjx"},{"lineNumber":171,"author":{"gitID":"johnnychanjx"},"content":"    public String gradeToString() {"},{"lineNumber":172,"author":{"gitID":"johnnychanjx"},"content":"        return subjectGrade;"},{"lineNumber":173,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":175,"author":{"gitID":"johnnychanjx"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"johnnychanjx"},"content":"     * @@author johnnychanjx"},{"lineNumber":177,"author":{"gitID":"johnnychanjx"},"content":"     * Returns grade in number form for html bar"},{"lineNumber":178,"author":{"gitID":"johnnychanjx"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"johnnychanjx"},"content":"    public String gradeToPercent() {"},{"lineNumber":180,"author":{"gitID":"johnnychanjx"},"content":"        int percent;"},{"lineNumber":181,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":182,"author":{"gitID":"johnnychanjx"},"content":"        switch (subjectGrade) {"},{"lineNumber":183,"author":{"gitID":"johnnychanjx"},"content":"        case \"A1\": percent \u003d 100;"},{"lineNumber":184,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":185,"author":{"gitID":"johnnychanjx"},"content":"        case \"A2\": percent \u003d 90;"},{"lineNumber":186,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":187,"author":{"gitID":"johnnychanjx"},"content":"        case \"B3\": percent \u003d 80;"},{"lineNumber":188,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":189,"author":{"gitID":"johnnychanjx"},"content":"        case \"B4\": percent \u003d 70;"},{"lineNumber":190,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":191,"author":{"gitID":"johnnychanjx"},"content":"        case \"C5\": percent \u003d 60;"},{"lineNumber":192,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":193,"author":{"gitID":"johnnychanjx"},"content":"        case \"C6\": percent \u003d 50;"},{"lineNumber":194,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":195,"author":{"gitID":"johnnychanjx"},"content":"        case \"D7\": percent \u003d 40;"},{"lineNumber":196,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":197,"author":{"gitID":"johnnychanjx"},"content":"        case \"E8\": percent \u003d 30;"},{"lineNumber":198,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":199,"author":{"gitID":"johnnychanjx"},"content":"        case \"F9\": percent \u003d 10;"},{"lineNumber":200,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":201,"author":{"gitID":"johnnychanjx"},"content":"        default: percent \u003d 0;"},{"lineNumber":202,"author":{"gitID":"johnnychanjx"},"content":"                break;"},{"lineNumber":203,"author":{"gitID":"johnnychanjx"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"johnnychanjx"},"content":""},{"lineNumber":205,"author":{"gitID":"johnnychanjx"},"content":"        String percentString \u003d Integer.toString(percent);"},{"lineNumber":206,"author":{"gitID":"johnnychanjx"},"content":"        return percentString;"},{"lineNumber":207,"author":{"gitID":"johnnychanjx"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"johnnychanjx"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":210,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"johnnychanjx":39,"TeyXinHui":160,"-":11}},{"path":"src/main/java/seedu/address/model/person/InjuriesHistory.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chuakunhong"},"content":"//@@author chuakunhong"},{"lineNumber":5,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":6,"author":{"gitID":"chuakunhong"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chuakunhong"},"content":" * Represents a remarks of the person in the address book."},{"lineNumber":8,"author":{"gitID":"chuakunhong"},"content":" */"},{"lineNumber":9,"author":{"gitID":"chuakunhong"},"content":"public class InjuriesHistory {"},{"lineNumber":10,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":11,"author":{"gitID":"chuakunhong"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":13,"author":{"gitID":"chuakunhong"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"chuakunhong"},"content":"     * Constructs a {@code InjuriesHistory}."},{"lineNumber":15,"author":{"gitID":"chuakunhong"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"chuakunhong"},"content":"     * @param injurieshistory A valid injurieshistory."},{"lineNumber":17,"author":{"gitID":"chuakunhong"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"chuakunhong"},"content":"    public InjuriesHistory(String injurieshistory) {"},{"lineNumber":19,"author":{"gitID":"chuakunhong"},"content":"        requireNonNull(injurieshistory);"},{"lineNumber":20,"author":{"gitID":"chuakunhong"},"content":"        this.value \u003d injurieshistory;"},{"lineNumber":21,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":23,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"chuakunhong"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"chuakunhong"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":28,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"chuakunhong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"chuakunhong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"chuakunhong"},"content":"                || (other instanceof InjuriesHistory // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"chuakunhong"},"content":"                \u0026\u0026 this.value.equals(((InjuriesHistory) other).value)); // state check"},{"lineNumber":33,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":35,"author":{"gitID":"chuakunhong"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"chuakunhong"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"chuakunhong"},"content":"        return value.hashCode();"},{"lineNumber":38,"author":{"gitID":"chuakunhong"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chuakunhong"},"content":""},{"lineNumber":40,"author":{"gitID":"chuakunhong"},"content":"}"},{"lineNumber":41,"author":{"gitID":"chuakunhong"},"content":"//@@author"}],"authorContributionMap":{"chuakunhong":38,"-":3}},{"path":"src/main/java/seedu/address/model/subject/UniqueSubjectList.java","lines":[{"lineNumber":1,"author":{"gitID":"TeyXinHui"},"content":"package seedu.address.model.subject;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"TeyXinHui"},"content":"//@@author TeyXinHui"},{"lineNumber":15,"author":{"gitID":"TeyXinHui"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"TeyXinHui"},"content":" * A list of subjects that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"TeyXinHui"},"content":" *"},{"lineNumber":18,"author":{"gitID":"TeyXinHui"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"TeyXinHui"},"content":" *"},{"lineNumber":20,"author":{"gitID":"TeyXinHui"},"content":" * @see Subject#equals(Object)"},{"lineNumber":21,"author":{"gitID":"TeyXinHui"},"content":" */"},{"lineNumber":22,"author":{"gitID":"TeyXinHui"},"content":"public class UniqueSubjectList implements Iterable\u003cSubject\u003e {"},{"lineNumber":23,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":24,"author":{"gitID":"TeyXinHui"},"content":"    private final ObservableList\u003cSubject\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":26,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"TeyXinHui"},"content":"     * Constructs empty Subject List."},{"lineNumber":28,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"TeyXinHui"},"content":"    public UniqueSubjectList() {}"},{"lineNumber":30,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":31,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"TeyXinHui"},"content":"     * Creates a UniqueSubjectList using given subjects."},{"lineNumber":33,"author":{"gitID":"TeyXinHui"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"TeyXinHui"},"content":"    public UniqueSubjectList(Set\u003cSubject\u003e subjects) {"},{"lineNumber":36,"author":{"gitID":"TeyXinHui"},"content":"        requireAllNonNull(subjects);"},{"lineNumber":37,"author":{"gitID":"TeyXinHui"},"content":"        internalList.addAll(subjects);"},{"lineNumber":38,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":39,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":42,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"TeyXinHui"},"content":"     * Returns all Subjects in this list as a Set."},{"lineNumber":44,"author":{"gitID":"TeyXinHui"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"TeyXinHui"},"content":"    public Set\u003cSubject\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"TeyXinHui"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":51,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"TeyXinHui"},"content":"     * Replaces the Subjects in this list with those in the argument subject list."},{"lineNumber":53,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"TeyXinHui"},"content":"    public void setSubjects(Set\u003cSubject\u003e subjects) {"},{"lineNumber":55,"author":{"gitID":"TeyXinHui"},"content":"        requireAllNonNull(subjects);"},{"lineNumber":56,"author":{"gitID":"TeyXinHui"},"content":"        internalList.setAll(subjects);"},{"lineNumber":57,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":60,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"TeyXinHui"},"content":"     * Ensures every subject in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"TeyXinHui"},"content":"    public void mergeFrom(UniqueSubjectList from) {"},{"lineNumber":64,"author":{"gitID":"TeyXinHui"},"content":"        final Set\u003cSubject\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"TeyXinHui"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"TeyXinHui"},"content":"                .filter(subject -\u003e !alreadyInside.contains(subject))"},{"lineNumber":67,"author":{"gitID":"TeyXinHui"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":69,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":72,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"TeyXinHui"},"content":"     * Returns true if the list contains an equivalent Subject as the given argument."},{"lineNumber":74,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"TeyXinHui"},"content":"    public boolean contains(Subject toCheck) {"},{"lineNumber":76,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"TeyXinHui"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":80,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"TeyXinHui"},"content":"     * Adds a Subject to the list."},{"lineNumber":82,"author":{"gitID":"TeyXinHui"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"TeyXinHui"},"content":"     * @throws DuplicateSubjectException if the Tag to add is a duplicate of an existing Subject in the list."},{"lineNumber":84,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"TeyXinHui"},"content":"    public void add(Subject toAdd) throws DuplicateSubjectException {"},{"lineNumber":86,"author":{"gitID":"TeyXinHui"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"TeyXinHui"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"TeyXinHui"},"content":"            throw new DuplicateSubjectException();"},{"lineNumber":89,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"TeyXinHui"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":92,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":95,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"TeyXinHui"},"content":"    public Iterator\u003cSubject\u003e iterator() {"},{"lineNumber":97,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":98,"author":{"gitID":"TeyXinHui"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":101,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"TeyXinHui"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"TeyXinHui"},"content":"    public ObservableList\u003cSubject\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"TeyXinHui"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":109,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"TeyXinHui"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"TeyXinHui"},"content":"                || (other instanceof UniqueSubjectList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"TeyXinHui"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueSubjectList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":117,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"TeyXinHui"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":119,"author":{"gitID":"TeyXinHui"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":120,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"TeyXinHui"},"content":"    public boolean equalsOrderInsensitive(UniqueSubjectList other) {"},{"lineNumber":122,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":124,"author":{"gitID":"TeyXinHui"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":125,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":127,"author":{"gitID":"TeyXinHui"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"TeyXinHui"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitID":"TeyXinHui"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"TeyXinHui"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":133,"author":{"gitID":"TeyXinHui"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"TeyXinHui"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":135,"author":{"gitID":"TeyXinHui"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"TeyXinHui"},"content":"    public static class DuplicateSubjectException extends DuplicateDataException {"},{"lineNumber":137,"author":{"gitID":"TeyXinHui"},"content":"        protected DuplicateSubjectException() {"},{"lineNumber":138,"author":{"gitID":"TeyXinHui"},"content":"            super(\"Operation would result in duplicate subject\");"},{"lineNumber":139,"author":{"gitID":"TeyXinHui"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"TeyXinHui"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"TeyXinHui"},"content":""},{"lineNumber":142,"author":{"gitID":"TeyXinHui"},"content":"}"},{"lineNumber":143,"author":{"gitID":"TeyXinHui"},"content":"//@@author"}],"authorContributionMap":{"TeyXinHui":131,"-":12}}]
