var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F11-B1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"* *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"}],"authorContributionMap":{"-":5,"davidten":1}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d CRM Book - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B1/main"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"By: `Team F11-B1`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"//tag::description[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"A CRM System is a Customer Relationship Management system, mainly used in the real world by Sales and Marketing teams to manage their business-customer relationships, as well as to manage business contacts, employees, clients, contract wins and sales leads. Some examples of popular CRMs include Salesforce, SAP, and Microsoft Dynamics CRM."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"A common complaint against such traditional CRMs is that they are large, contain too many functionalities, and in some cases even require additional training before using. (Search for: Salesforce Trailhead)"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"The CRM Book application aims to assist Salespeople by implementing the most important functionality of a CRM System, that is, managing their business contacts and clients. In a CRM, business contacts are seperated into two categories, Leads and Contacts. Leads are people that the salesperson has sold to in the past, while Contacts are people whom the salesperson has sold to before, even if the company they represent may no longer purchase the product. Also, accounts represent Companies."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Some unique features of this CRM in v1.5 that benefits the individual Salesperson even more is an enhanced detection of duplicates through fields such as email and phone number, importing of a CSV file of leads that the salesperson may have bought through a mailing list or obtained through a tradeshow, sharing of posts about their company through LinkedIn, as well as seeing directions to their Lead\u0027s office through Google Maps. It is important to note that these features all enhance the experience of the salesperson, and does not distract from the core functionality of managing their relationship with their leads and contacts."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"Future releases of the CRM Book would include the ability to schedule meetings through a Calendar, integration with other Social Media networks to post company related news, allowing a client to choose a meeting slot among a few that the salesperson has specified, and also manage the contracts that tie a Contact to an account."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"*More importantly, CRM Book is optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CRM Book can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":"//end::description[]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":40,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":".  Download the latest `crmbook.jar` link:https://github.com/CS2103JAN2018-F11-B1/main/releases[here]."},{"lineNumber":43,"author":{"gitID":"davidten"},"content":".  Copy the file to the folder you want to use as the home folder for your CRM Book."},{"lineNumber":44,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":45,"author":{"gitID":"-"},"content":"+"},{"lineNumber":46,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"* *`list`* : lists all Leads and Contacts"},{"lineNumber":53,"author":{"gitID":"davidten"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a Lead named `John Doe` to the CRM Book."},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"* **`delete`**`3` : deletes the 3rd person shown in the current list"},{"lineNumber":55,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"* In v 1.2: Able to add Leads into CRM book and convert Leads into Contacts. All commands can be performed using its respective aliases. Able to start process of LinkedIn Integration. Able to generate a color for the tags added. Able to add/remove/edit the remark of a person."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* In v 1.3: Able to detect a duplicate based on a phone number. Able to fully authenticate linkedIn, and share posts to LinkedIn. All alias commands will be completed. Auto-Complete of commands enabled. Able to sort all persons in list by name alphabetically."},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"* In v 1.4: Added Accounts. Made CRMBook look nicer."},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"davidten"},"content":"* In v 1.5: Able to find phone numbers. Able to change theme dynamically. Able to set office location and view directions via Google Maps. There are multiple themes for user to choose from."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"davidten"},"content":"* Coming in v2.0: Functional CRM, with Leads, Contacts, and Accounts. Events (such as meetings) play a role in alerting salesperson if a person needs to be reached out to. Data enrichment. Adds a parent company tag to Leads and Contacts if their company has a parent company. Example: Leads and Contacts from Skype and Nokia will have an additional tag called Microsoft."},{"lineNumber":71,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":76,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":77,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":78,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Viewing help: `h`, `help`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `h`, `help`"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"//tag::linkedinLogin[]"},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Log in to LinkedIn: `linklog`, `linkedin_login`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"Format: \u0027linklog\u0027, \u0027linkedin_login\u0027"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":91,"author":{"gitID":"-"},"content":"A LinkedIn Login is required if you want to share posts to linkedIn. If this is your first login, you will also have to give permissions for CRM Book in LinkedIn via a pop up."},{"lineNumber":92,"author":{"gitID":"-"},"content":"//end::linkedinLogin[]"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"//tag::linkedinShare[]"},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Share a Post on LinkedIn: `linkshare`, `linkedin_share`"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Format: \u0027linkshare [content]\u0027, \u0027linkedin_share [content]\u0027"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"Sheikh-Umar"},"content":"[TIP]"},{"lineNumber":100,"author":{"gitID":"-"},"content":"This command will allow you to share a post on LinkedIn to all your connections. This will allow you to share any interesting marketing materials your company may be involved in quickly."},{"lineNumber":101,"author":{"gitID":"-"},"content":"//end::linkedinShare[]"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Adding a Lead: `a`, `add`"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Sheikh-Umar"},"content":"Adds a Lead to the CRM +"},{"lineNumber":106,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`, `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"A Lead can have any number of tags (including 0). +"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"To note, to create a Contact, a Lead must be converted; see convert."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":116,"author":{"gitID":"Sheikh-Umar"},"content":"* `a n/Jake Tan t/friend e/jaketan@example.com a/Simei Street 1, block 999, #09-09 p/1234567`"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Listing all persons : `l`, `list`"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"Sheikh-Umar"},"content":"Shows a list of all Leads and Contacts in the CRM. +"},{"lineNumber":121,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `l`, `list`"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"Sheikh-Umar"},"content":"//tag::displaylist[]"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Displaying all Leads or all Contacts: `disp`, `display`"},{"lineNumber":125,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":126,"author":{"gitID":"Sheikh-Umar"},"content":"Shows a list of either Leads or Contacts in the CRM. +"},{"lineNumber":127,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `disp Lead`, `display Lead`, `disp Contact`, `display Contact`"},{"lineNumber":128,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":129,"author":{"gitID":"Sheikh-Umar"},"content":"****"},{"lineNumber":130,"author":{"gitID":"Sheikh-Umar"},"content":"* The search is case insensitive. e.g `lead` will match `Lead`"},{"lineNumber":131,"author":{"gitID":"Sheikh-Umar"},"content":"* Only a full word will be matched e.g. `Contact` will not match `Contacts`"},{"lineNumber":132,"author":{"gitID":"Sheikh-Umar"},"content":"****"},{"lineNumber":133,"author":{"gitID":"Sheikh-Umar"},"content":"//end::displaylist[]"},{"lineNumber":134,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":135,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Editing a person : `e`, `edit`"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"davidten"},"content":"Edits an existing Lead or Contact in the CRM Book. +"},{"lineNumber":138,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `e INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`, `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"****"},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":146,"author":{"gitID":"-"},"content":"****"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":152,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":154,"author":{"gitID":"Sheikh-Umar"},"content":"* `e 2 p/99990000 e/johndoe@example.com` +"},{"lineNumber":155,"author":{"gitID":"Sheikh-Umar"},"content":"Edits the phone number and email address of the 1st person to be `99990000` and `johndoe@example.com` respectively."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Adding nonessential details of a person : `adddetails`"},{"lineNumber":158,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":159,"author":{"gitID":"davidten"},"content":"Edits an existing person in the CRM Book. +"},{"lineNumber":160,"author":{"gitID":"WoodyLau"},"content":"For Leads, format: `adddetails INDEX [c/COMPANY] [i/INDUSTRY] [r/RATING (number from 1 to 5)] [t/TITLE] [w/WEBSITE]` +"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"WoodyLau"},"content":"For Contacts, format: `adddetails INDEX [c/COMPANY] [d/DEPARTMENT] [t/TITLE]`"},{"lineNumber":163,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":164,"author":{"gitID":"WoodyLau"},"content":"****"},{"lineNumber":165,"author":{"gitID":"WoodyLau"},"content":"* Adds details to the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":166,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":167,"author":{"gitID":"WoodyLau"},"content":"****"},{"lineNumber":168,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":169,"author":{"gitID":"WoodyLau"},"content":"Examples:"},{"lineNumber":170,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":171,"author":{"gitID":"WoodyLau"},"content":"* `adddetails 1 c/Macrosoft r/4` +"},{"lineNumber":172,"author":{"gitID":"WoodyLau"},"content":"For the first person, makes Macrosoft the company and sets the rating to 4. This person must be a Lead."},{"lineNumber":173,"author":{"gitID":"WoodyLau"},"content":"* `adddetails 2 d/IT t/Mr.` +"},{"lineNumber":174,"author":{"gitID":"WoodyLau"},"content":"Sets the department of the 2nd person to be `IT` and sets the title to `Mr.`. This person must be a Contact."},{"lineNumber":175,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":176,"author":{"gitID":"WoodyLau"},"content":"//tag::editdetails[]"},{"lineNumber":177,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Editing nonessential details of a person : `editdetails`"},{"lineNumber":178,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":179,"author":{"gitID":"davidten"},"content":"Edits an existing person in the CRM Book. +"},{"lineNumber":180,"author":{"gitID":"WoodyLau"},"content":"For Leads, format: `editdetails INDEX [c/COMPANY] [i/INDUSTRY] [r/RATING (number from 1 to 5)] [t/TITLE] [w/WEBSITE]` +"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"WoodyLau"},"content":"For Contacts, format: `editdetails INDEX [c/COMPANY] [d/DEPARTMENT] [t/TITLE]`"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"****"},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":188,"author":{"gitID":"WoodyLau"},"content":"****"},{"lineNumber":189,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":190,"author":{"gitID":"WoodyLau"},"content":"Examples:"},{"lineNumber":191,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":192,"author":{"gitID":"WoodyLau"},"content":"* `editdetails 1 c/Macrosoft r/4` +"},{"lineNumber":193,"author":{"gitID":"WoodyLau"},"content":"For the first person, changes the company to Macrosoft and sets the rating to 4. This person must be a Lead."},{"lineNumber":194,"author":{"gitID":"WoodyLau"},"content":"* `editdetails 2 d/IT t/Mr.` +"},{"lineNumber":195,"author":{"gitID":"WoodyLau"},"content":"Edits the department of the 2nd person to be `IT` and sets the title to `Mr.`. This person must be a Contact."},{"lineNumber":196,"author":{"gitID":"WoodyLau"},"content":"//end::editdetails[]"},{"lineNumber":197,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":198,"author":{"gitID":"WoodyLau"},"content":"//tag::convert[]"},{"lineNumber":199,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Converting a person : `con`, `convert`"},{"lineNumber":200,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":201,"author":{"gitID":"davidten"},"content":"Converts an existing Lead in the CRM Book to a Contact. For further description of Leads and Contacts, see the Introduction +"},{"lineNumber":202,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `con INDEX`, `convert INDEX`"},{"lineNumber":203,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":204,"author":{"gitID":"WoodyLau"},"content":"****"},{"lineNumber":205,"author":{"gitID":"WoodyLau"},"content":"* Converts the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":206,"author":{"gitID":"WoodyLau"},"content":"* If the indicated person is a Contact, an error is thrown"},{"lineNumber":207,"author":{"gitID":"WoodyLau"},"content":"* This command can be undone and redone as necessary"},{"lineNumber":208,"author":{"gitID":"WoodyLau"},"content":"****"},{"lineNumber":209,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":210,"author":{"gitID":"WoodyLau"},"content":"Examples:"},{"lineNumber":211,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":212,"author":{"gitID":"WoodyLau"},"content":"* `convert 2` +"},{"lineNumber":213,"author":{"gitID":"Sheikh-Umar"},"content":"Converts the 2nd person in the list to a Contact."},{"lineNumber":214,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":215,"author":{"gitID":"WoodyLau"},"content":"* `con 4` +"},{"lineNumber":216,"author":{"gitID":"Sheikh-Umar"},"content":"Converts the 4th person in the list to a Contact."},{"lineNumber":217,"author":{"gitID":"WoodyLau"},"content":"//end::convert[]"},{"lineNumber":218,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":219,"author":{"gitID":"WoodyLau"},"content":"//tag::account[]"},{"lineNumber":220,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Adding an Account to a Contact : `account`"},{"lineNumber":221,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":222,"author":{"gitID":"WoodyLau"},"content":"Adds an Account to a Contact. +"},{"lineNumber":223,"author":{"gitID":"WoodyLau"},"content":"Format: `account INDEX an/ACCOUNTNAME`"},{"lineNumber":224,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":225,"author":{"gitID":"WoodyLau"},"content":"****"},{"lineNumber":226,"author":{"gitID":"WoodyLau"},"content":"* Adds an Account `ACCOUNTNAME` to the Contact at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":227,"author":{"gitID":"WoodyLau"},"content":"* Contacts can only have one Account. If the Contact already has an Account, it will be replaced."},{"lineNumber":228,"author":{"gitID":"WoodyLau"},"content":"****"},{"lineNumber":229,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":230,"author":{"gitID":"WoodyLau"},"content":"Examples:"},{"lineNumber":231,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":232,"author":{"gitID":"WoodyLau"},"content":"* `account 2 an/Macrosoft` +"},{"lineNumber":233,"author":{"gitID":"WoodyLau"},"content":"Adds the Account Macrosoft to the 2nd person in the list"},{"lineNumber":234,"author":{"gitID":"WoodyLau"},"content":"//end::account[]"},{"lineNumber":235,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":236,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Locating persons by name: `f`, `find`"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"Sheikh-Umar"},"content":"Finds persons whose key information contain any of the given keywords. +"},{"lineNumber":239,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `f KEYWORD [MORE_KEYWORDS]`, `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"****"},{"lineNumber":242,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":243,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":244,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":245,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":246,"author":{"gitID":"-"},"content":"****"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":251,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":252,"author":{"gitID":"Sheikh-Umar"},"content":"* `find 99881234` +"},{"lineNumber":253,"author":{"gitID":"Sheikh-Umar"},"content":"Returns the Lead or Contact with the phone number `99881234`"},{"lineNumber":254,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":255,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":256,"author":{"gitID":"Sheikh-Umar"},"content":"* `find johntan@gmail.com` +"},{"lineNumber":257,"author":{"gitID":"Sheikh-Umar"},"content":"Returns the Lead or Contact with the email address `johntan@gmail.com`"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Deleting a person : `d`, `delete`"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"davidten"},"content":"Deletes the specified person from the CRM Book. +"},{"lineNumber":262,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `d INDEX`, `delete INDEX`"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"****"},{"lineNumber":265,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":266,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":267,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":268,"author":{"gitID":"-"},"content":"****"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":273,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":274,"author":{"gitID":"Sheikh-Umar"},"content":"Deletes the 2nd person in the CRM"},{"lineNumber":275,"author":{"gitID":"Sheikh-Umar"},"content":"* `list` +"},{"lineNumber":276,"author":{"gitID":"Sheikh-Umar"},"content":"`d 4` +"},{"lineNumber":277,"author":{"gitID":"Sheikh-Umar"},"content":"Deletes the 4th person in the CRM"},{"lineNumber":278,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":280,"author":{"gitID":"Sheikh-Umar"},"content":"Deletes the 1st person in the results of the `find` command"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Selecting a person : `s`, `select`"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"WoodyLau"},"content":"Selects the person identified by the index number used in the last Leads/Contacts listing. +"},{"lineNumber":285,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `s INDEX`, `select INDEX`"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"****"},{"lineNumber":288,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":289,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":290,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":291,"author":{"gitID":"-"},"content":"****"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":297,"author":{"gitID":"Sheikh-Umar"},"content":"Selects the 2nd person in the CRM Book"},{"lineNumber":298,"author":{"gitID":"Sheikh-Umar"},"content":"* `list` +"},{"lineNumber":299,"author":{"gitID":"Sheikh-Umar"},"content":"`select 4` +"},{"lineNumber":300,"author":{"gitID":"Sheikh-Umar"},"content":"Selects the 4th person in the CRM Book"},{"lineNumber":301,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":303,"author":{"gitID":"Sheikh-Umar"},"content":"Selects the 1st person in the results of the `find` command"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"//tag::bulkimport[]"},{"lineNumber":306,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing a CSV file: `i`, `import`"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"When you have a CSV file of Leads, you can directly import the file to the CRM Book without adding them one by one. +"},{"lineNumber":309,"author":{"gitID":"-"},"content":"Format: `i PATH`, `import PATH`"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"****"},{"lineNumber":312,"author":{"gitID":"-"},"content":"* The path refers to the path of the file that the user wants to import."},{"lineNumber":313,"author":{"gitID":"-"},"content":"* The path must be a valid file path."},{"lineNumber":314,"author":{"gitID":"-"},"content":"* The columns in the CSV file should be `name`, `phone`, `email`, `address` respectively. The order has to be followed restrictively to guarantee the success of import."},{"lineNumber":315,"author":{"gitID":"-"},"content":"****"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"* `import ./sample.csv` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"Imports the file `sample.csv` to the CRM Book"},{"lineNumber":321,"author":{"gitID":"-"},"content":"//end::bulkimport[]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Listing entered commands : `hist`, `history`"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":326,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `hist`, `history`"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":329,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":330,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":331,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":334,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Undoing previous command : `u`, `undo`"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"davidten"},"content":"Restores the CRM Book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":337,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `u`, `undo`"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":341,"author":{"gitID":"Sheikh-Umar"},"content":"Undoable commands: those commands that modify the CRM Book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":347,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":351,"author":{"gitID":"Sheikh-Umar"},"content":"`l` +"},{"lineNumber":352,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"Sheikh-Umar"},"content":"* `select 1` +"},{"lineNumber":356,"author":{"gitID":"Sheikh-Umar"},"content":"`l` +"},{"lineNumber":357,"author":{"gitID":"Sheikh-Umar"},"content":"`u` +"},{"lineNumber":358,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":361,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":362,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":363,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `r`, `redo`"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":368,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `r`, `redo`"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":373,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":374,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":377,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":378,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"Sheikh-Umar"},"content":"* `delete 1` +"},{"lineNumber":381,"author":{"gitID":"Sheikh-Umar"},"content":"`r` +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":386,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":388,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":390,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Clearing all entries : `c`, `clear`"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"Sheikh-Umar"},"content":"Clears all entries from the CRM. +"},{"lineNumber":395,"author":{"gitID":"-"},"content":"Format: `c`, `clear`"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Exiting the program : `ex`, `exit`"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":400,"author":{"gitID":"Sheikh-Umar"},"content":"Format: `ex`, `exit`"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"//tag::remark[]"},{"lineNumber":403,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add or remove a remark to a Lead or Contact: `rem`, `remark`"},{"lineNumber":404,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":405,"author":{"gitID":"WoodyLau"},"content":"Adds or removes a remark to a particular Lead or Contact. +"},{"lineNumber":406,"author":{"gitID":"-"},"content":"Format to add remark: `rem [INDEX] r/[KEYWORD]`, `remark [INDEX] r/[KEYWORD]`"},{"lineNumber":407,"author":{"gitID":"Sheikh-Umar"},"content":"Examples:"},{"lineNumber":408,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"* `rem 1 r/Happy` +"},{"lineNumber":410,"author":{"gitID":"WoodyLau"},"content":"Adds the remark \u0027Happy\u0027 to the 1st Lead or Contact."},{"lineNumber":411,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"* `remark 4 r/` +"},{"lineNumber":413,"author":{"gitID":"WoodyLau"},"content":"Removes the remark of the 4th Lead or Contact."},{"lineNumber":414,"author":{"gitID":"-"},"content":"//end::remark[]"},{"lineNumber":415,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"//tag::sort[]"},{"lineNumber":417,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sort persons by name in alphabetical order: `st`, `sort`"},{"lineNumber":418,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"Sorts all persons in CRM Book by name. +"},{"lineNumber":420,"author":{"gitID":"-"},"content":"Format: `st`, `sort`"},{"lineNumber":421,"author":{"gitID":"-"},"content":"//end::sort[]"},{"lineNumber":422,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"//tag::changetheme[]"},{"lineNumber":424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Change theme: `changetheme`  [since v1.4]"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"Changes color theme of CRM Book to the user specified theme. Currently, there are three themes, namely `dark`, `light` and `blue`."},{"lineNumber":427,"author":{"gitID":"-"},"content":"The `blue` theme is the default theme. When user opens CRM Book for the first time, blue theme will be on display."},{"lineNumber":428,"author":{"gitID":"-"},"content":"If the user changes the theme, it will be saved in user preferences so that CRM Book will display the user preferred theme in subsequent runs. +"},{"lineNumber":429,"author":{"gitID":"-"},"content":"Format: `changetheme THEME` +"},{"lineNumber":430,"author":{"gitID":"-"},"content":"Example: `changetheme light`"},{"lineNumber":431,"author":{"gitID":"-"},"content":"//end::changetheme[]"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"davidten"},"content":"CRM Book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":436,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"// tag::setlocation[]"},{"lineNumber":439,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting current location: `set_office_address`, `setA`"},{"lineNumber":440,"author":{"gitID":"-"},"content":"Sets the current office address for Google Maps +"},{"lineNumber":441,"author":{"gitID":"-"},"content":"Format: `setA a/ADDRESS"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":444,"author":{"gitID":"-"},"content":"Setting this address is required if you want to see the Google Map directions to a customer\u0027s location"},{"lineNumber":445,"author":{"gitID":"-"},"content":"// end::setlocation[]"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"// tag::getdirections[]"},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Get directions to customer\u0027s office: commandless"},{"lineNumber":449,"author":{"gitID":"-"},"content":"In order to use this, you must have an office address set. You can then either click on a person card or use the `select` command in order to view the Google Maps directions."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":452,"author":{"gitID":"-"},"content":"If a person card was selected while the office location is set, you have to select a different person card to see the map"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":455,"author":{"gitID":"-"},"content":"Success of this command is also dependent on the success of Google intepreting the address entered"},{"lineNumber":456,"author":{"gitID":"-"},"content":"// end::getdirections[]"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":461,"author":{"gitID":"Sheikh-Umar"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CRM folder."},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"Sheikh-Umar"},"content":"* *Add* `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`, `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":466,"author":{"gitID":"Sheikh-Umar"},"content":"e.g. `a n/John Tan p/99991111 e/johntan@example.com a/123, Tampines Rd, 54321 t/colleague`"},{"lineNumber":467,"author":{"gitID":"WoodyLau"},"content":"* *AddDetails* :  For Leads: `adddetails INDEX [c/COMPANY] [i/INDUSTRY] [r/RATING (number from 1 to 5)] [t/TITLE] [w/WEBSITE]` +"},{"lineNumber":468,"author":{"gitID":"WoodyLau"},"content":"For Contacts: `adddetails INDEX [c/COMPANY] [d/DEPARTMENT] [t/TITLE]`"},{"lineNumber":469,"author":{"gitID":"-"},"content":"* *Change Theme* : `changetheme THEME` +"},{"lineNumber":470,"author":{"gitID":"-"},"content":"e.g. `changetheme dark`"},{"lineNumber":471,"author":{"gitID":"Sheikh-Umar"},"content":"* *Clear* : `c`, `clear`"},{"lineNumber":472,"author":{"gitID":"WoodyLau"},"content":"* *Convert* : `con INDEX`, `convert INDEX`"},{"lineNumber":473,"author":{"gitID":"Sheikh-Umar"},"content":"* *Delete* : `d INDEX`, `delete INDEX` +"},{"lineNumber":474,"author":{"gitID":"Sheikh-Umar"},"content":"e.g. `d 5`, `delete 3`"},{"lineNumber":475,"author":{"gitID":"Sheikh-Umar"},"content":"//tag::displaycommandsummary[]"},{"lineNumber":476,"author":{"gitID":"Sheikh-Umar"},"content":"* *Display* : `disp KEYWORD`, `display KEYWORD` +"},{"lineNumber":477,"author":{"gitID":"Sheikh-Umar"},"content":"e.g. `disp Lead`, `display Contact`"},{"lineNumber":478,"author":{"gitID":"Sheikh-Umar"},"content":"//end::displaycommandsummary[]"},{"lineNumber":479,"author":{"gitID":"Sheikh-Umar"},"content":"* *Edit* : `e INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...`, `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":480,"author":{"gitID":"-"},"content":"e.g. `e 1 n/John Tan e/johntan@example.com` +"},{"lineNumber":481,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":482,"author":{"gitID":"WoodyLau"},"content":"* *EditDetails* :  For Leads: `editdetails INDEX [c/COMPANY] [i/INDUSTRY] [r/RATING (number from 1 to 5)] [t/TITLE] [w/WEBSITE]` +"},{"lineNumber":483,"author":{"gitID":"WoodyLau"},"content":"For Contacts: `editdetails INDEX [c/COMPANY] [d/DEPARTMENT] [t/TITLE]`"},{"lineNumber":484,"author":{"gitID":"-"},"content":"* *Exit* : `ex`, `exit`"},{"lineNumber":485,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::findcommandsummary[]"},{"lineNumber":486,"author":{"gitID":"Sheikh-Umar"},"content":"* *Find* : `f KEYWORD [MORE_KEYWORDS]`, `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":487,"author":{"gitID":"Sheikh-Umar"},"content":"e.g. `f Chris`, `find James Jake`, `f 99881122`, `find john@gmail.com`"},{"lineNumber":488,"author":{"gitID":"Sheikh-Umar"},"content":"// end::findcommandsummary[]"},{"lineNumber":489,"author":{"gitID":"-"},"content":"* *Help* : `h`, `help`"},{"lineNumber":490,"author":{"gitID":"-"},"content":"* *History* : `hist`, `history`"},{"lineNumber":491,"author":{"gitID":"-"},"content":"* *Import* : `i PATH`, `import PATH`"},{"lineNumber":492,"author":{"gitID":"-"},"content":"* *Linkedin_login* : `linklog`, `linkedin_login`"},{"lineNumber":493,"author":{"gitID":"-"},"content":"* *Linkedin_share* : `linkshare [content]`, `linkedin_share CONTENT`"},{"lineNumber":494,"author":{"gitID":"Sheikh-Umar"},"content":"* *List* : `l`, `list`"},{"lineNumber":495,"author":{"gitID":"Sheikh-Umar"},"content":"* *Redo* : `r`, `redo`"},{"lineNumber":496,"author":{"gitID":"Sheikh-Umar"},"content":"* *Remark* : `rem`, `remark`"},{"lineNumber":497,"author":{"gitID":"-"},"content":"* *SetOfficeAddress* : `set_office_address a/ADDRESS`, `setA a/ADDRESS`"},{"lineNumber":498,"author":{"gitID":"Sheikh-Umar"},"content":"* *Select* : `s INDEX`, `select INDEX` +"},{"lineNumber":499,"author":{"gitID":"Sheikh-Umar"},"content":"e.g.`s 1`, `select 2`"},{"lineNumber":500,"author":{"gitID":"-"},"content":"* *Sort* : `st`, `sort`"},{"lineNumber":501,"author":{"gitID":"-"},"content":"* *Undo* : `u`, `undo`"}],"authorContributionMap":{"Sheikh-Umar":99,"WoodyLau":79,"-":311,"davidten":12}},{"path":"docs/team/WoodyLau.adoc","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"\u003d Woody Lau - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CRM Book"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"CRM Book is a desktop application targeted for salespeople. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":"This application allows salespeople to organize their Leads, Contacts, and Accounts that suits their liking, as well as address problems that symptomatic in the sales industry, such as identifying duplicates."},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"* *Major enhancement*: Separated out *Leads and Contacts* from Persons"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"** What it does: supports the rest of the CRM Book by having separate classes for commands."},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"** Justification: This feature is core for a CRM as Leads and Contacts are the primary types of people in the CRM."},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"** Highlights: This enhancement affects all commands and classes that accessed Persons. It required researching which commands would need to be modified to target a specific type, or could be generalized for both. The implementation too was challenging as it required discovering the many existing classes that needed changing."},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"** Credits: The original Person class from which Leads and Contacts were extended."},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"* *Minor enhancement*: Added *Accounts*"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"** What it does: gives Contact a special class for companies."},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"** Justification: Accounts are important for existing CRMs as they hold contracts and other aspects when connected to Contacts. These other features are not implemented in CRM Book."},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"** Credits: The Tag class as it provided inspiration for saving Accounts into the AddressBook and XML save file."},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"* *Minor enhancement*: Created a *convert command* to change Leads into Contacts"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"* *Minor enhancement*: Created an *editdetails command* that adds fields that are unique to Leads or Contacts, and created fields in the UI that reflects the changes."},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/functional/WoodyLau.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/test/WoodyLau.md[Test code]]"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"* *Other contributions*:"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"** Community:"},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"*** Reported bugs and suggestions for other teams in the class"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"** Tools:"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"*** Integrated Travis to the team repo"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"include::../UserGuide.adoc[tag\u003deditdetails]"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"include::../UserGuide.adoc[tag\u003dconvert]"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"include::../UserGuide.adoc[tag\u003daccount]"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"include::../DeveloperGuide.adoc[tag\u003dleadcontact]"}],"authorContributionMap":{"WoodyLau":33,"-":26}},{"path":"docs/team/Sheikh-Umar.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d Sheikh Umar Bin Shaik Abu Bakar Banafe\u0027 - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CRM Book"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"CRM Book is a desktop application targeted for salespeople. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"This application allows salespeople to organize their Leads, Contacts, and Accounts that suits their liking, as well as address problems that are symptomatic in the sales industry,"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"such as identifying duplicates."},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"* *Major enhancement*: Displaying list of non-duplicate Leads and Contacts"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"** What it does: Informs the user if a Lead to be added in is already in the CRM Book as either a Lead or a Contact, and allows the user to see a Lead list and Contact list separately."},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"** Justification: Current CRM applications fail to detect duplicates Leads and Contacts. As a result, these CRM applications may store a Lead or Contact numerous times, hence resulting in redundant data. Furthermore, these CRM applications may not be able to display Leads and Contacts separately."},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"Hence, this enhancement tackles these issues so that the user will have a more pleasant experience with managing his/her Leads and Contacts."},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives."},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"* *Minor enhancement*: Created an alias command for basic commands"},{"lineNumber":24,"author":{"gitID":"Sheikh-Umar"},"content":"** What it does: User can make the CRM Book perform basic commands with a few letters."},{"lineNumber":25,"author":{"gitID":"Sheikh-Umar"},"content":"** Justification: Salespeople may want the CRM Book to do a basic command as quickly as possible. This will involve typing as few letters as possible."},{"lineNumber":26,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":27,"author":{"gitID":"Sheikh-Umar"},"content":"* *Minor enhancement*: Enhanced the Find command to be able to search for phone numbers and email address"},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":"** What it does: User can search for Leads and Contacts based on phone numbers and email address."},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"** Justification: Salespeople may want to search for Leads and Contacts based on personal information other than names."},{"lineNumber":30,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/functional/Sheikh-Umar.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/test/Sheikh-Umar.md[Test code]]"},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":33,"author":{"gitID":"Sheikh-Umar"},"content":"* *Other contributions*:"},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":35,"author":{"gitID":"Sheikh-Umar"},"content":"** Community:"},{"lineNumber":36,"author":{"gitID":"Sheikh-Umar"},"content":"*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-W09-B2/main/issues/197[Issue #197], https://github.com/CS2103JAN2018-W09-B2/main/issues/202[Issue #202])"},{"lineNumber":37,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":38,"author":{"gitID":"Sheikh-Umar"},"content":"** Project management:"},{"lineNumber":39,"author":{"gitID":"Sheikh-Umar"},"content":"*** Managed the collation of code of my team for releases `v1.4` - `v1.5` (3 releases) on GitHub"},{"lineNumber":40,"author":{"gitID":"Sheikh-Umar"},"content":"** Enhancements to existing features:"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":"*** Made the find command be able to search for phone numbers and email addresses (Pull request https://github.com/CS2103JAN2018-F11-B1/main/pull/200[#200])"},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":43,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":44,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Sheikh-Umar"},"content":"include::../UserGuide.adoc[tag\u003ddisplaylist]"},{"lineNumber":50,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":51,"author":{"gitID":"Sheikh-Umar"},"content":"include::../UserGuide.adoc[tag\u003ddisplaycommandsummary]"},{"lineNumber":52,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":53,"author":{"gitID":"Sheikh-Umar"},"content":"include::../UserGuide.adoc[tag\u003dfindcommandsummary]"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dalias]"},{"lineNumber":62,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":63,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dduplicate]"},{"lineNumber":64,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":65,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003ddisplay]"},{"lineNumber":66,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":67,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003daddparentcompanytag]"},{"lineNumber":68,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":69,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dfindbyphonenumberandemailaddress]"},{"lineNumber":70,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":71,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003ddisplaylistusecase]"},{"lineNumber":72,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":73,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003daddparentcompanytagusecase]"},{"lineNumber":74,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":75,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dfindphonenumberandemailaddressusecase]"},{"lineNumber":76,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":77,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dtestingfordisplaycommand]"},{"lineNumber":78,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":79,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dtestingforduplicatedetection]"},{"lineNumber":80,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":81,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dtestingforexecutingaliascommands]"},{"lineNumber":82,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":83,"author":{"gitID":"Sheikh-Umar"},"content":"include::../DeveloperGuide.adoc[tag\u003dtestingforfindingphonenumberandemailaddresses]"}],"authorContributionMap":{"Sheikh-Umar":62,"-":21}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"CRM Book was developed by the below team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Ten Chee Onn David Jonathan"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::davidTen.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"{empty}[https://github.com/davidten[github]] [\u003c\u003cDavidTen#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Team Lead + Scheduling and Tracking + CRM Expert +"},{"lineNumber":17,"author":{"gitID":"-"},"content":"Responsibilities: LinkedIn Integration, Google Maps"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Sheikh Umar Bin Shaik Abu Bakar Banafe\u0027"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"image::sheikh-umar.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"{empty}[https://github.com/Sheikh-Umar[github]] [\u003c\u003cSheikh-Umar#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Role: Documentation + Deliverables and deadlines +"},{"lineNumber":26,"author":{"gitID":"Sheikh-Umar"},"content":"Responsibilities: Duplicate detection, Basic command aliases, Display of Lead and Contact lists, Enhancing the Find Command"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Woody Grant Lau"},{"lineNumber":31,"author":{"gitID":"-"},"content":"image::WoodyLau.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"{empty}[http://github.com/WoodyLau[github]] [\u003c\u003cWoodyLau#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Role: Developer + Git Expert + Integration +"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"Responsibilities: Lead, Contact and Account objects."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d ZHU Leyan"},{"lineNumber":40,"author":{"gitID":"-"},"content":"image::zhuleyan.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"{empty}[http://github.com/zhuleyan[github]] [\u003c\u003czhuleyan#, portfolio\u003e\u003e]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Responsibilities: Remark Command + Sort Command + Bulk Import"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Liu Yiming"},{"lineNumber":49,"author":{"gitID":"-"},"content":"image::LiuYiming.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"{empty}[http://github.com/zhuleyan[github]] [\u003c\u003cliuyiming#, portfolio\u003e\u003e]"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"Role: Developer + UI designer +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"Responsibilities: Color tag + Auto Complete + Change Theme"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Sheikh-Umar":4,"WoodyLau":3,"-":48}},{"path":"docs/team/DavidTen.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Ten Chee Onn David Jonathan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CRM Book"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"CRM Book application aims to assist Salespeople by implementing the most important functionality of a CRM System, that is, managing their business contacts and clients. In a CRM, buisness contacts are seperated into two categories, Leads and Contacts. Companies are usually added as Contacts."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"Some unique features of this CRM that benefits the individual Salesperson even more is an enhanced detection of duplicates through fields such as email and phone number, importing of a CSV file of leads that the salesperson may have bought through a mailing list or obtained through a tradeshow, sharing of posts about their company through LinkedIn, as well as seeing directions to their Lead’s office through Google Maps. It is important to note that these features all enhance the experience of the salesperson, and does not distract from the core functionality of managing their relationship with their leads and contacts."},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"The user interacts with CRM Book using a CLI, and it has a GUI created with JavaFX. It is written in Java."},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"* *Major enhancement*: Post a Status Update onto LinkedIn"},{"lineNumber":20,"author":{"gitID":"-"},"content":"** What it does: After a Salesperson has logged in to LinkedIn via the linkedin_login command, he will be able to post status updates via the linkedin_share command."},{"lineNumber":21,"author":{"gitID":"-"},"content":"** Justification: This feature improves CRM Book significantly in that it does not require the Salesperson to navigate away from CRM Book just to post a status update about their company. In the Sales and Marketing world, LinkedIn is used often to promote news articles and other related company marketing materials, and this feature reduces the friction generated by doing"},{"lineNumber":22,"author":{"gitID":"-"},"content":"** Highlights: This enhancement required an in-depth research into encryption and storing of API Secrets in a native application. It also made use of LinkedIn\u0027s OAuth2 authentication scheme as well as API be able to work. The implementation was challenging as it required the exploration of new APIs outside of the address book. The enhancement also required studying more about events and how they are handled, as well as handling different threads on Java FX, in particular handling the \u0027Not on FX application thread\u0027 exception."},{"lineNumber":23,"author":{"gitID":"-"},"content":"** Credits: LinkedIn API"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Major enhancement*: View directions to a customer or potential customer\u0027s office via Google Maps"},{"lineNumber":26,"author":{"gitID":"-"},"content":"** What it does: After a Salesperson has set their office location on the CRM Book, they will be able to view directions to a customer\u0027s or potential customer\u0027s office by clicking on their name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Justification: This feature improves CRM Book significantly in that it does not require the Salesperson to navigate away from CRM Book just to find directions to their client\u0027s location, or to know how long it will take to get there. Salespeople in general travel to other offices often to do a demo or to pitch a product. With this feature, the salesperson will not have to use their smartphone to view directions while still in the office. Rather, they will be able to view directions in the CRM Book and then leave the office when necessary."},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Highlights: This enhancement involved learning more about Google Map\u0027s webservice, studying between the different APIs and other options that they provided, as well as research on how to use the config.json file in the CRM Book."},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Credits: Google Maps URLs"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/functional/davidten.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/test/davidten.md[Test code]]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Managed releases `v1.2` - `v1.5rc` (5 releases) on GitHub"},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-W13-B3/main/issues/157[Issue #157], https://github.com/CS2103JAN2018-W13-B3/main/issues/132[Issue #132], https://github.com/CS2103JAN2018-W13-B3/main/issues/133[Issue #133], https://github.com/CS2103JAN2018-W13-B3/main/issues/134[Issue #134], https://github.com/CS2103JAN2018-W13-B3/main/issues/136[Issue #136], https://github.com/CS2103JAN2018-W13-B3/main/issues/139[Issue #139], https://github.com/CS2103JAN2018-W13-B3/main/issues/140[Issue #140], https://github.com/CS2103JAN2018-W13-B3/main/issues/141[Issue #141], https://github.com/CS2103JAN2018-W13-B3/main/issues/145[Issue #145], https://github.com/CS2103JAN2018-W13-B3/main/issues/149[Issue #149])"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Contributed to forum discussions (examples:  https://nus-cs2103-ay1718s2.slack.com/archives/C8K2W5WTH/p1523377709000303[1], https://nus-cs2103-ay1718s2.slack.com/archives/C8K2W5WTH/p1521906587000027[2], https://nus-cs2103-ay1718s2.slack.com/archives/C8K2W5WTH/p1521473983000781[3])"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"include::../UserGuide.adoc[tag\u003ddescription]"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dlinkedinLogin]"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dlinkedinShare]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dsetlocation]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dgetdirections]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dlinkedinlogin]"},{"lineNumber":65,"author":{"gitID":"davidten"},"content":""},{"lineNumber":66,"author":{"gitID":"davidten"},"content":"include::../DeveloperGuide.adoc[tag\u003dlinkedinshare]"},{"lineNumber":67,"author":{"gitID":"davidten"},"content":""},{"lineNumber":68,"author":{"gitID":"davidten"},"content":"include::../DeveloperGuide.adoc[tag\u003dsettingGoogleLocation]"},{"lineNumber":69,"author":{"gitID":"davidten"},"content":""},{"lineNumber":70,"author":{"gitID":"davidten"},"content":"include::../DeveloperGuide.adoc[tag\u003dviewDirections]"}],"authorContributionMap":{"-":62,"davidten":8}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"\u003d CRM Book"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"https://travis-ci.org/CS2103JAN2018-F11-B1/[image:https://travis-ci.org/CS2103JAN2018-F11-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F11-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F11-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"* This is a desktop Customer Relationship Manager (CRM) application. It has a GUI but most of the user interactions happen"},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"using a CLI (Command Line Interface)."},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"* It is a Java sample application specifically catered for salespeople to help them categorise leads more optimally."},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"* This application addresses the needs of salespeople, namely: categorise leads and contacts to know potential sales targets and list of leads from past sales transactions,"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":" port in their LinkedIn profile, and identifies potential duplicate entries."},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"* In summary, this CRM application is a viable form of assistance to manage Leads and Contacts more optimally for future sales decisions."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"* The original source of the code is the AddressBook-level4 project created by the SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* An open source library called Apache Commons CSV is used to process CSV files."},{"lineNumber":33,"author":{"gitID":"-"},"content":"* An open source library, ControlsFX is used to implement auto-complete of commands."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Sheikh-Umar":7,"davidten":2,"-":26}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: clear non-empty address book using alias -\u003e cleared"},{"lineNumber":35,"author":{"gitID":"Sheikh-Umar"},"content":"         */"},{"lineNumber":36,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_ALIAS + \" ab12   \");"},{"lineNumber":37,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":39,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":40,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: undo clearing address book done using alias-\u003e original address book restored */"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: clear empty address book using alias-\u003e cleared */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":12,"-":106}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" 0\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":107,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":146,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":1,"-":203,"davidten":2}},{"path":"docs/team/liuyiming.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Liu Yiming - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: CRM Book"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"CRM Book is a desktop application targeted for salespeople. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":"This application allows salespeople to organize their Leads, Contacts, and Accounts that suits their liking, as well as address problems that symptomatic in the sales industry, such as identifying duplicates."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":" * *Major enhancement*: added the ability to change the theme of CRM Book"},{"lineNumber":17,"author":{"gitID":"-"},"content":" ** What it does: allows the user to change the color theme of CRM Book according to his preference. CRM Book will save this change in user preference and display the chosen theme in subsequent runs."},{"lineNumber":18,"author":{"gitID":"-"},"content":" ** Justification: This feature improves the user experience significantly because the user can change the color theme to adapt to different light intensity of the surrounding. For example, change to dark theme when the room is dark. This would prevent eye fatigue. Alternatively, the user can choose to use a theme based on his own likings."},{"lineNumber":19,"author":{"gitID":"-"},"content":" ** Highlights: This enhancement affects all parts of UI. It required an in-depth understanding of CSS and FXML. In addition, the feature is implemented in such a way that it would be very easy for future developers to include more themes."},{"lineNumber":20,"author":{"gitID":"-"},"content":" ** Credits: The new themes are built based on the dark theme of AddressBook - Level 4."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added 10 different color styles for tags."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Minor enhancement*: enabled auto-complete of command keywords."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/functional/A0155428B.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/test/A0155428B.md[Test code]] [https://github.com/CS2103JAN2018-F11-B1/main/blob/master/collated/unused/A0155428B-unused.md[Unused code]]"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":31,"author":{"gitID":"-"},"content":"*** Enabled auto-publishing of docs"},{"lineNumber":32,"author":{"gitID":"-"},"content":"*** Enabled Coveralls"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":35,"author":{"gitID":"-"},"content":"*** Created and updated the icon of CRM Book (Pull requests https://github.com/CS2103JAN2018-F11-B1/main/pull/32[#32])"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Updated the header of CRM Book (Pull requests https://github.com/CS2103JAN2018-F11-B1/main/pull/31[#31])"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** Updated UI to include a welcome page (Pull requests https://github.com/CS2103JAN2018-F11-B1/main/pull/158[#158])"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-W14-B4/main/issues/154[Issue #154], https://github.com/CS2103JAN2018-W14-B4/main/issues/162[Issue #162], https://github.com/CS2103JAN2018-W14-B4/main/issues/165[Issue #165])"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":43,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Change theme: `changetheme`  [since v1.4]"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"Changes color theme of CRM Book to the user specified theme. Currently, there are three themes, namely `dark`, `light` and `blue`."},{"lineNumber":51,"author":{"gitID":"-"},"content":"The `blue` theme is the default theme. When user opens CRM Book for the first time, blue theme will be on display."},{"lineNumber":52,"author":{"gitID":"-"},"content":"If the user changes the theme, it will be saved in user preferences so that CRM Book will display the user preferred theme in subsequent runs. +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"Format: `changetheme THEME` +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"Example: `changetheme light`"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Auto-Complete feature"},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"To allow fast typing of commands, auto-complete of commands is implemented."},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Auto-complete is implemented through the TextFields feature of ControlsFX."},{"lineNumber":68,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"----"},{"lineNumber":70,"author":{"gitID":"-"},"content":"//In CommandBox.java"},{"lineNumber":71,"author":{"gitID":"-"},"content":"TextFields.bindAutoCompletion(commandTextField, Messages.AUTOCOMPLETE_FIELD);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"----"},{"lineNumber":73,"author":{"gitID":"-"},"content":"All the command words are included in the AUTOCOMPLETE_FIELD string array."},{"lineNumber":74,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":75,"author":{"gitID":"-"},"content":"----"},{"lineNumber":76,"author":{"gitID":"-"},"content":"//In Messages.java"},{"lineNumber":77,"author":{"gitID":"-"},"content":"public static final String[] AUTOCOMPLETE_FIELD \u003d {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    //all command keywords"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    };"},{"lineNumber":80,"author":{"gitID":"-"},"content":"----"},{"lineNumber":81,"author":{"gitID":"-"},"content":"In addition to all the command words, a COMMAND_AUTO_COMPLETE string, with both command word and prefixes, is also included for add command."},{"lineNumber":82,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":83,"author":{"gitID":"-"},"content":"----"},{"lineNumber":84,"author":{"gitID":"-"},"content":"//In AddCommand.java"},{"lineNumber":85,"author":{"gitID":"-"},"content":"public static final String COMMAND_AUTO_COMPLETE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" \""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        + PREFIX_PHONE + \" \" + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_TAG;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"----"},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Auto-complete"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** All the commands that contain the typed input are shown. ie. When \"a\" is typed, both \"add\" and \"clear\" will be shown."},{"lineNumber":93,"author":{"gitID":"-"},"content":"** Pros: Allow new user to quickly learn the different command words."},{"lineNumber":94,"author":{"gitID":"-"},"content":"** Cons: When there are a lot of commands, efficiency of auto-complete decreases as user would have too many options to choose from."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* **Alternative 2:** Only commands with the same sequence as the typed input are shown. ie. When \"a\" is typed, only \"add\" will be shown."},{"lineNumber":96,"author":{"gitID":"-"},"content":"** Pros: Higher efficiency of auto-complete."},{"lineNumber":97,"author":{"gitID":"-"},"content":"** Cons: New user might find this difficult to use as they are unfamillar with the command words."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Color Tag feature"},{"lineNumber":100,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"To allow easy identification of different tags, a color tag feature is introduced."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"A string array is declared in PersonCard.java to include a set of colors for tags."},{"lineNumber":105,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"----"},{"lineNumber":107,"author":{"gitID":"-"},"content":"//In PersonCard.java"},{"lineNumber":108,"author":{"gitID":"-"},"content":"private static final String[] TAG_COLORS \u003d"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        { \"blue\", \"cyan\", \"green\", \"magenta\", \"orange\", \"pink\", \"red\", \"yellow\", \"teal\", \"brown\" };"},{"lineNumber":110,"author":{"gitID":"-"},"content":"----"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"These colors are defined, with their background color and text color spelled out, in the all the different theme CSS files."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"A hash code of the tag name is used to select a color for the tag such that it would remain consistent between different runs of the software."},{"lineNumber":115,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":116,"author":{"gitID":"-"},"content":"----"},{"lineNumber":117,"author":{"gitID":"-"},"content":"//In PersonCard.java"},{"lineNumber":118,"author":{"gitID":"-"},"content":"private String getTagColorFor(String tagName) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"//In PersonCard.java"},{"lineNumber":123,"author":{"gitID":"-"},"content":"private void initTags(Person person) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    person.getTags().forEach(tag -\u003e {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        tags.getChildren().add(tagLabel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    });"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"},{"lineNumber":130,"author":{"gitID":"-"},"content":"----"},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of color tags"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Assign a color from a predefined list based on tag name"},{"lineNumber":136,"author":{"gitID":"-"},"content":"** Pros: No additional commands are needed to generate a color for the tags."},{"lineNumber":137,"author":{"gitID":"-"},"content":"** Cons: User cannot choose a color for the tag."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* **Alternative 2:** Allow user to set a color for the tag"},{"lineNumber":139,"author":{"gitID":"-"},"content":"** Pros: Allows more freedom for user customization."},{"lineNumber":140,"author":{"gitID":"-"},"content":"** Cons: Takes more time to implement color tags."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Change Theme feature"},{"lineNumber":143,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":144,"author":{"gitID":"-"},"content":"CRM Book users are expected to spent long period of time on the software and under different light settings. Change theme allows users to switch between light and dark theme. This would prevent eye fatigue."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"The sequence diagram below shows the interactions of change theme command within the logic component."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"image::ChangeThemeLogicComponentSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"The sequence diagram below shows the interactions between different components of CRM Book for change theme command."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"image::ChangeThemeHighLevelSequenceDiagrams.png[width\u003d\"800\"]"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"Every change theme command will post a ChangeThemeRequestEvent to EventCenter. When this event is handled, the UI will be updated to display the chosen theme. In addition, the themeFilePath in user prefs is updated with the chosen theme file path."},{"lineNumber":157,"author":{"gitID":"-"},"content":"Currently, there are three themes, namely blue, light and dark. The CSS files of these themes are referenced in Theme class as strings."},{"lineNumber":158,"author":{"gitID":"-"},"content":"The following piece of code demonstrates how the CSS files are referenced in Theme class:"},{"lineNumber":159,"author":{"gitID":"-"},"content":"----"},{"lineNumber":160,"author":{"gitID":"-"},"content":"//in Theme.java"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_THEME_FILE_PATH \u003d \"/view/BlueTheme.css\";"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static final String DARK_THEME_FILE_PATH \u003d \"/view/DarkTheme.css\";"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public static final String LIGHT_THEME_FILE_PATH \u003d \"/view/LightTheme.css\";"},{"lineNumber":164,"author":{"gitID":"-"},"content":"----"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"There is a method in Theme class to convert theme name into theme file path."},{"lineNumber":167,"author":{"gitID":"-"},"content":"----"},{"lineNumber":168,"author":{"gitID":"-"},"content":"//in Theme.java"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public String convertThemeToFilePath() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            switch (this.theme) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            case DARK_THEME:"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                return DARK_THEME_FILE_PATH;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            //other cases"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"----"},{"lineNumber":177,"author":{"gitID":"-"},"content":"This method is used to check if the chosen theme is equals to the current theme by comparing the file path of the chosen theme with the file path in user prefs."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"If the chosen theme is not equals to the current theme, the ChangeThemeRequestEvent will be handle in MainWindow class."},{"lineNumber":180,"author":{"gitID":"-"},"content":"----"},{"lineNumber":181,"author":{"gitID":"-"},"content":"//in MainWindow.java"},{"lineNumber":182,"author":{"gitID":"-"},"content":"public void handleChangeTheme(String theme) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        String fullPath \u003d getFullPath(this.themeFilePath);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().remove(fullPath);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        switch (theme) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        case Theme.LIGHT_THEME:"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.LIGHT_THEME_FILE_PATH;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        case Theme.DARK_THEME:"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.DARK_THEME_FILE_PATH;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        case Theme.BLUE_THEME:"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.BLUE_THEME_FILE_PATH;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            //this will not happen"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        prefs.getGuiSettings().setThemeFilePath(this.themeFilePath);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        fullPath \u003d getFullPath(this.themeFilePath);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(fullPath);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":"----"},{"lineNumber":205,"author":{"gitID":"-"},"content":"This method updates the theme file path in the primary scene in 3 steps: +"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":". Removes the current theme file path from primary scene."},{"lineNumber":208,"author":{"gitID":"-"},"content":". Updates the theme file path"},{"lineNumber":209,"author":{"gitID":"-"},"content":". Adds the new theme file path into primary scene."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"In addition, the updated theme file path is written into user prefs. +"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"A switch case statement is used to update the new theme file path. This implementation allows easy extension of the feature; i.e. when a new theme is created, it can be easily added as a case."},{"lineNumber":214,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"Sheikh-Umar":3,"-":211}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":67,"author":{"gitID":"Sheikh-Umar"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":88,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":89,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":96,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":97,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":98,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":99,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":106,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":107,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":108,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":115,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":116,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":117,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":162,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":164,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":166,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":24,"-":252}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":28,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":87,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":91,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":153,"davidten":2}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":143,"author":{"gitID":"Sheikh-Umar"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":1,"-":292}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"Sheikh-Umar"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"Sheikh-Umar"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"Sheikh-Umar"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":33,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find phone number of person in address book -\u003e 1 person found */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find email of person in address book -\u003e 1 person found */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":60,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find phone number of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":61,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + BENSON.getPhone().value;"},{"lineNumber":62,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":63,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":66,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find phone number of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":67,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + FIONA.getPhone().value;"},{"lineNumber":68,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, FIONA);"},{"lineNumber":69,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":70,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":71,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":72,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find phone number of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":73,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + GEORGE.getPhone().value;"},{"lineNumber":74,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, GEORGE);"},{"lineNumber":75,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":76,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":77,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":78,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find phone number of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":79,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + ELLE.getPhone().value;"},{"lineNumber":80,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":81,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":82,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":83,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":84,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find email address of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":85,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + BENSON.getEmail().value;"},{"lineNumber":86,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":87,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":88,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":89,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":90,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find email address of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":91,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + FIONA.getEmail().value;"},{"lineNumber":92,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, FIONA);"},{"lineNumber":93,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":96,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find email address of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":97,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + GEORGE.getEmail().value;"},{"lineNumber":98,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, GEORGE);"},{"lineNumber":99,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":100,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":102,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find email address of person in address book using alias command -\u003e 1 person found */"},{"lineNumber":103,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + ELLE.getEmail().value;"},{"lineNumber":104,"author":{"gitID":"Sheikh-Umar"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":105,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":106,"author":{"gitID":"Sheikh-Umar"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"Sheikh-Umar"},"content":"        /* Case: find address of person in address book using alias command -\u003e 0 persons found */"},{"lineNumber":184,"author":{"gitID":"Sheikh-Umar"},"content":"        command \u003d FindCommand.COMMAND_ALIAS + \" \" + DANIEL.getAddress().value;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":228,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":56,"-":198}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":81,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":216,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":220,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":282,"davidten":2}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":48,"davidten":3}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        String defaultConfigAsString \u003d \"App title : CRM Book\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\\n\""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"                //@@author davidten"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"                + \"App Id: 78ameftoz7yvk4\\n\""},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"                + \"App Secret: null\\n\""},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"                + \"User Location: null\";"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"        //@@author"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"davidten":5}},{"path":"src/test/java/seedu/address/commons/core/OAuth2ClientTest.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.commons.core;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":""},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import java.net.Socket;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":""},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"import org.apache.http.HttpEntity;"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"import org.apache.http.NameValuePair;"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":""},{"lineNumber":19,"author":{"gitID":"davidten"},"content":""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":" * Created to test some methods in OAuth2ClientTest"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":" * This class is better tested manually, as it depends heavily on a valid"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":" * access token which is dependent on a valid LinkedIn Account"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"public class OAuth2ClientTest {"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":""},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"    public void testStartServer() {"},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"        assertFalse(serverListening(\"127.0.0.1\", 13370));"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"        Oauth2Client.startServer();"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":"        assertTrue(serverListening(\"127.0.0.1\", 13370));"},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":""},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"    public void testGetParams() {"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"        //just to check that we get the correct number of values."},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"        List\u003cNameValuePair\u003e testList \u003d Oauth2Client.getParams();"},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"        assertEquals(testList.size(), 5);"},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":""},{"lineNumber":43,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"davidten"},"content":"    public void testHttpEntity() throws IOException {"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":"        HttpEntity testHttpEntity \u003d Oauth2Client.getHttpEntity();"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":"        assertNotNull(testHttpEntity);"},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":""},{"lineNumber":49,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":"     * This method is used to check if there is a server listening to the given port and host."},{"lineNumber":51,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"davidten"},"content":"    public static boolean serverListening(String host, int port)  {"},{"lineNumber":53,"author":{"gitID":"davidten"},"content":"        Socket s;"},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"davidten"},"content":"            s \u003d new Socket(host, port);"},{"lineNumber":56,"author":{"gitID":"davidten"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"        } catch (Exception e) {"},{"lineNumber":58,"author":{"gitID":"davidten"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"davidten"},"content":""},{"lineNumber":62,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":62}},{"path":"src/test/java/seedu/address/logic/DecrypterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":""},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import java.security.InvalidAlgorithmParameterException;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import java.security.InvalidKeyException;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"import javax.crypto.NoSuchPaddingException;"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":""},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":""},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"public class DecrypterTest {"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":""},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"    public void testStartServer() throws NoSuchPaddingException, InvalidAlgorithmParameterException,"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"            NoSuchAlgorithmException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException {"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"        Decrypter d \u003d new Decrypter();"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"        String secret \u003d d.getLinkedInS(\"nvu3QZLMqueiNkyaaOJQmz7Bzrk+Fk+P\", \"qI8aUtN6zZI\u003d\");"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"        assertNotNull(secret);"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"        assertNotEquals(secret, \"nvu3QZLMqueiNkyaaOJQmz7Bzrk+Fk+P\");"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":30}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        Lead person \u003d (Lead) new PersonBuilder().build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":64,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":75,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":77,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parseCommand_edit_alias() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":81,"author":{"gitID":"Sheikh-Umar"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":82,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parseCommand_exit_alias() throws Exception {"},{"lineNumber":94,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":95,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 5\") instanceof ExitCommand);"},{"lineNumber":96,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parseCommand_history_alias() throws Exception {"},{"lineNumber":127,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":128,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":147,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":154,"author":{"gitID":"Sheikh-Umar"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":166,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":167,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"},{"lineNumber":168,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parseCommand_undoCommandWordAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":178,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":179,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"},{"lineNumber":180,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final Remark remark \u003d new Remark(\"This is a remark.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":186,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":30,"WoodyLau":2,"-":171}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":35,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parse_validArgs_returnsFindCommandForPhoneNumber() {"},{"lineNumber":37,"author":{"gitID":"Sheikh-Umar"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":38,"author":{"gitID":"Sheikh-Umar"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":39,"author":{"gitID":"Sheikh-Umar"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"99991234\", \"88776655\")));"},{"lineNumber":40,"author":{"gitID":"Sheikh-Umar"},"content":"        assertParseSuccess(parser, \"99991234 88776655\", expectedFindCommand);"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":43,"author":{"gitID":"Sheikh-Umar"},"content":"        assertParseSuccess(parser, \" \\n 99991234 \\n \\t 88776655  \\t\", expectedFindCommand);"},{"lineNumber":44,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":46,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Sheikh-Umar"},"content":"    public void parse_validArgs_returnsFindCommandForEmailAddress() {"},{"lineNumber":48,"author":{"gitID":"Sheikh-Umar"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":49,"author":{"gitID":"Sheikh-Umar"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":50,"author":{"gitID":"Sheikh-Umar"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"johntan@gmail.com\")));"},{"lineNumber":51,"author":{"gitID":"Sheikh-Umar"},"content":"        assertParseSuccess(parser, \"johntan@gmail.com\", expectedFindCommand);"},{"lineNumber":52,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":53,"author":{"gitID":"Sheikh-Umar"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":54,"author":{"gitID":"Sheikh-Umar"},"content":"        assertParseSuccess(parser, \" \\n johntan@gmail.com  \\t\", expectedFindCommand);"},{"lineNumber":55,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":23,"-":34}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"\u003d CRM Book - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B1/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `CS2103-F11-B1`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"Sheikh-Umar"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the CRM Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"davidten"},"content":"* stores the CRM Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"davidten"},"content":"* can save the CRM Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"davidten"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the CRM Book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"davidten"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the CRM Book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"davidten"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the CRM Book. The current state of the CRM Book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"davidten"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the CRM Book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"davidten"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the CRM Book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"davidten"},"content":"* **Alternative 1 (current choice):** Saves the entire CRM Book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"Sheikh-Umar"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the CRM Book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"// tag::remark[]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Remark feature"},{"lineNumber":363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"To record more detailed information of a person, a new command `RemarkCommand` is implemented."},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"The `RemarkCommand` inherits from `UndoableCommands` since it is reasonable to make remark command execute in an _undoable_ way."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"`RemarkCommand` which is undoable is implemented this way:"},{"lineNumber":370,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":371,"author":{"gitID":"-"},"content":"----"},{"lineNumber":372,"author":{"gitID":"-"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":373,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":375,"author":{"gitID":"-"},"content":"        // ... remark logic ..."},{"lineNumber":376,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"-"},"content":"}"},{"lineNumber":378,"author":{"gitID":"-"},"content":"----"},{"lineNumber":379,"author":{"gitID":"-"},"content":"The following diagram shows the inheritance diagram for `RemarkCommand`."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"image::RemarkCommandDiagram.png[width\u003d\"300\"]"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"The model `Person` is modified to have a new field `Remark`."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"The default value of the remark field of a person is an empty string."},{"lineNumber":386,"author":{"gitID":"Sheikh-Umar"},"content":"A user is not able to assign a remark to a person when adding the person. Therefore, all people in the CRM Book is originally without any remark by default."},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"The implementation of this command is much like the `EditCommand`."},{"lineNumber":389,"author":{"gitID":"-"},"content":"For example, when a user type `remark 2 r\\Likes to swim`. Then the remark field of the 2nd person in the current list will be changed to `Likes to swim`. It’s similar to editing a person’s phone number or address."},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"The sequence diagram is shown below:"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"image::RemarkCommandSequenceDiagram.png[width\u003d\"1000\"]"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `RemarkCommand`"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new `remark` command"},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Pros: Treat it as a command may be easy to understand. Only a few people needs a remark."},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Cons: Cannot add a person with remark."},{"lineNumber":402,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just make it a part of `EditCommand` and `AddCommand`"},{"lineNumber":403,"author":{"gitID":"-"},"content":"** Pros: Only need to add remark field to every related class. We can add a person with remark."},{"lineNumber":404,"author":{"gitID":"-"},"content":"** Cons: We may have to type too many things when adding a person. Also, some people don’t have any remark."},{"lineNumber":405,"author":{"gitID":"-"},"content":"// end::remark[]"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"// tag::colortag[]"},{"lineNumber":408,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Color Tag feature"},{"lineNumber":409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"To allow easy identification of different tags, a color tag feature is introduced."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"A string array is declared in PersonCard.java to include a set of colors for tags."},{"lineNumber":414,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":415,"author":{"gitID":"-"},"content":"----"},{"lineNumber":416,"author":{"gitID":"-"},"content":"//In PersonCard.java"},{"lineNumber":417,"author":{"gitID":"-"},"content":"private static final String[] TAG_COLORS \u003d"},{"lineNumber":418,"author":{"gitID":"-"},"content":"        { \"blue\", \"cyan\", \"green\", \"magenta\", \"orange\", \"pink\", \"red\", \"yellow\", \"teal\", \"brown\" };"},{"lineNumber":419,"author":{"gitID":"-"},"content":"----"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"These colors are defined, with their background color and text color spelled out, in the all the different theme CSS files."},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"A hash code of the tag name is used to select a color for the tag such that it would remain consistent between different runs of the software."},{"lineNumber":424,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":425,"author":{"gitID":"-"},"content":"----"},{"lineNumber":426,"author":{"gitID":"-"},"content":"//In PersonCard.java"},{"lineNumber":427,"author":{"gitID":"-"},"content":"private String getTagColorFor(String tagName) {"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":429,"author":{"gitID":"-"},"content":"}"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"//In PersonCard.java"},{"lineNumber":432,"author":{"gitID":"-"},"content":"private void initTags(Person person) {"},{"lineNumber":433,"author":{"gitID":"-"},"content":"    person.getTags().forEach(tag -\u003e {"},{"lineNumber":434,"author":{"gitID":"-"},"content":"        Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":435,"author":{"gitID":"-"},"content":"        tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":436,"author":{"gitID":"-"},"content":"        tags.getChildren().add(tagLabel);"},{"lineNumber":437,"author":{"gitID":"-"},"content":"    });"},{"lineNumber":438,"author":{"gitID":"-"},"content":"}"},{"lineNumber":439,"author":{"gitID":"-"},"content":"----"},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of color tags"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Assign a color from a predefined list based on tag name"},{"lineNumber":445,"author":{"gitID":"-"},"content":"** Pros: No additional commands are needed to generate a color for the tags."},{"lineNumber":446,"author":{"gitID":"-"},"content":"** Cons: User cannot choose a color for the tag."},{"lineNumber":447,"author":{"gitID":"-"},"content":"* **Alternative 2:** Allow user to set a color for the tag"},{"lineNumber":448,"author":{"gitID":"-"},"content":"** Pros: Allows more freedom for user customization."},{"lineNumber":449,"author":{"gitID":"-"},"content":"** Cons: Takes more time to implement color tags."},{"lineNumber":450,"author":{"gitID":"-"},"content":"// end::colortag[]"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"// tag::autocomplete[]"},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Auto-Complete feature"},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"To allow fast typing of commands, auto-complete of commands is implemented."},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"Auto-complete is implemented through the TextFields feature of ControlsFX."},{"lineNumber":459,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":460,"author":{"gitID":"-"},"content":"----"},{"lineNumber":461,"author":{"gitID":"-"},"content":"//In CommandBox.java"},{"lineNumber":462,"author":{"gitID":"-"},"content":"TextFields.bindAutoCompletion(commandTextField, Messages.AUTOCOMPLETE_FIELD);"},{"lineNumber":463,"author":{"gitID":"-"},"content":"----"},{"lineNumber":464,"author":{"gitID":"-"},"content":"All the command keywords are included in the AUTOCOMPLETE_FIELD string array."},{"lineNumber":465,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":466,"author":{"gitID":"-"},"content":"----"},{"lineNumber":467,"author":{"gitID":"-"},"content":"//In Messages.java"},{"lineNumber":468,"author":{"gitID":"-"},"content":"public static final String[] AUTOCOMPLETE_FIELD \u003d {"},{"lineNumber":469,"author":{"gitID":"-"},"content":"    //all command keywords"},{"lineNumber":470,"author":{"gitID":"-"},"content":"    };"},{"lineNumber":471,"author":{"gitID":"-"},"content":"----"},{"lineNumber":472,"author":{"gitID":"-"},"content":"In addition to all the command keywords, a COMMAND_AUTO_COMPLETE string, with both command word and prefixes, is also included for add command."},{"lineNumber":473,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":474,"author":{"gitID":"-"},"content":"----"},{"lineNumber":475,"author":{"gitID":"-"},"content":"//In AddCommand.java"},{"lineNumber":476,"author":{"gitID":"-"},"content":"public static final String COMMAND_AUTO_COMPLETE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" \""},{"lineNumber":477,"author":{"gitID":"-"},"content":"        + PREFIX_PHONE + \" \" + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_TAG;"},{"lineNumber":478,"author":{"gitID":"-"},"content":"----"},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Auto-complete"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** All the commands that contain the typed input are shown. ie. When \"a\" is typed, both \"add\" and \"clear\" will be shown."},{"lineNumber":484,"author":{"gitID":"-"},"content":"** Pros: Allow new user to quickly learn the different command words."},{"lineNumber":485,"author":{"gitID":"-"},"content":"** Cons: When there are a lot of commands, efficiency of auto-complete decreases as user would have too many options to choose from."},{"lineNumber":486,"author":{"gitID":"-"},"content":"* **Alternative 2:** Only commands with the same sequence as the typed input are shown. ie. When \"a\" is typed, only \"add\" will be shown."},{"lineNumber":487,"author":{"gitID":"-"},"content":"** Pros: Higher efficiency of auto-complete."},{"lineNumber":488,"author":{"gitID":"-"},"content":"** Cons: New user might find this difficult to use as they are unfamillar with the command words."},{"lineNumber":489,"author":{"gitID":"-"},"content":"// end::autocomplete[]"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"WoodyLau"},"content":"// tag::leadcontact[]"},{"lineNumber":492,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Leads and Contacts feature"},{"lineNumber":493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"davidten"},"content":"People in the CRM Book were stored under a single class with no options for differentiating between two types of classes."},{"lineNumber":496,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":497,"author":{"gitID":"Sheikh-Umar"},"content":"To implement a CRM Book, Leads and Contacts must be differentiated so that they can each hold different fields like a proper CRM Book. To do so, they currently extend the Person class so that all existing functionality associated with Persons will work with both Leads an Contacts. Unique fields will be given their own classes like the original generic fields like Name and Address."},{"lineNumber":498,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":499,"author":{"gitID":"Sheikh-Umar"},"content":"In a CRM Book, users start by adding Leads, who are people they have not sold to yet. As they begin selling, the people who they have sold to become Contacts."},{"lineNumber":500,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":501,"author":{"gitID":"WoodyLau"},"content":"Many existing commands like `AddCommand` have been modified to fit the new paradigm so that it only adds Leads."},{"lineNumber":502,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":503,"author":{"gitID":"WoodyLau"},"content":"A new conversion command `ConvertCommand` has been added to convert Leads into Contacts. The Sequence Diagram is shown:"},{"lineNumber":504,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":505,"author":{"gitID":"WoodyLau"},"content":"image::ConvertSequenceDiagram1.png[width\u003d\"650\"]"},{"lineNumber":506,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":507,"author":{"gitID":"WoodyLau"},"content":"The `ConvertCommand` class calls the `convertPerson method` in the `ModelManager` class and the Sequence Diagram for the resulting steps are shown below."},{"lineNumber":508,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":509,"author":{"gitID":"WoodyLau"},"content":"image::ConvertSequenceDiagram2.png[width\u003d\"650\"]"},{"lineNumber":510,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":511,"author":{"gitID":"WoodyLau"},"content":"When the user has selected a Contact instead of a Lead, an error is thrown with this code:"},{"lineNumber":512,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":513,"author":{"gitID":"WoodyLau"},"content":"[source,java]"},{"lineNumber":514,"author":{"gitID":"WoodyLau"},"content":"----"},{"lineNumber":515,"author":{"gitID":"WoodyLau"},"content":"public class ConvertCommand extends UndoableCommand {"},{"lineNumber":516,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":517,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":518,"author":{"gitID":"WoodyLau"},"content":"        // ... get list of Persons ..."},{"lineNumber":519,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":520,"author":{"gitID":"WoodyLau"},"content":"            oldLead \u003d (Lead) lastShownList.get(index.getZeroBased());"},{"lineNumber":521,"author":{"gitID":"WoodyLau"},"content":"        } catch (ClassCastException cce) {"},{"lineNumber":522,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(MESSAGE_NOT_CONVERTED);"},{"lineNumber":523,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":524,"author":{"gitID":"WoodyLau"},"content":"        newContact \u003d createContact(oldLead);"},{"lineNumber":525,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":526,"author":{"gitID":"WoodyLau"},"content":"}"},{"lineNumber":527,"author":{"gitID":"WoodyLau"},"content":"----"},{"lineNumber":528,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":529,"author":{"gitID":"WoodyLau"},"content":"It keeps the name, phone, email, address, remarks and tags through the conversion. The company is converted if it exists into an Account. The converted date is set in the Contact."},{"lineNumber":530,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":531,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Leads and Contacts"},{"lineNumber":535,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":536,"author":{"gitID":"WoodyLau"},"content":"* **Alternative 1 (current choice):** Extend the existing Person class"},{"lineNumber":537,"author":{"gitID":"WoodyLau"},"content":"** Pros: We will not lose any functionality associated with the Person class."},{"lineNumber":538,"author":{"gitID":"Sheikh-Umar"},"content":"** Cons: Declarations of Person variables may confuse new developers even as a general class for Leads and Contacts."},{"lineNumber":539,"author":{"gitID":"WoodyLau"},"content":"* **Alternative 2:** Create two new classes Leads and Contacts"},{"lineNumber":540,"author":{"gitID":"WoodyLau"},"content":"** Pros: Clearly differentiates Leads and Contacts throughout the codebase."},{"lineNumber":541,"author":{"gitID":"WoodyLau"},"content":"** Cons: We would have to rewrite most objects to take into account the two new classes."},{"lineNumber":542,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":543,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":544,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How conversion will work"},{"lineNumber":545,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":546,"author":{"gitID":"WoodyLau"},"content":"* **Alternative 1:** Just convert the basic information. Let user fill in other fields themselves."},{"lineNumber":547,"author":{"gitID":"WoodyLau"},"content":"** Pros: Easy to implement."},{"lineNumber":548,"author":{"gitID":"WoodyLau"},"content":"** Cons: User must do extra work."},{"lineNumber":549,"author":{"gitID":"WoodyLau"},"content":"* **Alternative 2:** Smartly detect which fields can be converted and then do so."},{"lineNumber":550,"author":{"gitID":"WoodyLau"},"content":"** Pros: User will only need to fix some mistakes in the conversion."},{"lineNumber":551,"author":{"gitID":"WoodyLau"},"content":"** Cons: Smart detection and conversion needs work to do."},{"lineNumber":552,"author":{"gitID":"WoodyLau"},"content":"// end::leadcontact[]"},{"lineNumber":553,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"// tag::linkedinlogin[]"},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d LinkedIn Login Feature"},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"The linkedInLogin mechanism is handled largely by the oAuth2Client interacting with the browser window, which the user will interact with in order to give LinkedIn their username, password, as well as granting the application permission for use."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"When the `linkedIn_login` command is called, a `ShowBrowserRequestEvent` will be fired by `LinkedInLoginCommand(Class)` and picked up by the MainWindow."},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":563,"author":{"gitID":"-"},"content":"@Override"},{"lineNumber":564,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":565,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowBrowserRequestEvent());"},{"lineNumber":566,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":567,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"The MainWindow in turn will call the `OAuth2Client(Class)` which will fire up the browser awaiting an authorization code from LinkedIn that will be sent after the user has successfully logged in and granted the CRM Book permission."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":572,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":573,"author":{"gitID":"-"},"content":"    private void handleLinkedInAuthenticationEvent(ShowBrowserRequestEvent event) {"},{"lineNumber":574,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":575,"author":{"gitID":"-"},"content":"        handleLinkedInAuthentication();"},{"lineNumber":576,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":579,"author":{"gitID":"-"},"content":"public void handleLinkedInAuthentication() {"},{"lineNumber":580,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":581,"author":{"gitID":"davidten"},"content":"        Oauth2Client.authenticateWithLinkedIn();"},{"lineNumber":582,"author":{"gitID":"-"},"content":"    } catch (IOException e) {"},{"lineNumber":583,"author":{"gitID":"-"},"content":"        e.printStackTrace();"},{"lineNumber":584,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":585,"author":{"gitID":"-"},"content":"}"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":588,"author":{"gitID":"davidten"},"content":"public static void authenticateWithLinkedIn() throws IOException {"},{"lineNumber":589,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":590,"author":{"gitID":"-"},"content":"    String urlString \u003d \"https://www.linkedin.com/oauth/v2/authorization?response_type\u003dcode\u0026client_id\u003d\""},{"lineNumber":591,"author":{"gitID":"-"},"content":"        + clientId + \"\u0026redirect_uri\u003d\" + redirectUri + \"\u0026state\u003d...\";"},{"lineNumber":592,"author":{"gitID":"-"},"content":"    bWindow \u003d new BrowserWindow(urlString);"},{"lineNumber":593,"author":{"gitID":"-"},"content":"    bWindow.show();"},{"lineNumber":594,"author":{"gitID":"-"},"content":"}"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"Once this has happened, we fire a `HideBrowserRequestEvent` in order to close the browser properly."},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"davidten"},"content":"The `Decrypter` will then be fired so that we do not store the app secret in plain text. This decision to use a Decrypter class is in the comments section of the Decrypter class, and duplicated here for convenience to the reader."},{"lineNumber":599,"author":{"gitID":"davidten"},"content":""},{"lineNumber":600,"author":{"gitID":"davidten"},"content":"[source, java]"},{"lineNumber":601,"author":{"gitID":"davidten"},"content":" // Decrypts the s for use for OAuth"},{"lineNumber":602,"author":{"gitID":"davidten"},"content":" // While this is not an ideal situation, LinkedIn\u0027s OAuth API does not have a client-side authentication flow."},{"lineNumber":603,"author":{"gitID":"davidten"},"content":" // This means that it will always require the app s for purposes of authentication."},{"lineNumber":604,"author":{"gitID":"davidten"},"content":" // Because of this, building a native (desktop) app that authenticates with LinkedIn is not ideal."},{"lineNumber":605,"author":{"gitID":"davidten"},"content":" // However, a number of sites have agreed that if you have to store the key in the code, then obscuring it to make"},{"lineNumber":606,"author":{"gitID":"davidten"},"content":" // it slightly more difficult for a potential hacker to get it is best. (They will need to run the app rather than"},{"lineNumber":607,"author":{"gitID":"davidten"},"content":" // just reading the plain text version)"},{"lineNumber":608,"author":{"gitID":"davidten"},"content":" // This is especially so because a LinkedIn S is not especially valuable, since anyone can create a LinkedIn app."},{"lineNumber":609,"author":{"gitID":"davidten"},"content":" // Furthermore the chances of competitors abusing the secret to disable this application is minimal, since it is"},{"lineNumber":610,"author":{"gitID":"davidten"},"content":" // ultimately, a school project."},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":613,"author":{"gitID":"-"},"content":"public void handleHideBrowser() {"},{"lineNumber":614,"author":{"gitID":"-"},"content":"    Oauth2Client.closeBrowser();"},{"lineNumber":615,"author":{"gitID":"-"},"content":"    Oauth2Client.getLinkedInS();"},{"lineNumber":616,"author":{"gitID":"-"},"content":"}"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"After the CRM Book has received the authorization code and the app secret from the decrypter, they are sent back to LinkedIn to request for an AccessToken. Once the AccessToken has been received, the user is considered to be successfully logged in, and the accessToken can be used by the CRM Book to make requests to LinkedIn on behalf of the user. The accessToken is also stored in the config.json file for future usage."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":621,"author":{"gitID":"-"},"content":"config.setAppSecret(accessToken);"},{"lineNumber":622,"author":{"gitID":"-"},"content":"ConfigUtil.saveConfig(config, config.DEFAULT_CONFIG_FILE);"},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the linkedIn_login feature works. As seen, it is an events-driven design."},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"image::LinkedInLoginSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storing the LinkedIn App Secret"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Slightly encrypting the App Secret"},{"lineNumber":632,"author":{"gitID":"-"},"content":"** Pros: Easy to implement, not trivial for attackers to get by scanning the source code."},{"lineNumber":633,"author":{"gitID":"-"},"content":"** Cons: App secret can be derived if the attacker runs the source code"},{"lineNumber":634,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store the App Secret in another server, and requesting it with an authentication code"},{"lineNumber":635,"author":{"gitID":"-"},"content":"** Pros: Higher security, app secret not stored on GitHub"},{"lineNumber":636,"author":{"gitID":"-"},"content":"** Cons: Significantly harder to implement. Requires user to have a username and password for the server not stored on GitHub."},{"lineNumber":637,"author":{"gitID":"davidten"},"content":"* **Alternative 3:** Store the App Secret in plain text"},{"lineNumber":638,"author":{"gitID":"davidten"},"content":"** Pros: Much easier to code and implement"},{"lineNumber":639,"author":{"gitID":"davidten"},"content":"** Cons: Bad security, secret will likely end up in a paste database somewhere in the internet"},{"lineNumber":640,"author":{"gitID":"-"},"content":"// end::linkedinlogin[]"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"davidten"},"content":"// tag::linkedinshare[]"},{"lineNumber":643,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Share to LinkedIn Feature"},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":645,"author":{"gitID":"davidten"},"content":""},{"lineNumber":646,"author":{"gitID":"davidten"},"content":"When the linkedin_share command is executed, it will call the Config class to get a current copy of the configurations used by the Application. It will also set the boolean value of postSuccess to false. This boolean value will be used to determine if we managed to successfully post to LinkedIn."},{"lineNumber":647,"author":{"gitID":"davidten"},"content":""},{"lineNumber":648,"author":{"gitID":"davidten"},"content":"[source, java]"},{"lineNumber":649,"author":{"gitID":"-"},"content":"public static void postToLinkedIn() {"},{"lineNumber":650,"author":{"gitID":"davidten"},"content":"    Config config \u003d Config.setupConfig();"},{"lineNumber":651,"author":{"gitID":"davidten"},"content":"    postSuccess \u003d false;"},{"lineNumber":652,"author":{"gitID":"davidten"},"content":""},{"lineNumber":653,"author":{"gitID":"davidten"},"content":"Next, we create a JSON Object that LinkedIn requires, specifying the visibility (privacy) of the post, and the actual content of the post. By default, we set the visibility to be \u0027anyone\u0027, or in Facebook terms, \u0027Public\u0027. An overview on LinkedIn\u0027s share API can be found at https://developer.linkedin.com/docs/share-on-linkedin"},{"lineNumber":654,"author":{"gitID":"davidten"},"content":""},{"lineNumber":655,"author":{"gitID":"davidten"},"content":"With the JSON Object and the access_token taken from the user\u0027s configuration file, we create a HttpPost Object and HttpClient Object, send it to LinkedIn, and analyze the response. In particular, if the response contains an updateUrl, it means that the post has been successfully posted, and we update the boolean value of postSuccess to true."},{"lineNumber":656,"author":{"gitID":"davidten"},"content":""},{"lineNumber":657,"author":{"gitID":"davidten"},"content":"[source, java]"},{"lineNumber":658,"author":{"gitID":"davidten"},"content":"HttpPost httppost \u003d getHttpPostObject(jsonToSend, accessToken);"},{"lineNumber":659,"author":{"gitID":"davidten"},"content":"HttpClient httpclient \u003d getHttpClientObject();"},{"lineNumber":660,"author":{"gitID":"davidten"},"content":"JSONObject linkedInResponse \u003d sendHttpRequestToLinkedIn(httppost, httpclient);"},{"lineNumber":661,"author":{"gitID":"davidten"},"content":"logger.info(\"LinkedIn Response is : \" + linkedInResponse.toString());"},{"lineNumber":662,"author":{"gitID":"davidten"},"content":"if (linkedInResponse.has(\"updateUrl\") || linkedInResponse.has(\"updateURL\")) {"},{"lineNumber":663,"author":{"gitID":"davidten"},"content":"    //if has updateURL then it successfully got posted"},{"lineNumber":664,"author":{"gitID":"davidten"},"content":"    logger.info(\"Post has been successfully posted\");"},{"lineNumber":665,"author":{"gitID":"-"},"content":"    postSuccess \u003d true;"},{"lineNumber":666,"author":{"gitID":"-"},"content":"}"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"davidten"},"content":"Finally we use the postSuccess value to determine if we send a success or failed message to the user."},{"lineNumber":669,"author":{"gitID":"davidten"},"content":""},{"lineNumber":670,"author":{"gitID":"davidten"},"content":"The following sequence diagram shows how the command works"},{"lineNumber":671,"author":{"gitID":"davidten"},"content":""},{"lineNumber":672,"author":{"gitID":"davidten"},"content":"image::LinkedInShareSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":673,"author":{"gitID":"davidten"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":675,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Allowing salesperson to set privacy level of their post"},{"lineNumber":676,"author":{"gitID":"davidten"},"content":""},{"lineNumber":677,"author":{"gitID":"davidten"},"content":"* **Alternative 1 (current choice):** Only option is \u0027anyone\u0027"},{"lineNumber":678,"author":{"gitID":"davidten"},"content":"** Pros: Salesperson always wants to share to as many people as possible. Reduces complexity of command and/or save on a command to set a default level of visibility."},{"lineNumber":679,"author":{"gitID":"davidten"},"content":"** Cons: Salesperson is limited to only posting public posts using CRM Book"},{"lineNumber":680,"author":{"gitID":"davidten"},"content":"* **Alternative 2:** Allow salesperson to set a default visibility option using another command"},{"lineNumber":681,"author":{"gitID":"davidten"},"content":"** Pros: Salesperson has greater flexibility in setting the visibility type of their post."},{"lineNumber":682,"author":{"gitID":"davidten"},"content":"** Cons: Have to write a new command that may not be used."},{"lineNumber":683,"author":{"gitID":"davidten"},"content":"* **Alternative 3:** Allow salesperson to specify visibility in share command"},{"lineNumber":684,"author":{"gitID":"davidten"},"content":"** Pros: Salesperson has the greatest level flexibility in setting the visibility type of their post."},{"lineNumber":685,"author":{"gitID":"davidten"},"content":"** Cons: Increases complexity of the command"},{"lineNumber":686,"author":{"gitID":"davidten"},"content":"// end::linkedinshare[]"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"davidten"},"content":"// tag::settingGoogleLocation[]"},{"lineNumber":689,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Saving a location for Google Maps"},{"lineNumber":690,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":691,"author":{"gitID":"davidten"},"content":""},{"lineNumber":692,"author":{"gitID":"davidten"},"content":"To save a location in Google Maps, it does not matter whether CRM Book already has a pre-existing address. Rather, we always overwrite the config file to be updated with the latest address."},{"lineNumber":693,"author":{"gitID":"davidten"},"content":""},{"lineNumber":694,"author":{"gitID":"davidten"},"content":"[source, java]"},{"lineNumber":695,"author":{"gitID":"davidten"},"content":"Config initializedConfig \u003d Config.setupConfig();"},{"lineNumber":696,"author":{"gitID":"-"},"content":"initializedConfig.setUserLocation(address.toString());"},{"lineNumber":697,"author":{"gitID":"davidten"},"content":""},{"lineNumber":698,"author":{"gitID":"davidten"},"content":"The following sequence diagram shows how the command works"},{"lineNumber":699,"author":{"gitID":"davidten"},"content":""},{"lineNumber":700,"author":{"gitID":"davidten"},"content":"image::SaveGoogleLocationSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":701,"author":{"gitID":"davidten"},"content":"// end::settingGoogleLocation[]"},{"lineNumber":702,"author":{"gitID":"davidten"},"content":""},{"lineNumber":703,"author":{"gitID":"davidten"},"content":"// tag::viewDirections[]"},{"lineNumber":704,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d View directions to a Client\u0027s office"},{"lineNumber":705,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"davidten"},"content":"The current implementation of this feature is the same as when a person card is changed (Like the select command). The difference is that if the config file states that a user\u0027s office location has been set, then load Google maps instead of doing a Google Search."},{"lineNumber":708,"author":{"gitID":"davidten"},"content":""},{"lineNumber":709,"author":{"gitID":"davidten"},"content":"[source, java]"},{"lineNumber":710,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":711,"author":{"gitID":"-"},"content":"private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":712,"author":{"gitID":"-"},"content":"    getConfig();"},{"lineNumber":713,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":714,"author":{"gitID":"-"},"content":"    //if person has no home location set"},{"lineNumber":715,"author":{"gitID":"-"},"content":"    if (config.getUserLocation() \u003d\u003d null || config.getUserLocation().length() \u003d\u003d 0) {"},{"lineNumber":716,"author":{"gitID":"davidten"},"content":"        logger.info(\"No office location set, doing Google search\");"},{"lineNumber":717,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":718,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":719,"author":{"gitID":"-"},"content":"        String url \u003d generateUrl(config.getUserLocation(), event.getNewSelection().person.getAddress().toString());"},{"lineNumber":720,"author":{"gitID":"davidten"},"content":"        logger.info(\"Office location set, Load Google Maps. URL IS \" + url);"},{"lineNumber":721,"author":{"gitID":"davidten"},"content":"        loadPage(url);"},{"lineNumber":722,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":723,"author":{"gitID":"davidten"},"content":"}"},{"lineNumber":724,"author":{"gitID":"davidten"},"content":""},{"lineNumber":725,"author":{"gitID":"davidten"},"content":"The following sequence diagram shows how this feature works. The select command is used only if the user activated it via commandline. However, clicking on another person card without using the select command will work as well."},{"lineNumber":726,"author":{"gitID":"davidten"},"content":""},{"lineNumber":727,"author":{"gitID":"davidten"},"content":"image::LoadGoogleMapsSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":728,"author":{"gitID":"davidten"},"content":""},{"lineNumber":729,"author":{"gitID":"davidten"},"content":"// end::viewDirections[]"},{"lineNumber":730,"author":{"gitID":"davidten"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"// tag::bulkimport[]"},{"lineNumber":732,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Bulk Import Feature"},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"To add a large number of persons to the CRM Book at the same time, a new command `ImportCommand` is implemented."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"The `ImportCommand` inherits from `Command`. It is implemented this way:"},{"lineNumber":738,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"----"},{"lineNumber":740,"author":{"gitID":"-"},"content":"public class ImportCommand extends Command {"},{"lineNumber":741,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":742,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":743,"author":{"gitID":"-"},"content":"        // … import logic …"},{"lineNumber":744,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":745,"author":{"gitID":"-"},"content":"}"},{"lineNumber":746,"author":{"gitID":"-"},"content":"----"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"When an `ImportCommand` is called, the corresponding CSV file will be processed. Then persons will be added to CRM Book automatically like what a `AddCommand` can do but without manual typing."},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"The sequence diagram is shown below:"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"image::ImportCommandSequenceDiagram.png[width\u003d\"1000\"]"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: CSV file format"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Requires the CSV file to follow the given format"},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Pros: Easy to implement. No need to analyze too much about the file."},{"lineNumber":760,"author":{"gitID":"-"},"content":"** Cons: More work for users."},{"lineNumber":761,"author":{"gitID":"-"},"content":"* **Alternative 2:** Allow attributes not in order and allow different names for attributes"},{"lineNumber":762,"author":{"gitID":"-"},"content":"** Pros: Hard to detect and implement."},{"lineNumber":763,"author":{"gitID":"-"},"content":"** Cons: More flexible to users. Can help users save time."},{"lineNumber":764,"author":{"gitID":"-"},"content":"// end::bulkimport[]"},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":772,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":773,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":778,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":779,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":780,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":783,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::alias[]"},{"lineNumber":788,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Alias Commands feature"},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"Sheikh-Umar"},"content":"A command can be performed by typing in its alias rather than the word. +"},{"lineNumber":792,"author":{"gitID":"Sheikh-Umar"},"content":"The following is an example of implementing the alias command for the list command: +"},{"lineNumber":793,"author":{"gitID":"Sheikh-Umar"},"content":"[source, java]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"----"},{"lineNumber":795,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":796,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":797,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":798,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":799,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":800,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":801,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":802,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all Leads and Contacts\";"},{"lineNumber":803,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":804,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":806,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":807,"author":{"gitID":"Sheikh-Umar"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":808,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":809,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":810,"author":{"gitID":"Sheikh-Umar"},"content":"}"},{"lineNumber":811,"author":{"gitID":"Sheikh-Umar"},"content":"----"},{"lineNumber":812,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":813,"author":{"gitID":"Sheikh-Umar"},"content":"The alias command for all other commands will follow a similar implementation. +"},{"lineNumber":814,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":816,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to implement the alias command for all commands"},{"lineNumber":817,"author":{"gitID":"Sheikh-Umar"},"content":"The feature is implemented by adding the alias of the command into its respective java document, and updating the AddressBookParser java document. +"},{"lineNumber":818,"author":{"gitID":"Sheikh-Umar"},"content":"The feature is implemented this way to utilise the command java documents that are available as opposed to creating a new java document for a certain alias. +"},{"lineNumber":819,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":820,"author":{"gitID":"Sheikh-Umar"},"content":"This feature is implemented to allow a user to enter a command without specifying the entire word of the command. +"},{"lineNumber":821,"author":{"gitID":"Sheikh-Umar"},"content":"// end::alias[]"},{"lineNumber":822,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":823,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::duplicate[]"},{"lineNumber":824,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Identifying a Duplicate feature"},{"lineNumber":825,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":826,"author":{"gitID":"Sheikh-Umar"},"content":"The CRM Book will ensure that every Lead and Contact stored is a non-duplicate. +"},{"lineNumber":827,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":828,"author":{"gitID":"Sheikh-Umar"},"content":"The feature is implemented by checking the phone number and email address of a new Lead with all of the phone numbers and email addresses of all leads and contacts currently in the CRM-Book. +"},{"lineNumber":829,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":830,"author":{"gitID":"Sheikh-Umar"},"content":"The feature will be implemented on the add command because the current application detects duplicates at the add command. +"},{"lineNumber":831,"author":{"gitID":"Sheikh-Umar"},"content":"The following is how the feature will be implemented: +"},{"lineNumber":832,"author":{"gitID":"Sheikh-Umar"},"content":"[source, java]"},{"lineNumber":833,"author":{"gitID":"Sheikh-Umar"},"content":"----"},{"lineNumber":834,"author":{"gitID":"Sheikh-Umar"},"content":"public boolean contains(Person toCheck) {"},{"lineNumber":835,"author":{"gitID":"Sheikh-Umar"},"content":"        requireNonNull(toCheck);"},{"lineNumber":836,"author":{"gitID":"Sheikh-Umar"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":837,"author":{"gitID":"Sheikh-Umar"},"content":"            Person current \u003d internalList.get(i);"},{"lineNumber":838,"author":{"gitID":"Sheikh-Umar"},"content":"            if (current.getPhone().equals(toCheck.getPhone())"},{"lineNumber":839,"author":{"gitID":"Sheikh-Umar"},"content":"                    || current.getEmail().equals(toCheck.getEmail())) {"},{"lineNumber":840,"author":{"gitID":"Sheikh-Umar"},"content":"                return true;"},{"lineNumber":841,"author":{"gitID":"Sheikh-Umar"},"content":"            }"},{"lineNumber":842,"author":{"gitID":"Sheikh-Umar"},"content":"        }"},{"lineNumber":843,"author":{"gitID":"Sheikh-Umar"},"content":"        return false;"},{"lineNumber":844,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":845,"author":{"gitID":"Sheikh-Umar"},"content":"----"},{"lineNumber":846,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":847,"author":{"gitID":"Sheikh-Umar"},"content":"The phone number and email address of a Lead will be checked in the list of all Leads and Contacts."},{"lineNumber":848,"author":{"gitID":"Sheikh-Umar"},"content":"If either the phone number of email address of the Lead to be added is found in the list,"},{"lineNumber":849,"author":{"gitID":"Sheikh-Umar"},"content":"the CRM application will display a message that the lead is a duplicate and will reject this lead."},{"lineNumber":850,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":851,"author":{"gitID":"Sheikh-Umar"},"content":"The following activity diagram shows how the operation of identifying a duplicate lead works:"},{"lineNumber":852,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":853,"author":{"gitID":"Sheikh-Umar"},"content":"image::DetectDuplicateActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":854,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":856,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to implement identifying a duplicate"},{"lineNumber":857,"author":{"gitID":"Sheikh-Umar"},"content":"* **Alternative 1 (current choice):** Iterate through all Leads and Contacts in CRM-Book."},{"lineNumber":858,"author":{"gitID":"Sheikh-Umar"},"content":"** Pros: Search will be performed in linear time, and enhances an existing portion of code."},{"lineNumber":859,"author":{"gitID":"Sheikh-Umar"},"content":"// end::duplicate[]"},{"lineNumber":860,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":861,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::addparentcompanytag[]"},{"lineNumber":862,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Adding a Parent Company tag feature [Coming in v2.0]"},{"lineNumber":863,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":864,"author":{"gitID":"Sheikh-Umar"},"content":"It is possible that the user may want to keep track of the companies associated with the Leads and Contacts in the CRM Book."},{"lineNumber":865,"author":{"gitID":"Sheikh-Umar"},"content":"For example, Skype and Nokia are two different companies whose parent company is Microsoft."},{"lineNumber":866,"author":{"gitID":"Sheikh-Umar"},"content":"Hence, every Lead and Contact will have an additional tag named after the parent company if their company has a parent company."},{"lineNumber":867,"author":{"gitID":"Sheikh-Umar"},"content":"The following activity diagram illustrates how this will be implemented:"},{"lineNumber":868,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":869,"author":{"gitID":"Sheikh-Umar"},"content":"image::AddParentCompanyTagActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":872,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How adding a Parent Company tag feature works"},{"lineNumber":873,"author":{"gitID":"Sheikh-Umar"},"content":"* **Alternative 1 (current choice):** If the user updated the Company of a Lead or Contact, the CRM Book determines if this company has a parent company using a Google search."},{"lineNumber":874,"author":{"gitID":"Sheikh-Umar"},"content":"If yes, it automatically adds a tag to this Lead or Contact labelled as the parent company of the company of the Lead or Contact."},{"lineNumber":875,"author":{"gitID":"Sheikh-Umar"},"content":"// end::addparentcompanytag[]"},{"lineNumber":876,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":877,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::display[]"},{"lineNumber":878,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Displaying Lead list and Contact list feature"},{"lineNumber":879,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":880,"author":{"gitID":"Sheikh-Umar"},"content":"The CRM Book will be able to list out all Leads and Contacts separately."},{"lineNumber":881,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":882,"author":{"gitID":"Sheikh-Umar"},"content":"The feature is implemented by checking on the type of the persons already stored in the CRM, and displaying all persons that match the keyword (either Lead or Contact) that the user enters. +"},{"lineNumber":883,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":884,"author":{"gitID":"Sheikh-Umar"},"content":"The feature is implemented through the DisplayCommand, which is based on FindCommand."},{"lineNumber":885,"author":{"gitID":"Sheikh-Umar"},"content":"Hence, the DisplayCommand will operate similarly as the FindCommand, with the only difference being the DisplayCommand searches for all Leads or Contacts already in the CRM Book. +"},{"lineNumber":886,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":887,"author":{"gitID":"Sheikh-Umar"},"content":"The `DisplayCommand` inherits from `Command`. It is implemented this way:"},{"lineNumber":888,"author":{"gitID":"Sheikh-Umar"},"content":"[source, java]"},{"lineNumber":889,"author":{"gitID":"Sheikh-Umar"},"content":"----"},{"lineNumber":890,"author":{"gitID":"Sheikh-Umar"},"content":"public class DisplayCommand extends Command {"},{"lineNumber":891,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":892,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":893,"author":{"gitID":"-"},"content":"        // … import logic …"},{"lineNumber":894,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":895,"author":{"gitID":"-"},"content":"}"},{"lineNumber":896,"author":{"gitID":"-"},"content":"----"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"Sheikh-Umar"},"content":"The following activity diagram shows how the operation of displaying the Leads or Contacts list works:"},{"lineNumber":899,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":900,"author":{"gitID":"Sheikh-Umar"},"content":"image::DisplayListOfACertainTypeActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":903,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How displaying Lead list and Contact list works"},{"lineNumber":904,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":905,"author":{"gitID":"Sheikh-Umar"},"content":"* **Alternative 1 (current choice):** Iterate through the CRM Book for persons that match the keyword that user entered just like the FindCommand."},{"lineNumber":906,"author":{"gitID":"Sheikh-Umar"},"content":"** Pros: Iteration will be performed in linear time, and utilises the functionality of the FindCommand."},{"lineNumber":907,"author":{"gitID":"Sheikh-Umar"},"content":"// end::display[]"},{"lineNumber":908,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":909,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::findbyphonenumberandemailaddress[]"},{"lineNumber":910,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Enhancement of Find Command feature"},{"lineNumber":911,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":912,"author":{"gitID":"Sheikh-Umar"},"content":"The user may want to search for Leads and Contacts based on phone numbers and email addresses rather than names."},{"lineNumber":913,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":915,"author":{"gitID":"Sheikh-Umar"},"content":"The CRM Book currently searches for a Lead or Contact based on their name."},{"lineNumber":916,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":917,"author":{"gitID":"Sheikh-Umar"},"content":"This command can be further improved by being able to find phone numbers and email addresses. +"},{"lineNumber":918,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":919,"author":{"gitID":"Sheikh-Umar"},"content":"The following is how the feature will be implemented:"},{"lineNumber":920,"author":{"gitID":"Sheikh-Umar"},"content":"[source, java]"},{"lineNumber":921,"author":{"gitID":"Sheikh-Umar"},"content":"----"},{"lineNumber":922,"author":{"gitID":"Sheikh-Umar"},"content":"public boolean test(Person person) {"},{"lineNumber":923,"author":{"gitID":"Sheikh-Umar"},"content":"         return keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)"},{"lineNumber":924,"author":{"gitID":"Sheikh-Umar"},"content":"                        || StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword)"},{"lineNumber":925,"author":{"gitID":"Sheikh-Umar"},"content":"                        || StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"},{"lineNumber":926,"author":{"gitID":"Sheikh-Umar"},"content":"     }"},{"lineNumber":927,"author":{"gitID":"Sheikh-Umar"},"content":" }"},{"lineNumber":928,"author":{"gitID":"Sheikh-Umar"},"content":"----"},{"lineNumber":929,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":930,"author":{"gitID":"Sheikh-Umar"},"content":"The phone number and email address that the user entered will be checked in the list of all Leads and Contacts."},{"lineNumber":931,"author":{"gitID":"Sheikh-Umar"},"content":"If either the phone number of email address is found in the list,"},{"lineNumber":932,"author":{"gitID":"Sheikh-Umar"},"content":"the CRM Book will display the Leads and/or Contacts that match the keywords entered."},{"lineNumber":933,"author":{"gitID":"Sheikh-Umar"},"content":"If not, the CRM Book will display zero Leads and Contacts found."},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":936,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to implement finding phone numbers and email addresses"},{"lineNumber":937,"author":{"gitID":"Sheikh-Umar"},"content":"* **Alternative 1 (current choice):** Edit the current search implementation to include finding phone numbers and email addresses."},{"lineNumber":938,"author":{"gitID":"Sheikh-Umar"},"content":"** Pros: Search will be performed in linear time, and utilises an existing portion of code."},{"lineNumber":939,"author":{"gitID":"Sheikh-Umar"},"content":"// end::findbyphonenumberandemailaddress[]"},{"lineNumber":940,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"// tag::changeTheme[]"},{"lineNumber":942,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Change Theme feature"},{"lineNumber":943,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":944,"author":{"gitID":"-"},"content":"CRM Book users are expected to spent long period of time on the software and under different light settings. Change theme allows users to switch between light and dark theme. This would prevent eye fatigue."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":947,"author":{"gitID":"-"},"content":"The sequence diagram below shows the interactions of change theme command within the logic component."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"image::ChangeThemeLogicComponentSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"The sequence diagram below shows the interactions between different components of CRM Book for change theme command."},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"image::ChangeThemeHighLevelSequenceDiagrams.png[width\u003d\"800\"]"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"Every change theme command will post a ChangeThemeRequestEvent to EventCenter. When this event is handled, the UI will be updated to display the chosen theme. In addition, the themeFilePath in user prefs is updated with the chosen theme file path."},{"lineNumber":956,"author":{"gitID":"-"},"content":"Currently, there are three themes, namely blue, light and dark. The CSS files of these themes are referenced in Theme class as strings."},{"lineNumber":957,"author":{"gitID":"-"},"content":"The following piece of code demonstrates how the CSS files are referenced in Theme class:"},{"lineNumber":958,"author":{"gitID":"-"},"content":"----"},{"lineNumber":959,"author":{"gitID":"-"},"content":"//in Theme.java"},{"lineNumber":960,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_THEME_FILE_PATH \u003d \"/view/BlueTheme.css\";"},{"lineNumber":961,"author":{"gitID":"-"},"content":"    public static final String DARK_THEME_FILE_PATH \u003d \"/view/DarkTheme.css\";"},{"lineNumber":962,"author":{"gitID":"-"},"content":"    public static final String LIGHT_THEME_FILE_PATH \u003d \"/view/LightTheme.css\";"},{"lineNumber":963,"author":{"gitID":"-"},"content":"----"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"There is a method in Theme class to convert theme name into theme file path."},{"lineNumber":966,"author":{"gitID":"-"},"content":"----"},{"lineNumber":967,"author":{"gitID":"-"},"content":"//in Theme.java"},{"lineNumber":968,"author":{"gitID":"-"},"content":"    public String convertThemeToFilePath() {"},{"lineNumber":969,"author":{"gitID":"-"},"content":"            switch (this.theme) {"},{"lineNumber":970,"author":{"gitID":"-"},"content":"            case DARK_THEME:"},{"lineNumber":971,"author":{"gitID":"-"},"content":"                return DARK_THEME_FILE_PATH;"},{"lineNumber":972,"author":{"gitID":"-"},"content":"            //other cases"},{"lineNumber":973,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":974,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":975,"author":{"gitID":"-"},"content":"----"},{"lineNumber":976,"author":{"gitID":"-"},"content":"This method is used to check if the chosen theme is equals to the current theme by comparing the file path of the chosen theme with the file path in user prefs."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"If the chosen theme is not equals to the current theme, the ChangeThemeRequestEvent will be handle in MainWindow class."},{"lineNumber":979,"author":{"gitID":"-"},"content":"----"},{"lineNumber":980,"author":{"gitID":"-"},"content":"//in MainWindow.java"},{"lineNumber":981,"author":{"gitID":"-"},"content":"public void handleChangeTheme(String theme) {"},{"lineNumber":982,"author":{"gitID":"-"},"content":"        String fullPath \u003d getFullPath(this.themeFilePath);"},{"lineNumber":983,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().remove(fullPath);"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"        switch (theme) {"},{"lineNumber":986,"author":{"gitID":"-"},"content":"        case Theme.LIGHT_THEME:"},{"lineNumber":987,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.LIGHT_THEME_FILE_PATH;"},{"lineNumber":988,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":989,"author":{"gitID":"-"},"content":"        case Theme.DARK_THEME:"},{"lineNumber":990,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.DARK_THEME_FILE_PATH;"},{"lineNumber":991,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":992,"author":{"gitID":"-"},"content":"        case Theme.BLUE_THEME:"},{"lineNumber":993,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.BLUE_THEME_FILE_PATH;"},{"lineNumber":994,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":995,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":996,"author":{"gitID":"-"},"content":"            //this will not happen"},{"lineNumber":997,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"        prefs.getGuiSettings().setThemeFilePath(this.themeFilePath);"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"        fullPath \u003d getFullPath(this.themeFilePath);"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(fullPath);"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"This method updates the theme file path in the primary scene in 3 steps: +"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":". Removes the current theme file path from primary scene."},{"lineNumber":1007,"author":{"gitID":"-"},"content":". Updates the theme file path"},{"lineNumber":1008,"author":{"gitID":"-"},"content":". Adds the new theme file path into primary scene."},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"In addition, the updated theme file path is written into user prefs. +"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"A switch case statement is used to update the new theme file path. This implementation allows easy extension of the feature; i.e. when a new theme is created, it can be easily added as a case."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"// end::changeTheme[]"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1026,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1039,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1040,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1041,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1066,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1079,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1080,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1081,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1094,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1118,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1119,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1120,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"davidten"},"content":"A project often depends on third-party libraries. For example, CRM Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1139,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":1152,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1156,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1159,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1160,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1161,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1162,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"davidten"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the CRM Book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1171,"author":{"gitID":"-"},"content":""},{"lineNumber":1172,"author":{"gitID":"davidten"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the CRM Book."},{"lineNumber":1173,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":1177,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":1179,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":1181,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":1182,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1183,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1184,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1185,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1186,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"davidten"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your CRM Book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1194,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1197,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1209,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1210,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1211,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1213,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1215,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1218,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1230,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1231,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1233,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1234,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1236,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1237,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1238,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1240,"author":{"gitID":"-"},"content":""},{"lineNumber":1241,"author":{"gitID":"davidten"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the CRM Book."},{"lineNumber":1242,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1246,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1254,"author":{"gitID":"davidten"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the CRM Book is updated."},{"lineNumber":1255,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":1257,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":1258,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1259,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":1260,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1261,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"davidten"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the CRM Book to the cloud. However, the current implementation of the application constantly saves the CRM Book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the CRM Book storage."},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"davidten"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the CRM Book can be saved in a fixed temporary location."},{"lineNumber":1272,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1273,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1276,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1277,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1279,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1287,"author":{"gitID":"-"},"content":""},{"lineNumber":1288,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1302,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1303,"author":{"gitID":"-"},"content":""},{"lineNumber":1304,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1307,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1312,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1320,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1321,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1326,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1327,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1328,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1336,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1339,"author":{"gitID":"-"},"content":""},{"lineNumber":1340,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1348,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1353,"author":{"gitID":"-"},"content":""},{"lineNumber":1354,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1355,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1360,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1361,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1365,"author":{"gitID":"-"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1371,"author":{"gitID":"-"},"content":""},{"lineNumber":1372,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1380,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1383,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1394,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1395,"author":{"gitID":"-"},"content":""},{"lineNumber":1396,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1399,"author":{"gitID":"-"},"content":""},{"lineNumber":1400,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1401,"author":{"gitID":"-"},"content":""},{"lineNumber":1402,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1409,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1412,"author":{"gitID":"-"},"content":""},{"lineNumber":1413,"author":{"gitID":"Sheikh-Umar"},"content":"* Salespeople"},{"lineNumber":1414,"author":{"gitID":"Sheikh-Umar"},"content":"* has a need to manage a significant number of people into either Leads or Contacts"},{"lineNumber":1415,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1416,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1417,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1418,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1419,"author":{"gitID":"-"},"content":""},{"lineNumber":1420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature contributions:"},{"lineNumber":1421,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":"David Ten: +"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"**Major Feature** : LinkedIn Synchronize"},{"lineNumber":1424,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"* Allows a Salesperson to connect his LinkedIn account to the application +"},{"lineNumber":1426,"author":{"gitID":"-"},"content":"* Allows Contacts to be connected to their respective LinkedIn account"},{"lineNumber":1427,"author":{"gitID":"-"},"content":""},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":"**Major Feature** : Alert for change of Account"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"* Allows a Salesperson to be alerted when one of their Contacts move companies +"},{"lineNumber":1432,"author":{"gitID":"-"},"content":"* This allows them to sell to a new account using their old Contact."},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"Umar: +"},{"lineNumber":1435,"author":{"gitID":"Sheikh-Umar"},"content":"**Major feature** : Added duplicate detection and display list of Leads and Contacts"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"Sheikh-Umar"},"content":"* Implement duplicate detection by verifying the whether the phone number or email address of a Lead to be entered matches any of the phone numbers or email addresses"},{"lineNumber":1438,"author":{"gitID":"Sheikh-Umar"},"content":"currently stored in the CRM Book."},{"lineNumber":1439,"author":{"gitID":"Sheikh-Umar"},"content":"* Implement the display of Leads list and Contacts list separately at the salesperson\u0027s request."},{"lineNumber":1440,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":"**Minor feature** : Command Alias"},{"lineNumber":1442,"author":{"gitID":"-"},"content":""},{"lineNumber":1443,"author":{"gitID":"-"},"content":"* Ensures that commands can be performed using its alias. +"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"* In the sales industry, a person may type fast and would want to execute a command quickly."},{"lineNumber":1445,"author":{"gitID":"Sheikh-Umar"},"content":"Hence, doing a command using its alias will ensure he/she can do a certain command quicker."},{"lineNumber":1446,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1447,"author":{"gitID":"Sheikh-Umar"},"content":"**Minor feature** : Enhanced Find Command"},{"lineNumber":1448,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1449,"author":{"gitID":"Sheikh-Umar"},"content":"* Made Find Command be able to search for phone numbers and email addresses. +"},{"lineNumber":1450,"author":{"gitID":"Sheikh-Umar"},"content":"* A user may want to find a Lead/Contact based on phone numbers and email addresses."},{"lineNumber":1451,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1452,"author":{"gitID":"-"},"content":"ZHU Leyan: +"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"**Major Feature** : Bulk Import of Leads"},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":"* Allows a salesperson to import a CSV file into the CRM Book +"},{"lineNumber":1456,"author":{"gitID":"-"},"content":"* Allows a salesperson to sort all persons by name."},{"lineNumber":1457,"author":{"gitID":"-"},"content":""},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":"**Minor Feature** : Remark Command"},{"lineNumber":1460,"author":{"gitID":"-"},"content":""},{"lineNumber":1461,"author":{"gitID":"Sheikh-Umar"},"content":"* Allows a salesperson to add/remove/edit a remark of a person in the CRM Book +"},{"lineNumber":1462,"author":{"gitID":"-"},"content":"* This allows them to record some special information of a customer."},{"lineNumber":1463,"author":{"gitID":"-"},"content":""},{"lineNumber":1464,"author":{"gitID":"WoodyLau"},"content":"Woody Lau: +"},{"lineNumber":1465,"author":{"gitID":"WoodyLau"},"content":"**Major Feature** : Lead and Contact Creation"},{"lineNumber":1466,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1467,"author":{"gitID":"WoodyLau"},"content":"* Breaks apart the Person class into Leads and Contacts +"},{"lineNumber":1468,"author":{"gitID":"WoodyLau"},"content":"* Each will have their own functions and fields +"},{"lineNumber":1469,"author":{"gitID":"WoodyLau"},"content":"* Conversion between Leads and Contacts will be supported."},{"lineNumber":1470,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1471,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1472,"author":{"gitID":"WoodyLau"},"content":"**Minor Feature** : Account Creation"},{"lineNumber":1473,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1474,"author":{"gitID":"WoodyLau"},"content":"* Allows Contacts to belong to Accounts."},{"lineNumber":1475,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1476,"author":{"gitID":"-"},"content":"Liu Yiming: +"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"**Major Feature** : Change Theme"},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":"* Allows user to change color theme +"},{"lineNumber":1480,"author":{"gitID":"-"},"content":"* This allows user to read the CRM Book easily under different settings"},{"lineNumber":1481,"author":{"gitID":"-"},"content":""},{"lineNumber":1482,"author":{"gitID":"-"},"content":""},{"lineNumber":1483,"author":{"gitID":"-"},"content":"**Minor Feature** : Auto Completion of commands"},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":"* Allows user to key in commands more efficiently."},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":"**Minor feature** : Color tags"},{"lineNumber":1488,"author":{"gitID":"-"},"content":""},{"lineNumber":1489,"author":{"gitID":"-"},"content":"*Each type of tag has a unique color +"},{"lineNumber":1490,"author":{"gitID":"-"},"content":"*Allows easy identification of different tags"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":""},{"lineNumber":1493,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1494,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1497,"author":{"gitID":"-"},"content":""},{"lineNumber":1498,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1499,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1500,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1501,"author":{"gitID":"davidten"},"content":"|`* * *` |new salesperson |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1502,"author":{"gitID":"-"},"content":""},{"lineNumber":1503,"author":{"gitID":"davidten"},"content":"|`* * *` |salesperson |add a new Lead|keep track of who I am selling to"},{"lineNumber":1504,"author":{"gitID":"-"},"content":""},{"lineNumber":1505,"author":{"gitID":"davidten"},"content":"|`* * *` |salesperson |add a new Account|keep track of my accounts"},{"lineNumber":1506,"author":{"gitID":"-"},"content":""},{"lineNumber":1507,"author":{"gitID":"davidten"},"content":"|`* * *` |salesperson |convert a Lead to a Contact|know who I have successfully sold to in the past"},{"lineNumber":1508,"author":{"gitID":"-"},"content":""},{"lineNumber":1509,"author":{"gitID":"Sheikh-Umar"},"content":"|`* * *` |salesperson |determine if a lead to be added is already a contact|not have redundant data in my CRM"},{"lineNumber":1510,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1511,"author":{"gitID":"Sheikh-Umar"},"content":"|`* * *` |salesperson |identify duplicates|not have redundant data in my CRM"},{"lineNumber":1512,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |share posts to my LinkedIn feed|share more about my company\u0027s product"},{"lineNumber":1514,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1515,"author":{"gitID":"-"},"content":"|`* * *` |salesperson |schedule appointments with Leads via Google Calendar|sell to them"},{"lineNumber":1516,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1517,"author":{"gitID":"-"},"content":"|`* * *` |busy salesperson |autocomplete my commands|use CRM Book more efficiently"},{"lineNumber":1518,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1519,"author":{"gitID":"-"},"content":"|`* * *` |new salesperson |bulk import leads|quickly populate my CRM-Book"},{"lineNumber":1520,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1521,"author":{"gitID":"-"},"content":"|`* *` |salesperson |obtain list solely on either Leads or Contacts|identify who to promote an item to and who has bought an item from me"},{"lineNumber":1522,"author":{"gitID":"-"},"content":""},{"lineNumber":1523,"author":{"gitID":"-"},"content":"|`* *` |salesperson |view commute directions to appointment location|know how to get there quickly"},{"lineNumber":1524,"author":{"gitID":"-"},"content":""},{"lineNumber":1525,"author":{"gitID":"-"},"content":"|`* *` |salesperson |send emails from a standard email template|quickly cold-email for lead generation"},{"lineNumber":1526,"author":{"gitID":"-"},"content":""},{"lineNumber":1527,"author":{"gitID":"-"},"content":"|`* *` |busy salesperson |have different colors for my tags|identify the tags easily"},{"lineNumber":1528,"author":{"gitID":"-"},"content":""},{"lineNumber":1529,"author":{"gitID":"Sheikh-Umar"},"content":"|`* *` |salesperson |execute a command with as few types as possible|use my CRM Book quickly"},{"lineNumber":1530,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1531,"author":{"gitID":"-"},"content":"|`* *` |health-conscious salesperson |change the color theme|prevent eye fatigue"},{"lineNumber":1532,"author":{"gitID":"-"},"content":""},{"lineNumber":1533,"author":{"gitID":"-"},"content":"|`* *` |salesperson |analyze a CSV file|know how much of that file is duplicated in my CRM"},{"lineNumber":1534,"author":{"gitID":"-"},"content":""},{"lineNumber":1535,"author":{"gitID":"-"},"content":"|`* *` |salesperson |export a CSV file of an account with related leads and contacts|handover an account to a colleague"},{"lineNumber":1536,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1537,"author":{"gitID":"Sheikh-Umar"},"content":"|`* *` |new salesperson |bulk import leads|populate my CRM-Book"},{"lineNumber":1538,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1539,"author":{"gitID":"davidten"},"content":"|`* *` |salesperson |find a lead or contact by name |locate details of persons without having to go through the entire list"},{"lineNumber":1540,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1541,"author":{"gitID":"davidten"},"content":"|`* *` |salesperson |find an account by name |locate details of accounts without having to go through the entire list"},{"lineNumber":1542,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1543,"author":{"gitID":"davidten"},"content":"|`* *` |salesperson |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1544,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"|`* *` |salesperson |see my calendar |schedule meetings without conflicting"},{"lineNumber":1546,"author":{"gitID":"davidten"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"|`* *` |salesperson |be reminded when a contract is expiring |contact my contact for renewal"},{"lineNumber":1548,"author":{"gitID":"-"},"content":""},{"lineNumber":1549,"author":{"gitID":"-"},"content":"|`* *` |salesperson |add a remark to a Lead or Contact|record detailed information about them"},{"lineNumber":1550,"author":{"gitID":"-"},"content":""},{"lineNumber":1551,"author":{"gitID":"-"},"content":"|`* *` |salesperson with many entries in the CRM|sort people by name|search for them easily"},{"lineNumber":1552,"author":{"gitID":"-"},"content":""},{"lineNumber":1553,"author":{"gitID":"-"},"content":"|`* *` |salesperson |schedule a meeting using Google Hangouts |meet my leads online more efficiently"},{"lineNumber":1554,"author":{"gitID":"-"},"content":""},{"lineNumber":1555,"author":{"gitID":"-"},"content":"|`*` |salesperson |see the type of marketing materials an account is interacting with |know what other materials to send to them"},{"lineNumber":1556,"author":{"gitID":"-"},"content":""},{"lineNumber":1557,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1558,"author":{"gitID":"-"},"content":""},{"lineNumber":1559,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1560,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1561,"author":{"gitID":"-"},"content":""},{"lineNumber":1562,"author":{"gitID":"Sheikh-Umar"},"content":"(For all use cases below, the *System* is the `CRM Book` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1563,"author":{"gitID":"-"},"content":""},{"lineNumber":1564,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1565,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1566,"author":{"gitID":"-"},"content":""},{"lineNumber":1567,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1568,"author":{"gitID":"-"},"content":""},{"lineNumber":1569,"author":{"gitID":"Sheikh-Umar"},"content":"1.  User requests to list of all Leads and Contacts"},{"lineNumber":1570,"author":{"gitID":"Sheikh-Umar"},"content":"2.  CRM Book shows a list of all Leads and Contacts"},{"lineNumber":1571,"author":{"gitID":"Sheikh-Umar"},"content":"3.  User requests to delete a specific Lead/Contact in the list"},{"lineNumber":1572,"author":{"gitID":"Sheikh-Umar"},"content":"4.  CRM Book deletes the person"},{"lineNumber":1573,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1574,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1575,"author":{"gitID":"-"},"content":""},{"lineNumber":1576,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1577,"author":{"gitID":"-"},"content":""},{"lineNumber":1578,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1579,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1580,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1581,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1582,"author":{"gitID":"-"},"content":""},{"lineNumber":1583,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1584,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1585,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1586,"author":{"gitID":"Sheikh-Umar"},"content":"** 3a1. CRM Book shows an error message."},{"lineNumber":1587,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1588,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1589,"author":{"gitID":"-"},"content":""},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: User requests to import a CSV file to CRM Book"},{"lineNumber":1592,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1593,"author":{"gitID":"Sheikh-Umar"},"content":"*MSS*"},{"lineNumber":1594,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1595,"author":{"gitID":"-"},"content":"1.  User enters command for importing file."},{"lineNumber":1596,"author":{"gitID":"-"},"content":"2.  CRM Book processes the corresponding CSV file and lists all persons including newly added ones."},{"lineNumber":1597,"author":{"gitID":"-"},"content":"3.  User requests to sort all persons by name."},{"lineNumber":1598,"author":{"gitID":"-"},"content":"4.  CRM sorts all persons and lists them."},{"lineNumber":1599,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1600,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1601,"author":{"gitID":"-"},"content":""},{"lineNumber":1602,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1603,"author":{"gitID":"-"},"content":""},{"lineNumber":1604,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1605,"author":{"gitID":"-"},"content":"* 1a. User enters an non-existent file."},{"lineNumber":1606,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1607,"author":{"gitID":"Sheikh-Umar"},"content":"[none]"},{"lineNumber":1608,"author":{"gitID":"Sheikh-Umar"},"content":"** 1a1. CRM Book displays error message."},{"lineNumber":1609,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1610,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1611,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1612,"author":{"gitID":"-"},"content":"* 1b. The file is not a CSV file."},{"lineNumber":1613,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1614,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1615,"author":{"gitID":"-"},"content":"** 1b1. CRM Book displays error message."},{"lineNumber":1616,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1617,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1618,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1619,"author":{"gitID":"-"},"content":"* 3a. The CSV file is in wrong format."},{"lineNumber":1620,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1621,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1622,"author":{"gitID":"-"},"content":"** 3a1. CRM Book displays error message."},{"lineNumber":1623,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1624,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1625,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1626,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::displaylistusecase[]"},{"lineNumber":1627,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Use case: User seeks Lead list or Contact list"},{"lineNumber":1628,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1629,"author":{"gitID":"Sheikh-Umar"},"content":"*MSS*"},{"lineNumber":1630,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1631,"author":{"gitID":"Sheikh-Umar"},"content":"1. User enters command for Lead list or Contact list."},{"lineNumber":1632,"author":{"gitID":"Sheikh-Umar"},"content":"2. CRM retrieves the Lead list or Contact list."},{"lineNumber":1633,"author":{"gitID":"Sheikh-Umar"},"content":"3. User sees the Lead list or Contact list."},{"lineNumber":1634,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1635,"author":{"gitID":"Sheikh-Umar"},"content":"*Extensions*"},{"lineNumber":1636,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1637,"author":{"gitID":"Sheikh-Umar"},"content":"[none]"},{"lineNumber":1638,"author":{"gitID":"Sheikh-Umar"},"content":"* 1a. User enters a keyword that is neither Lead nor Contact."},{"lineNumber":1639,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1640,"author":{"gitID":"Sheikh-Umar"},"content":"** 1a1. CRM Book displays an empty list."},{"lineNumber":1641,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1642,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1643,"author":{"gitID":"Sheikh-Umar"},"content":"// end::displaylistusecase[]"},{"lineNumber":1644,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1645,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1646,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::addparentcompanytagusecase[]"},{"lineNumber":1647,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Use case: User seeks to add a company to a Lead or Contact [Coming in v2.0]"},{"lineNumber":1648,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1649,"author":{"gitID":"Sheikh-Umar"},"content":"*MSS*"},{"lineNumber":1650,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1651,"author":{"gitID":"Sheikh-Umar"},"content":"1. User enters command to update the company of Lead or Contact."},{"lineNumber":1652,"author":{"gitID":"Sheikh-Umar"},"content":"2. CRM updates company of the Lead or Contact."},{"lineNumber":1653,"author":{"gitID":"Sheikh-Umar"},"content":"3. User sees the updated company of the Lead or Contact."},{"lineNumber":1654,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1655,"author":{"gitID":"Sheikh-Umar"},"content":"*Extensions*"},{"lineNumber":1656,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1657,"author":{"gitID":"Sheikh-Umar"},"content":"[none]"},{"lineNumber":1658,"author":{"gitID":"Sheikh-Umar"},"content":"* 1a. User enters command incorrectly."},{"lineNumber":1659,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1660,"author":{"gitID":"Sheikh-Umar"},"content":"** 1a1. CRM Book displays an error message."},{"lineNumber":1661,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1662,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1663,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1664,"author":{"gitID":"Sheikh-Umar"},"content":"* 1a. The keyword  that user entered has a parent company."},{"lineNumber":1665,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1666,"author":{"gitID":"Sheikh-Umar"},"content":"** 1a1. CRM Book adds a tag named after the parent company to the Lead or Contact."},{"lineNumber":1667,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1668,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1669,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1670,"author":{"gitID":"Sheikh-Umar"},"content":"* 1a. User enters a company (keyword) has no parent company."},{"lineNumber":1671,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1672,"author":{"gitID":"Sheikh-Umar"},"content":"** 1a1. CRM Book does not add any to the Lead or Contact."},{"lineNumber":1673,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1674,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1675,"author":{"gitID":"Sheikh-Umar"},"content":"// end::addparentcompanytagusecase[]"},{"lineNumber":1676,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1677,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1678,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::findphonenumberandemailaddressusecase[]"},{"lineNumber":1679,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Use case: User enters phone numbers and/or email addresses to find"},{"lineNumber":1680,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1681,"author":{"gitID":"Sheikh-Umar"},"content":"*MSS*"},{"lineNumber":1682,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1683,"author":{"gitID":"Sheikh-Umar"},"content":"1. User enters keywords (phone numbers and/or email addresses) for find command."},{"lineNumber":1684,"author":{"gitID":"Sheikh-Umar"},"content":"2. CRM searches for Leads and/or Contacts that match with the keywords."},{"lineNumber":1685,"author":{"gitID":"Sheikh-Umar"},"content":"3. User sees the Leads and/or Contacts that match with the keywords."},{"lineNumber":1686,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1687,"author":{"gitID":"Sheikh-Umar"},"content":"*Extensions*"},{"lineNumber":1688,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1689,"author":{"gitID":"Sheikh-Umar"},"content":"[none]"},{"lineNumber":1690,"author":{"gitID":"Sheikh-Umar"},"content":"* 1a. User enters find command incorrectly."},{"lineNumber":1691,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1692,"author":{"gitID":"Sheikh-Umar"},"content":"** 1a1. CRM Book displays error message."},{"lineNumber":1693,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1694,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1695,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1696,"author":{"gitID":"Sheikh-Umar"},"content":"* 2a. CRM Book is unable to find Leads and/or Contacts that match with the keywords."},{"lineNumber":1697,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1698,"author":{"gitID":"Sheikh-Umar"},"content":"** 2a1. User sees an empty list."},{"lineNumber":1699,"author":{"gitID":"Sheikh-Umar"},"content":"+"},{"lineNumber":1700,"author":{"gitID":"Sheikh-Umar"},"content":"Use case ends."},{"lineNumber":1701,"author":{"gitID":"Sheikh-Umar"},"content":"// end::findphonenumberandemailaddressusecase[]"},{"lineNumber":1702,"author":{"gitID":"-"},"content":""},{"lineNumber":1703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: User posts to LinkedIn"},{"lineNumber":1704,"author":{"gitID":"-"},"content":""},{"lineNumber":1705,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1706,"author":{"gitID":"-"},"content":""},{"lineNumber":1707,"author":{"gitID":"-"},"content":"1. User enters command to login to LinkedIn"},{"lineNumber":1708,"author":{"gitID":"-"},"content":"2. CRM book opens browser for LinkedIn login"},{"lineNumber":1709,"author":{"gitID":"-"},"content":"3. User enters username and password"},{"lineNumber":1710,"author":{"gitID":"-"},"content":"4. CRM book completes oAuth2 process and gets api key"},{"lineNumber":1711,"author":{"gitID":"-"},"content":"5. User enters command to post to linkedIn"},{"lineNumber":1712,"author":{"gitID":"-"},"content":"6. CRM book prompts user to enter a post"},{"lineNumber":1713,"author":{"gitID":"-"},"content":"7. User enters post to share to LinkedIn"},{"lineNumber":1714,"author":{"gitID":"-"},"content":"8. CRM book posts post to user\u0027s LinkedIn"},{"lineNumber":1715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1716,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1717,"author":{"gitID":"-"},"content":""},{"lineNumber":1718,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1719,"author":{"gitID":"-"},"content":""},{"lineNumber":1720,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1721,"author":{"gitID":"-"},"content":"* 1a. User is already logged in."},{"lineNumber":1722,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1723,"author":{"gitID":"-"},"content":"** 1a1. CRM book tells user that he is already logged in"},{"lineNumber":1724,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1725,"author":{"gitID":"-"},"content":"Use case resumes at step 5."},{"lineNumber":1726,"author":{"gitID":"-"},"content":""},{"lineNumber":1727,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1728,"author":{"gitID":"-"},"content":"* 3a. User enters invalid credentials."},{"lineNumber":1729,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1730,"author":{"gitID":"-"},"content":"** 3a1. CRM book tells user to reenter credentials"},{"lineNumber":1731,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1732,"author":{"gitID":"-"},"content":"Use case resumes at step 4."},{"lineNumber":1733,"author":{"gitID":"-"},"content":""},{"lineNumber":1734,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Auto-complete"},{"lineNumber":1735,"author":{"gitID":"-"},"content":""},{"lineNumber":1736,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1737,"author":{"gitID":"-"},"content":""},{"lineNumber":1738,"author":{"gitID":"-"},"content":"1. User enters a letter."},{"lineNumber":1739,"author":{"gitID":"-"},"content":"2. CRM book shows a drop down textfield with all the commands containing the typed letter."},{"lineNumber":1740,"author":{"gitID":"-"},"content":"3. User selects the command he desires."},{"lineNumber":1741,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1742,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1743,"author":{"gitID":"-"},"content":""},{"lineNumber":1744,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1745,"author":{"gitID":"-"},"content":""},{"lineNumber":1746,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1747,"author":{"gitID":"-"},"content":"* 2a. No commands contain the typed letter."},{"lineNumber":1748,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1749,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1750,"author":{"gitID":"-"},"content":""},{"lineNumber":1751,"author":{"gitID":"WoodyLau"},"content":"\u003d\u003d\u003d Use case: Convert a Lead to a Contact"},{"lineNumber":1752,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1753,"author":{"gitID":"WoodyLau"},"content":"*MSS*"},{"lineNumber":1754,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1755,"author":{"gitID":"WoodyLau"},"content":"1. User requests a list of Leads and Contacts"},{"lineNumber":1756,"author":{"gitID":"WoodyLau"},"content":"2. CRM Book shows the requested list"},{"lineNumber":1757,"author":{"gitID":"WoodyLau"},"content":"3. User finds and selects the Lead to convert"},{"lineNumber":1758,"author":{"gitID":"WoodyLau"},"content":"4. CRM Book determines if Lead can be converted and converts if possible"},{"lineNumber":1759,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1760,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1761,"author":{"gitID":"-"},"content":""},{"lineNumber":1762,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1763,"author":{"gitID":"-"},"content":""},{"lineNumber":1764,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1765,"author":{"gitID":"WoodyLau"},"content":"* 2a. List is empty."},{"lineNumber":1766,"author":{"gitID":"WoodyLau"},"content":"+"},{"lineNumber":1767,"author":{"gitID":"WoodyLau"},"content":"Use case ends."},{"lineNumber":1768,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1769,"author":{"gitID":"WoodyLau"},"content":"* 3a. User selected a Contact, not a Lead."},{"lineNumber":1770,"author":{"gitID":"WoodyLau"},"content":"+"},{"lineNumber":1771,"author":{"gitID":"WoodyLau"},"content":"[none]"},{"lineNumber":1772,"author":{"gitID":"WoodyLau"},"content":"** 3a1. CRM Book displays an error message."},{"lineNumber":1773,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1774,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1775,"author":{"gitID":"-"},"content":""},{"lineNumber":1776,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1777,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1778,"author":{"gitID":"WoodyLau"},"content":"** 3a1. CRM Book displays an error message."},{"lineNumber":1779,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1780,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1781,"author":{"gitID":"-"},"content":""},{"lineNumber":1782,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Color tag"},{"lineNumber":1783,"author":{"gitID":"-"},"content":""},{"lineNumber":1784,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1785,"author":{"gitID":"-"},"content":""},{"lineNumber":1786,"author":{"gitID":"-"},"content":"1. User request to add a lead with a tag."},{"lineNumber":1787,"author":{"gitID":"-"},"content":"2. CRM book assign a color to the tag."},{"lineNumber":1788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1789,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1790,"author":{"gitID":"-"},"content":""},{"lineNumber":1791,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Change theme"},{"lineNumber":1792,"author":{"gitID":"-"},"content":""},{"lineNumber":1793,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1794,"author":{"gitID":"-"},"content":""},{"lineNumber":1795,"author":{"gitID":"-"},"content":"1.  User requests to change theme"},{"lineNumber":1796,"author":{"gitID":"-"},"content":"2.  CRM Book changes the theme setting to display the chosen theme"},{"lineNumber":1797,"author":{"gitID":"WoodyLau"},"content":"+"},{"lineNumber":1798,"author":{"gitID":"WoodyLau"},"content":"Use case ends."},{"lineNumber":1799,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1800,"author":{"gitID":"WoodyLau"},"content":"*Extensions*"},{"lineNumber":1801,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1802,"author":{"gitID":"-"},"content":"* 2a. The input theme is same as current theme."},{"lineNumber":1803,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1804,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1805,"author":{"gitID":"-"},"content":"** 2a1. CRM Book shows an error message."},{"lineNumber":1806,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1807,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1808,"author":{"gitID":"-"},"content":""},{"lineNumber":1809,"author":{"gitID":"-"},"content":"* 2b. The input theme is invalid."},{"lineNumber":1810,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1811,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1812,"author":{"gitID":"-"},"content":"** 2b1. CRM Book shows an error message."},{"lineNumber":1813,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1814,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1815,"author":{"gitID":"-"},"content":""},{"lineNumber":1816,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1817,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1818,"author":{"gitID":"-"},"content":""},{"lineNumber":1819,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1820,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1821,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1822,"author":{"gitID":"Sheikh-Umar"},"content":".  Should process a query and respond within 3 seconds."},{"lineNumber":1823,"author":{"gitID":"Sheikh-Umar"},"content":".  Should be compatible across Linux, Windows, and MacOS operating systems."},{"lineNumber":1824,"author":{"gitID":"-"},"content":""},{"lineNumber":1825,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1826,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1827,"author":{"gitID":"-"},"content":""},{"lineNumber":1828,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1829,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1830,"author":{"gitID":"-"},"content":""},{"lineNumber":1831,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1832,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1833,"author":{"gitID":"-"},"content":""},{"lineNumber":1834,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1835,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1836,"author":{"gitID":"-"},"content":""},{"lineNumber":1837,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1838,"author":{"gitID":"-"},"content":""},{"lineNumber":1839,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1840,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1841,"author":{"gitID":"-"},"content":""},{"lineNumber":1842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1843,"author":{"gitID":"-"},"content":""},{"lineNumber":1844,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1845,"author":{"gitID":"-"},"content":""},{"lineNumber":1846,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1847,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1848,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1849,"author":{"gitID":"-"},"content":""},{"lineNumber":1850,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1851,"author":{"gitID":"-"},"content":""},{"lineNumber":1852,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1853,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1854,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1855,"author":{"gitID":"-"},"content":""},{"lineNumber":1856,"author":{"gitID":"-"},"content":""},{"lineNumber":1857,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Deleting a Lead or Contact"},{"lineNumber":1858,"author":{"gitID":"-"},"content":""},{"lineNumber":1859,"author":{"gitID":"Sheikh-Umar"},"content":". Deleting a Lead or Contact while all Leads and Contacts are listed"},{"lineNumber":1860,"author":{"gitID":"-"},"content":""},{"lineNumber":1861,"author":{"gitID":"Sheikh-Umar"},"content":".. Prerequisites: List all Leads and Contacts using the `list` command. Multiple persons in the list."},{"lineNumber":1862,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1863,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: First Lead/Contact is deleted from the list. Details of the deleted Lead/Contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1864,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1865,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: No Lead/Contact is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1866,"author":{"gitID":"Sheikh-Umar"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"},{"lineNumber":1867,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1868,"author":{"gitID":"-"},"content":""},{"lineNumber":1869,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::testingfordisplaycommand[]"},{"lineNumber":1870,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Displaying Lead or Contact list"},{"lineNumber":1871,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1872,"author":{"gitID":"Sheikh-Umar"},"content":". Finding Lead(s) or Contacts(s) based on phone numbers and email addresses."},{"lineNumber":1873,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1874,"author":{"gitID":"Sheikh-Umar"},"content":".. Prerequisites: Nil."},{"lineNumber":1875,"author":{"gitID":"Sheikh-Umar"},"content":".. Test case: `disp Lead`, `display Lead` +"},{"lineNumber":1876,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: All Leads in the CRM Book. Timestamp in the status bar is updated."},{"lineNumber":1877,"author":{"gitID":"Sheikh-Umar"},"content":".. Test case: `disp Contact`, `display Contact` +"},{"lineNumber":1878,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: All Contacts in the CRM Book. Timestamp in the status bar is updated."},{"lineNumber":1879,"author":{"gitID":"Sheikh-Umar"},"content":"// end::testingfordisplaycommand[]"},{"lineNumber":1880,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1881,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1882,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::testingforduplicatedetection[]"},{"lineNumber":1883,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Duplicate Detection"},{"lineNumber":1884,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1885,"author":{"gitID":"Sheikh-Umar"},"content":". Detecting a duplicate Lead or Contacts."},{"lineNumber":1886,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1887,"author":{"gitID":"Sheikh-Umar"},"content":".. Prerequisites: There is at least 1 Lead or Contact."},{"lineNumber":1888,"author":{"gitID":"Sheikh-Umar"},"content":".. Test case: `a n/John Tan p/99991234 e/johntan@gmail.com a/33, Eunos Street 7, #5-67`, `add n/John Tan p/99991234 e/johntan@gmail.com a/33, Eunos Street 7, #5-67` +"},{"lineNumber":1889,"author":{"gitID":"Sheikh-Umar"},"content":"   Ensure the information entered has either a phone number or email address that is identical to any Lead or Contact in the CRM Book."},{"lineNumber":1890,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: Duplicate Lead/Contact message shown. Timestamp in the status bar is updated."},{"lineNumber":1891,"author":{"gitID":"Sheikh-Umar"},"content":"// end::testingforduplicatedetection[]"},{"lineNumber":1892,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1893,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::testingforexecutingaliascommands[]"},{"lineNumber":1894,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Executing commands via alias"},{"lineNumber":1895,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1896,"author":{"gitID":"Sheikh-Umar"},"content":". Executing commands via its alias"},{"lineNumber":1897,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1898,"author":{"gitID":"Sheikh-Umar"},"content":".. Prerequisites: Read through the User Guide for commands that have aliases."},{"lineNumber":1899,"author":{"gitID":"Sheikh-Umar"},"content":".. Test case: `disp Lead`, `display Lead` +"},{"lineNumber":1900,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: All Leads in the CRM Book. Timestamp in the status bar is updated."},{"lineNumber":1901,"author":{"gitID":"Sheikh-Umar"},"content":".. Test case: `l`, `list` +"},{"lineNumber":1902,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: List all Leads and Contacts in the CRM Book. Timestamp in the status bar is updated."},{"lineNumber":1903,"author":{"gitID":"Sheikh-Umar"},"content":"// end::testingforexecutingaliascommands[]"},{"lineNumber":1904,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1905,"author":{"gitID":"Sheikh-Umar"},"content":"// tag::testingforfindingphonenumberandemailaddresses[]"},{"lineNumber":1906,"author":{"gitID":"Sheikh-Umar"},"content":"\u003d\u003d\u003d Finding Lead(s) and Contact(s) via Phone Numbers and Email Addresses"},{"lineNumber":1907,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1908,"author":{"gitID":"Sheikh-Umar"},"content":". Finding Lead(s) or Contacts(s) based on phone numbers and email addresses."},{"lineNumber":1909,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1910,"author":{"gitID":"Sheikh-Umar"},"content":".. Prerequisites: Nil."},{"lineNumber":1911,"author":{"gitID":"Sheikh-Umar"},"content":".. Test case: `f 99991234`, `find 99991234` +"},{"lineNumber":1912,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: Lead/Contact with the phone number `99991234` is shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1913,"author":{"gitID":"Sheikh-Umar"},"content":".. Test case: `f johntan@gmail.com`, `find johntan@gmail.com` +"},{"lineNumber":1914,"author":{"gitID":"Sheikh-Umar"},"content":"   Expected: Lead/Contact with the email address `johntan@gmail.com` is shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1915,"author":{"gitID":"Sheikh-Umar"},"content":"// end::testingforfindingphonenumberandemailaddresses[]"},{"lineNumber":1916,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1917,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting all people"},{"lineNumber":1918,"author":{"gitID":"-"},"content":""},{"lineNumber":1919,"author":{"gitID":"-"},"content":". Sorting all people in list by name alphabetically"},{"lineNumber":1920,"author":{"gitID":"-"},"content":""},{"lineNumber":1921,"author":{"gitID":"-"},"content":".. Test case: `sort` +"},{"lineNumber":1922,"author":{"gitID":"-"},"content":"   Expected: All people in list are sorted by name in alphabetical order."},{"lineNumber":1923,"author":{"gitID":"-"},"content":".. Test case: `s` +"},{"lineNumber":1924,"author":{"gitID":"-"},"content":"   Expected: All people in list are sorted by name in alphabetical order."},{"lineNumber":1925,"author":{"gitID":"-"},"content":""},{"lineNumber":1926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding/Editing/Removing a remark of a person"},{"lineNumber":1927,"author":{"gitID":"-"},"content":""},{"lineNumber":1928,"author":{"gitID":"-"},"content":". Adding/Editing/Removing a remark of person in list"},{"lineNumber":1929,"author":{"gitID":"-"},"content":""},{"lineNumber":1930,"author":{"gitID":"-"},"content":".. Test case: `remark 2 r/Likes to swim` +"},{"lineNumber":1931,"author":{"gitID":"-"},"content":"   Expected: The remark \"Likes to swim\" is added to the second person in list."},{"lineNumber":1932,"author":{"gitID":"-"},"content":".. Test case: `remark 2 r/Likes to read` +"},{"lineNumber":1933,"author":{"gitID":"-"},"content":"   Expected: The remark of the second person in list is now changed to \"Likes to read\""},{"lineNumber":1934,"author":{"gitID":"-"},"content":".. Test case: `rem 2 r/` +"},{"lineNumber":1935,"author":{"gitID":"-"},"content":"   Expected: The remark of the second person in list is now removed."},{"lineNumber":1936,"author":{"gitID":"-"},"content":".. Test case: `remark 0 r/aaa` +"},{"lineNumber":1937,"author":{"gitID":"-"},"content":"   Expected: No person is added with remark. Error details show in the status message. Status bar remains the same."},{"lineNumber":1938,"author":{"gitID":"-"},"content":".. Test case: `remark 1 Likes to swim` +"},{"lineNumber":1939,"author":{"gitID":"-"},"content":"   Expected: No person is added with remark. Error details show in the status message. Status bar remains the same."},{"lineNumber":1940,"author":{"gitID":"-"},"content":".. Test case: `remark r/Likes to swim` +"},{"lineNumber":1941,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1942,"author":{"gitID":"-"},"content":""},{"lineNumber":1943,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing a CSV file"},{"lineNumber":1944,"author":{"gitID":"-"},"content":""},{"lineNumber":1945,"author":{"gitID":"-"},"content":". Importing a list of Leads to the CRM Book"},{"lineNumber":1946,"author":{"gitID":"-"},"content":""},{"lineNumber":1947,"author":{"gitID":"-"},"content":".. Prerequisites: We provide two sample csv files. Please download them and put them in the same folder as the jar file. If you choose to put them somewhere else, then you need to change the file path in the command accordingly."},{"lineNumber":1948,"author":{"gitID":"-"},"content":".. Test case: `import ./sample1.csv` +"},{"lineNumber":1949,"author":{"gitID":"-"},"content":"   Expected: The 200 Leads in the sample1.csv file are imported to the CRM Book."},{"lineNumber":1950,"author":{"gitID":"-"},"content":".. Test case: `import ./sample2.csv` +"},{"lineNumber":1951,"author":{"gitID":"-"},"content":"   Expected: Since the 16th person in this file has a wrong format of his phone, error details show in the status messages. Status bar remains the same."},{"lineNumber":1952,"author":{"gitID":"-"},"content":".. Test case: `import ./` +"},{"lineNumber":1953,"author":{"gitID":"-"},"content":"   Expected: It\u0027s an invalid file path. Error details \"invalid file path\" show in the status message. Status bar remains the same."},{"lineNumber":1954,"author":{"gitID":"-"},"content":".. Test case: `import x` (where x is any valid file path but not in CSV)+"},{"lineNumber":1955,"author":{"gitID":"-"},"content":"   Expected: Error details \"not a csv file\" show in the status message. Status bar remains the same."},{"lineNumber":1956,"author":{"gitID":"-"},"content":".. Test case: `import` +"},{"lineNumber":1957,"author":{"gitID":"-"},"content":"   Expected: Wrong command format. Error details show in the status message. Status bar remains the same."},{"lineNumber":1958,"author":{"gitID":"-"},"content":""},{"lineNumber":1959,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Converting a Lead to a Contact"},{"lineNumber":1960,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1961,"author":{"gitID":"WoodyLau"},"content":". Select a Lead to convert from the current list of people, and note their index number"},{"lineNumber":1962,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1963,"author":{"gitID":"WoodyLau"},"content":".. If a Contact is chosen, an error will appear in the next step"},{"lineNumber":1964,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1965,"author":{"gitID":"WoodyLau"},"content":". In the command bar, type `convert INDEX`"},{"lineNumber":1966,"author":{"gitID":"WoodyLau"},"content":". See that the person is now a Contact"},{"lineNumber":1967,"author":{"gitID":"WoodyLau"},"content":". Note that the fields Rating, and Website and Industry if they exist, disappear"},{"lineNumber":1968,"author":{"gitID":"WoodyLau"},"content":". Note that the field Department appears"},{"lineNumber":1969,"author":{"gitID":"WoodyLau"},"content":". Note that all other fields except the type remain the same"},{"lineNumber":1970,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1971,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Editing the non-essential details"},{"lineNumber":1972,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1973,"author":{"gitID":"WoodyLau"},"content":". Select a Lead or Contact from the current list of people, and note their index number. If Lead, read the `a.` sections. If Contact, read the `b.` sections."},{"lineNumber":1974,"author":{"gitID":"WoodyLau"},"content":". In the command bar, type `editdetails INDEX ...` or `adddetails INDEX ...`, followed by type-specific data +"},{"lineNumber":1975,"author":{"gitID":"WoodyLau"},"content":"At least one of the fields must be specified, or an error is given"},{"lineNumber":1976,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1977,"author":{"gitID":"WoodyLau"},"content":".. If a Lead, the fields are `c/COMPANY`, `i/INDUSTRY`, `r/RATING`, `t/TITLE`, and `w/WEBSITE`"},{"lineNumber":1978,"author":{"gitID":"WoodyLau"},"content":"Company, industry and website are strings, and company must be alphanumeric +"},{"lineNumber":1979,"author":{"gitID":"WoodyLau"},"content":"Rating is an integer from 1 to 5, and numbers that do not fall within this range will throw an error +"},{"lineNumber":1980,"author":{"gitID":"WoodyLau"},"content":"Title is the honorific of the person, such as `Mr.`, `Mrs.`, `Dr.`, etc. +"},{"lineNumber":1981,"author":{"gitID":"WoodyLau"},"content":"Note, company cannot be deleted, only changed, once it is provided"},{"lineNumber":1982,"author":{"gitID":"WoodyLau"},"content":".. If a Contact, the fields are `c/COMPANY`, `d/DEPARTMENT`, and `t/TITLE`"},{"lineNumber":1983,"author":{"gitID":"WoodyLau"},"content":"Company and department are strings, and company must be alphanumeric +"},{"lineNumber":1984,"author":{"gitID":"WoodyLau"},"content":"Title is the honorific of the person, such as `Mr.`, `Mrs.`, `Dr.`, etc. +"},{"lineNumber":1985,"author":{"gitID":"WoodyLau"},"content":"Note, company cannot be deleted, only changed, once it is provided"},{"lineNumber":1986,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1987,"author":{"gitID":"WoodyLau"},"content":". See that the relevant changes are made"},{"lineNumber":1988,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1989,"author":{"gitID":"WoodyLau"},"content":".. The rating will change to the provided number +"},{"lineNumber":1990,"author":{"gitID":"WoodyLau"},"content":"Website and industry will appear if provided"},{"lineNumber":1991,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1992,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Adding an Account to a Contact"},{"lineNumber":1993,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1994,"author":{"gitID":"WoodyLau"},"content":". Select a Contact from the current list of people, and note their index number"},{"lineNumber":1995,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":1996,"author":{"gitID":"WoodyLau"},"content":".. If a Lead is chosen, an error will appear in the next step"},{"lineNumber":1997,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":1998,"author":{"gitID":"WoodyLau"},"content":". In the command bar, type `account INDEX an/COMPANY`"},{"lineNumber":1999,"author":{"gitID":"WoodyLau"},"content":". Note that the Company field has changed to reflect the new company"},{"lineNumber":2000,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2001,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Logging in to LinkedIn"},{"lineNumber":2002,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2003,"author":{"gitID":"davidten"},"content":". In the command box, type linkedin_login"},{"lineNumber":2004,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2005,"author":{"gitID":"davidten"},"content":".. A browser window will appear. Enter your LinkedIn username and password, and accept the permissions requested"},{"lineNumber":2006,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2007,"author":{"gitID":"davidten"},"content":".. The browser window should close and say \u0027Successfully logged in to LinkedIn\u0027"},{"lineNumber":2008,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2009,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Sharing a Post to LinkedIn"},{"lineNumber":2010,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2011,"author":{"gitID":"davidten"},"content":". In the command box, type linkedin_share [content] where [content] is what you want to share on your LinkedIn profile"},{"lineNumber":2012,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2013,"author":{"gitID":"davidten"},"content":".. If you are already logged in to LinkedIn and did not revoke the app\u0027s permissions, CRM Book will say \u0027Post shared to your linkedIn account\u0027"},{"lineNumber":2014,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2015,"author":{"gitID":"davidten"},"content":".. To check if the post is there, go to your LinkedIn account, click on your name at the top right corner, click Posts \u0026 Activity. If the post is not there yet, wait awhile and refresh, sometimes it takes a while before the post appears in the feed."},{"lineNumber":2016,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2017,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Setting your office location"},{"lineNumber":2018,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2019,"author":{"gitID":"davidten"},"content":". In the command box, type set_office_address a/[address] where address is a valid address"},{"lineNumber":2020,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2021,"author":{"gitID":"davidten"},"content":".. CRM book will say \u0027Office address set!\u0027"},{"lineNumber":2022,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2023,"author":{"gitID":"davidten"},"content":"\u003d\u003d\u003d Getting directions to a client\u0027s location"},{"lineNumber":2024,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2025,"author":{"gitID":"davidten"},"content":". In the command box, type select [index] where index is the index of a currently unselected person card"},{"lineNumber":2026,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2027,"author":{"gitID":"davidten"},"content":".. For example, select 3"},{"lineNumber":2028,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2029,"author":{"gitID":"davidten"},"content":".. If you have already set your office location, instead of doing a Google search of the person, the CRM Book will instead show you directions to your client\u0027s office, powered by Google Maps."},{"lineNumber":2030,"author":{"gitID":"davidten"},"content":""},{"lineNumber":2031,"author":{"gitID":"davidten"},"content":".. If Google Maps does not recognize the address, you may have to manually change the address in the Google Maps prompt"},{"lineNumber":2032,"author":{"gitID":"-"},"content":""},{"lineNumber":2033,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Change color theme of CRM Book"},{"lineNumber":2034,"author":{"gitID":"-"},"content":""},{"lineNumber":2035,"author":{"gitID":"-"},"content":". In the command box, type changetheme [theme] where theme can be one of the three themes available, namely light, dark, blue."},{"lineNumber":2036,"author":{"gitID":"-"},"content":""},{"lineNumber":2037,"author":{"gitID":"-"},"content":".. For example, changetheme light"},{"lineNumber":2038,"author":{"gitID":"-"},"content":""},{"lineNumber":2039,"author":{"gitID":"-"},"content":".. If the current theme is not light, theme will be changed to light with a success message."},{"lineNumber":2040,"author":{"gitID":"-"},"content":""},{"lineNumber":2041,"author":{"gitID":"-"},"content":".. If the current theme is light, CRM Book will give a message to notify the user that the current theme is light."}],"authorContributionMap":{"Sheikh-Umar":311,"WoodyLau":124,"davidten":156,"-":1450}},{"path":"src/test/java/seedu/address/logic/commands/LinkedInLoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"import static seedu.address.logic.commands.LinkedInLoginCommand.MESSAGE_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":""},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":""},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.events.ui.ShowBrowserRequestEvent;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":""},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"public class LinkedInLoginCommandTest {"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":""},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":""},{"lineNumber":19,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"    public void execute_help_success() {"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"        CommandResult result \u003d new LinkedInLoginCommand().execute();"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowBrowserRequestEvent);"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":""},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":27}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        Lead expectedPerson \u003d (Lead) new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        Lead expectedPersonMultipleTags \u003d (Lead) new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":"        Lead expectedPerson \u003d (Lead) new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":4,"-":142}},{"path":"src/test/java/seedu/address/logic/parser/GoogleSetLocationCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertNull;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":""},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":""},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.commands.GoogleSetLocationCommand;"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"public class GoogleSetLocationCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"    private String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"            GoogleSetLocationCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"    private GoogleSetLocationCommandParser parser \u003d new GoogleSetLocationCommandParser();"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":""},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"        //missing address prefix"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"        assertParseFailure(parser, VALID_ADDRESS_AMY, expectedMessage);"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":""},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":"        //tests invalid addressValue"},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":""},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"    public void parseSuccess() {"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"        //We cannot use the traditional assertParseSuccess because the address is created in the parser, and"},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"        //even with the same input it will return a different command object."},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"        //Therefore, we check with the config file instead."},{"lineNumber":42,"author":{"gitID":"davidten"},"content":""},{"lineNumber":43,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":44,"author":{"gitID":"davidten"},"content":"        Config preConfig \u003d Config.setupConfig();"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":"        assertNull(preConfig.getUserLocation());"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":""},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"        GoogleSetLocationCommand command \u003d null;"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"davidten"},"content":"            command \u003d parser.parse(ADDRESS_DESC_AMY);"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":"        } catch (ParseException e) {"},{"lineNumber":51,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":52,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"davidten"},"content":""},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"        assertNotNull(command);"},{"lineNumber":55,"author":{"gitID":"davidten"},"content":"        command.execute();"},{"lineNumber":56,"author":{"gitID":"davidten"},"content":""},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"        Config postConfig \u003d Config.setupConfig();"},{"lineNumber":58,"author":{"gitID":"davidten"},"content":"        assertEquals(VALID_ADDRESS_AMY, postConfig.getUserLocation());"},{"lineNumber":59,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":60,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":61}},{"path":"src/test/java/seedu/address/logic/commands/GoogleSetLocationCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import static org.junit.Assert.assertNull;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":""},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":""},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":""},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":""},{"lineNumber":16,"author":{"gitID":"davidten"},"content":""},{"lineNumber":17,"author":{"gitID":"davidten"},"content":""},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"public class GoogleSetLocationCommandTest {"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":""},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"    private GoogleSetLocationCommand prepareCommand(Address address) {"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"        GoogleSetLocationCommand command \u003d new GoogleSetLocationCommand(address);"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"        return command;"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":""},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"    public void constructor_nullAddress_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"        prepareCommand(null);"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":""},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"    public void testGoogleExecuteCommand() throws IOException {"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"        Config preConfig \u003d Config.setupConfig();"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"        assertNull(preConfig.getUserLocation());"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":""},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"        String addressString \u003d \"6 College Avenue East, Singapore 138614\";"},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"        Address myAddress \u003d new Address(addressString);"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":""},{"lineNumber":43,"author":{"gitID":"davidten"},"content":"        GoogleSetLocationCommand command \u003d prepareCommand(myAddress);"},{"lineNumber":44,"author":{"gitID":"davidten"},"content":"        CommandResult cr \u003d command.execute();"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":"        assertEquals(cr.feedbackToUser, GoogleSetLocationCommand.MESSAGE_SUCCESS);"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":""},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"        Config postConfig \u003d Config.setupConfig();"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"        assertEquals(addressString, postConfig.getUserLocation());"},{"lineNumber":49,"author":{"gitID":"davidten"},"content":"        Config.clearUserLocation();"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"davidten"},"content":""},{"lineNumber":52,"author":{"gitID":"davidten"},"content":""},{"lineNumber":53,"author":{"gitID":"davidten"},"content":""},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":54}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_THIRD_PERSON, descriptor);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"WoodyLau"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":4,"-":259}},{"path":"src/test/java/seedu/address/logic/commands/DisplayCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author Sheikh-Umar"},{"lineNumber":2,"author":{"gitID":"Sheikh-Umar"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":4,"author":{"gitID":"Sheikh-Umar"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"Sheikh-Umar"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"Sheikh-Umar"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Sheikh-Umar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"Sheikh-Umar"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":10,"author":{"gitID":"Sheikh-Umar"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"Sheikh-Umar"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.person.TypeMatchesKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":25,"author":{"gitID":"Sheikh-Umar"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"Sheikh-Umar"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":27,"author":{"gitID":"Sheikh-Umar"},"content":" */"},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":"public class DisplayCommandTest {"},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"Sheikh-Umar"},"content":"        TypeMatchesKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":"                new TypeMatchesKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitID":"Sheikh-Umar"},"content":"        TypeMatchesKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"Sheikh-Umar"},"content":"                new TypeMatchesKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":38,"author":{"gitID":"Sheikh-Umar"},"content":"        DisplayCommand displayFirstCommand \u003d new DisplayCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":40,"author":{"gitID":"Sheikh-Umar"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(displayFirstCommand.equals(displayFirstCommand));"},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":43,"author":{"gitID":"Sheikh-Umar"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"Sheikh-Umar"},"content":"        DisplayCommand displayFirstCommandCopy \u003d new DisplayCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(displayFirstCommand.equals(displayFirstCommandCopy));"},{"lineNumber":46,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":47,"author":{"gitID":"Sheikh-Umar"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"Sheikh-Umar"},"content":"        assertFalse(displayFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":50,"author":{"gitID":"Sheikh-Umar"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"Sheikh-Umar"},"content":"        assertFalse(displayFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":54,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"Sheikh-Umar"},"content":"    public void execute_zeroTypeEntered() {"},{"lineNumber":56,"author":{"gitID":"Sheikh-Umar"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":57,"author":{"gitID":"Sheikh-Umar"},"content":"        DisplayCommand command \u003d prepareCommand(\" \");"},{"lineNumber":58,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":59,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":61,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"Sheikh-Umar"},"content":"    public void execute_userEnteredLeads_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"Sheikh-Umar"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"Sheikh-Umar"},"content":"        DisplayCommand command \u003d prepareCommand(\"Leads\");"},{"lineNumber":65,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":68,"author":{"gitID":"Sheikh-Umar"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"Sheikh-Umar"},"content":"    public void execute_userEnteredContacts_noPersonFound() {"},{"lineNumber":70,"author":{"gitID":"Sheikh-Umar"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":71,"author":{"gitID":"Sheikh-Umar"},"content":"        DisplayCommand command \u003d prepareCommand(\"Contacts\");"},{"lineNumber":72,"author":{"gitID":"Sheikh-Umar"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":73,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":75,"author":{"gitID":"Sheikh-Umar"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"Sheikh-Umar"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"Sheikh-Umar"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Sheikh-Umar"},"content":"    private DisplayCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"Sheikh-Umar"},"content":"        DisplayCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"Sheikh-Umar"},"content":"                new DisplayCommand(new TypeMatchesKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"Sheikh-Umar"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"Sheikh-Umar"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":85,"author":{"gitID":"Sheikh-Umar"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Sheikh-Umar"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"Sheikh-Umar"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"Sheikh-Umar"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"Sheikh-Umar"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"Sheikh-Umar"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Sheikh-Umar"},"content":"    private void assertCommandSuccess(DisplayCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"Sheikh-Umar"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"Sheikh-Umar"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":95,"author":{"gitID":"Sheikh-Umar"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"Sheikh-Umar"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"Sheikh-Umar"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Sheikh-Umar"},"content":"}"},{"lineNumber":100,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author"}],"authorContributionMap":{"Sheikh-Umar":100}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","lines":[{"lineNumber":1,"content":"//@@author zhuleyan"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.InputThemeEqualsCurrentThemeException;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ImportCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String SAMPLE_NAME \u003d \"Misti Offen\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String SAMPLE_PHONE \u003d \"12345678\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String SAMPLE_EMAIL \u003d \"moffen2@unicef.org\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String SAMPLE_ADDRESS \u003d \"359, Milwaukee Terrace\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String SAMPLE_TAGS \u003d \"HR\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String SAMPLE_REMARK \u003d \"\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String SAMPLE_TYPE \u003d \"Lead\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        new ImportCommand(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cLead\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Lead firstValidPerson \u003d (Lead) new PersonBuilder().build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Lead secondValidPerson \u003d (Lead) new PersonBuilder().withName(SAMPLE_NAME).withPhone(SAMPLE_PHONE)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .withEmail(SAMPLE_EMAIL).withAddress(SAMPLE_ADDRESS).withRemark(SAMPLE_REMARK).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        persons.add(firstValidPerson);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        persons.add(secondValidPerson);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getImportCommandForPerson(persons, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(String.format(ImportCommand.MESSAGE_SUCCESS, persons), commandResult.feedbackToUser);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(persons, modelStub.personsAdded);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"        Lead alice \u003d (Lead) new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"        Lead bob \u003d (Lead) new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Lead charlie \u003d (Lead) new PersonBuilder().withName(\"Charlie\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        List\u003cLead\u003e firstList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cLead\u003e secondList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        firstList.add(alice);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        firstList.add(bob);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        secondList.add(alice);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        secondList.add(charlie);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ImportCommand addFirstListCommand \u003d new ImportCommand(firstList);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ImportCommand addSecondListCommand \u003d new ImportCommand(secondList);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(addFirstListCommand.equals(addFirstListCommand));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ImportCommand addFirstListCommandCopy \u003d new ImportCommand(firstList);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertTrue(addFirstListCommand.equals(addFirstListCommandCopy));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addFirstListCommand.equals(1));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(addFirstListCommand.equals(null));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(addFirstListCommand.equals(addSecondListCommand));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Generates a new ImportCommand with the details of the given person list."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private ImportCommand getImportCommandForPerson(List\u003cLead\u003e persons, Model model) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ImportCommand command \u003d new ImportCommand(persons);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":"        public void convertPerson(Lead lead, Contact contact)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public void sortAllPersons() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public void updateTheme(String theme) throws InputThemeEqualsCurrentThemeException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public String getThemeFilePath() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person list."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person list being added."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"WoodyLau":6,"-":198}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"        Lead validPerson \u003d (Lead) new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"        Lead personInList \u003d (Lead) model.getAddressBook().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"    private AddCommand prepareCommand(Lead person, Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":4,"-":51}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.InputThemeEqualsCurrentThemeException;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"        Lead validPerson \u003d (Lead) new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"        Lead validPerson \u003d (Lead) new PersonBuilder().build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"        Lead alice \u003d (Lead) new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"        Lead bob \u003d (Lead) new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"    private AddCommand getAddCommandForPerson(Lead person, Model model) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"        public void convertPerson(Lead lead, Contact contact)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public void sortAllPersons() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public void updateTheme(String theme) throws InputThemeEqualsCurrentThemeException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public String getThemeFilePath() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":9,"-":187}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":61,"author":{"gitID":"Sheikh-Umar"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":1,"-":74}},{"path":"src/test/java/seedu/address/logic/commands/EditDetailsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.EditDetailsCommand.EditContactDescriptor;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.EditDetailsCommand.EditLeadDescriptor;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"public class EditDetailsCommandTest {"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"    public void execute_leadCompany_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"        Lead personInFilteredList \u003d (Lead) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor descriptor \u003d new EditLeadDescriptor();"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setCompany(\"Hello Inc\");"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"        Lead editedPerson \u003d (Lead) new PersonBuilder(personInFilteredList).withType(\"Lead\").build();"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setCompany(\"Hello Inc\");"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(EditDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(editDetailsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(personInFilteredList.getCompany().equals(editedPerson.getCompany()));"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    public void execute_leadRating_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"        Lead personInFilteredList \u003d (Lead) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor descriptor \u003d new EditLeadDescriptor();"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setRating(1);"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        Lead editedPerson \u003d (Lead) new PersonBuilder(personInFilteredList).withType(\"Lead\").build();"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setRating(1);"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(EditDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(editDetailsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(((Lead) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())).getRating()"},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"                \u003d\u003d editedPerson.getRating());"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setRating(5);"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setRating(5);"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":"        editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(editDetailsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(((Lead) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())).getRating()"},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"                \u003d\u003d editedPerson.getRating());"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"    public void execute_leadWebsite_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"        Lead personInFilteredList \u003d (Lead) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor descriptor \u003d new EditLeadDescriptor();"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setWebsite(\"gagle.com\");"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"        Lead editedPerson \u003d (Lead) new PersonBuilder(personInFilteredList).withType(\"Lead\").build();"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setWebsite(\"gagle.com\");"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(EditDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(editDetailsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(personInFilteredList.getWebsite().equals(editedPerson.getWebsite()));"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"    public void execute_leadIndustry_success() throws Exception {"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"        Lead personInFilteredList \u003d (Lead) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor descriptor \u003d new EditLeadDescriptor();"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setIndustry(\"Software\");"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"        Lead editedPerson \u003d (Lead) new PersonBuilder(personInFilteredList).withType(\"Lead\").build();"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setIndustry(\"Software\");"},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(EditDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(editDetailsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(personInFilteredList.getIndustry().equals(editedPerson.getIndustry()));"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"    public void execute_leadRating_failure() throws Exception {"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor descriptor \u003d new EditLeadDescriptor();"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setRating(0);"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(editDetailsCommand, model, \"Rating only goes from 1 to 5. Rating was not updated\");"},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setRating(6);"},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":"        editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(editDetailsCommand, model, \"Rating only goes from 1 to 5. Rating was not updated\");"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":"    public void execute_leadNoArg_failure() throws Exception {"},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor descriptor \u003d new EditLeadDescriptor();"},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareLeadCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(editDetailsCommand, model, EditDetailsCommand.MESSAGE_NOT_EDITED_FOR_LEAD);"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"WoodyLau"},"content":"    public void execute_contactCompany_success() throws Exception {"},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"        Contact personInFilteredList \u003d (Contact) model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":158,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":159,"author":{"gitID":"WoodyLau"},"content":"        EditContactDescriptor descriptor \u003d new EditContactDescriptor();"},{"lineNumber":160,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setCompany(\"Hello Inc\");"},{"lineNumber":161,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":162,"author":{"gitID":"WoodyLau"},"content":"        Contact editedPerson \u003d (Contact) new PersonBuilder(personInFilteredList).withType(\"Contact\").build();"},{"lineNumber":163,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setCompany(\"Hello Inc\");"},{"lineNumber":164,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":165,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(EditDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":166,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":167,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":168,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":169,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":170,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareContactCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":171,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":172,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(editDetailsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(personInFilteredList.getCompany().equals(editedPerson.getCompany()));"},{"lineNumber":174,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":176,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"WoodyLau"},"content":"    public void execute_contactDepartment_success() throws Exception {"},{"lineNumber":178,"author":{"gitID":"WoodyLau"},"content":"        Contact personInFilteredList \u003d (Contact) model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":179,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":180,"author":{"gitID":"WoodyLau"},"content":"        EditContactDescriptor descriptor \u003d new EditContactDescriptor();"},{"lineNumber":181,"author":{"gitID":"WoodyLau"},"content":"        descriptor.setDepartment(\"IT\");"},{"lineNumber":182,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":183,"author":{"gitID":"WoodyLau"},"content":"        Contact editedPerson \u003d (Contact) new PersonBuilder(personInFilteredList).withType(\"Contact\").build();"},{"lineNumber":184,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setDepartment(\"IT\");"},{"lineNumber":185,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":186,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(EditDetailsCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":187,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":188,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":189,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":190,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":191,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareContactCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":192,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":193,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(editDetailsCommand, model, expectedMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(personInFilteredList.getDepartment().equals(editedPerson.getDepartment()));"},{"lineNumber":195,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":197,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"WoodyLau"},"content":"    public void execute_contactNoArg_failure() throws Exception {"},{"lineNumber":199,"author":{"gitID":"WoodyLau"},"content":"        EditContactDescriptor descriptor \u003d new EditContactDescriptor();"},{"lineNumber":200,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":201,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editDetailsCommand \u003d prepareContactCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":202,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":203,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(editDetailsCommand, model, EditDetailsCommand.MESSAGE_NOT_EDITED_FOR_CONTACT);"},{"lineNumber":204,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":206,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"WoodyLau"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":208,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"WoodyLau"},"content":"    private EditDetailsCommand prepareLeadCommand(Index index, EditLeadDescriptor descriptor) {"},{"lineNumber":210,"author":{"gitID":"WoodyLau"},"content":"        EditContactDescriptor nullDescriptor \u003d new EditContactDescriptor();"},{"lineNumber":211,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editCommand \u003d new EditDetailsCommand(index, descriptor, nullDescriptor);"},{"lineNumber":212,"author":{"gitID":"WoodyLau"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":213,"author":{"gitID":"WoodyLau"},"content":"        return editCommand;"},{"lineNumber":214,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"WoodyLau"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":217,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"WoodyLau"},"content":"    private EditDetailsCommand prepareContactCommand(Index index, EditContactDescriptor descriptor) {"},{"lineNumber":219,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor nullDescriptor \u003d new EditLeadDescriptor();"},{"lineNumber":220,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand editCommand \u003d new EditDetailsCommand(index, nullDescriptor, descriptor);"},{"lineNumber":221,"author":{"gitID":"WoodyLau"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":222,"author":{"gitID":"WoodyLau"},"content":"        return editCommand;"},{"lineNumber":223,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":224}},{"path":"src/test/java/seedu/address/model/person/LeadContactTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class LeadContactTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagTest \u003d new HashSet\u003c\u003e();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        tagTest.add(new Tag(\"friends\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Contact test1 \u003d new Contact(new Name(\"test\"), new Phone(\"12345678\"),"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                new Email(\"what@gmail.com\"), new Address(\"123 abc\"), new Remark(\"\"), tagTest);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Name name1 \u003d test1.getName();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Phone phone1 \u003d test1.getPhone();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Email email1 \u003d test1.getEmail();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Address address1 \u003d test1.getAddress();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tags1 \u003d test1.getTags();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Type type \u003d test1.getType();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String string1 \u003d test1.toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Lead test2 \u003d new Lead(new Name(\"test\"), new Phone(\"12345678\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Email(\"what@gmail.com\"), new Address(\"123 abc\"), new Remark(\"\"), tagTest);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Name name2 \u003d test2.getName();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Phone phone2 \u003d test2.getPhone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Email email2 \u003d test2.getEmail();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Address address2 \u003d test2.getAddress();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tags2 \u003d test2.getTags();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Type type2 \u003d test2.getType();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String string2 \u003d test2.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"        assertFalse(test1.equals(test2));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(type \u003d\u003d type2);"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(string1.equals("},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"                \"test Type: Contact Phone: 12345678 Email: what@gmail.com Address: 123 abc Tags: [friends]\"));"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(string2.equals("},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"                \"test Type: Lead Phone: 12345678 Email: what@gmail.com Address: 123 abc Tags: [friends]\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":8,"-":39}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAccountList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"        List\u003cAccount\u003e newAccounts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAccounts);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":"        private final ObservableList\u003cAccount\u003e accounts \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cAccount\u003e accounts) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"            this.accounts.setAll(accounts);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"        public ObservableList\u003cAccount\u003e getAccountList() {"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"            return accounts;"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":12,"-":92}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"            .withTags(\"friends\")"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"            .withType(\"Lead\").build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"            .withType(\"Contact\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"            .withType(\"Lead\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"            .withType(\"Lead\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"            .withType(\"Contact\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"            .withType(\"Lead\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withRemark(\"Likes to swim\")"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"            .withType(\"Contact\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":13,"-":75}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Type;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String DEFAULT_NAME \u003d \"Eric Johnson\";"},{"lineNumber":24,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String DEFAULT_PHONE \u003d \"97621110\";"},{"lineNumber":25,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String DEFAULT_EMAIL \u003d \"ericjohnson@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Simei Street 6, #08-101\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"    public static final String DEFAULT_TYPE \u003d \"Lead\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Remark remark;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    private Type type;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"        type \u003d new Type(DEFAULT_TYPE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        remark \u003d personToCopy.getRemark();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"        type \u003d personToCopy.getType();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"     * Sets the {@code Type} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"    public PersonBuilder withType(String type) {"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"        this.type \u003d new Type(type);"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"     * Builds the {@code Person}."},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":"        if (this.type.value.equals(\"Lead\")) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new Lead(name, phone, email, address, remark, tags);"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return new Contact(name, phone, email, address, remark, tags);"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":4,"WoodyLau":21,"-":103}},{"path":"src/test/java/seedu/address/logic/commands/ConvertCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"import java.text.DateFormat;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import java.util.Date;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ConvertCommand."},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"public class ConvertCommandTest {"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"    public void execute_unfilteredList_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand convertCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"        Person convertedPerson \u003d new PersonBuilder(personInFilteredList).withType(\"Contact\").build();"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(ConvertCommand.MESSAGE_CONVERT_PERSON_SUCCESS, personInFilteredList);"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), convertedPerson);"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(convertCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"        Date date \u003d new Date();"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(((Contact) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"                .getConvertedDate().equals(dateFormat.format(date)));"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand convertCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"        Person convertedPerson \u003d new PersonBuilder(personInFilteredList).withType(\"Contact\").build();"},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(ConvertCommand.MESSAGE_CONVERT_PERSON_SUCCESS, personInFilteredList);"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), convertedPerson);"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"        assertCommandSuccess(convertCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":"        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"        Date date \u003d new Date();"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(((Contact) model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"                .getConvertedDate().equals(dateFormat.format(date)));"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"     * Convert selection where person is already a Contact"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"    public void execute_invalidPersonTypeUnfilteredList_failure() {"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand convertCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(ConvertCommand.MESSAGE_NOT_CONVERTED, personInFilteredList);"},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(convertCommand, model, expectedMessage);"},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"    public void execute_invalidPersonTypeFilteredList_failure() {"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand convertCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"        String expectedMessage \u003d String.format(ConvertCommand.MESSAGE_NOT_CONVERTED, personInFilteredList);"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(convertCommand, model, expectedMessage);"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand convertCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(convertCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"     * Convert filtered list where index is larger than size of filtered list,"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"     * but smaller than size of address book"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand convertCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"        assertCommandFailure(convertCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"    public void equals() throws Exception {"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"        final ConvertCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"        // same values -\u003e returns true"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"        // same object -\u003e returns true"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":"        // null -\u003e returns false"},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":"        // different types -\u003e returns false"},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":"        // different index -\u003e returns false"},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":"        assertFalse(standardCommand.equals(new ConvertCommand(INDEX_SECOND_PERSON)));"},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":"     * Returns an {@code ConvertCommand} with parameter {@code index}"},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"    private ConvertCommand prepareCommand(Index index) {"},{"lineNumber":156,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand convertCommand \u003d new ConvertCommand(index);"},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"        convertCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":158,"author":{"gitID":"WoodyLau"},"content":"        return convertCommand;"},{"lineNumber":159,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":160}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.URLEncoder;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            \"https://www.google.com.sg/search?ei\u003dEmypWtGyJsiEvQSsnbGwDQ\u0026q\u003d\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static Config config;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"davidten"},"content":"    //@@author davidten"},{"lineNumber":72,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"davidten"},"content":"     * Gets configuration to be used when showing google maps"},{"lineNumber":74,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"davidten"},"content":"    public static void getConfig() {"},{"lineNumber":76,"author":{"gitID":"davidten"},"content":"        config \u003d Config.setupConfig();"},{"lineNumber":77,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"davidten"},"content":""},{"lineNumber":79,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"davidten"},"content":"     * Generates the google maps url to be shown in the browser"},{"lineNumber":81,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"davidten"},"content":"    public static String generateUrl(String from, String to) {"},{"lineNumber":83,"author":{"gitID":"davidten"},"content":"        String url \u003d \"https://www.google.com/maps/dir/?api\u003d1\u0026origin\u003d\";"},{"lineNumber":84,"author":{"gitID":"davidten"},"content":"        String encodedUserLocation \u003d \"\";"},{"lineNumber":85,"author":{"gitID":"davidten"},"content":"        String encodedDestinationLocation \u003d \"\";"},{"lineNumber":86,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"davidten"},"content":"            encodedUserLocation \u003d URLEncoder.encode(from, \"UTF-8\");"},{"lineNumber":88,"author":{"gitID":"davidten"},"content":"            encodedDestinationLocation \u003d URLEncoder.encode(to, \"UTF-8\");"},{"lineNumber":89,"author":{"gitID":"davidten"},"content":"        } catch (UnsupportedEncodingException e) {"},{"lineNumber":90,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":91,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"davidten"},"content":""},{"lineNumber":93,"author":{"gitID":"davidten"},"content":"        url +\u003d encodedUserLocation + \"\u0026destination\u003d\" + encodedDestinationLocation;"},{"lineNumber":94,"author":{"gitID":"davidten"},"content":""},{"lineNumber":95,"author":{"gitID":"davidten"},"content":"        return url;"},{"lineNumber":96,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"davidten"},"content":""},{"lineNumber":98,"author":{"gitID":"davidten"},"content":"    @Subscribe"},{"lineNumber":99,"author":{"gitID":"davidten"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":100,"author":{"gitID":"davidten"},"content":"        getConfig();"},{"lineNumber":101,"author":{"gitID":"davidten"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":102,"author":{"gitID":"davidten"},"content":"        //if person has no home location set"},{"lineNumber":103,"author":{"gitID":"davidten"},"content":"        if (config.getUserLocation() \u003d\u003d null || config.getUserLocation().length() \u003d\u003d 0) {"},{"lineNumber":104,"author":{"gitID":"davidten"},"content":"            logger.info(\"No office location set, doing Google search\");"},{"lineNumber":105,"author":{"gitID":"davidten"},"content":"            loadPersonPage(event.getNewSelection().person);"},{"lineNumber":106,"author":{"gitID":"davidten"},"content":"        } else {"},{"lineNumber":107,"author":{"gitID":"davidten"},"content":"            String url \u003d generateUrl(config.getUserLocation(), event.getNewSelection().person.getAddress().toString());"},{"lineNumber":108,"author":{"gitID":"davidten"},"content":"            logger.info(\"Office location set, Load Google Maps. URL IS \" + url);"},{"lineNumber":109,"author":{"gitID":"davidten"},"content":"            loadPage(url);"},{"lineNumber":110,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"-":70,"davidten":42}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLORS \u003d"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        { \"blue\", \"cyan\", \"green\", \"magenta\", \"orange\", \"pink\", \"red\", \"yellow\", \"teal\", \"brown\" };"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"    private Label type;"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Label remark;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"    private Label company;"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"    private Label industry;"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"    private Label rating;"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"    private Label website;"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":"    private Label department;"},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"        if (person instanceof Lead \u0026\u0026 ((Lead) person).getTitle() !\u003d null \u0026\u0026 !((Lead) person).getTitle().equals(\"\")) {"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"            name.setText(((Lead) person).getTitle() + \" \" + person.getName().fullName);"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"        } else if (person instanceof Contact"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 ((Contact) person).getTitle() !\u003d null \u0026\u0026 !((Contact) person).getTitle().equals(\"\")) {"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"            String text \u003d ((Contact) person).getTitle() + \" \" + person.getName().fullName;"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":"            name.setText(text);"},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            name.setText(person.getName().fullName);"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":"        type.setText(person.getType().value);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        remark.setText(person.getRemark().value);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        if (person instanceof Lead) {"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"            setLead((Lead) person);"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"            setContact((Contact) person);"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"    private void setLead(Lead person) {"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"        department.setVisible(false);"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"        department.setManaged(false);"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"        if (person.getCompany() \u003d\u003d null || person.getCompany().equals(\"\")) {"},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"            company.setText(\"Company: Not Given\");"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"            company.setText(\"Company: \" + person.getCompany());"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"        if (person.getIndustry() \u003d\u003d null || person.getIndustry().equals(\"\")) {"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"            industry.setVisible(false);"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"            industry.setManaged(false);"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"            industry.setText(\"Industry: \" + person.getIndustry());"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"        if (person.getRating() \u003d\u003d 0) {"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"            rating.setText(\"Rating: Not Given\");"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":"            rating.setText(\"Rating: \" + person.getRating() + \"/5\");"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"        if (person.getWebsite() \u003d\u003d null || person.getWebsite().equals(\"\")) {"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"            website.setVisible(false);"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"            website.setManaged(false);"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"            website.setText(\"Website: \" + person.getWebsite());"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"    private void setContact(Contact person) {"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"        industry.setVisible(false);"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"        industry.setManaged(false);"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"        rating.setVisible(false);"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":"        rating.setManaged(false);"},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"        website.setVisible(false);"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"        website.setManaged(false);"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"        if (person.getCompany() \u003d\u003d null || person.getCompany().equals(\"\")) {"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"            company.setText(\"Company: Not Given\");"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"            company.setText(\"Company: \" + person.getCompany());"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"        if (person.getDepartment() \u003d\u003d null || person.getDepartment().equals(\"\")) {"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"            department.setText(\"Department: Not Given\");"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":"            department.setText(\"Department: \" + person.getDepartment());"},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"    //@@author A0155428B"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *Returns the color for {@code tagName}\u0027s label"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        //Uses the hash code of the tag name to generate a color, such that each run of the program"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        //produce the same color for that tag name"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *Creates tag labels for {@code person}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void initTags(Person person) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"content":"    //@@author"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"WoodyLau":83,"-":93}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"davidten"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"davidten"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Config.class);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String appTitle \u003d \"CRM Book\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"    //@@author davidten"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"    private String appId \u003d \"78ameftoz7yvk4\";"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"    private String appSecret;"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"    private String userLocation;"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":""},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"    public String getUserLocation() {"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"        return userLocation;"},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":""},{"lineNumber":33,"author":{"gitID":"davidten"},"content":"    public void setUserLocation(String address) {"},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"        userLocation \u003d address;"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":""},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"    public String getAppSecret() {"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"        return appSecret;"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"davidten"},"content":""},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"    public void setAppSecret(String appSecret) {"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":"        this.appSecret \u003d appSecret;"},{"lineNumber":43,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"davidten"},"content":""},{"lineNumber":45,"author":{"gitID":"davidten"},"content":"    public String getAppId() {"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":"        return appId;"},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":100,"author":{"gitID":"davidten"},"content":"        //@@author davidten"},{"lineNumber":101,"author":{"gitID":"davidten"},"content":"        sb.append(\"\\nApp Id: \" + appId);"},{"lineNumber":102,"author":{"gitID":"davidten"},"content":"        sb.append(\"\\nApp Secret: \" + appSecret);"},{"lineNumber":103,"author":{"gitID":"davidten"},"content":"        sb.append(\"\\nUser Location: \" + userLocation);"},{"lineNumber":104,"author":{"gitID":"davidten"},"content":"        //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"davidten"},"content":"    //@@author davidten"},{"lineNumber":108,"author":{"gitID":"davidten"},"content":"    //reused"},{"lineNumber":109,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"davidten"},"content":"     * Called to start reading the configuration file so that we get the most updated values"},{"lineNumber":111,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"davidten"},"content":"    public static Config setupConfig() {"},{"lineNumber":113,"author":{"gitID":"davidten"},"content":"        Config initializedConfig;"},{"lineNumber":114,"author":{"gitID":"davidten"},"content":"        String configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":115,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"davidten"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":117,"author":{"gitID":"davidten"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":118,"author":{"gitID":"davidten"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":119,"author":{"gitID":"davidten"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":120,"author":{"gitID":"davidten"},"content":"                    + \"Using default config properties\");"},{"lineNumber":121,"author":{"gitID":"davidten"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":122,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"davidten"},"content":"        return initializedConfig;"},{"lineNumber":124,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"davidten"},"content":""},{"lineNumber":126,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"davidten"},"content":"     * Used by testcases so that Google maps does not interfere with select command"},{"lineNumber":128,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"davidten"},"content":"    public static void clearUserLocation() {"},{"lineNumber":130,"author":{"gitID":"davidten"},"content":"        Config preConfig \u003d Config.setupConfig();"},{"lineNumber":131,"author":{"gitID":"davidten"},"content":"        preConfig.setUserLocation(null);"},{"lineNumber":132,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"davidten"},"content":"            ConfigUtil.saveConfig(preConfig, preConfig.DEFAULT_CONFIG_FILE);"},{"lineNumber":134,"author":{"gitID":"davidten"},"content":"        } catch (IOException e) {"},{"lineNumber":135,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":136,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"-":71,"davidten":67}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Oauth2Client;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.HideBrowserRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowBrowserRequestEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Theme;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private String themeFilePath;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        super(prefs.getMainWindowFile(), primaryStage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setDefaultThemeFilePath(prefs);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":108,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":114,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":118,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"content":"    //@@author A0155428B"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private String getFullPath(String filePath) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String fullPath \u003d getClass().getResource(filePath).toExternalForm();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return fullPath;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Sets the default theme file path based on user preferences."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void setDefaultThemeFilePath(UserPrefs prefs) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        this.themeFilePath \u003d prefs.getGuiSettings().getThemeFilePath();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        String fullPath \u003d getFullPath(this.themeFilePath);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(fullPath);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"content":"    //@@author"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY(), this.themeFilePath);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"content":"    //@@author A0155428B"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public String getThemeFilePath() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        return themeFilePath;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Changes the current theme"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void handleChangeTheme(String theme) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        String fullPath \u003d getFullPath(this.themeFilePath);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().remove(fullPath);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        switch (theme) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        case Theme.LIGHT_THEME:"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.LIGHT_THEME_FILE_PATH;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        case Theme.DARK_THEME:"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.DARK_THEME_FILE_PATH;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        case Theme.BLUE_THEME:"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.themeFilePath \u003d Theme.BLUE_THEME_FILE_PATH;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            //this will not happen"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        prefs.getGuiSettings().setThemeFilePath(this.themeFilePath);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        fullPath \u003d getFullPath(this.themeFilePath);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        primaryStage.getScene().getStylesheets().add(fullPath);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"davidten"},"content":"    //@@author davidten"},{"lineNumber":224,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"davidten"},"content":"     * Opens the help window."},{"lineNumber":226,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"davidten"},"content":"    @FXML"},{"lineNumber":228,"author":{"gitID":"davidten"},"content":"    public void handleHelp() {"},{"lineNumber":229,"author":{"gitID":"davidten"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":230,"author":{"gitID":"davidten"},"content":"        helpWindow.show();"},{"lineNumber":231,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"davidten"},"content":""},{"lineNumber":233,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"davidten"},"content":"     * Opens the linkedin authentication window."},{"lineNumber":235,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"davidten"},"content":"    public void handleLinkedInAuthentication() {"},{"lineNumber":237,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":238,"author":{"gitID":"davidten"},"content":"            Oauth2Client.authenticateWithLinkedIn();"},{"lineNumber":239,"author":{"gitID":"davidten"},"content":"        } catch (IOException e) {"},{"lineNumber":240,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":241,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"davidten"},"content":""},{"lineNumber":244,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"davidten"},"content":"     * Closes the linkedin authentication window."},{"lineNumber":246,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"davidten"},"content":"    public void handleHideBrowser() {"},{"lineNumber":248,"author":{"gitID":"davidten"},"content":"        Oauth2Client.closeBrowser();"},{"lineNumber":249,"author":{"gitID":"davidten"},"content":"        Oauth2Client.getLinkedInS();"},{"lineNumber":250,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"davidten"},"content":"    //@@author"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private void handleChangeThemeEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        handleChangeTheme(event.theme);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"davidten"},"content":"    //@@author davidten"},{"lineNumber":279,"author":{"gitID":"davidten"},"content":"    @Subscribe"},{"lineNumber":280,"author":{"gitID":"davidten"},"content":"    private void handleCloseBrowserEvent(HideBrowserRequestEvent event) {"},{"lineNumber":281,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":282,"author":{"gitID":"davidten"},"content":"            logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":283,"author":{"gitID":"davidten"},"content":"            handleHideBrowser();"},{"lineNumber":284,"author":{"gitID":"davidten"},"content":"        } catch (Exception e) {"},{"lineNumber":285,"author":{"gitID":"davidten"},"content":"            logger.info(e.toString());"},{"lineNumber":286,"author":{"gitID":"davidten"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent(\"Login Failed.\"));"},{"lineNumber":287,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"davidten"},"content":""},{"lineNumber":290,"author":{"gitID":"davidten"},"content":"    @Subscribe"},{"lineNumber":291,"author":{"gitID":"davidten"},"content":"    private void handleLinkedInAuthenticationEvent(ShowBrowserRequestEvent event) {"},{"lineNumber":292,"author":{"gitID":"davidten"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":293,"author":{"gitID":"davidten"},"content":"        handleLinkedInAuthentication();"},{"lineNumber":294,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"davidten"},"content":""},{"lineNumber":296,"author":{"gitID":"davidten"},"content":"    @Subscribe"},{"lineNumber":297,"author":{"gitID":"davidten"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":298,"author":{"gitID":"davidten"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":299,"author":{"gitID":"davidten"},"content":"        handleHelp();"},{"lineNumber":300,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"davidten"},"content":""},{"lineNumber":302,"author":{"gitID":"davidten"},"content":"    //@@author"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"-":247,"davidten":54}},{"path":"src/main/java/seedu/address/ui/BrowserWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"//reused"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":"package seedu.address.ui;"},{"lineNumber":4,"author":{"gitID":"davidten"},"content":""},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":""},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":""},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":" * Opens a new browser window, HelpWindow style"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"public class BrowserWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":""},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(BrowserWindow.class);"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"    private static String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"    private WebView browser;"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":""},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"     * Creates a new HelpWindow."},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"    public BrowserWindow(Stage root, String url) {"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"        super(FXML, root);"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"        logger.info(\"Starting a web page at URL: \" + url);"},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"        browser.getEngine().load(url);"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"        logger.info(\"Loading a web page\");"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":""},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":""},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"     * Creates a new BrowserWindow with specified fxml."},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"    public BrowserWindow(Stage root, String url, String fxml) {"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":"        super(fxml, root);"},{"lineNumber":43,"author":{"gitID":"davidten"},"content":"        logger.info(\"Starting a web page with fxml: \" + fxml);"},{"lineNumber":44,"author":{"gitID":"davidten"},"content":"        logger.info(\"Starting a web page at URL: \" + url);"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":"        browser.getEngine().load(url);"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":"        logger.info(\"Loading a web page\");"},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":""},{"lineNumber":49,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":"     * Creates a new BrowserWindow."},{"lineNumber":51,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"davidten"},"content":"    public BrowserWindow(String url) {"},{"lineNumber":53,"author":{"gitID":"davidten"},"content":"        this(new Stage(), url);"},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"davidten"},"content":""},{"lineNumber":56,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"     * Creates a new BrowserWindow."},{"lineNumber":58,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"davidten"},"content":"    public BrowserWindow() {"},{"lineNumber":60,"author":{"gitID":"davidten"},"content":"        this(new Stage(), \"\");"},{"lineNumber":61,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"davidten"},"content":""},{"lineNumber":63,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"davidten"},"content":"     * Creates a new BrowserWindow."},{"lineNumber":65,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"davidten"},"content":"    public BrowserWindow(String url, String fxml) {"},{"lineNumber":67,"author":{"gitID":"davidten"},"content":"        this(new Stage(), url, fxml);"},{"lineNumber":68,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"davidten"},"content":""},{"lineNumber":70,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"davidten"},"content":"     * Shows the help window."},{"lineNumber":72,"author":{"gitID":"davidten"},"content":"     * @throws IllegalStateException"},{"lineNumber":73,"author":{"gitID":"davidten"},"content":"     * If one of the following happens:"},{"lineNumber":74,"author":{"gitID":"davidten"},"content":"     * 1) This method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":75,"author":{"gitID":"davidten"},"content":"     * 2) This method is called during animation or layout processing."},{"lineNumber":76,"author":{"gitID":"davidten"},"content":"     * 3) This method is called on the primary stage."},{"lineNumber":77,"author":{"gitID":"davidten"},"content":"     * 4) if {@code dialogStage} is already showing"},{"lineNumber":78,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"davidten"},"content":"    public void show() {"},{"lineNumber":80,"author":{"gitID":"davidten"},"content":"        logger.info(\"Opening a browser for the application.\");"},{"lineNumber":81,"author":{"gitID":"davidten"},"content":"        getRoot().show();"},{"lineNumber":82,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"davidten"},"content":""},{"lineNumber":84,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"davidten"},"content":"     * Shows the help window."},{"lineNumber":86,"author":{"gitID":"davidten"},"content":"     * @throws IllegalStateException"},{"lineNumber":87,"author":{"gitID":"davidten"},"content":"     * If one of the following happens:"},{"lineNumber":88,"author":{"gitID":"davidten"},"content":"     * 1) This method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":89,"author":{"gitID":"davidten"},"content":"     * 2) This method is called during animation or layout processing."},{"lineNumber":90,"author":{"gitID":"davidten"},"content":"     * 3) This method is called on the primary stage."},{"lineNumber":91,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"davidten"},"content":"    public void hide() {"},{"lineNumber":93,"author":{"gitID":"davidten"},"content":"        logger.info(\"Closing a browser for the application.\");"},{"lineNumber":94,"author":{"gitID":"davidten"},"content":"        getRoot().close();"},{"lineNumber":95,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"davidten"},"content":""},{"lineNumber":97,"author":{"gitID":"davidten"},"content":""},{"lineNumber":98,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":98}},{"path":"src/main/java/seedu/address/commons/core/Oauth2Client.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.commons.core;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import java.io.BufferedReader;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"import java.io.InputStream;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import java.io.InputStreamReader;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import java.io.OutputStream;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import java.net.InetSocketAddress;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import java.security.InvalidAlgorithmParameterException;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import java.security.InvalidKeyException;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"import java.util.logging.Logger;"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"import javax.crypto.NoSuchPaddingException;"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"import org.apache.http.HttpEntity;"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"import org.apache.http.HttpResponse;"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"import org.apache.http.NameValuePair;"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.HttpClient;"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.entity.UrlEncodedFormEntity;"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.methods.HttpPost;"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"import org.apache.http.impl.client.HttpClients;"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"import org.apache.http.message.BasicNameValuePair;"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"import org.json.JSONObject;"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":""},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"import com.sun.net.httpserver.HttpExchange;"},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"import com.sun.net.httpserver.HttpHandler;"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"import com.sun.net.httpserver.HttpServer;"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":""},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"import javafx.application.Platform;"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.events.ui.HideBrowserRequestEvent;"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.Decrypter;"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"import seedu.address.ui.BrowserWindow;"},{"lineNumber":40,"author":{"gitID":"davidten"},"content":""},{"lineNumber":41,"author":{"gitID":"davidten"},"content":""},{"lineNumber":42,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"davidten"},"content":" * Class that handles the OAuth2 call with LiknedIn"},{"lineNumber":44,"author":{"gitID":"davidten"},"content":" * Acts as the client in the client-server scheme"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":"public class Oauth2Client {"},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"    private static final String linkedInAccessTokenURL \u003d \"https://www.linkedin.com/oauth/v2/accessToken\";"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"    private static final String redirectUri \u003d \"http://127.0.0.1:13370/test\";"},{"lineNumber":49,"author":{"gitID":"davidten"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Oauth2Client.class);"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":"    private static BrowserWindow bWindow;"},{"lineNumber":51,"author":{"gitID":"davidten"},"content":"    private static String secret;"},{"lineNumber":52,"author":{"gitID":"davidten"},"content":"    private static String authorizationCode;"},{"lineNumber":53,"author":{"gitID":"davidten"},"content":"    private static String clientId;"},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"    private static Config config;"},{"lineNumber":55,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"davidten"},"content":"     * Called when user types Linkedin_login"},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"     * starts a webserver and opens a browser for Linkedin Authorization"},{"lineNumber":58,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"davidten"},"content":"    public static void authenticateWithLinkedIn() throws IOException {"},{"lineNumber":60,"author":{"gitID":"davidten"},"content":"        config \u003d Config.setupConfig();"},{"lineNumber":61,"author":{"gitID":"davidten"},"content":"        startServer();"},{"lineNumber":62,"author":{"gitID":"davidten"},"content":""},{"lineNumber":63,"author":{"gitID":"davidten"},"content":"        clientId \u003d config.getAppId();"},{"lineNumber":64,"author":{"gitID":"davidten"},"content":""},{"lineNumber":65,"author":{"gitID":"davidten"},"content":"        String urlString \u003d \"https://www.linkedin.com/oauth/v2/authorization?response_type\u003dcode\u0026client_id\u003d\""},{"lineNumber":66,"author":{"gitID":"davidten"},"content":"            + clientId + \"\u0026redirect_uri\u003d\" + redirectUri + \"\u0026state\u003d123\";"},{"lineNumber":67,"author":{"gitID":"davidten"},"content":""},{"lineNumber":68,"author":{"gitID":"davidten"},"content":"        String fxmlString \u003d \"LinkedInLoginWindow.fxml\";"},{"lineNumber":69,"author":{"gitID":"davidten"},"content":"        bWindow \u003d new BrowserWindow(urlString, fxmlString);"},{"lineNumber":70,"author":{"gitID":"davidten"},"content":"        logger.info(\"Showing browserWindow for logging in to LinkedIn\");"},{"lineNumber":71,"author":{"gitID":"davidten"},"content":"        bWindow.show();"},{"lineNumber":72,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"davidten"},"content":""},{"lineNumber":74,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"davidten"},"content":"     * Called to save whatever config we write into the config file"},{"lineNumber":76,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"davidten"},"content":"    public static void saveConfig() {"},{"lineNumber":78,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"davidten"},"content":"            ConfigUtil.saveConfig(config, config.DEFAULT_CONFIG_FILE);"},{"lineNumber":80,"author":{"gitID":"davidten"},"content":"            logger.info(\"Configuration saved\");"},{"lineNumber":81,"author":{"gitID":"davidten"},"content":"        } catch (IOException e) {"},{"lineNumber":82,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":83,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"davidten"},"content":""},{"lineNumber":86,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"davidten"},"content":"     * Starts a webserver and allows it to expect a response at the context specified"},{"lineNumber":88,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"davidten"},"content":"    public static void startServer() {"},{"lineNumber":90,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"davidten"},"content":"            int port \u003d 13370;"},{"lineNumber":92,"author":{"gitID":"davidten"},"content":"            HttpServer server \u003d HttpServer.create(new InetSocketAddress(port), 0);"},{"lineNumber":93,"author":{"gitID":"davidten"},"content":"            server.createContext(\"/test\", new MyHandler());"},{"lineNumber":94,"author":{"gitID":"davidten"},"content":"            server.setExecutor(null);"},{"lineNumber":95,"author":{"gitID":"davidten"},"content":"            server.start();"},{"lineNumber":96,"author":{"gitID":"davidten"},"content":"            logger.info(\"Server started at port 13370, listening for /test\");"},{"lineNumber":97,"author":{"gitID":"davidten"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitID":"davidten"},"content":"            logger.info(\"Server likely to have been started already \" + e.toString());"},{"lineNumber":99,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"davidten"},"content":""},{"lineNumber":102,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"davidten"},"content":"     * Closes a browser window."},{"lineNumber":104,"author":{"gitID":"davidten"},"content":"     * Platform.runLater method is needed to avoid \u0027Not on FX application thread\u0027 error"},{"lineNumber":105,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"davidten"},"content":"    public static void closeBrowser() {"},{"lineNumber":107,"author":{"gitID":"davidten"},"content":"        Platform.runLater(new Runnable() {"},{"lineNumber":108,"author":{"gitID":"davidten"},"content":"            @Override"},{"lineNumber":109,"author":{"gitID":"davidten"},"content":"            public void run() {"},{"lineNumber":110,"author":{"gitID":"davidten"},"content":"                bWindow.hide();"},{"lineNumber":111,"author":{"gitID":"davidten"},"content":"                logger.info(\"Browser Closed\");"},{"lineNumber":112,"author":{"gitID":"davidten"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"davidten"},"content":"        });"},{"lineNumber":114,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"davidten"},"content":""},{"lineNumber":116,"author":{"gitID":"davidten"},"content":"    public static void getLinkedInS() {"},{"lineNumber":117,"author":{"gitID":"davidten"},"content":"        String encryptedByteCipher \u003d \"nvu3QZLMqueiNkyaaOJQmz7Bzrk+Fk+P\";"},{"lineNumber":118,"author":{"gitID":"davidten"},"content":"        String encryptedKey \u003d \"qI8aUtN6zZI\u003d\";"},{"lineNumber":119,"author":{"gitID":"davidten"},"content":""},{"lineNumber":120,"author":{"gitID":"davidten"},"content":"        Decrypter a \u003d new Decrypter();"},{"lineNumber":121,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"davidten"},"content":"            secret \u003d a.getLinkedInS(encryptedByteCipher, encryptedKey);"},{"lineNumber":123,"author":{"gitID":"davidten"},"content":"            logger.info(\"Secret obtained\");"},{"lineNumber":124,"author":{"gitID":"davidten"},"content":"        } catch (NoSuchPaddingException e) {"},{"lineNumber":125,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":126,"author":{"gitID":"davidten"},"content":"        } catch (NoSuchAlgorithmException e) {"},{"lineNumber":127,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":128,"author":{"gitID":"davidten"},"content":"        } catch (InvalidKeyException e) {"},{"lineNumber":129,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":130,"author":{"gitID":"davidten"},"content":"        } catch (BadPaddingException e) {"},{"lineNumber":131,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":132,"author":{"gitID":"davidten"},"content":"        } catch (IllegalBlockSizeException e) {"},{"lineNumber":133,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":134,"author":{"gitID":"davidten"},"content":"        } catch (InvalidAlgorithmParameterException e) {"},{"lineNumber":135,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":136,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"davidten"},"content":"            getAccessToken();"},{"lineNumber":139,"author":{"gitID":"davidten"},"content":"        } catch (IOException e) {"},{"lineNumber":140,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":141,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"davidten"},"content":""},{"lineNumber":144,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"davidten"},"content":"     * This method creates and returns the parameters used in httpEntity"},{"lineNumber":146,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"davidten"},"content":"    public static List\u003cNameValuePair\u003e getParams() {"},{"lineNumber":148,"author":{"gitID":"davidten"},"content":"        List\u003cNameValuePair\u003e params \u003d new ArrayList\u003cNameValuePair\u003e(5);"},{"lineNumber":149,"author":{"gitID":"davidten"},"content":"        params.add(new BasicNameValuePair(\"grant_type\", \"authorization_code\"));"},{"lineNumber":150,"author":{"gitID":"davidten"},"content":"        params.add(new BasicNameValuePair(\"code\", authorizationCode));"},{"lineNumber":151,"author":{"gitID":"davidten"},"content":"        params.add(new BasicNameValuePair(\"redirect_uri\", redirectUri));"},{"lineNumber":152,"author":{"gitID":"davidten"},"content":"        params.add(new BasicNameValuePair(\"client_id\", clientId));"},{"lineNumber":153,"author":{"gitID":"davidten"},"content":"        params.add(new BasicNameValuePair(\"client_secret\", secret));"},{"lineNumber":154,"author":{"gitID":"davidten"},"content":"        return params;"},{"lineNumber":155,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"davidten"},"content":""},{"lineNumber":157,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"davidten"},"content":"     * This method creates and returns the httpEntity object used for requesting to LinkedIn"},{"lineNumber":159,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"davidten"},"content":"    public static HttpEntity getHttpEntity() throws IOException {"},{"lineNumber":161,"author":{"gitID":"davidten"},"content":"        HttpClient httpclient \u003d HttpClients.createDefault();"},{"lineNumber":162,"author":{"gitID":"davidten"},"content":"        HttpPost httppost \u003d new HttpPost(linkedInAccessTokenURL);"},{"lineNumber":163,"author":{"gitID":"davidten"},"content":""},{"lineNumber":164,"author":{"gitID":"davidten"},"content":"        List\u003cNameValuePair\u003e params \u003d getParams();"},{"lineNumber":165,"author":{"gitID":"davidten"},"content":"        httppost.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));"},{"lineNumber":166,"author":{"gitID":"davidten"},"content":""},{"lineNumber":167,"author":{"gitID":"davidten"},"content":"        HttpResponse response \u003d httpclient.execute(httppost);"},{"lineNumber":168,"author":{"gitID":"davidten"},"content":""},{"lineNumber":169,"author":{"gitID":"davidten"},"content":"        return response.getEntity();"},{"lineNumber":170,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"davidten"},"content":""},{"lineNumber":172,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"davidten"},"content":"     * This method reads the input stream to get the accessToken for the user"},{"lineNumber":174,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"davidten"},"content":"    public static String extractAccessTokenFromResponse(InputStream instream)"},{"lineNumber":176,"author":{"gitID":"davidten"},"content":"            throws IOException {"},{"lineNumber":177,"author":{"gitID":"davidten"},"content":"        BufferedReader streamReader \u003d new BufferedReader(new InputStreamReader(instream, \"UTF-8\"));"},{"lineNumber":178,"author":{"gitID":"davidten"},"content":"        StringBuilder responseStrBuilder \u003d new StringBuilder();"},{"lineNumber":179,"author":{"gitID":"davidten"},"content":""},{"lineNumber":180,"author":{"gitID":"davidten"},"content":"        String inputStr;"},{"lineNumber":181,"author":{"gitID":"davidten"},"content":"        while ((inputStr \u003d streamReader.readLine()) !\u003d null) {"},{"lineNumber":182,"author":{"gitID":"davidten"},"content":"            responseStrBuilder.append(inputStr);"},{"lineNumber":183,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"davidten"},"content":""},{"lineNumber":185,"author":{"gitID":"davidten"},"content":"        JSONObject jsonObj \u003d new JSONObject(responseStrBuilder.toString());"},{"lineNumber":186,"author":{"gitID":"davidten"},"content":"        return jsonObj.getString(\"access_token\");"},{"lineNumber":187,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"davidten"},"content":""},{"lineNumber":189,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"davidten"},"content":"     * This method exchanges the authorization token for an accessToken"},{"lineNumber":191,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"davidten"},"content":"    public static void getAccessToken() throws IOException {"},{"lineNumber":193,"author":{"gitID":"davidten"},"content":"        HttpEntity entity \u003d getHttpEntity();"},{"lineNumber":194,"author":{"gitID":"davidten"},"content":""},{"lineNumber":195,"author":{"gitID":"davidten"},"content":"        if (entity !\u003d null) {"},{"lineNumber":196,"author":{"gitID":"davidten"},"content":"            InputStream instream \u003d entity.getContent();"},{"lineNumber":197,"author":{"gitID":"davidten"},"content":"            try {"},{"lineNumber":198,"author":{"gitID":"davidten"},"content":"                String accessToken \u003d extractAccessTokenFromResponse(instream);"},{"lineNumber":199,"author":{"gitID":"davidten"},"content":""},{"lineNumber":200,"author":{"gitID":"davidten"},"content":"                logger.info(\"Access Token is \" + accessToken);"},{"lineNumber":201,"author":{"gitID":"davidten"},"content":"                EventsCenter.getInstance().post(new NewResultAvailableEvent(\"Successfully logged in to LinkedIn\"));"},{"lineNumber":202,"author":{"gitID":"davidten"},"content":"                config.setAppSecret(accessToken);"},{"lineNumber":203,"author":{"gitID":"davidten"},"content":"                saveConfig();"},{"lineNumber":204,"author":{"gitID":"davidten"},"content":""},{"lineNumber":205,"author":{"gitID":"davidten"},"content":"                //Login Successful"},{"lineNumber":206,"author":{"gitID":"davidten"},"content":"            } finally {"},{"lineNumber":207,"author":{"gitID":"davidten"},"content":"                instream.close();"},{"lineNumber":208,"author":{"gitID":"davidten"},"content":"            }"},{"lineNumber":209,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"davidten"},"content":""},{"lineNumber":212,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"davidten"},"content":"     * Allows the server to handle responses made to the context created in startServer"},{"lineNumber":214,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"davidten"},"content":"    static class MyHandler implements HttpHandler {"},{"lineNumber":216,"author":{"gitID":"davidten"},"content":"        private final Logger logger \u003d LogsCenter.getLogger(Oauth2Client.class);"},{"lineNumber":217,"author":{"gitID":"davidten"},"content":""},{"lineNumber":218,"author":{"gitID":"davidten"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"davidten"},"content":"        public void handle(HttpExchange t) throws IOException {"},{"lineNumber":220,"author":{"gitID":"davidten"},"content":"            String response \u003d \"This is the response\";"},{"lineNumber":221,"author":{"gitID":"davidten"},"content":"            t.sendResponseHeaders(200, response.length());"},{"lineNumber":222,"author":{"gitID":"davidten"},"content":"            OutputStream os \u003d t.getResponseBody();"},{"lineNumber":223,"author":{"gitID":"davidten"},"content":"            os.write(response.getBytes());"},{"lineNumber":224,"author":{"gitID":"davidten"},"content":"            os.close();"},{"lineNumber":225,"author":{"gitID":"davidten"},"content":"            logger.info(\"RECEIVED A RESPONSE FROM THE SERVER: \" + t.getRequestURI().getQuery());"},{"lineNumber":226,"author":{"gitID":"davidten"},"content":""},{"lineNumber":227,"author":{"gitID":"davidten"},"content":"            String authorizationCodeandState \u003d t.getRequestURI().getQuery();"},{"lineNumber":228,"author":{"gitID":"davidten"},"content":"            authorizationCode \u003d authorizationCodeandState.substring(5, authorizationCodeandState.length() - 10);"},{"lineNumber":229,"author":{"gitID":"davidten"},"content":"            logger.info(\"Auth code is: \" + authorizationCode);"},{"lineNumber":230,"author":{"gitID":"davidten"},"content":""},{"lineNumber":231,"author":{"gitID":"davidten"},"content":"            EventsCenter.getInstance().post(new HideBrowserRequestEvent());"},{"lineNumber":232,"author":{"gitID":"davidten"},"content":""},{"lineNumber":233,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"davidten"},"content":""},{"lineNumber":236,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":236}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowBrowserRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":""},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":" * An event requesting to view the browser."},{"lineNumber":8,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"public class ShowBrowserRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":""},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":""},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":16}},{"path":"src/main/java/seedu/address/commons/events/ui/ShareToLinkedInEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":""},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":" * Event to respond to request to share to LinkedIn"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"public class ShareToLinkedInEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":14}},{"path":"src/main/java/seedu/address/commons/events/ui/HideBrowserRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":""},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":" * Event to respond to a request to hide browser"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"public class HideBrowserRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":""},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":""},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":16}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Remark remark \u003d new Remark(\"\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Lead person \u003d new Lead(name, phone, email, address, remark, tagList);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":1,"-":66}},{"path":"src/main/java/seedu/address/logic/parser/ShareToLinkedInCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":""},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":""},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.commands.ShareToLinkedInCommand;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":""},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":" * Parses user input"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"public class ShareToLinkedInCommandParser implements Parser\u003cShareToLinkedInCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":""},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"     * Parses the given {@code String} of arguments in the context of the ShareToLinkedInCommand"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":"     * and returns an ShareToLinkedInCommand object for execution."},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"    public ShareToLinkedInCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"        if (args \u003d\u003d null || args.length() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"                ShareToLinkedInCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"        Logger logger \u003d LogsCenter.getLogger(ShareToLinkedInCommand.class);"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"        logger.info(\"SHARE TO LINKEDIN PARSER RUN\" + args);"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"        return new ShareToLinkedInCommand(args);"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":""},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":""},{"lineNumber":33,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":33}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.Reader;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.apache.commons.csv.CSVParser;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.WrongFileFormatException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"content":"//@@author zhuleyan"},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new ImportCommand object"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ImportCommandParser {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ImportCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        args \u003d args.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (args.isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        List\u003cLead\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        int index \u003d 1;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Reader reader \u003d new FileReader(args);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            if (!args.substring(args.length() - 4, args.length()).equalsIgnoreCase(\".csv\")) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                throw new WrongFileFormatException(\"not a csv file\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            CSVParser csvParser \u003d new CSVParser(reader, CSVFormat.DEFAULT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            for (CSVRecord csvRecord : csvParser) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                Name name \u003d ParserUtil.parseName(csvRecord.get(0));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                Phone phone \u003d ParserUtil.parsePhone(csvRecord.get(1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                Email email \u003d ParserUtil.parseEmail(csvRecord.get(2));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                Address address \u003d ParserUtil.parseAddress(csvRecord.get(3));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                Remark remark \u003d new Remark(\"\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                Set\u003cTag\u003e tagList \u003d Collections.emptySet();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"                Lead person \u003d new Lead(name, phone, email, address, remark, tagList);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                list.add(person);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                index++;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new ImportCommand(list);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new ParseException(\"invalid file path\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            String errorMessage \u003d ive.getMessage();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            String indexMessage \u003d \"Error at the person of index \" + index + \": \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            String result \u003d indexMessage.concat(errorMessage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throw new ParseException(result, ive);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (WrongFileFormatException wffe) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new ParseException(\"not a csv file\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"WoodyLau":1,"-":74}},{"path":"src/main/java/seedu/address/logic/parser/EditDetailsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDUSTRY;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.EditDetailsCommand;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.EditDetailsCommand.EditContactDescriptor;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.EditDetailsCommand.EditLeadDescriptor;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"public class EditDetailsCommandParser implements Parser\u003cEditDetailsCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"     * Parses the given {@code String} of arguments in the context of the EditDetailsCommand"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"     * and returns an EditDetailsCommand object for execution."},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"    public EditDetailsCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        ArgumentMultimap argLeadMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"                PREFIX_COMPANY, PREFIX_INDUSTRY, PREFIX_RATING, PREFIX_TITLE, PREFIX_WEBSITE);"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"        ArgumentMultimap argContactMultimap \u003d"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_DEPARTMENT, PREFIX_TITLE);"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"            index \u003d ParserUtil.parseIndex(argLeadMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"            try {"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"                index \u003d ParserUtil.parseIndex(argContactMultimap.getPreamble());"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"            } catch (IllegalValueException ive2) {"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"                        EditDetailsCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"        EditLeadDescriptor editLeadDescriptor \u003d new EditLeadDescriptor();"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"        EditContactDescriptor editContactDescriptor \u003d new EditContactDescriptor();"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseCompany(argLeadMultimap.getValue(PREFIX_COMPANY)).ifPresent(editLeadDescriptor::setCompany);"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseIndustry(argLeadMultimap.getValue(PREFIX_INDUSTRY))"},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"                    .ifPresent(editLeadDescriptor::setIndustry);"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseRating(argLeadMultimap.getValue(PREFIX_RATING)).ifPresent(editLeadDescriptor::setRating);"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseTitle(argLeadMultimap.getValue(PREFIX_TITLE)).ifPresent(editLeadDescriptor::setTitle);"},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseWebsite(argLeadMultimap.getValue(PREFIX_WEBSITE)).ifPresent(editLeadDescriptor::setWebsite);"},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseCompany(argContactMultimap.getValue(PREFIX_COMPANY))"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"                    .ifPresent(editContactDescriptor::setCompany);"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseDepartment(argContactMultimap.getValue(PREFIX_DEPARTMENT))"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":"                    .ifPresent(editContactDescriptor::setDepartment);"},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseTitle(argContactMultimap.getValue(PREFIX_TITLE)).ifPresent(editContactDescriptor::setTitle);"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        if (!editLeadDescriptor.isAnyFieldEdited() \u0026\u0026 !editContactDescriptor.isAnyFieldEdited()) {"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"            throw new ParseException(EditDetailsCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        return new EditDetailsCommand(index, editLeadDescriptor, editContactDescriptor);"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"        assert tags !\u003d null;"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"            return Optional.empty();"},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":100}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.AccountCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.ConvertCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.logic.commands.DisplayCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.EditDetailsCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.GoogleSetLocationCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.commands.LinkedInLoginCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ShareToLinkedInCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException, IOException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":63,"content":"        //@@author zhuleyan"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"Sheikh-Umar"},"content":"        case RemarkCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"davidten"},"content":"        //@@author davidten"},{"lineNumber":68,"author":{"gitID":"davidten"},"content":"        case ShareToLinkedInCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"davidten"},"content":"        case ShareToLinkedInCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"davidten"},"content":"            return new ShareToLinkedInCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"davidten"},"content":""},{"lineNumber":72,"author":{"gitID":"davidten"},"content":"        case LinkedInLoginCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"davidten"},"content":"        case LinkedInLoginCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"davidten"},"content":"            return new LinkedInLoginCommand();"},{"lineNumber":75,"author":{"gitID":"davidten"},"content":""},{"lineNumber":76,"author":{"gitID":"davidten"},"content":"        case GoogleSetLocationCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"davidten"},"content":"        case GoogleSetLocationCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"davidten"},"content":"            return new GoogleSetLocationCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"davidten"},"content":"        //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"Sheikh-Umar"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"Sheikh-Umar"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"        //@@author WoodyLau"},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"        case EditDetailsCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"        case EditDetailsCommand.COMMAND_ALIAS:"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"            return new EditDetailsCommandParser().parse(arguments);"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"        case ConvertCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"        case ConvertCommand.COMMAND_ALIAS:"},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"            return new ConvertCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"        case AccountCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"            return new AccountCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"        //@@author"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"Sheikh-Umar"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"Sheikh-Umar"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"Sheikh-Umar"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"Sheikh-Umar"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"Sheikh-Umar"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author Sheikh-Umar"},{"lineNumber":125,"author":{"gitID":"Sheikh-Umar"},"content":"        case DisplayCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"Sheikh-Umar"},"content":"        case DisplayCommand.COMMAND_ALIAS:"},{"lineNumber":127,"author":{"gitID":"Sheikh-Umar"},"content":"            return new DisplayCommandParser().parse(arguments);"},{"lineNumber":128,"author":{"gitID":"Sheikh-Umar"},"content":"        //@@author"},{"lineNumber":129,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"Sheikh-Umar"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"Sheikh-Umar"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"Sheikh-Umar"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"Sheikh-Umar"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":147,"author":{"gitID":"Sheikh-Umar"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":149,"content":"        //@@author zhuleyan"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_ALIAS:"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return new SortCommand();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        case ImportCommand.COMMAND_WORD:"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        case ImportCommand.COMMAND_ALIAS:"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":157,"content":"        //@@author"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"Sheikh-Umar":21,"WoodyLau":16,"-":109,"davidten":14}},{"path":"src/main/java/seedu/address/logic/parser/GoogleSetLocationCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":""},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":""},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.commands.GoogleSetLocationCommand;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":""},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":" * Parses input arguments and creates a new GoogleSetLocationCommand object"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"public class GoogleSetLocationCommandParser implements Parser\u003cGoogleSetLocationCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":"     * Parses the given {@code String} of arguments in the context of the GoogleSetLocationCommand"},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"     * and returns an GoogleSetLocationCommand object for execution."},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"    public GoogleSetLocationCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ADDRESS);"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ADDRESS)"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"                GoogleSetLocationCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":""},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":""},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"            return new GoogleSetLocationCommand(address);"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"    //@@author"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"davidten":39,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"    public static final Prefix PREFIX_INDUSTRY \u003d new Prefix(\"i/\");"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"    public static final Prefix PREFIX_WEBSITE \u003d new Prefix(\"w/\");"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"    public static final Prefix PREFIX_DEPARTMENT \u003d new Prefix(\"d/\");"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"    public static final Prefix PREFIX_ACCOUNT \u003d new Prefix(\"an/\");"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"    //@@author"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":9,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import java.util.OptionalInt;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Theme;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"content":"    //@@author A0155428B"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static Theme parseTheme(String theme) throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(theme);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String trimmedTheme \u003d theme.trim();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!Theme.isValidTheme(trimmedTheme)) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Theme.MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new Theme(trimmedTheme);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":189,"author":{"gitID":"davidten"},"content":"    //@@author davidten"},{"lineNumber":190,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"davidten"},"content":"     * Parses a {@code String data}."},{"lineNumber":192,"author":{"gitID":"davidten"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":193,"author":{"gitID":"davidten"},"content":"     * General String parser that can be used"},{"lineNumber":194,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"davidten"},"content":"    public static String parseString(String data) {"},{"lineNumber":196,"author":{"gitID":"davidten"},"content":"        requireNonNull(data);"},{"lineNumber":197,"author":{"gitID":"davidten"},"content":"        return data.trim();"},{"lineNumber":198,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"davidten"},"content":""},{"lineNumber":200,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":201,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code String company}."},{"lineNumber":203,"author":{"gitID":"WoodyLau"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":204,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"WoodyLau"},"content":"    public static String parseCompany(String company) throws IllegalValueException {"},{"lineNumber":206,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(company);"},{"lineNumber":207,"author":{"gitID":"WoodyLau"},"content":"        if (!Account.isValidAccountName(company)) {"},{"lineNumber":208,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Account.MESSAGE_ACCOUNT_CONSTRAINTS);"},{"lineNumber":209,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"WoodyLau"},"content":"        return company.trim();"},{"lineNumber":211,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":213,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code Optional\u003cString\u003e company} into an {@code Optional\u003cString\u003e} if {@code company} is present."},{"lineNumber":215,"author":{"gitID":"WoodyLau"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":216,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"WoodyLau"},"content":"    public static Optional\u003cString\u003e parseCompany(Optional\u003cString\u003e company) throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(company);"},{"lineNumber":219,"author":{"gitID":"WoodyLau"},"content":"        return company.isPresent() ? Optional.of(parseCompany(company.get())) : Optional.empty();"},{"lineNumber":220,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":222,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"WoodyLau"},"content":"     * Parses an {@code String account}."},{"lineNumber":224,"author":{"gitID":"WoodyLau"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":225,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"WoodyLau"},"content":"    public static String parseAccount(String account) throws IllegalValueException {"},{"lineNumber":227,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(account);"},{"lineNumber":228,"author":{"gitID":"WoodyLau"},"content":"        if (!Account.isValidAccountName(account)) {"},{"lineNumber":229,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Account.MESSAGE_ACCOUNT_CONSTRAINTS);"},{"lineNumber":230,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"WoodyLau"},"content":"        return account.trim();"},{"lineNumber":232,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":234,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code Optional\u003cString\u003e account} into an {@code Optional\u003cString\u003e} if {@code account} is present."},{"lineNumber":236,"author":{"gitID":"WoodyLau"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":237,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"WoodyLau"},"content":"    public static Optional\u003cString\u003e parseAccount(Optional\u003cString\u003e account) throws IllegalValueException {"},{"lineNumber":239,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(account);"},{"lineNumber":240,"author":{"gitID":"WoodyLau"},"content":"        return account.isPresent() ? Optional.of(parseAccount(account.get())) : Optional.empty();"},{"lineNumber":241,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":243,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code String industry}."},{"lineNumber":245,"author":{"gitID":"WoodyLau"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":246,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"WoodyLau"},"content":"    public static String parseIndustry(String industry) {"},{"lineNumber":248,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(industry);"},{"lineNumber":249,"author":{"gitID":"WoodyLau"},"content":"        return industry.trim();"},{"lineNumber":250,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":252,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code Optional\u003cString\u003e industry} into an {@code Optional\u003cString\u003e} if {@code industry} is present."},{"lineNumber":254,"author":{"gitID":"WoodyLau"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":255,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"WoodyLau"},"content":"    public static Optional\u003cString\u003e parseIndustry(Optional\u003cString\u003e industry) {"},{"lineNumber":257,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(industry);"},{"lineNumber":258,"author":{"gitID":"WoodyLau"},"content":"        return industry.isPresent() ? Optional.of(parseIndustry(industry.get())) : Optional.empty();"},{"lineNumber":259,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":261,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code String rating}."},{"lineNumber":263,"author":{"gitID":"WoodyLau"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":264,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"WoodyLau"},"content":"    public static int parseRating(String rating) throws IllegalValueException {"},{"lineNumber":266,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(rating);"},{"lineNumber":267,"author":{"gitID":"WoodyLau"},"content":"        int intRating \u003d 0;"},{"lineNumber":268,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":269,"author":{"gitID":"WoodyLau"},"content":"            intRating \u003d Integer.parseInt(rating);"},{"lineNumber":270,"author":{"gitID":"WoodyLau"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":271,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(\"Rating was not an integer\");"},{"lineNumber":272,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"WoodyLau"},"content":"        return intRating;"},{"lineNumber":274,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":276,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code Optional\u003cString\u003e rating} into an {@code OptionalInt} if {@code rating} is present."},{"lineNumber":278,"author":{"gitID":"WoodyLau"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":279,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"WoodyLau"},"content":"    public static OptionalInt parseRating(Optional\u003cString\u003e rating) throws IllegalValueException {"},{"lineNumber":281,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(rating);"},{"lineNumber":282,"author":{"gitID":"WoodyLau"},"content":"        return rating.isPresent() ? OptionalInt.of(parseRating(rating.get())) : OptionalInt.empty();"},{"lineNumber":283,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":285,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code String title}."},{"lineNumber":287,"author":{"gitID":"WoodyLau"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":288,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"WoodyLau"},"content":"    public static String parseTitle(String title) {"},{"lineNumber":290,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(title);"},{"lineNumber":291,"author":{"gitID":"WoodyLau"},"content":"        return title.trim();"},{"lineNumber":292,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":294,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cString\u003e} if {@code title} is present."},{"lineNumber":296,"author":{"gitID":"WoodyLau"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":297,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"WoodyLau"},"content":"    public static Optional\u003cString\u003e parseTitle(Optional\u003cString\u003e title) {"},{"lineNumber":299,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(title);"},{"lineNumber":300,"author":{"gitID":"WoodyLau"},"content":"        return title.isPresent() ? Optional.of(parseTitle(title.get())) : Optional.empty();"},{"lineNumber":301,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":303,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":304,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code String website}."},{"lineNumber":305,"author":{"gitID":"WoodyLau"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":306,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"WoodyLau"},"content":"    public static String parseWebsite(String website) {"},{"lineNumber":308,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(website);"},{"lineNumber":309,"author":{"gitID":"WoodyLau"},"content":"        return website.trim();"},{"lineNumber":310,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":312,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":313,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code Optional\u003cString\u003e website} into an {@code Optional\u003cString\u003e} if {@code website} is present."},{"lineNumber":314,"author":{"gitID":"WoodyLau"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":315,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"WoodyLau"},"content":"    public static Optional\u003cString\u003e parseWebsite(Optional\u003cString\u003e website) {"},{"lineNumber":317,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(website);"},{"lineNumber":318,"author":{"gitID":"WoodyLau"},"content":"        return website.isPresent() ? Optional.of(parseWebsite(website.get())) : Optional.empty();"},{"lineNumber":319,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":321,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":322,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code String department}."},{"lineNumber":323,"author":{"gitID":"WoodyLau"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":324,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":325,"author":{"gitID":"WoodyLau"},"content":"    public static String parseDepartment(String department) {"},{"lineNumber":326,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(department);"},{"lineNumber":327,"author":{"gitID":"WoodyLau"},"content":"        return department.trim();"},{"lineNumber":328,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":330,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"WoodyLau"},"content":"     * Parses a {@code Optional\u003cString\u003e department} into an {@code Optional\u003cString\u003e} if {@code department} is present."},{"lineNumber":332,"author":{"gitID":"WoodyLau"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":333,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":334,"author":{"gitID":"WoodyLau"},"content":"    public static Optional\u003cString\u003e parseDepartment(Optional\u003cString\u003e department) {"},{"lineNumber":335,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(department);"},{"lineNumber":336,"author":{"gitID":"WoodyLau"},"content":"        return department.isPresent() ? Optional.of(parseDepartment(department.get())) : Optional.empty();"},{"lineNumber":337,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"WoodyLau"},"content":"    //@@author"},{"lineNumber":339,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"WoodyLau":142,"-":184,"davidten":11}},{"path":"src/main/java/seedu/address/logic/parser/DisplayCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author Sheikh-Umar"},{"lineNumber":2,"author":{"gitID":"Sheikh-Umar"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":4,"author":{"gitID":"Sheikh-Umar"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":6,"author":{"gitID":"Sheikh-Umar"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":8,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.logic.commands.DisplayCommand;"},{"lineNumber":9,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.person.TypeMatchesKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":" * Parses input arguments and creates a new DisplayCommand object"},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"public class DisplayCommandParser implements Parser\u003cDisplayCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"     * Parses the given {@code String} of arguments in the context of the DisplayCommand"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"     * and returns an DisplayCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"    public DisplayCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"Sheikh-Umar"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"Sheikh-Umar"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Sheikh-Umar"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"Sheikh-Umar"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"        return new DisplayCommand(new TypeMatchesKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":"}"},{"lineNumber":35,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author"}],"authorContributionMap":{"Sheikh-Umar":35}},{"path":"src/main/java/seedu/address/logic/parser/AccountCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOUNT;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.AccountCommand;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.AccountCommand.AccountDescriptor;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"public class AccountCommandParser implements Parser\u003cAccountCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"     * Parses the given {@code String} of arguments in the context of the EditDetailsCommand"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"     * and returns an EditDetailsCommand object for execution."},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"    public AccountCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ACCOUNT);"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"                    AccountCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"        AccountDescriptor accountDescriptor \u003d new AccountDescriptor();"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"            ParserUtil.parseCompany(argMultimap.getValue(PREFIX_ACCOUNT)).ifPresent(accountDescriptor::setAccount);"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        return new AccountCommand(index, accountDescriptor);"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"        assert tags !\u003d null;"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"            return Optional.empty();"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":68}},{"path":"src/main/java/seedu/address/logic/parser/ConvertCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.ConvertCommand;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":" * Parses input arguments and creates a new ConvertCommand object"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"public class ConvertCommandParser implements Parser\u003cConvertCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"     * Parses the given {@code String} of arguments in the context of the ConvertCommand"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"     * and returns an ConvertCommand object for execution."},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"    public ConvertCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"            return new ConvertCommand(index);"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ConvertCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":32}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"Sheikh-Umar"},"content":"            + \": Deletes the Lead or Contact identified by the index number used in the last Leads-Contacts listing.\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":30,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Lead/Contact: %1$s\";"},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":48,"author":{"gitID":"Sheikh-Umar"},"content":"            throw new AssertionError(\"The target Lead/Contact cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":8,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all Leads and Contacts\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":4,"-":19}},{"path":"src/main/java/seedu/address/logic/Decrypter.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import java.security.InvalidAlgorithmParameterException;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import java.security.InvalidKeyException;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import java.util.Base64;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import javax.crypto.Cipher;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"import javax.crypto.NoSuchPaddingException;"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"import javax.crypto.SecretKey;"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"import javax.crypto.spec.SecretKeySpec;"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":""},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":""},{"lineNumber":18,"author":{"gitID":"davidten"},"content":""},{"lineNumber":19,"author":{"gitID":"davidten"},"content":""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":" * Decrypts the s for use for OAuth"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":" * While this is not an ideal situation, LinkedIn\u0027s OAuth API does not have a client-side authentication flow."},{"lineNumber":23,"author":{"gitID":"davidten"},"content":" * This means that it will always require the app s for purposes of authentication."},{"lineNumber":24,"author":{"gitID":"davidten"},"content":" * Because of this, building a native (desktop) app that authenticates with LinkedIn is not ideal."},{"lineNumber":25,"author":{"gitID":"davidten"},"content":" *"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":" * However, a number of sites have agreed that if you have to store the key in the code, then obscuring it to make"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":" * it slightly more difficult for a potential hacker to get it is best. (They will need to run the app rather than"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":" * just reading the plain text version)"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":" *"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":" * This is especially so because a LinkedIn S is not especially valuable, since anyone can create a LinkedIn app."},{"lineNumber":31,"author":{"gitID":"davidten"},"content":" *"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":" * Furthermore the chances of competitors abusing the secret to disable this application is minimal, since it is"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":" * ultimately, a school project."},{"lineNumber":34,"author":{"gitID":"davidten"},"content":" *"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"public class Decrypter {"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":""},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(Decrypter.class);"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":""},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"    public String getLinkedInS(String encryptedByteCipher, String encryptedKey) throws NoSuchPaddingException,"},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"            NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException,"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":"            InvalidAlgorithmParameterException {"},{"lineNumber":43,"author":{"gitID":"davidten"},"content":""},{"lineNumber":44,"author":{"gitID":"davidten"},"content":"        String strDecryptedText \u003d new String();"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":""},{"lineNumber":46,"author":{"gitID":"davidten"},"content":"        //Secret key generation"},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"        byte[] decodedKey \u003d Base64.getDecoder().decode(encryptedKey);"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"        SecretKey sKey \u003d new SecretKeySpec(decodedKey, 0, decodedKey.length, \"DES\");"},{"lineNumber":49,"author":{"gitID":"davidten"},"content":"        logger.info(\"Secret key for decryption is \" + Base64.getEncoder().encodeToString(sKey.getEncoded()));"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":""},{"lineNumber":51,"author":{"gitID":"davidten"},"content":"        //Create a Cipher"},{"lineNumber":52,"author":{"gitID":"davidten"},"content":"        Cipher desCipher \u003d Cipher.getInstance(\"DES\");"},{"lineNumber":53,"author":{"gitID":"davidten"},"content":""},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"        //Decrypt the data"},{"lineNumber":55,"author":{"gitID":"davidten"},"content":"        byte[] byteCipherText \u003d Base64.getDecoder().decode(encryptedByteCipher);"},{"lineNumber":56,"author":{"gitID":"davidten"},"content":"        desCipher.init(Cipher.DECRYPT_MODE, sKey, desCipher.getParameters());"},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"        byte[] byteDecryptedText \u003d desCipher.doFinal(byteCipherText);"},{"lineNumber":58,"author":{"gitID":"davidten"},"content":"        strDecryptedText \u003d new String(byteDecryptedText);"},{"lineNumber":59,"author":{"gitID":"davidten"},"content":"        logger.info(\"Decrypted Text message is \" + strDecryptedText);"},{"lineNumber":60,"author":{"gitID":"davidten"},"content":"        return strDecryptedText;"},{"lineNumber":61,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"davidten"},"content":""},{"lineNumber":63,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":63}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":4,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/GoogleSetLocationCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":""},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":""},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":""},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":" * Allows a user to set their location for Google Maps"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"public class GoogleSetLocationCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":"    public static final String COMMAND_WORD \u003d \"set_office_address\";"},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"    public static final String COMMAND_ALIAS \u003d \"setA\";"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets your office address for Google Maps \""},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"davidten"},"content":"            + PREFIX_ADDRESS + \"6 College Avenue East, Singapore 138614\";"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Office address set!\";"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":""},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"    private final Address address;"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":""},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"     * Default constructor"},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":"    public GoogleSetLocationCommand(Address address) {"},{"lineNumber":34,"author":{"gitID":"davidten"},"content":"        requireNonNull(address);"},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"        this.address \u003d address;"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":""},{"lineNumber":38,"author":{"gitID":"davidten"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"    public CommandResult execute() {"},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"        //should be able to just create a new instance of config since it\u0027s the same config.json file"},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"        Logger logger \u003d LogsCenter.getLogger(GoogleSetLocationCommand.class);"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":"        Config initializedConfig \u003d Config.setupConfig();"},{"lineNumber":43,"author":{"gitID":"davidten"},"content":""},{"lineNumber":44,"author":{"gitID":"davidten"},"content":"        initializedConfig.setUserLocation(address.toString());"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":"            ConfigUtil.saveConfig(initializedConfig, initializedConfig.DEFAULT_CONFIG_FILE);"},{"lineNumber":47,"author":{"gitID":"davidten"},"content":"            logger.info(\"Successfully saved\");"},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":50,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"davidten"},"content":"        //sets the office address as a string in the config file."},{"lineNumber":52,"author":{"gitID":"davidten"},"content":""},{"lineNumber":53,"author":{"gitID":"davidten"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"davidten"},"content":""},{"lineNumber":56,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":56}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"CRM Book has been cleared!\";"},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":5,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"content":"//@@author zhuleyan"},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Sorts persons in CRM by name."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class SortCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":11,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"st\";"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"            + \": Sorts and lists all Leads and Contacts by name in alphabetical order.\\n\""},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all Leads or Contacts by name\";"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author zhuleyan"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.sortAllPersons();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sheikh-Umar":9,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/DisplayCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author Sheikh-Umar"},{"lineNumber":2,"author":{"gitID":"Sheikh-Umar"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":4,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.model.person.TypeMatchesKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":6,"author":{"gitID":"Sheikh-Umar"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sheikh-Umar"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"Sheikh-Umar"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"Sheikh-Umar"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sheikh-Umar"},"content":"public class DisplayCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_WORD \u003d \"display\";"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"disp\";"},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays List list or Contacts list.\\n\""},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"            + \"Parameters: [KEYWORD]\\n\""},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"            + \"Example: \" + COMMAND_WORD + \" Lead\";"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"    private final TypeMatchesKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"    public DisplayCommand(TypeMatchesKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":25,"author":{"gitID":"Sheikh-Umar"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Sheikh-Umar"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"Sheikh-Umar"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"Sheikh-Umar"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":"                || (other instanceof DisplayCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"Sheikh-Umar"},"content":"                \u0026\u0026 this.predicate.equals(((DisplayCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sheikh-Umar"},"content":"}"},{"lineNumber":38,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author"}],"authorContributionMap":{"Sheikh-Umar":38}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_AUTO_COMPLETE \u003d COMMAND_WORD + \" \" + PREFIX_NAME + \" \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \" \" + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_TAG;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Lead to the CRM Book. \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"            + PREFIX_TAG + \"DNC \""},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"            + PREFIX_TAG + \"Entrepreneur\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":43,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Lead added: %1$s\";"},{"lineNumber":44,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Lead or Contact is already in the CRM Book.\";"},{"lineNumber":45,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"    private final Lead toAdd;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"    public AddCommand(Lead person) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":8,"WoodyLau":3,"-":62,"davidten":2}},{"path":"src/main/java/seedu/address/logic/commands/LinkedInLoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.events.ui.ShowBrowserRequestEvent;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":""},{"lineNumber":7,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"davidten"},"content":" * Allows a user to login to their LinkedIn account"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"public class LinkedInLoginCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"    public static final String COMMAND_WORD \u003d \"linkedin_login\";"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"linklog\";"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"    //@@author davidten"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logs in to your LinkedIn account \";"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":""},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Browser Opened for LinkedIn Authentication\";"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":""},{"lineNumber":19,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"     * Default constructor"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":"    public LinkedInLoginCommand(){"},{"lineNumber":23,"author":{"gitID":"davidten"},"content":""},{"lineNumber":24,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":""},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"        EventsCenter.getInstance().post(new ShowBrowserRequestEvent());"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"davidten"},"content":""},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":2,"davidten":30}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":3,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"hist\";"},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":4,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"            + \": Selects the Lead or Contact identified by the index number used in the last Leads-Contacts listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Lead or Contact: %1$s\";"},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":7,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Type;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":43,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the Lead/Contact identified \""},{"lineNumber":46,"author":{"gitID":"Sheikh-Umar"},"content":"            + \"by the index number used in the last Leads-Contacts listing. \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":59,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Lead/Contact: %1$s\";"},{"lineNumber":60,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":62,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":63,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":64,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Lead/Contact already exists in the CRM Book.\";"},{"lineNumber":65,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"        Type type \u003d personToEdit.getType();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Remark updatedRemark \u003d personToEdit.getRemark();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"        if (type.value.equals(\"Lead\")) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new Lead(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags);"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new Contact(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark, updatedTags);"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":178,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":217,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":218,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":225,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":226,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":227,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":250,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":12,"WoodyLau":7,"-":235}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all Leads/Contacts that match any of \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":4,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":4,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"ex\";"},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting CRM Book as requested ...\";"},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":5,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/ConvertCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import java.text.DateFormat;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import java.util.Date;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":" * Converts an existing Lead in the address book to a Contact."},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"public class ConvertCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"    public static final String COMMAND_WORD \u003d \"convert\";"},{"lineNumber":36,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":37,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"con\";"},{"lineNumber":38,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Converts the selected Lead to a Contact \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_CONVERT_PERSON_SUCCESS \u003d \"Converted Person: %1$s\";"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_NOT_CONVERTED \u003d \"Person is already a Contact.\";"},{"lineNumber":47,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":48,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Lead/Contact already exists in the CRM Book.\";"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"    private final Index index;"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"    private Lead oldLead;"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    private Contact newContact;"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"    public ConvertCommand(Index index) {"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(index);"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        this.index \u003d index;"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"            model.convertPerson(oldLead, newContact);"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        return new CommandResult(String.format(MESSAGE_CONVERT_PERSON_SUCCESS, oldLead));"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"            oldLead \u003d (Lead) lastShownList.get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"        } catch (ClassCastException cce) {"},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(MESSAGE_NOT_CONVERTED);"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"        newContact \u003d createContact(oldLead);"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"    private static Contact createContact(Lead oldLead) {"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"        assert oldLead !\u003d null;"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"        Name updatedName \u003d oldLead.getName();"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"        Phone updatedPhone \u003d oldLead.getPhone();"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"        Email updatedEmail \u003d oldLead.getEmail();"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":"        Address updatedAddress \u003d oldLead.getAddress();"},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"        Remark updatedRemark \u003d oldLead.getRemark();"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":"        Set\u003cTag\u003e updatedTags \u003d oldLead.getTags();"},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"        Contact contact \u003d new Contact(updatedName, updatedPhone,"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":"                updatedEmail, updatedAddress, updatedRemark, updatedTags);"},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"        if (oldLead.getCompany() !\u003d null) {"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"            contact.setCompany(new Account(oldLead.getCompany()));"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"        if (oldLead.getTitle() !\u003d null) {"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"            contact.setTitle(oldLead.getTitle());"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"        Date date \u003d new Date();"},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"        contact.setConvertedDate(dateFormat.format(date));"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"        return contact;"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"        // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"        // instanceof handles nulls"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"        if (!(other instanceof ConvertCommand)) {"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"        // state check"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"        ConvertCommand e \u003d (ConvertCommand) other;"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":"        return index.equals(e.index)"},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 Objects.equals(oldLead, e.oldLead);"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":5,"WoodyLau":132,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"content":"//@@author zhuleyan"},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Import many persons to the address book at one time."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ImportCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"i\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Imports a CSV file to the CRM Book. \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: PATH\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" ./sample.csv\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"CSV file imported\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLead\u003e toAdd;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Creates an ImportCommand to add the specified {@code Person}"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ImportCommand(List\u003cLead\u003e person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            for (Lead lead:toAdd) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                model.addPerson(lead);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            //do nothing"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((ImportCommand) other).toAdd));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"WoodyLau":1,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"content":"//@@author zhuleyan"},{"lineNumber":20,"author":{"gitID":"-"},"content":"//reused"},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Edits the remark of an existing person in the address book."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":27,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String COMMAND_ALIAS \u003d \"rem\";"},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the Lead/Contact identified \""},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":"            + \"by the index number used in the last Leads-Contacts listing. \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_REMARK + \"Likes to drink coffee.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":40,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Lead/Contact: %1$s\";"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Lead/Contact: %1$s\";"},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Remark remark;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @param remark the remark to be updated to the person"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(remark);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(personToEdit);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The changing of the remark should not result in a duplicate\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (personToEdit.getType().value.equals(\"Lead\")) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            editedPerson \u003d new Lead(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                    personToEdit.getAddress(), remark, personToEdit.getTags());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            editedPerson \u003d new Contact(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                    personToEdit.getAddress(), remark, personToEdit.getTags());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RemarkCommand r \u003d (RemarkCommand) other;"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return index.equals(r.index) \u0026\u0026 remark.equals(r.remark);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Generate a success message according to whether the remark is added or removed"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String message;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (remark.value.isEmpty()) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            message \u003d MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            message \u003d MESSAGE_ADD_REMARK_SUCCESS;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return String.format(message, personToEdit);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sheikh-Umar":9,"WoodyLau":2,"-":114}},{"path":"src/main/java/seedu/address/logic/commands/ShareToLinkedInCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"davidten"},"content":"//@@author davidten"},{"lineNumber":2,"author":{"gitID":"davidten"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"davidten"},"content":""},{"lineNumber":4,"author":{"gitID":"davidten"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"davidten"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":6,"author":{"gitID":"davidten"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"davidten"},"content":""},{"lineNumber":8,"author":{"gitID":"davidten"},"content":"import org.apache.http.HttpEntity;"},{"lineNumber":9,"author":{"gitID":"davidten"},"content":"import org.apache.http.HttpResponse;"},{"lineNumber":10,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.ClientProtocolException;"},{"lineNumber":11,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.HttpClient;"},{"lineNumber":12,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.config.CookieSpecs;"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.config.RequestConfig;"},{"lineNumber":14,"author":{"gitID":"davidten"},"content":"import org.apache.http.client.methods.HttpPost;"},{"lineNumber":15,"author":{"gitID":"davidten"},"content":"import org.apache.http.entity.StringEntity;"},{"lineNumber":16,"author":{"gitID":"davidten"},"content":"import org.apache.http.impl.client.HttpClients;"},{"lineNumber":17,"author":{"gitID":"davidten"},"content":"import org.apache.http.util.EntityUtils;"},{"lineNumber":18,"author":{"gitID":"davidten"},"content":"import org.json.JSONObject;"},{"lineNumber":19,"author":{"gitID":"davidten"},"content":""},{"lineNumber":20,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":21,"author":{"gitID":"davidten"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"davidten"},"content":""},{"lineNumber":23,"author":{"gitID":"davidten"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"davidten"},"content":" * Shares a post to the logged in LinkedIn accountx"},{"lineNumber":25,"author":{"gitID":"davidten"},"content":" */"},{"lineNumber":26,"author":{"gitID":"davidten"},"content":"public class ShareToLinkedInCommand extends Command {"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"    public static final String COMMAND_WORD \u003d \"linkedin_share\";"},{"lineNumber":28,"author":{"gitID":"davidten"},"content":"    public static final String COMMAND_ALIAS \u003d \"linkshare\";"},{"lineNumber":29,"author":{"gitID":"davidten"},"content":""},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shares a post to your LinkedIn Account. \""},{"lineNumber":31,"author":{"gitID":"davidten"},"content":"            + \"With at least one character as the parameter \\n\""},{"lineNumber":32,"author":{"gitID":"davidten"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":"            + \" I think www.google.com is a great search engine\";"},{"lineNumber":34,"author":{"gitID":"davidten"},"content":""},{"lineNumber":35,"author":{"gitID":"davidten"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Post shared to your linkedIn account\";"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Failed to post to LinkedIn\";"},{"lineNumber":37,"author":{"gitID":"davidten"},"content":"    public static final String LINKEDIN_SHARE_API_URL \u003d \"https://api.linkedin.com/v1/people/~/shares?format\u003djson\";"},{"lineNumber":38,"author":{"gitID":"davidten"},"content":""},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ShareToLinkedInCommand.class);"},{"lineNumber":40,"author":{"gitID":"davidten"},"content":"    private static String post;"},{"lineNumber":41,"author":{"gitID":"davidten"},"content":"    private static boolean postSuccess \u003d false;"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":""},{"lineNumber":43,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"davidten"},"content":"     * Default constructor"},{"lineNumber":45,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"davidten"},"content":"    public ShareToLinkedInCommand() {"},{"lineNumber":47,"author":{"gitID":"davidten"},"content":""},{"lineNumber":48,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"davidten"},"content":""},{"lineNumber":50,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"davidten"},"content":"     * Constructor to accept a post"},{"lineNumber":52,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"davidten"},"content":"    public ShareToLinkedInCommand(String post) {"},{"lineNumber":54,"author":{"gitID":"davidten"},"content":"        this.post \u003d post;"},{"lineNumber":55,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"davidten"},"content":""},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"davidten"},"content":"    public CommandResult execute() {"},{"lineNumber":59,"author":{"gitID":"davidten"},"content":"        postToLinkedIn();"},{"lineNumber":60,"author":{"gitID":"davidten"},"content":"        //post success"},{"lineNumber":61,"author":{"gitID":"davidten"},"content":"        logger.info(\"CHECKING POST SUCCESS NOW\");"},{"lineNumber":62,"author":{"gitID":"davidten"},"content":"        if (postSuccess) {"},{"lineNumber":63,"author":{"gitID":"davidten"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":64,"author":{"gitID":"davidten"},"content":"        } else {"},{"lineNumber":65,"author":{"gitID":"davidten"},"content":"            return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":66,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"davidten"},"content":""},{"lineNumber":69,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"davidten"},"content":"     * This method checks if the supplied accessToken is not empty."},{"lineNumber":71,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"davidten"},"content":"    public static boolean accessTokenValid(String accessToken) {"},{"lineNumber":73,"author":{"gitID":"davidten"},"content":"        if (accessToken \u003d\u003d null || accessToken.length() \u003d\u003d 0) {"},{"lineNumber":74,"author":{"gitID":"davidten"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"davidten"},"content":"        return true;"},{"lineNumber":77,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"davidten"},"content":""},{"lineNumber":79,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"davidten"},"content":"     * This method creates a JsonObject that sets the following parameters for the LinkedIn post"},{"lineNumber":81,"author":{"gitID":"davidten"},"content":"     * Visibility: \u0027anyone\u0027 (public)"},{"lineNumber":82,"author":{"gitID":"davidten"},"content":"     * Post: The user input"},{"lineNumber":83,"author":{"gitID":"davidten"},"content":"     * The method then returns this JsonObject as a String"},{"lineNumber":84,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"davidten"},"content":"    public static String getLinkedInJsonObject() {"},{"lineNumber":86,"author":{"gitID":"davidten"},"content":"        JSONObject visibilityJsonObj \u003d new JSONObject();"},{"lineNumber":87,"author":{"gitID":"davidten"},"content":"        visibilityJsonObj.put(\"code\", new String(\"anyone\"));"},{"lineNumber":88,"author":{"gitID":"davidten"},"content":""},{"lineNumber":89,"author":{"gitID":"davidten"},"content":"        JSONObject mainJsonObj \u003d new JSONObject();"},{"lineNumber":90,"author":{"gitID":"davidten"},"content":"        mainJsonObj.put(\"comment\", post);"},{"lineNumber":91,"author":{"gitID":"davidten"},"content":"        mainJsonObj.put(\"visibility\", visibilityJsonObj);"},{"lineNumber":92,"author":{"gitID":"davidten"},"content":"        return mainJsonObj.toString();"},{"lineNumber":93,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"davidten"},"content":""},{"lineNumber":95,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"davidten"},"content":"     * This method creates a HttpClient object"},{"lineNumber":97,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"davidten"},"content":"    public static HttpClient getHttpClientObject() {"},{"lineNumber":99,"author":{"gitID":"davidten"},"content":"        HttpClient httpclient \u003d HttpClients.custom()"},{"lineNumber":100,"author":{"gitID":"davidten"},"content":"                        .setDefaultRequestConfig(RequestConfig.custom()"},{"lineNumber":101,"author":{"gitID":"davidten"},"content":"                        .setCookieSpec(CookieSpecs.STANDARD).build())"},{"lineNumber":102,"author":{"gitID":"davidten"},"content":"                        .build();"},{"lineNumber":103,"author":{"gitID":"davidten"},"content":"        return httpclient;"},{"lineNumber":104,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"davidten"},"content":""},{"lineNumber":106,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"davidten"},"content":"     * This method creates a HttpPost object using a supplied Json(in String form) and accessToken"},{"lineNumber":108,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"davidten"},"content":"    public static HttpPost getHttpPostObject(String jsonToSend, String accessToken)"},{"lineNumber":110,"author":{"gitID":"davidten"},"content":"            throws UnsupportedEncodingException {"},{"lineNumber":111,"author":{"gitID":"davidten"},"content":"        HttpPost httppost \u003d new HttpPost(LINKEDIN_SHARE_API_URL);"},{"lineNumber":112,"author":{"gitID":"davidten"},"content":"        StringEntity params \u003d new StringEntity(jsonToSend);"},{"lineNumber":113,"author":{"gitID":"davidten"},"content":"        httppost.addHeader(\"Content-Type\", \"application/json\");"},{"lineNumber":114,"author":{"gitID":"davidten"},"content":"        httppost.addHeader(\"x-li-format\", \"json\");"},{"lineNumber":115,"author":{"gitID":"davidten"},"content":"        httppost.addHeader(\"Authorization\", \"Bearer \" + accessToken);"},{"lineNumber":116,"author":{"gitID":"davidten"},"content":"        httppost.setEntity(params);"},{"lineNumber":117,"author":{"gitID":"davidten"},"content":"        return httppost;"},{"lineNumber":118,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"davidten"},"content":""},{"lineNumber":120,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"davidten"},"content":"     * This method sends a httpPost request, parses the response and returns the response in JSONObject format."},{"lineNumber":122,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"davidten"},"content":"    public static JSONObject sendHttpRequestToLinkedIn(HttpPost httppost, HttpClient httpclient) throws IOException {"},{"lineNumber":124,"author":{"gitID":"davidten"},"content":"        HttpResponse response \u003d httpclient.execute(httppost);"},{"lineNumber":125,"author":{"gitID":"davidten"},"content":"        HttpEntity entity \u003d response.getEntity();"},{"lineNumber":126,"author":{"gitID":"davidten"},"content":""},{"lineNumber":127,"author":{"gitID":"davidten"},"content":"        // Read the contents of an entity and return it as a String."},{"lineNumber":128,"author":{"gitID":"davidten"},"content":"        String content \u003d EntityUtils.toString(entity);"},{"lineNumber":129,"author":{"gitID":"davidten"},"content":""},{"lineNumber":130,"author":{"gitID":"davidten"},"content":"        logger.info(\"RECEIVED A RESPONSE FROM THE SERVER: \" + content);"},{"lineNumber":131,"author":{"gitID":"davidten"},"content":""},{"lineNumber":132,"author":{"gitID":"davidten"},"content":"        JSONObject jsnobject \u003d new JSONObject(content);"},{"lineNumber":133,"author":{"gitID":"davidten"},"content":"        return jsnobject;"},{"lineNumber":134,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"davidten"},"content":""},{"lineNumber":136,"author":{"gitID":"davidten"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"davidten"},"content":"     * Called by an event. This method takes in the config to get the access_token"},{"lineNumber":138,"author":{"gitID":"davidten"},"content":"     * This method posts the post to LinkedIn."},{"lineNumber":139,"author":{"gitID":"davidten"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"davidten"},"content":"    public static void postToLinkedIn() {"},{"lineNumber":141,"author":{"gitID":"davidten"},"content":"        Config config \u003d Config.setupConfig();"},{"lineNumber":142,"author":{"gitID":"davidten"},"content":"        postSuccess \u003d false;"},{"lineNumber":143,"author":{"gitID":"davidten"},"content":""},{"lineNumber":144,"author":{"gitID":"davidten"},"content":"        String accessToken \u003d config.getAppSecret();"},{"lineNumber":145,"author":{"gitID":"davidten"},"content":"        if (!accessTokenValid(accessToken)) { //no valid accessToken, return failure."},{"lineNumber":146,"author":{"gitID":"davidten"},"content":"            return;"},{"lineNumber":147,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"davidten"},"content":""},{"lineNumber":149,"author":{"gitID":"davidten"},"content":"        String jsonToSend \u003d getLinkedInJsonObject();"},{"lineNumber":150,"author":{"gitID":"davidten"},"content":""},{"lineNumber":151,"author":{"gitID":"davidten"},"content":"        logger.info(\"Access token is valid, sending the json to server: \" + jsonToSend);"},{"lineNumber":152,"author":{"gitID":"davidten"},"content":""},{"lineNumber":153,"author":{"gitID":"davidten"},"content":"        try {"},{"lineNumber":154,"author":{"gitID":"davidten"},"content":"            HttpPost httppost \u003d getHttpPostObject(jsonToSend, accessToken);"},{"lineNumber":155,"author":{"gitID":"davidten"},"content":"            HttpClient httpclient \u003d getHttpClientObject();"},{"lineNumber":156,"author":{"gitID":"davidten"},"content":"            JSONObject linkedInResponse \u003d sendHttpRequestToLinkedIn(httppost, httpclient);"},{"lineNumber":157,"author":{"gitID":"davidten"},"content":"            logger.info(\"LinkedIn Response is : \" + linkedInResponse.toString());"},{"lineNumber":158,"author":{"gitID":"davidten"},"content":"            if (linkedInResponse.has(\"updateUrl\") || linkedInResponse.has(\"updateURL\")) {"},{"lineNumber":159,"author":{"gitID":"davidten"},"content":"                //if has updateURL then it successfully got posted"},{"lineNumber":160,"author":{"gitID":"davidten"},"content":"                logger.info(\"Post has been successfully posted\");"},{"lineNumber":161,"author":{"gitID":"davidten"},"content":"                postSuccess \u003d true;"},{"lineNumber":162,"author":{"gitID":"davidten"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"davidten"},"content":""},{"lineNumber":164,"author":{"gitID":"davidten"},"content":"        } catch (UnsupportedEncodingException e) {"},{"lineNumber":165,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":166,"author":{"gitID":"davidten"},"content":"        } catch (ClientProtocolException e) {"},{"lineNumber":167,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":168,"author":{"gitID":"davidten"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitID":"davidten"},"content":"            e.printStackTrace();"},{"lineNumber":170,"author":{"gitID":"davidten"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"davidten"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"davidten"},"content":"}"}],"authorContributionMap":{"davidten":172}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Type;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String remark;"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"    private String type;"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"    private String company;"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"    private String title;"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"    // Fields included for Leads"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"    private String industry;"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    private int rating;"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    private String website;"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"    // Fields included for Contacts"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"    private String department;"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement(required \u003d false)"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"    private String convertedDate;"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"    //@@author"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        this.type \u003d null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"        type \u003d source.getType().value;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"        //@@author WoodyLau"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"        if (source instanceof Lead) {"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":"            company \u003d ((Lead) source).getCompany();"},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"            industry \u003d ((Lead) source).getIndustry();"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":"            rating \u003d ((Lead) source).getRating();"},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"            title \u003d ((Lead) source).getTitle();"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"            website \u003d ((Lead) source).getWebsite();"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":"        } else if (source instanceof Contact) {"},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":"            if (((Contact) source).getCompany() !\u003d null) {"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"                company \u003d ((Contact) source).getCompany().toString();"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"            department \u003d ((Contact) source).getDepartment();"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"            title \u003d ((Contact) source).getTitle();"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"            convertedDate \u003d ((Contact) source).getConvertedDate();"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"        //@@author WoodyLau"},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"WoodyLau"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"WoodyLau"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":160,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":161,"author":{"gitID":"WoodyLau"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":162,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":163,"author":{"gitID":"WoodyLau"},"content":"        if (this.type \u003d\u003d null) {"},{"lineNumber":164,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"},{"lineNumber":165,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"WoodyLau"},"content":"        if (!Type.isValidType(this.type)) {"},{"lineNumber":167,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Type.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"WoodyLau"},"content":"        final Type type \u003d new Type(this.type);"},{"lineNumber":170,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":171,"author":{"gitID":"WoodyLau"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":172,"author":{"gitID":"WoodyLau"},"content":"        //@@author WoodyLau"},{"lineNumber":173,"author":{"gitID":"WoodyLau"},"content":"        if (type.value.equals(\"Lead\")) {"},{"lineNumber":174,"author":{"gitID":"WoodyLau"},"content":"            Lead lead \u003d new Lead(name, phone, email, address, remark, tags);"},{"lineNumber":175,"author":{"gitID":"WoodyLau"},"content":"            if (this.company !\u003d null) {"},{"lineNumber":176,"author":{"gitID":"WoodyLau"},"content":"                lead.setCompany(this.company);"},{"lineNumber":177,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":178,"author":{"gitID":"WoodyLau"},"content":"            if (this.industry !\u003d null) {"},{"lineNumber":179,"author":{"gitID":"WoodyLau"},"content":"                lead.setIndustry(this.industry);"},{"lineNumber":180,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":181,"author":{"gitID":"WoodyLau"},"content":"            lead.setRating(this.rating);"},{"lineNumber":182,"author":{"gitID":"WoodyLau"},"content":"            if (this.title !\u003d null) {"},{"lineNumber":183,"author":{"gitID":"WoodyLau"},"content":"                lead.setTitle(this.title);"},{"lineNumber":184,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"WoodyLau"},"content":"            if (this.website !\u003d null) {"},{"lineNumber":186,"author":{"gitID":"WoodyLau"},"content":"                lead.setWebsite(this.website);"},{"lineNumber":187,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":188,"author":{"gitID":"WoodyLau"},"content":"            return lead;"},{"lineNumber":189,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"WoodyLau"},"content":"        if (type.value.equals(\"Contact\")) {"},{"lineNumber":191,"author":{"gitID":"WoodyLau"},"content":"            Contact contact \u003d new Contact(name, phone, email, address, remark, tags);"},{"lineNumber":192,"author":{"gitID":"WoodyLau"},"content":"            if (this.company !\u003d null) {"},{"lineNumber":193,"author":{"gitID":"WoodyLau"},"content":"                contact.setCompany(this.company);"},{"lineNumber":194,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":195,"author":{"gitID":"WoodyLau"},"content":"            if (this.department !\u003d null) {"},{"lineNumber":196,"author":{"gitID":"WoodyLau"},"content":"                contact.setDepartment(this.department);"},{"lineNumber":197,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":198,"author":{"gitID":"WoodyLau"},"content":"            if (this.title !\u003d null) {"},{"lineNumber":199,"author":{"gitID":"WoodyLau"},"content":"                contact.setTitle(this.title);"},{"lineNumber":200,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":201,"author":{"gitID":"WoodyLau"},"content":"            if (this.convertedDate !\u003d null) {"},{"lineNumber":202,"author":{"gitID":"WoodyLau"},"content":"                contact.setConvertedDate(this.convertedDate);"},{"lineNumber":203,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"WoodyLau"},"content":"            return contact;"},{"lineNumber":205,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"WoodyLau"},"content":"        //@@author"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, remark, tags);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":132,"-":95}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"    private List\u003cXmlAdaptedAccount\u003e accounts;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"        accounts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"        accounts.addAll(src.getAccountList().stream().map(XmlAdaptedAccount::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        for (XmlAdaptedAccount a : accounts) {"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"            addressBook.addAccount(a.toModelType());"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 accounts.equals(otherAb.accounts);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":8,"-":72}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"davidten"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CRMBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"davidten"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping CRM Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":210,"davidten":2}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final Remark NO_REMARK \u003d new Remark(\"\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"            new Lead(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":27,"author":{"gitID":"davidten"},"content":"                new Address(\"Blk 29 Lor 30 Geylang, Singapore 398362\"), NO_REMARK,"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"HR\")),"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"            new Contact(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":30,"author":{"gitID":"davidten"},"content":"                new Address(\"Serangoon Garden Way\"), NO_REMARK,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                getTagSet(\"Important\", \"HR\")),"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"            new Lead(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":33,"author":{"gitID":"davidten"},"content":"                new Address(\"74 Ang Mo Kio Street 11\"), NO_REMARK,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                getTagSet(\"DNC\")),"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"            new Lead(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":36,"author":{"gitID":"davidten"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26\"), NO_REMARK,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                getTagSet(\"StartUp\")),"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"            new Lead(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":39,"author":{"gitID":"davidten"},"content":"                new Address(\"Blk 47, 20 Tampines Rd, Singapore 535070\"), NO_REMARK,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"Entrepreneur\")),"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"            new Contact(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":42,"author":{"gitID":"davidten"},"content":"                new Address(\"Blk 45, 85 Aljunied Rd, Singapore 389825\"), NO_REMARK,"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                getTagSet(\"Ecommerce\"))"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"                if (samplePerson instanceof Lead) {"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"                    sampleAb.addPerson((Lead) samplePerson);"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"                } else {"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"                    sampleAb.addPerson((Contact) samplePerson);"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"                }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":13,"-":55,"davidten":6}},{"path":"src/main/java/seedu/address/model/person/TypeMatchesKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author Sheikh-Umar"},{"lineNumber":2,"author":{"gitID":"Sheikh-Umar"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":4,"author":{"gitID":"Sheikh-Umar"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"Sheikh-Umar"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":7,"author":{"gitID":"Sheikh-Umar"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":9,"author":{"gitID":"Sheikh-Umar"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Sheikh-Umar"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"Sheikh-Umar"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sheikh-Umar"},"content":"public class TypeMatchesKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"Sheikh-Umar"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":15,"author":{"gitID":"Sheikh-Umar"},"content":"    public TypeMatchesKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"Sheikh-Umar"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":19,"author":{"gitID":"Sheikh-Umar"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Sheikh-Umar"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getType().value, keyword));"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":25,"author":{"gitID":"Sheikh-Umar"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Sheikh-Umar"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"Sheikh-Umar"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":"                || (other instanceof TypeMatchesKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"                \u0026\u0026 this.keywords.equals(((TypeMatchesKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":""},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":"}"},{"lineNumber":33,"author":{"gitID":"Sheikh-Umar"},"content":"//@@author"}],"authorContributionMap":{"Sheikh-Umar":33}},{"path":"src/main/java/seedu/address/model/person/Type.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":" * Represents a Person\u0027s Type in the address book."},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"public class Type {"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"            \"Types can only be Lead or Contact\";"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"     * Can only either be Lead or Contact."},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"    public static final String TYPE_VALIDATION_REGEX \u003d \"Contact|Lead\";"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"     * Constructs a {@code Type}."},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"     * @param type A valid type."},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"    public Type(String type) {"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(type);"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"        checkArgument(isValidType(type), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"        this.value \u003d type;"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"     * Returns true if a given string is a valid type."},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    public static boolean isValidType(String test) {"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        return test.matches(TYPE_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"                || (other instanceof Type // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 this.value.equals(((Type) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":58}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAccount.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":" * JAXB-friendly adapted version of the Account."},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":"public class XmlAdaptedAccount {"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"    @XmlValue"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"    private String accountName;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"     * Constructs an XmlAdaptedAccount."},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"    public XmlAdaptedAccount() {}"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"     * Constructs a {@code XmlAdaptedAccount} with the given {@code accountName}."},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"    public XmlAdaptedAccount(String accountName) {"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"        this.accountName \u003d accountName;"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"     * Converts a given Account into this class for JAXB use."},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"    public XmlAdaptedAccount(Account source) {"},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"        accountName \u003d source.accountName;"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"     * Converts this jaxb-friendly adapted account object into the model\u0027s Account object."},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"    public Account toModelType() throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"        if (!Account.isValidAccountName(accountName)) {"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"            throw new IllegalValueException(Account.MESSAGE_ACCOUNT_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"        return new Account(accountName);"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"        if (!(other instanceof XmlAdaptedAccount)) {"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        return accountName.equals(((XmlAdaptedAccount) other).accountName);"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":63}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author Sheikh-Umar"},{"lineNumber":29,"author":{"gitID":"Sheikh-Umar"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Sheikh-Umar"},"content":"     * Returns true if the list contains either the phone number or email address"},{"lineNumber":31,"author":{"gitID":"Sheikh-Umar"},"content":"     * of the given argument."},{"lineNumber":32,"author":{"gitID":"Sheikh-Umar"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Sheikh-Umar"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":34,"author":{"gitID":"Sheikh-Umar"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"Sheikh-Umar"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":36,"author":{"gitID":"Sheikh-Umar"},"content":"            Person currentPersonInCrm \u003d internalList.get(i);"},{"lineNumber":37,"author":{"gitID":"Sheikh-Umar"},"content":"            if (currentPersonInCrm.getPhone().equals(toCheck.getPhone())"},{"lineNumber":38,"author":{"gitID":"Sheikh-Umar"},"content":"                    || currentPersonInCrm.getEmail().equals(toCheck.getEmail())) {"},{"lineNumber":39,"author":{"gitID":"Sheikh-Umar"},"content":"                return true;"},{"lineNumber":40,"author":{"gitID":"Sheikh-Umar"},"content":"            }"},{"lineNumber":41,"author":{"gitID":"Sheikh-Umar"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"Sheikh-Umar"},"content":"        return false;"},{"lineNumber":43,"author":{"gitID":"Sheikh-Umar"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sheikh-Umar"},"content":"    //@@author"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"content":"    //@@author zhuleyan"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sorts all persons by name in alphabetical order."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void sort() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        internalList.sort("},{"lineNumber":65,"author":{"gitID":"-"},"content":"            Comparator.comparing(("},{"lineNumber":66,"author":{"gitID":"-"},"content":"                Person p) -\u003e p.getName().toString(), ("},{"lineNumber":67,"author":{"gitID":"-"},"content":"                s1, s2) -\u003e (s1.compareToIgnoreCase(s2) \u003d\u003d 0) ? s1.compareTo(s2) : s1.compareToIgnoreCase(s2))"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Sheikh-Umar":17,"-":125}},{"path":"src/main/java/seedu/address/logic/commands/EditDetailsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDUSTRY;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEBSITE;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import java.util.OptionalInt;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"public class EditDetailsCommand extends UndoableCommand {"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"    public static final String COMMAND_WORD \u003d \"editdetails\";"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"    public static final String COMMAND_ALIAS \u003d \"adddetails\";"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the fine details of the Lead/Contact identified \""},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"            + \"by the index number used in the last Leads-Contacts listing. \""},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"            + \"For Leads, the parameters are: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_INDUSTRY + \"INDUSTRY] \""},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_RATING + \"RATING (number from 1 to 5)] \""},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE] \""},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_WEBSITE + \"WEBSITE]...\\n\""},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"            + PREFIX_INDUSTRY + \"Software Engineering \""},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"            + PREFIX_RATING + \"4\\n\""},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"            + \"For Contacts, the parameters are: INDEX (must be a positive integer) \""},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT] \""},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"            + \"[\" + PREFIX_TITLE + \"TITLE]...\\n\""},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"            + PREFIX_COMPANY + \"Macrosoft \""},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"            + PREFIX_TITLE + \"Mr.\";"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Lead/Contact: %1$s\";"},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_NOT_EDITED_FOR_LEAD \u003d"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"            \"At least one field to edit for a Lead must be provided.\";"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_NOT_EDITED_FOR_CONTACT \u003d"},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"            \"At least one field to edit for a Contact must be provided.\";"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Lead/Contact already exists in the CRM Book.\";"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":"    private final Index index;"},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"    private final EditLeadDescriptor editLeadDescriptor;"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"    private final EditContactDescriptor editContactDescriptor;"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"    private Person personToEdit;"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":"     * @param editLeadDescriptor details for editing Leads"},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"     * @param editContactDescriptor details for editing Contacts"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"    public EditDetailsCommand(Index index,"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":"                              EditLeadDescriptor editLeadDescriptor, EditContactDescriptor editContactDescriptor) {"},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(index);"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        CollectionUtil.isAnyNonNull(editLeadDescriptor, editContactDescriptor);"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":"        this.index \u003d index;"},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":"        this.editLeadDescriptor \u003d new EditLeadDescriptor(editLeadDescriptor);"},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        this.editContactDescriptor \u003d new EditContactDescriptor(editContactDescriptor);"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"        if (personToEdit instanceof Lead) {"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"            if (!editLeadDescriptor.isAnyFieldEdited()) {"},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"                throw new CommandException(MESSAGE_NOT_EDITED_FOR_LEAD);"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"            Lead editedPerson \u003d (Lead) personToEdit;"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setCompany(editLeadDescriptor.getCompany().orElse(((Lead) personToEdit).getCompany()));"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setIndustry(editLeadDescriptor.getIndustry().orElse(((Lead) personToEdit).getIndustry()));"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setRating(editLeadDescriptor.getRating().orElse(((Lead) personToEdit).getRating()));"},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setTitle(editLeadDescriptor.getTitle().orElse(((Lead) personToEdit).getTitle()));"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setWebsite(editLeadDescriptor.getWebsite().orElse(((Lead) personToEdit).getWebsite()));"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"            if (editLeadDescriptor.getRating().isPresent()"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"                    \u0026\u0026 (editLeadDescriptor.getRating().getAsInt() \u003c 1"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"                    || editLeadDescriptor.getRating().getAsInt() \u003e 5)) {"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"                throw new CommandException(\"Rating only goes from 1 to 5. Rating was not updated\");"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":"            try {"},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"                model.updatePerson(editedPerson, editedPerson);"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, personToEdit));"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"        } else {"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"            if (!editContactDescriptor.isAnyFieldEdited()) {"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"                throw new CommandException(MESSAGE_NOT_EDITED_FOR_CONTACT);"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"            Contact editedPerson \u003d (Contact) personToEdit;"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setCompany(editContactDescriptor.getCompany()"},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"                    .orElse(((Contact) personToEdit).getCompany()));"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setDepartment(editContactDescriptor.getDepartment()"},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"                            .orElse(((Contact) personToEdit).getDepartment()));"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"            editedPerson.setTitle(editContactDescriptor.getTitle().orElse(((Contact) personToEdit).getTitle()));"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"            try {"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"                model.updatePerson(editedPerson, editedPerson);"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, personToEdit));"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":"        // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"            return true;"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":"        // instanceof handles nulls"},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"        if (!(other instanceof EditDetailsCommand)) {"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":"            return false;"},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":"        // state check"},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"        EditDetailsCommand e \u003d (EditDetailsCommand) other;"},{"lineNumber":156,"author":{"gitID":"WoodyLau"},"content":"        return index.equals(e.index)"},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 editLeadDescriptor.equals(e.editLeadDescriptor)"},{"lineNumber":158,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 editContactDescriptor.equals(e.editContactDescriptor)"},{"lineNumber":159,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":160,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":162,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"WoodyLau"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":164,"author":{"gitID":"WoodyLau"},"content":"     * corresponding field value of the person."},{"lineNumber":165,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"WoodyLau"},"content":"    public static class EditLeadDescriptor {"},{"lineNumber":167,"author":{"gitID":"WoodyLau"},"content":"        private String company \u003d null;"},{"lineNumber":168,"author":{"gitID":"WoodyLau"},"content":"        private String industry \u003d null;"},{"lineNumber":169,"author":{"gitID":"WoodyLau"},"content":"        private OptionalInt rating \u003d OptionalInt.empty();"},{"lineNumber":170,"author":{"gitID":"WoodyLau"},"content":"        private String title \u003d null;"},{"lineNumber":171,"author":{"gitID":"WoodyLau"},"content":"        private String website \u003d null;"},{"lineNumber":172,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":173,"author":{"gitID":"WoodyLau"},"content":"        public EditLeadDescriptor() {}"},{"lineNumber":174,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":175,"author":{"gitID":"WoodyLau"},"content":"        /**"},{"lineNumber":176,"author":{"gitID":"WoodyLau"},"content":"         * Copy constructor."},{"lineNumber":177,"author":{"gitID":"WoodyLau"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":178,"author":{"gitID":"WoodyLau"},"content":"         */"},{"lineNumber":179,"author":{"gitID":"WoodyLau"},"content":"        public EditLeadDescriptor(EditLeadDescriptor toCopy) {"},{"lineNumber":180,"author":{"gitID":"WoodyLau"},"content":"            setCompany(toCopy.company);"},{"lineNumber":181,"author":{"gitID":"WoodyLau"},"content":"            setIndustry(toCopy.industry);"},{"lineNumber":182,"author":{"gitID":"WoodyLau"},"content":"            if (toCopy.rating !\u003d null \u0026\u0026 toCopy.rating.isPresent()) {"},{"lineNumber":183,"author":{"gitID":"WoodyLau"},"content":"                setRating(toCopy.rating.getAsInt());"},{"lineNumber":184,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"WoodyLau"},"content":"            setTitle(toCopy.title);"},{"lineNumber":186,"author":{"gitID":"WoodyLau"},"content":"            setWebsite(toCopy.website);"},{"lineNumber":187,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":189,"author":{"gitID":"WoodyLau"},"content":"        /**"},{"lineNumber":190,"author":{"gitID":"WoodyLau"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":191,"author":{"gitID":"WoodyLau"},"content":"         */"},{"lineNumber":192,"author":{"gitID":"WoodyLau"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":193,"author":{"gitID":"WoodyLau"},"content":"            return (CollectionUtil.isAnyNonNull(this.company, this.industry, this.title, this.website)"},{"lineNumber":194,"author":{"gitID":"WoodyLau"},"content":"                    || this.rating.isPresent());"},{"lineNumber":195,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":197,"author":{"gitID":"WoodyLau"},"content":"        public void setCompany(String company) {"},{"lineNumber":198,"author":{"gitID":"WoodyLau"},"content":"            this.company \u003d company;"},{"lineNumber":199,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":201,"author":{"gitID":"WoodyLau"},"content":"        public Optional\u003cString\u003e getCompany() {"},{"lineNumber":202,"author":{"gitID":"WoodyLau"},"content":"            return Optional.ofNullable(company);"},{"lineNumber":203,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":205,"author":{"gitID":"WoodyLau"},"content":"        public void setIndustry(String industry) {"},{"lineNumber":206,"author":{"gitID":"WoodyLau"},"content":"            this.industry \u003d industry;"},{"lineNumber":207,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":209,"author":{"gitID":"WoodyLau"},"content":"        public Optional\u003cString\u003e getIndustry() {"},{"lineNumber":210,"author":{"gitID":"WoodyLau"},"content":"            return Optional.ofNullable(industry);"},{"lineNumber":211,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":213,"author":{"gitID":"WoodyLau"},"content":"        public void setRating(int rating) {"},{"lineNumber":214,"author":{"gitID":"WoodyLau"},"content":"            this.rating \u003d OptionalInt.of(rating);"},{"lineNumber":215,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":217,"author":{"gitID":"WoodyLau"},"content":"        public OptionalInt getRating() {"},{"lineNumber":218,"author":{"gitID":"WoodyLau"},"content":"            return rating;"},{"lineNumber":219,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":221,"author":{"gitID":"WoodyLau"},"content":"        public void setTitle(String title) {"},{"lineNumber":222,"author":{"gitID":"WoodyLau"},"content":"            this.title \u003d title;"},{"lineNumber":223,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":225,"author":{"gitID":"WoodyLau"},"content":"        public Optional\u003cString\u003e getTitle() {"},{"lineNumber":226,"author":{"gitID":"WoodyLau"},"content":"            return Optional.ofNullable(title);"},{"lineNumber":227,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":229,"author":{"gitID":"WoodyLau"},"content":"        public void setWebsite(String website) {"},{"lineNumber":230,"author":{"gitID":"WoodyLau"},"content":"            this.website \u003d website;"},{"lineNumber":231,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":233,"author":{"gitID":"WoodyLau"},"content":"        public Optional\u003cString\u003e getWebsite() {"},{"lineNumber":234,"author":{"gitID":"WoodyLau"},"content":"            return Optional.ofNullable(website);"},{"lineNumber":235,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":237,"author":{"gitID":"WoodyLau"},"content":"        @Override"},{"lineNumber":238,"author":{"gitID":"WoodyLau"},"content":"        public boolean equals(Object other) {"},{"lineNumber":239,"author":{"gitID":"WoodyLau"},"content":"            // short circuit if same object"},{"lineNumber":240,"author":{"gitID":"WoodyLau"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":241,"author":{"gitID":"WoodyLau"},"content":"                return true;"},{"lineNumber":242,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":243,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":244,"author":{"gitID":"WoodyLau"},"content":"            // instanceof handles nulls"},{"lineNumber":245,"author":{"gitID":"WoodyLau"},"content":"            if (!(other instanceof EditLeadDescriptor)) {"},{"lineNumber":246,"author":{"gitID":"WoodyLau"},"content":"                return false;"},{"lineNumber":247,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":248,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":249,"author":{"gitID":"WoodyLau"},"content":"            // state check"},{"lineNumber":250,"author":{"gitID":"WoodyLau"},"content":"            EditLeadDescriptor e \u003d (EditLeadDescriptor) other;"},{"lineNumber":251,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":252,"author":{"gitID":"WoodyLau"},"content":"            return getCompany().equals(e.getCompany())"},{"lineNumber":253,"author":{"gitID":"WoodyLau"},"content":"                    \u0026\u0026 getIndustry().equals(e.getIndustry())"},{"lineNumber":254,"author":{"gitID":"WoodyLau"},"content":"                    \u0026\u0026 getRating() \u003d\u003d e.getRating()"},{"lineNumber":255,"author":{"gitID":"WoodyLau"},"content":"                    \u0026\u0026 getTitle().equals(e.getTitle())"},{"lineNumber":256,"author":{"gitID":"WoodyLau"},"content":"                    \u0026\u0026 getWebsite().equals(e.getWebsite());"},{"lineNumber":257,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"WoodyLau"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":261,"author":{"gitID":"WoodyLau"},"content":"     * corresponding field value of the person."},{"lineNumber":262,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"WoodyLau"},"content":"    public static class EditContactDescriptor {"},{"lineNumber":264,"author":{"gitID":"WoodyLau"},"content":"        private Account company \u003d null;"},{"lineNumber":265,"author":{"gitID":"WoodyLau"},"content":"        private String department \u003d null;"},{"lineNumber":266,"author":{"gitID":"WoodyLau"},"content":"        private String title \u003d null;"},{"lineNumber":267,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":268,"author":{"gitID":"WoodyLau"},"content":"        public EditContactDescriptor() {}"},{"lineNumber":269,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":270,"author":{"gitID":"WoodyLau"},"content":"        /**"},{"lineNumber":271,"author":{"gitID":"WoodyLau"},"content":"         * Copy constructor."},{"lineNumber":272,"author":{"gitID":"WoodyLau"},"content":"         */"},{"lineNumber":273,"author":{"gitID":"WoodyLau"},"content":"        public EditContactDescriptor(EditContactDescriptor toCopy) {"},{"lineNumber":274,"author":{"gitID":"WoodyLau"},"content":"            setCompany(toCopy.company);"},{"lineNumber":275,"author":{"gitID":"WoodyLau"},"content":"            setDepartment(toCopy.department);"},{"lineNumber":276,"author":{"gitID":"WoodyLau"},"content":"            setTitle(toCopy.title);"},{"lineNumber":277,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":279,"author":{"gitID":"WoodyLau"},"content":"        /**"},{"lineNumber":280,"author":{"gitID":"WoodyLau"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":281,"author":{"gitID":"WoodyLau"},"content":"         */"},{"lineNumber":282,"author":{"gitID":"WoodyLau"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":283,"author":{"gitID":"WoodyLau"},"content":"            return CollectionUtil.isAnyNonNull(this.company, this.department, this.title);"},{"lineNumber":284,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":286,"author":{"gitID":"WoodyLau"},"content":"        public void setCompany(String company) {"},{"lineNumber":287,"author":{"gitID":"WoodyLau"},"content":"            this.company \u003d new Account(company);"},{"lineNumber":288,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":290,"author":{"gitID":"WoodyLau"},"content":"        public void setCompany(Account company) {"},{"lineNumber":291,"author":{"gitID":"WoodyLau"},"content":"            this.company \u003d company;"},{"lineNumber":292,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":294,"author":{"gitID":"WoodyLau"},"content":"        public Optional\u003cAccount\u003e getCompany() {"},{"lineNumber":295,"author":{"gitID":"WoodyLau"},"content":"            return Optional.ofNullable(company);"},{"lineNumber":296,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":298,"author":{"gitID":"WoodyLau"},"content":"        public void setDepartment(String department) {"},{"lineNumber":299,"author":{"gitID":"WoodyLau"},"content":"            this.department \u003d department;"},{"lineNumber":300,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":302,"author":{"gitID":"WoodyLau"},"content":"        public Optional\u003cString\u003e getDepartment() {"},{"lineNumber":303,"author":{"gitID":"WoodyLau"},"content":"            return Optional.ofNullable(department);"},{"lineNumber":304,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":306,"author":{"gitID":"WoodyLau"},"content":"        public void setTitle(String title) {"},{"lineNumber":307,"author":{"gitID":"WoodyLau"},"content":"            this.title \u003d title;"},{"lineNumber":308,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":309,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":310,"author":{"gitID":"WoodyLau"},"content":"        public Optional\u003cString\u003e getTitle() {"},{"lineNumber":311,"author":{"gitID":"WoodyLau"},"content":"            return Optional.ofNullable(title);"},{"lineNumber":312,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":314,"author":{"gitID":"WoodyLau"},"content":"        @Override"},{"lineNumber":315,"author":{"gitID":"WoodyLau"},"content":"        public boolean equals(Object other) {"},{"lineNumber":316,"author":{"gitID":"WoodyLau"},"content":"            // short circuit if same object"},{"lineNumber":317,"author":{"gitID":"WoodyLau"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":318,"author":{"gitID":"WoodyLau"},"content":"                return true;"},{"lineNumber":319,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":320,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":321,"author":{"gitID":"WoodyLau"},"content":"            // instanceof handles nulls"},{"lineNumber":322,"author":{"gitID":"WoodyLau"},"content":"            if (!(other instanceof EditContactDescriptor)) {"},{"lineNumber":323,"author":{"gitID":"WoodyLau"},"content":"                return false;"},{"lineNumber":324,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":325,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":326,"author":{"gitID":"WoodyLau"},"content":"            // state check"},{"lineNumber":327,"author":{"gitID":"WoodyLau"},"content":"            EditContactDescriptor e \u003d (EditContactDescriptor) other;"},{"lineNumber":328,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":329,"author":{"gitID":"WoodyLau"},"content":"            return getCompany().equals(e.getCompany())"},{"lineNumber":330,"author":{"gitID":"WoodyLau"},"content":"                    \u0026\u0026 getDepartment().equals(e.getDepartment())"},{"lineNumber":331,"author":{"gitID":"WoodyLau"},"content":"                    \u0026\u0026 getTitle().equals(e.getTitle());"},{"lineNumber":332,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":334}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"davidten"},"content":"            \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"davidten":1}},{"path":"src/main/java/seedu/address/model/person/exceptions/PersonWrongType.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":" * Signals that the operation is unable to act on given type of person"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"public class PersonWrongType extends Exception {}"}],"authorContributionMap":{"WoodyLau":3,"-":3}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"    protected Name name;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"    protected Phone phone;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"    protected Email email;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"    protected Address address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected Remark remark;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"    protected Type type;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"    protected UniqueTagList tags;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"        this.type \u003d null;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    protected Person() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.name \u003d null;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.phone \u003d null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.email \u003d null;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.address \u003d null;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.remark \u003d null;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList();"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        this.type \u003d null;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Remark getRemark() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return remark;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"    public Type getType() {"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        return type;"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\" Remark: \")"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(getRemark())"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":12,"-":112}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"Sheikh-Umar"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)"},{"lineNumber":22,"author":{"gitID":"Sheikh-Umar"},"content":"                            || StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword)"},{"lineNumber":23,"author":{"gitID":"Sheikh-Umar"},"content":"                            || StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sheikh-Umar":3,"-":30}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"     * Returns an unmodifiable view of the accounts list."},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"     * This list will not contain any duplicate accounts."},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"    ObservableList\u003cAccount\u003e getAccountList();"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":7,"-":24}},{"path":"src/main/java/seedu/address/model/person/Contact.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":" * Represents a Person in the address book."},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"public class Contact extends Person {"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"    private final Address address;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"    private final Remark remark;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"    private final Type type;"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"    private Account company \u003d null;"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"    private String department \u003d null;"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"    private String title \u003d null;"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"    private String convertedDate \u003d null;"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"     * Every field must be present and not null."},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    public Contact(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"        this.name \u003d name;"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"        this.phone \u003d phone;"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"        this.email \u003d email;"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"        this.address \u003d address;"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"        this.remark \u003d remark;"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"        this.type \u003d new Type(\"Contact\");"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"    public Name getName() {"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        return name;"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    public Phone getPhone() {"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"        return phone;"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"    public Email getEmail() {"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"        return email;"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"    public Address getAddress() {"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"        return address;"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"    public Remark getRemark() {"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"        return remark;"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"    public Type getType() {"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"        return type;"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"    public void setCompany(Account newCompany) {"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        this.company \u003d newCompany;"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":"    public void setCompany(String newCompany) {"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        this.company \u003d new Account(newCompany);"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":"    public void setDepartment(String newDepartment) {"},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        this.department \u003d newDepartment;"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"    public void setTitle(String newTitle) {"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"        this.title \u003d newTitle;"},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"    public void setConvertedDate(String newConvertedDate) {"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"        this.convertedDate \u003d newConvertedDate;"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"    public Account getCompany() {"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"        return this.company;"},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"    public String getDepartment() {"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"        return this.department;"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"    public String getTitle() {"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":"        return this.title;"},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"    public String getConvertedDate() {"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"        return this.convertedDate;"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"     * if modification is attempted."},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"            return true;"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"        if (!(other instanceof Contact)) {"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"            return false;"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"        Contact otherPerson \u003d (Contact) other;"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"    public int hashCode() {"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":"    public String toString() {"},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"        builder.append(getName())"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Type: \")"},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":"                .append(getType())"},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Phone: \")"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":"                .append(getPhone())"},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Email: \")"},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":"                .append(getEmail())"},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Address: \")"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":"                .append(getAddress())"},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Tags: \");"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":"        return builder.toString();"},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":157}},{"path":"src/main/java/seedu/address/model/person/Lead.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"public class Lead extends Person {"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"    private final Remark remark;"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"    private final Type type;"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"    private String company \u003d null;"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"    private String industry \u003d null;"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"    private int rating \u003d 0;"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"    private String title \u003d null;"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"    private String website \u003d null;"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"     * Every field must be present and not null."},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    public Lead(Name name, Phone phone, Email email, Address address, Remark remark, Set\u003cTag\u003e tags) {"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"        this.name \u003d name;"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"        this.phone \u003d phone;"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"        this.email \u003d email;"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"        this.address \u003d address;"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"        this.remark \u003d remark;"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"        this.type \u003d new Type(\"Lead\");"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"    public Name getName() {"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        return name;"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    public Phone getPhone() {"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"        return phone;"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"    public Email getEmail() {"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"        return email;"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"    public Address getAddress() {"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"        return address;"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"    public Remark getRemark() {"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"        return remark;"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"    public Type getType() {"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"        return type;"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"    public void setCompany(String newCompany) {"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        this.company \u003d newCompany;"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":"    public void setIndustry(String newIndustry) {"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        this.industry \u003d newIndustry;"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":"    public void setRating(int newRating) {"},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        if (newRating \u003e 0 \u0026\u0026 newRating \u003c 6) {"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"            this.rating \u003d newRating;"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"    public void setTitle(String title) {"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"        this.title \u003d title;"},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"    public void setWebsite(String website) {"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"        this.website \u003d website;"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"    public String getCompany() {"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"        return this.company;"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"    public String getIndustry() {"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"        return this.industry;"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"    public int getRating() {"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":"        return this.rating;"},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":"    public String getTitle() {"},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":"        return this.title;"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"    public String getWebsite() {"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"        return this.website;"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"     * if modification is attempted."},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"            return true;"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"        if (!(other instanceof Lead)) {"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"            return false;"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"        Lead otherPerson \u003d (Lead) other;"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":"    public int hashCode() {"},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":"    public String toString() {"},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":"        builder.append(getName())"},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Type: \")"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":"                .append(getType())"},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Phone: \")"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":"                .append(getPhone())"},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Email: \")"},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"                .append(getEmail())"},{"lineNumber":156,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Address: \")"},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"                .append(getAddress())"},{"lineNumber":158,"author":{"gitID":"WoodyLau"},"content":"                .append(\" Tags: \");"},{"lineNumber":159,"author":{"gitID":"WoodyLau"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":160,"author":{"gitID":"WoodyLau"},"content":"        return builder.toString();"},{"lineNumber":161,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":162}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.UniqueAccountList;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"    private final UniqueAccountList accounts;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"        accounts \u003d new UniqueAccountList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"    public void setAccounts(Set\u003cAccount\u003e accounts) {"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"        this.accounts.setAccounts(accounts);"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        setAccounts(new HashSet\u003c\u003e(newData.getAccountList()));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":104,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Sorts all persons by name in alphabetical order in CRM."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void sortPersons() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        persons.sort();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":"        if (syncedEditedPerson instanceof Contact \u0026\u0026 ((Contact) syncedEditedPerson).getCompany() !\u003d null) {"},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"            syncWithMasterAccountList((Contact) syncedEditedPerson);"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":"    public void convertPerson(Lead target, Contact editedPerson)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":"        if (((Contact) syncedEditedPerson).getCompany() !\u003d null) {"},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":"            syncWithMasterAccountList((Contact) syncedEditedPerson);"},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":159,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":177,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":179,"author":{"gitID":"WoodyLau"},"content":"        if (person instanceof Lead) {"},{"lineNumber":180,"author":{"gitID":"WoodyLau"},"content":"            Lead lead \u003d new Lead("},{"lineNumber":181,"author":{"gitID":"-"},"content":"                    person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                    person.getRemark(), correctTagReferences);"},{"lineNumber":183,"author":{"gitID":"WoodyLau"},"content":"            lead.setCompany(((Lead) person).getCompany());"},{"lineNumber":184,"author":{"gitID":"WoodyLau"},"content":"            lead.setIndustry(((Lead) person).getIndustry());"},{"lineNumber":185,"author":{"gitID":"WoodyLau"},"content":"            lead.setRating(((Lead) person).getRating());"},{"lineNumber":186,"author":{"gitID":"WoodyLau"},"content":"            lead.setTitle(((Lead) person).getTitle());"},{"lineNumber":187,"author":{"gitID":"WoodyLau"},"content":"            lead.setWebsite(((Lead) person).getWebsite());"},{"lineNumber":188,"author":{"gitID":"WoodyLau"},"content":"            return lead;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":190,"author":{"gitID":"WoodyLau"},"content":"            Contact contact \u003d new Contact("},{"lineNumber":191,"author":{"gitID":"-"},"content":"                    person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                    person.getRemark(), correctTagReferences);"},{"lineNumber":193,"author":{"gitID":"WoodyLau"},"content":"            contact.setCompany(((Contact) person).getCompany());"},{"lineNumber":194,"author":{"gitID":"WoodyLau"},"content":"            contact.setDepartment(((Contact) person).getDepartment());"},{"lineNumber":195,"author":{"gitID":"WoodyLau"},"content":"            contact.setTitle(((Contact) person).getTitle());"},{"lineNumber":196,"author":{"gitID":"WoodyLau"},"content":"            contact.setConvertedDate(((Contact) person).getConvertedDate());"},{"lineNumber":197,"author":{"gitID":"WoodyLau"},"content":"            return contact;"},{"lineNumber":198,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":202,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"WoodyLau"},"content":"     *  Updates the master account list to include account in {@code person} that is not in the list."},{"lineNumber":204,"author":{"gitID":"WoodyLau"},"content":"     *  Updates the person to point to an Account object in the master list."},{"lineNumber":205,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"WoodyLau"},"content":"    private void syncWithMasterAccountList(Contact person) {"},{"lineNumber":207,"author":{"gitID":"WoodyLau"},"content":"        final UniqueAccountList personAccounts \u003d new UniqueAccountList(person.getCompany());"},{"lineNumber":208,"author":{"gitID":"WoodyLau"},"content":"        accounts.mergeFrom(personAccounts);"},{"lineNumber":209,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":210,"author":{"gitID":"WoodyLau"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":211,"author":{"gitID":"WoodyLau"},"content":"        // used for checking person tag references"},{"lineNumber":212,"author":{"gitID":"WoodyLau"},"content":"        final Map\u003cAccount, Account\u003e masterAccountObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":213,"author":{"gitID":"WoodyLau"},"content":"        accounts.forEach(account -\u003e masterAccountObjects.put(account, account));"},{"lineNumber":214,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":215,"author":{"gitID":"WoodyLau"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":216,"author":{"gitID":"WoodyLau"},"content":"        final Account correctAccountReferences \u003d masterAccountObjects.get(person.getCompany());"},{"lineNumber":217,"author":{"gitID":"WoodyLau"},"content":"        person.setCompany(correctAccountReferences);"},{"lineNumber":218,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"WoodyLau"},"content":"    //@@author"},{"lineNumber":220,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"WoodyLau"},"content":"    //// account-level operations"},{"lineNumber":240,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":241,"author":{"gitID":"WoodyLau"},"content":"    public void addAccount(Account a) throws UniqueAccountList.DuplicateAccountException {"},{"lineNumber":242,"author":{"gitID":"WoodyLau"},"content":"        accounts.add(a);"},{"lineNumber":243,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":249,"author":{"gitID":"WoodyLau"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":250,"author":{"gitID":"WoodyLau"},"content":"                + accounts.asObservableList().size() +  \" accounts\";"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":265,"author":{"gitID":"WoodyLau"},"content":"    public ObservableList\u003cAccount\u003e getAccountList() {"},{"lineNumber":266,"author":{"gitID":"WoodyLau"},"content":"        return accounts.asObservableList();"},{"lineNumber":267,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":67,"-":215}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.InputThemeEqualsCurrentThemeException;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private UserPrefs userPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.userPrefs \u003d userPrefs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"    //@@author WoodyLau"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"    public void convertPerson(Lead lead, Contact contact)"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"        requireAllNonNull(lead, contact);"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"        addressBook.convertPerson(lead, contact);"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"        indicateAddressBookChanged();"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void sortAllPersons() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        addressBook.sortPersons();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"content":"    //@@author A0155428B-unused"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    //these methods were used in the implementation of change theme command in v1.4"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void updateTheme(String theme) throws InputThemeEqualsCurrentThemeException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (theme.equals(\"light\")) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            if (this.userPrefs.getMainWindowFile().equals(\"MainWindowLight.fxml\")) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                throw new InputThemeEqualsCurrentThemeException();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            this.userPrefs.setMainWindowFilePath(\"MainWindowLight.fxml\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            if (this.userPrefs.getMainWindowFile().equals(\"MainWindow.fxml\")) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                throw new InputThemeEqualsCurrentThemeException();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            this.userPrefs.setMainWindowFilePath(\"MainWindow.fxml\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public String getThemeFilePath() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return this.userPrefs.getGuiSettings().getThemeFilePath();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"WoodyLau":12,"-":148}},{"path":"src/main/java/seedu/address/logic/commands/AccountCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOUNT;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"public class AccountCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"    public static final String COMMAND_WORD \u003d \"account\";"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an Account (company) to the Contact indicated \""},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"            + \"by the index number used in the last Leads-Contacts listing. \""},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"            + \"Existing Account will be overwritten by the input.\\n\""},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"            + \"The parameters are: INDEX (must be a positive integer) \""},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"            + PREFIX_ACCOUNT + \"ACCOUNT...\\n\""},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_ACCOUNT + \"Macrosoft Inc\";"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Added Account to Contact: %1$s\";"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"An Account must be provided.\";"},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This Contact already exists in the CRM Book.\";"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_NOT_CONTACT \u003d \"Provided person is not a Contact.\";"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"    private final Index index;"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"    private final AccountDescriptor accountDescriptor;"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"    private Person personToEdit;"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"     * @param accountDescriptor details for editing Contacts"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"    public AccountCommand(Index index,"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"                          AccountDescriptor accountDescriptor) {"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(index);"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"        CollectionUtil.isAnyNonNull(accountDescriptor);"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"        this.index \u003d index;"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":"        this.accountDescriptor \u003d new AccountDescriptor(accountDescriptor);"},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"        if (!accountDescriptor.isAnyFieldEdited()) {"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"        if (!(personToEdit instanceof Contact)) {"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(MESSAGE_NOT_CONTACT);"},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"        Contact editedPerson \u003d (Contact) personToEdit;"},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"        editedPerson.setCompany(accountDescriptor.getAccount());"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"            model.updatePerson(editedPerson, editedPerson);"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, personToEdit));"},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"        // short circuit if same object"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"            return true;"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"        // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"        if (!(other instanceof AccountCommand)) {"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"            return false;"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"        // state check"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":"        AccountCommand e \u003d (AccountCommand) other;"},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"        return index.equals(e.index)"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 accountDescriptor.equals(e.accountDescriptor)"},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"     * Stores the Account to edit the person with. It will replace the existing Account of the person."},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"    public static class AccountDescriptor {"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"        private Account account \u003d null;"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"        public AccountDescriptor() {}"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"        /**"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"         * Copy constructor."},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"         */"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"        public AccountDescriptor(AccountDescriptor toCopy) {"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"            setAccount(toCopy.account);"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"        /**"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"            return CollectionUtil.isAnyNonNull(this.account);"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"        public void setAccount(String account) {"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"            this.account \u003d new Account(account);"},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":"        public void setAccount(Account account) {"},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"            this.account \u003d account;"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"        public Account getAccount() {"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":"            return account;"},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"        public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":"            // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"                return true;"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":"            // instanceof handles nulls"},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"            if (!(other instanceof AccountDescriptor)) {"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":"                return false;"},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":"            // state check"},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"            AccountDescriptor e \u003d (AccountDescriptor) other;"},{"lineNumber":156,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":157,"author":{"gitID":"WoodyLau"},"content":"            return getAccount().equals(e.getAccount());"},{"lineNumber":158,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":160}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.exception.InputThemeEqualsCurrentThemeException;"},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Contact;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.model.person.Lead;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Sorts all persons */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void sortAllPersons();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"     * Replaces the given person {@code lead} with {@code contact}."},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"    public void convertPerson(Lead lead, Contact contact)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    void updateTheme(String theme) throws InputThemeEqualsCurrentThemeException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    String getThemeFilePath();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"WoodyLau":8,"-":58}},{"path":"src/main/java/seedu/address/model/account/Account.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":" * Represents an Account in the address book."},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidAccountName(String)}"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"public class Account {"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":"    public static final String MESSAGE_ACCOUNT_CONSTRAINTS \u003d \"Account names should be alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"    public static final String ACCOUNT_VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ]+\";"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":"    public final String accountName;"},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":"     * @param accountName A valid tag name."},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":"    public Account(String accountName) {"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(accountName);"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":"        checkArgument(isValidAccountName(accountName), MESSAGE_ACCOUNT_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"        this.accountName \u003d accountName;"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":"    public static boolean isValidAccountName(String test) {"},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"        return test.matches(ACCOUNT_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"                || (other instanceof Account // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":"                \u0026\u0026 this.accountName.equals(((Account) other).accountName)); // state check"},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"    public int hashCode() {"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"        return accountName.hashCode();"},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"     * Format state as text for viewing."},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"        return accountName;"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":55}},{"path":"src/main/java/seedu/address/model/account/UniqueAccountList.java","lines":[{"lineNumber":1,"author":{"gitID":"WoodyLau"},"content":"//@@author WoodyLau"},{"lineNumber":2,"author":{"gitID":"WoodyLau"},"content":"package seedu.address.model.account;"},{"lineNumber":3,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":4,"author":{"gitID":"WoodyLau"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"WoodyLau"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":7,"author":{"gitID":"WoodyLau"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"WoodyLau"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"WoodyLau"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":11,"author":{"gitID":"WoodyLau"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"WoodyLau"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":14,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":15,"author":{"gitID":"WoodyLau"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":17,"author":{"gitID":"WoodyLau"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"WoodyLau"},"content":" * A list of accounts that enforces no nulls and uniqueness between its elements."},{"lineNumber":19,"author":{"gitID":"WoodyLau"},"content":" *"},{"lineNumber":20,"author":{"gitID":"WoodyLau"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":21,"author":{"gitID":"WoodyLau"},"content":" *"},{"lineNumber":22,"author":{"gitID":"WoodyLau"},"content":" * @see Account#equals(Object)"},{"lineNumber":23,"author":{"gitID":"WoodyLau"},"content":" */"},{"lineNumber":24,"author":{"gitID":"WoodyLau"},"content":"public class UniqueAccountList implements Iterable\u003cAccount\u003e {"},{"lineNumber":25,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":26,"author":{"gitID":"WoodyLau"},"content":"    private final ObservableList\u003cAccount\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":28,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"WoodyLau"},"content":"     * Constructs empty AccountList."},{"lineNumber":30,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"WoodyLau"},"content":"    public UniqueAccountList() {}"},{"lineNumber":32,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":33,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"WoodyLau"},"content":"     * Creates a UniqueAccountList using given account."},{"lineNumber":35,"author":{"gitID":"WoodyLau"},"content":"     * Enforces no nulls."},{"lineNumber":36,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"WoodyLau"},"content":"    public UniqueAccountList(Set\u003cAccount\u003e accounts) {"},{"lineNumber":38,"author":{"gitID":"WoodyLau"},"content":"        requireAllNonNull(accounts);"},{"lineNumber":39,"author":{"gitID":"WoodyLau"},"content":"        internalList.addAll(accounts);"},{"lineNumber":40,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":41,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":42,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":44,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"WoodyLau"},"content":"     * Creates a UniqueAccountList using given account."},{"lineNumber":46,"author":{"gitID":"WoodyLau"},"content":"     * Enforces no nulls."},{"lineNumber":47,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"WoodyLau"},"content":"    public UniqueAccountList(Account account) {"},{"lineNumber":49,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(account);"},{"lineNumber":50,"author":{"gitID":"WoodyLau"},"content":"        internalList.add(account);"},{"lineNumber":51,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":52,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":53,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":55,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"WoodyLau"},"content":"     * Returns all accounts in this list as a Set."},{"lineNumber":57,"author":{"gitID":"WoodyLau"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":58,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"WoodyLau"},"content":"    public Set\u003cAccount\u003e toSet() {"},{"lineNumber":60,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":61,"author":{"gitID":"WoodyLau"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":62,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":64,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"WoodyLau"},"content":"     * Replaces the Accounts in this list with those in the argument account list."},{"lineNumber":66,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"WoodyLau"},"content":"    public void setAccounts(Set\u003cAccount\u003e accounts) {"},{"lineNumber":68,"author":{"gitID":"WoodyLau"},"content":"        requireAllNonNull(accounts);"},{"lineNumber":69,"author":{"gitID":"WoodyLau"},"content":"        internalList.setAll(accounts);"},{"lineNumber":70,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":73,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"WoodyLau"},"content":"     * Ensures every account in the argument list exists in this object."},{"lineNumber":75,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"WoodyLau"},"content":"    public void mergeFrom(UniqueAccountList from) {"},{"lineNumber":77,"author":{"gitID":"WoodyLau"},"content":"        final Set\u003cAccount\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":78,"author":{"gitID":"WoodyLau"},"content":"        from.internalList.stream()"},{"lineNumber":79,"author":{"gitID":"WoodyLau"},"content":"                .filter(account -\u003e !alreadyInside.contains(account))"},{"lineNumber":80,"author":{"gitID":"WoodyLau"},"content":"                .forEach(internalList::add);"},{"lineNumber":81,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":82,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":83,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":85,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"WoodyLau"},"content":"     * Returns true if the list contains an equivalent Account as the given argument."},{"lineNumber":87,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"WoodyLau"},"content":"    public boolean contains(Account toCheck) {"},{"lineNumber":89,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(toCheck);"},{"lineNumber":90,"author":{"gitID":"WoodyLau"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":91,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":93,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"WoodyLau"},"content":"     * Adds a Account to the list."},{"lineNumber":95,"author":{"gitID":"WoodyLau"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"WoodyLau"},"content":"     * @throws DuplicateAccountException if the Account to add is a duplicate of an existing Account in the list."},{"lineNumber":97,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"WoodyLau"},"content":"    public void add(Account toAdd) throws DuplicateAccountException {"},{"lineNumber":99,"author":{"gitID":"WoodyLau"},"content":"        requireNonNull(toAdd);"},{"lineNumber":100,"author":{"gitID":"WoodyLau"},"content":"        if (contains(toAdd)) {"},{"lineNumber":101,"author":{"gitID":"WoodyLau"},"content":"            throw new DuplicateAccountException();"},{"lineNumber":102,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"WoodyLau"},"content":"        internalList.add(toAdd);"},{"lineNumber":104,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":105,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":108,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"WoodyLau"},"content":"    public Iterator\u003cAccount\u003e iterator() {"},{"lineNumber":110,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":111,"author":{"gitID":"WoodyLau"},"content":"        return internalList.iterator();"},{"lineNumber":112,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":114,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"WoodyLau"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":116,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"WoodyLau"},"content":"    public ObservableList\u003cAccount\u003e asObservableList() {"},{"lineNumber":118,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":119,"author":{"gitID":"WoodyLau"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":120,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":122,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"WoodyLau"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":125,"author":{"gitID":"WoodyLau"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"WoodyLau"},"content":"                || (other instanceof UniqueAccountList // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"WoodyLau"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueAccountList) other).internalList));"},{"lineNumber":128,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":130,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"WoodyLau"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":132,"author":{"gitID":"WoodyLau"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":133,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"WoodyLau"},"content":"    public boolean equalsOrderInsensitive(UniqueAccountList other) {"},{"lineNumber":135,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":136,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":137,"author":{"gitID":"WoodyLau"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":138,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":140,"author":{"gitID":"WoodyLau"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"WoodyLau"},"content":"    public int hashCode() {"},{"lineNumber":142,"author":{"gitID":"WoodyLau"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":143,"author":{"gitID":"WoodyLau"},"content":"        return internalList.hashCode();"},{"lineNumber":144,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":146,"author":{"gitID":"WoodyLau"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"WoodyLau"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":148,"author":{"gitID":"WoodyLau"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"WoodyLau"},"content":"    public static class DuplicateAccountException extends DuplicateDataException {"},{"lineNumber":150,"author":{"gitID":"WoodyLau"},"content":"        protected DuplicateAccountException() {"},{"lineNumber":151,"author":{"gitID":"WoodyLau"},"content":"            super(\"Operation would result in duplicate accounts\");"},{"lineNumber":152,"author":{"gitID":"WoodyLau"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"WoodyLau"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"WoodyLau"},"content":""},{"lineNumber":155,"author":{"gitID":"WoodyLau"},"content":"}"}],"authorContributionMap":{"WoodyLau":155}}]
