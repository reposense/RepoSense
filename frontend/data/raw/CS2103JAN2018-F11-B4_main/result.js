var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F11-B4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"* *Email us* : You can also reach us at `wu.hao@u.nus.edu`"}],"authorContributionMap":{"ZhangYijiong":1,"Wuhao-ooo":1,"-":4}},{"path":"docs/team/zhangzequn.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"\u003d Zhang Zequn - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d PROJECT: Delivery"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"---"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"Delivery is a desktop application designed for restaurants who want to maintain their own system to keep track customers’ orders. It is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"* *Major enhancement*: added *the order feature* for AddCommand and *checked whether the order is available*"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"** What it does: allows the user to key in the order made by customers, and check whether the ordered dish is available in the restaurants\u0027 menu."},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"** Justification: This feature enables the main functionality of the Delivery app, because the app is serving the purpose to keep track customers\u0027 orders. By checking whether the ordered food is available in the menu, the user can decide whether customers can order the particular dish."},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"** Highlights: Adding the order feature requires updates for AddCommand and EditCommand as well as all the relevant methods and data structure involved. Enabling the checking process needs to main a local menu storage for all the dishes available. Maintaining the dishes inside the menu by commands will be available in upcoming version 2.0."},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"* *Minor enhancement*: Add Optional Halal/Non-halal and Vegetarian/Non-vegetarian features."},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"** What it does: allows the user to key in the optional Halal/Non-halal and Vegetarian/Non-vegetarian features. If the user did not key in values for these two features, the default value is Non-halal and Non-vegetarian."},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"** Justification: This allows the restaurants to have a clear view about whether the customer is halal and vegetarian, hence can better prepare for the food."},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B4/main/blob/master/collated/functional/ZacZequn.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B4/main/blob/master/collated/test/ZacZequn.md[Test code]]"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"* *Other contributions*:"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"** Project management:"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"*** Managed releases `v1.3` (1 releases) on GitHub"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"** Enhancements to existing features:"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"*** Add colours to different tags, such that same tags will be assigned the same colours which makes the differentiation of tags clearer. (Pull requests https://github.com/CS2103JAN2018-F11-B4/main/commit/69a6fb5ceccc27452f8f3c698aa2671fb9a61c02[#4])"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"*** Wrote additional tests for added features e.g. Halal and Vegetarian features and sample Menu (Pull requests https://github.com/CS2103JAN2018-F11-B4/main/commit/03012e1ab2bcd39acf06190b2ff3f6b4a7267863[#29], https://github.com/CS2103JAN2018-F11-B4/main/pull/163/commits/9cfe128ca73eaf805f49fcfa497a49414b54250c[#163])"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"*** Update the UI display e.g. App icon and name, displayed features (Pull requests https://github.com/CS2103JAN2018-F11-B4/main/pull/157/commits/5334c5e73e00ef064d31381a2ca849d50e86572a[#157], https://github.com/CS2103JAN2018-F11-B4/main/pull/157/commits/208ed78e1126a127be4099e3cd9e549e04581992[#157], https://github.com/CS2103JAN2018-F11-B4/main/pull/155/commits/182093a88d148feee9a62b591c2af10bc5ddf5f4[#155], https://github.com/CS2103JAN2018-F11-B4/main/pull/162/commits/bda036e3eedfec192e85237646f9ca26cfc2b496[#162])"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"*** Update relevant parts for User Guide and Developer Guide"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"*** Contributed to forum discussions (examples:  https://nus-cs2103-ay1718s2.slack.com/archives/D9M8Y20Q2/p1520616066000038[1])"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T16-B1/main/issues/87[1], https://github.com/CS2103JAN2018-T16-B1/main/issues/80[2], https://github.com/CS2103JAN2018-T16-B1/main/issues/73[3]) +"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"(These issues were created by me, but it shows that my team mate created them on gitHub. I think this could because that I was re-assigned to this group during the mock PE.)"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"include::../UserGuide.adoc[tag\u003dadd]"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"include::../UserGuide.adoc[tag\u003dmenu]"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"include::../DeveloperGuide.adoc[tag\u003dmenu]"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":""}],"authorContributionMap":{"ZacZequn":48,"-":15}},{"path":"docs/team/wuhao.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d Wu Hao - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d PROJECT: Delivery"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"---"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"Delivery is targeted at restaurants, especially for the small-medium ones, which want to have a system to keep track customers’ orders and delivery."},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"A restaurant can have hundreds of orders a day and it’s extremely troublesome for the restaurant stuff to manually write down all customer information (including their names, contact numbers, addresses, orders and expected time of delivery etc.) and keep track on it."},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"Hence, they need a software to store all the information mentioned above in an organised manner."},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery is for those who *prefer to use a desktop app for managing orders*. More importantly, Delivery is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Delivery can manage the orders faster than traditional GUI apps. It is written in Java, and has about 10 kLoC."},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"* *Major enhancement*: added *the ability to keep counting the number of customers\u0027 past orders and store in a local file*"},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"** What it does: Every time an order is placed, the customer is identified by his/her phone number and the number of his/her past orders is counted."},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"** What can it do in the future: When a customer has accumulated 3/5/7/9 orders (the numbers can be set by users), the user will be notified and discount will be applied to the current order."},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"** Justification: This feature improves the product significantly because users (restaurant owners) will be able to identify loyal customers and give them discounts. This feature will also attract customers to the restaurant."},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"** Highlights: This enhancement affects existing \"add\" command and commands to be added in future. It requires extensions of Model, Storage and Events components and interaction with local files."},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"* *Minor enhancement*: added an alias to each command."},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"** What it does: Added a short cut (e.g. \"a\" for \"add\", \"d\" for \"delete\" etc) for each command."},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"** Justification: This feature improves the speed and efficiency to key in the input information especially for those experienced users who are familiar with the commands."},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B4/main/blob/master/collated/functional/Wuhao-ooo.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B4/main/blob/master/collated/test/Wuhao-ooo.md[Test code]]"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"* *Other contributions*:"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"** Project management:"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"*** Managed releases `v1.4` - `v1.5rc` (2 releases) on GitHub"},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":"** Enhancements to existing features:"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"*** Added a light GUI color theme (Pull requests https://github.com/CS2103JAN2018-F11-B4/main/commit/5ff950492092a708d9526a1dc0feae9de01b09ef[#21])"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"** Documentation:"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"*** Consistently updated contents of the User Guide and the Developer Guide"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"** Community:"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T16-B1/main/issues/78[1], https://github.com/CS2103JAN2018-T16-B1/main/issues/83[2], https://github.com/CS2103JAN2018-T16-B1/main/issues/64[3])"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"** Tools:"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"*** Deployed Travis and enabled auto-publishing to team repo"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Wuhao-ooo"},"content":"include::../UserGuide.adoc[tag\u003dcount]"},{"lineNumber":55,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":56,"author":{"gitID":"Wuhao-ooo"},"content":"include::../UserGuide.adoc[tag\u003dquerycount]"},{"lineNumber":57,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":58,"author":{"gitID":"Wuhao-ooo"},"content":"include::../UserGuide.adoc[tag\u003didentify]"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":64,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Wuhao-ooo"},"content":"include::../DeveloperGuide.adoc[tag\u003dcount]"},{"lineNumber":67,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":68,"author":{"gitID":"Wuhao-ooo"},"content":"include::../DeveloperGuide.adoc[tag\u003dtestcounting]"}],"authorContributionMap":{"ZacZequn":3,"Wuhao-ooo":50,"-":15}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery was developed by the https://github.com/orgs/CS2103JAN2018-F11-B4/teams/developers[CS2103-F11-B4] team. +"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":"The initial source code of this project was based on the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Wu Hao"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"image::wuhao-ooo.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"{empty}[https://github.com/Wuhao-ooo[github]][https://github.com/CS2103JAN2018-F11-B4/main/blob/master/docs/team/wuhao.adoc[portfolio]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"Roles: +"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"- Team lead +"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"- Deliverables and deadlines +"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"- Scheduling and tracking +"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"- Git expert +"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"Responsibilities: UI, Model"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Zhang Yijiong"},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"image::zhangyijiong.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"{empty}[https://github.com/ZhangYijiong[github]][https://github.com/CS2103JAN2018-F11-B4/main/blob/master/docs/team/zhangYijiong.adoc[portfolio]]"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"Roles: +"},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"- Testing +"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"- Code quality +"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"Responsibilities: Storage, Commons"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Zhang Zequn"},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":"image::zaczequn.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"{empty}[https://github.com/ZacZequn[github]][https://github.com/CS2103JAN2018-F11-B4/main/blob/master/docs/team/zhangzequn.adoc[portfolio]]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"Roles: +"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"- Documentation +"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"- Implementation and Integration +"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"- Intellij expert +"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"Responsibilities: Logic, Storage"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"ZhangYijiong":1,"ZacZequn":3,"Wuhao-ooo":23,"-":19}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d Delivery"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"https://travis-ci.org/CS2103JAN2018-F11-B4/main[image:https://travis-ci.org/CS2103JAN2018-F11-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"* This is a desktop Food Ordering application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface). It is designed to be user-friendly and easy-to-master."},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"* It is a Java application targeted for small-medium restaurants who wish to have an independent food-ordering and delivery-managing system."},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"* It is written in OOP fashion. The code base is reasonably well-written and is significantly big (around 6 KLoC)"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"* Contains support for Build Automation using Gradle and for Continuous Integration using Travis CI."},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":29,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":30,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Wuhao-ooo":6,"-":26}},{"path":"docs/team/zhangYijiong.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"\u003d Zhang Yijiong - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d PROJECT: Delivery"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"---"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"Delivery is targeted at restaurants, especially for the small-medium ones, which want to have a system to keep track customers’ orders and delivery."},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"A restaurant can have hundreds of orders a day and it’s extremely troublesome for the restaurant stuff to manually write down all customer information (including their names, contact numbers, addresses, orders and expected time of delivery etc.) and keep track on it."},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"Hence, they need a software to store all the information mentioned above in an organised manner."},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery is for those who *prefer to use a desktop app for managing orders*. More importantly, Delivery is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Delivery can manage the orders faster than traditional GUI apps. It is written in Java, and has about 10 kLoC."},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"* *Major enhancement*: added *an separate order processing queue to process order* including processOrder,"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"processNextOrder, processMoreOrder, completeOneOrder, completeMoreOrder and tag commands."},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"** What it does: User is able to input orders from order book into the processing queue, indicating that the order is"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"being processed(cooking)."},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"** What can it do in the future: When an order is completed from the queue, the total price of the order could automatically"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"be added into the daily revenue, for additional accounting purposes."},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"** Justification: This feature improves the product significantly, as firstly it separates the recording and processing of orders."},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"When an order has been cooked, it is removed from the processing queue, but still remains in order book, in case"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"there is any future usage for reference. Secondly, the owner can have a clearer idea about what is the status of"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"his kitchens are doing, so that he can manage them more efficiently."},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"** Highlights: This enhancement does not affect commands such as \"add\", \"delete\" or others on the order book."},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"* *Minor enhancement*: added an path feature."},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"** What is does: Show the path from user(restaurants owners)\u0027s address to the customer\u0027s address. As a result,"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"user can roughly estimate how long does it take to deliver the food."},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"** Justification: The ability to estimate the delivery timing is crucial as the user would be able to determine whether to take the order."},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"* *Minor enhancement*: added an inner ordering for person(Order) object in UniquePersonList(Order book)."},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"** What is does: When an order is labelled with different tag, its position in the order book would change."},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"For instance, the order labelled \u0027Cooked\u0027 would jump to the front of the list to remind restaurant owner to quickly"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"send out delivery man. Another example would be that orders labelled with \u0027Delivered\u0027 would sink to the"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"bottom of the list so that the owner would not to worry about them."},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"** Justification: If there is no such implementation, the new orders would always be below the older orders and"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"it might be very troublesome to scroll down to see them, especially when the number of orders gets bigger."},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"Besides, the different priority for order in different status can improve restaurants\u0027 efficiency."},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B4/main/blob/master/collated/functional/ZhangYijiong.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B4/main/blob/master/collated/test/ZhangYijiong.md[Test code]]"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"* *Other contributions*:"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"** Enhancements to existing features:"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"*** Modify select command to show the address of the order on Google Map (Pull requests https://github.com/CS2103JAN2018-F11-B4/main/commit/eed0e01164840261c1dff085b4205956e77913a8[#30])"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"** Small Enhancement"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"*** Added a load web page function which loads web page in the browser panel."},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"** Documentation:"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"*** Updated contents of the User Guide and the Developer Guide frequently."},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"** Community:"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-F09-B2/main/issues/130[1] https://github.com/CS2103JAN2018-F09-B2/main/issues/128[2] https://github.com/CS2103JAN2018-F09-B2/main/issues/123[3] )"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"** Tools:"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"*** Deployed Travis to own repo"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"|\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"include::../UserGuide.adoc[tag\u003dProcessingQueue]"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":74,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"include::../DeveloperGuide.adoc[tag\u003dProcessingQueue]"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"include::../DeveloperGuide.adoc[tag\u003dPath]"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":52,"ZacZequn":3,"Wuhao-ooo":16,"-":7}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d Delivery - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B4/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"By: `Team F11-B4`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"Delivery is targeted at restaurants, especially for the small-medium ones, which want to have a system to keep track customers’ orders and delivery."},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"A restaurant can have hundreds of orders a day and it’s extremely troublesome for the restaurant stuff to manually write down all customer information (including their names, contact numbers, addresses, orders and expected time of delivery etc.) and keep track on it."},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"Hence, they need a software to store all the information mentioned above in an organised manner."},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery is for those who *prefer to use a desktop app for managing orders*. More importantly, Delivery is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Delivery can manage the orders faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":".  Download the latest `delivery.jar` link:{repoURL}/releases[here]."},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":".  Copy the file to the folder you want to use as the home folder for the database of customers\u0027 personal particulars."},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"* *`list`* : lists all orders"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"* **`add`**`n/John Doe p/98765432 a/John street, block 123, #01-01 f/Chicken Rice` : adds an order of chicken rice from customer `John Doe` to the queue."},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"* **`process`**`3` : process the 3rd order shown in the current list and add it to the processing queue"},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Wuhao-ooo"},"content":"* Each command has an alias as the shortcut for advanced users to execute commands faster. +"},{"lineNumber":59,"author":{"gitID":"Wuhao-ooo"},"content":"   (e.g. for the \"add\" command, you can either type \"add\" or \"a\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"* Items in square brackets are optional e.g `n/NAME [h/HALAL]` can be used as `n/John Doe h/Halal` or as `n/John Doe`."},{"lineNumber":62,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":63,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help: `help`"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"If you want to find out all the features, or would like to know how to do a certain command, you can click on the help menu button. You can also enter the command help to access the help window. +"},{"lineNumber":69,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `h` +"},{"lineNumber":70,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Order book(queue): left window in main window"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"Order book is for recording the orders received."},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"* In the following sections commands are classified into none, order book or processing queue (bracket following"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"command name in title)."},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"* Commands for order book would be based on the order book. Commands not labelled would affect both."},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Processing Queue : right window in main window"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"Processing Queue represents the restaurant\u0027s ability to process orders, for instance:number of chefs or number of"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"kitchens. As such, the would be a limit on how many orders can be processed(cooking) at the same time."},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"* In the following sections commands are classified into none, order book or processing queue (bracket"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"following command name in title)."},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"* Commands for processing queue would be based on the processing queue. Commands not labelled would affect both."},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Browser Window : middle window in main window"},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"To serve as web browser to access certain web pages, such as google search page or google map page."},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":97,"author":{"gitID":"Wuhao-ooo"},"content":"// tag::add[]"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Adding an order (order book): `add`"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"Adds an order to the order book, which keeps track all the orders received+"},{"lineNumber":101,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `a` +"},{"lineNumber":102,"author":{"gitID":"ZacZequn"},"content":"Format: `add n/NAME p/PHONE_NUMBER a/ADDRESS f/FOOD_ORDER [h/HALAL] [v/VEGETARIAN] [t/TAG]...`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":"Order book is the left displayed panel."},{"lineNumber":106,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":108,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"[TIP]"},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"First letter for every word of FOOD_ORDER must be capitalised e.g. \"Chicken Rice\", \"Coffee\""},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"[TIP]"},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"Current Menu:"},{"lineNumber":115,"author":{"gitID":"ZacZequn"},"content":"Chicken Rice, Curry Chicken, Chicken Chop, Ban Mian, Ice Milo, Coffee"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"* `add n/John Doe p/98765432  a/John street, block 123, #01-01 f/Chicken Rice h/Halal v/Vegetarian`"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":"* `add n/Betsy Crowe a/Newgate Prison p/1234567 t/friends f/Chicken Chop h/Halal`"},{"lineNumber":121,"author":{"gitID":"ZacZequn"},"content":"* `a n/John Doe p/98765432  a/John street, block 123, #01-01 f/Chicken Rice h/Halal v/Vegetarian`"},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"* `a n/Betsy Crowe a/Newgate Prison p/1234567 t/friends f/Chicken Chop h/Halal`"},{"lineNumber":123,"author":{"gitID":"Wuhao-ooo"},"content":"// end::add[]"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Listing all orders (order book): `list`"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"ZhangYijiong"},"content":"Shows a list of all orders in the order book. +"},{"lineNumber":128,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `l` +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":132,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Editing an order (order book): `edit`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"ZhangYijiong"},"content":"Edits an existing order in the order book. +"},{"lineNumber":135,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `e` +"},{"lineNumber":136,"author":{"gitID":"ZacZequn"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS] [f/FOOD_ORDER] [h/HALAL] [v/VEGETARIAN] [t/TAG]...`"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"[TIP]"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"First letter for every word of FOOD_ORDER must be capitalised e.g. \"Chicken Rice\", \"Coffee\""},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":141,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"****"},{"lineNumber":143,"author":{"gitID":"Wuhao-ooo"},"content":"* Edits the order at the specified `INDEX`. The index refers to the index number shown in the last order listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":146,"author":{"gitID":"Wuhao-ooo"},"content":"* When editing tags, the existing tags of the order will be removed i.e adding of tags is not cumulative."},{"lineNumber":147,"author":{"gitID":"Wuhao-ooo"},"content":"* You can remove all the order\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":148,"author":{"gitID":"-"},"content":"****"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":"* `edit 1 p/91234567` +"},{"lineNumber":153,"author":{"gitID":"ZacZequn"},"content":"Edits the phone number of the customer from 1st order to be `91234567` respectively."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":155,"author":{"gitID":"Wuhao-ooo"},"content":"Edits the name of the customer from 2nd order to be `Betsy Crower` and clears all existing tags."},{"lineNumber":156,"author":{"gitID":"ZacZequn"},"content":"* `e 1 p/91234567` +"},{"lineNumber":157,"author":{"gitID":"ZacZequn"},"content":"Edits the phone number of the customer from 1st order to be `91234567` respectively."},{"lineNumber":158,"author":{"gitID":"ZacZequn"},"content":"* `e 2 n/Betsy Crower t/` +"},{"lineNumber":159,"author":{"gitID":"Wuhao-ooo"},"content":"Edits the name of the customer from 2nd order to be `Betsy Crower` and clears all existing tags."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Deleting an order (order book): `delete`"},{"lineNumber":162,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":163,"author":{"gitID":"ZhangYijiong"},"content":"Deletes the specified order from the order book. +"},{"lineNumber":164,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `d` +"},{"lineNumber":165,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":168,"author":{"gitID":"ZhangYijiong"},"content":"* Deletes the order in the order book at the specified `INDEX`."},{"lineNumber":169,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":171,"author":{"gitID":"-"},"content":"****"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":177,"author":{"gitID":"ZhangYijiong"},"content":"Deletes the 2nd order in the order book."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":179,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":180,"author":{"gitID":"Wuhao-ooo"},"content":"Deletes the 1st order in the results of the `find` command."},{"lineNumber":181,"author":{"gitID":"Wuhao-ooo"},"content":"* `l` +"},{"lineNumber":182,"author":{"gitID":"Wuhao-ooo"},"content":"`d 2` +"},{"lineNumber":183,"author":{"gitID":"ZhangYijiong"},"content":"Deletes the 2nd order in the order book."},{"lineNumber":184,"author":{"gitID":"Wuhao-ooo"},"content":"* `f Betsy` +"},{"lineNumber":185,"author":{"gitID":"Wuhao-ooo"},"content":"`d 1` +"},{"lineNumber":186,"author":{"gitID":"Wuhao-ooo"},"content":"Deletes the 1st order in the results of the `find` command."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Locating orders by name (order book): `find`"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"ZacZequn"},"content":"Finds orders with their customers\u0027 names containing any of the given keywords. +"},{"lineNumber":191,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `f` +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"****"},{"lineNumber":195,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":196,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":197,"author":{"gitID":"ZacZequn"},"content":"* Only the customer\u0027s name is searched."},{"lineNumber":198,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":199,"author":{"gitID":"Wuhao-ooo"},"content":"* Names matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":200,"author":{"gitID":"-"},"content":"****"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":205,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":206,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":208,"author":{"gitID":"Wuhao-ooo"},"content":"* `f John` +"},{"lineNumber":209,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":210,"author":{"gitID":"Wuhao-ooo"},"content":"* `f Betsy Tim John` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Selecting an order (order book): `select`"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the order identified by the index number used in the last listing. +"},{"lineNumber":216,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `s` +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"****"},{"lineNumber":220,"author":{"gitID":"Wuhao-ooo"},"content":"* Selects the load and loads the Google Map location of the customer from the order at the specified `INDEX`."},{"lineNumber":221,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":223,"author":{"gitID":"-"},"content":"****"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":228,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":229,"author":{"gitID":"ZhangYijiong"},"content":"Selects the 2nd order in the order book."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":232,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the 1st order in the results of the `find` command."},{"lineNumber":233,"author":{"gitID":"Wuhao-ooo"},"content":"* `l` +"},{"lineNumber":234,"author":{"gitID":"Wuhao-ooo"},"content":"`s 2` +"},{"lineNumber":235,"author":{"gitID":"ZhangYijiong"},"content":"Selects the 2nd order in the order book."},{"lineNumber":236,"author":{"gitID":"Wuhao-ooo"},"content":"* `f Betsy` +"},{"lineNumber":237,"author":{"gitID":"Wuhao-ooo"},"content":"`s 1` +"},{"lineNumber":238,"author":{"gitID":"Wuhao-ooo"},"content":"Selects the 1st order in the results of the `find` command."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"ZhangYijiong"},"content":"// tag::Path[]"},{"lineNumber":241,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Find Path of an order (order book): `path` (Since V1.3)"},{"lineNumber":242,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":243,"author":{"gitID":"ZhangYijiong"},"content":"Shows path to the order\u0027s address which is identified by the index number used in the last listing. +"},{"lineNumber":244,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":245,"author":{"gitID":"ZhangYijiong"},"content":"Format: `path INDEX` or `p INDEX`"},{"lineNumber":246,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":247,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":248,"author":{"gitID":"ZhangYijiong"},"content":"* See setOwnAddress command would be avaiable in v2.0, now default own address is \u0027NUS\u0027."},{"lineNumber":249,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":250,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":251,"author":{"gitID":"ZhangYijiong"},"content":"* Shows path to the order’s address which is identified by the index number used in the current show order book list,"},{"lineNumber":252,"author":{"gitID":"ZhangYijiong"},"content":"using Google Map."},{"lineNumber":253,"author":{"gitID":"ZhangYijiong"},"content":"* The index refers to the index number of the order."},{"lineNumber":254,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":255,"author":{"gitID":"-"},"content":"****"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"ZhangYijiong"},"content":"* Now we have five orders. We wants to know how far away is the \u0027311, Clementi Ave 2\u0027"},{"lineNumber":260,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":261,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Path_1.png[width\u003d\"790\"]"},{"lineNumber":262,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":263,"author":{"gitID":"ZhangYijiong"},"content":"* Enter"},{"lineNumber":264,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":265,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `path 1` or `p 1`"},{"lineNumber":266,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":267,"author":{"gitID":"ZhangYijiong"},"content":"* We can see from the google Map, it is 2.3 kilometers away from our own address(NUS at default)."},{"lineNumber":268,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":269,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Path_2.png[width\u003d\"790\"]"},{"lineNumber":270,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":271,"author":{"gitID":"ZhangYijiong"},"content":"// end::Path[]"},{"lineNumber":272,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":273,"author":{"gitID":"ZhangYijiong"},"content":"// tag::AddTag[]"},{"lineNumber":274,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Tag an order (order book): `tag` (Since v1.5)"},{"lineNumber":275,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":276,"author":{"gitID":"ZhangYijiong"},"content":"Add an tag to an existing order in the order book."},{"lineNumber":277,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":278,"author":{"gitID":"ZhangYijiong"},"content":"Format: `edit INDEX tagWord`"},{"lineNumber":279,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":280,"author":{"gitID":"ZhangYijiong"},"content":"[TIP]"},{"lineNumber":281,"author":{"gitID":"ZhangYijiong"},"content":"Adds \u0027Delivering\u0027, \u0027Delivered\u0027 and see its position in the order book. Use"},{"lineNumber":282,"author":{"gitID":"ZhangYijiong"},"content":"edit command to clear tags."},{"lineNumber":283,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":284,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":285,"author":{"gitID":"ZhangYijiong"},"content":"* Order book is the left dispalyed panel."},{"lineNumber":286,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":287,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":288,"author":{"gitID":"ZhangYijiong"},"content":"* Only \u0027Delivering\u0027, \u0027Delivered\u0027 would be recognized for ordering. (\u0027delivering\u0027\u0027delivered\u0027 would not affect"},{"lineNumber":289,"author":{"gitID":"ZhangYijiong"},"content":"an order\u0027s position)"},{"lineNumber":290,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":291,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":292,"author":{"gitID":"ZhangYijiong"},"content":"* Edits the order at the specified `INDEX`. The index refers to the index number shown in the current shown list."},{"lineNumber":293,"author":{"gitID":"ZhangYijiong"},"content":"The index *must be a positive integer* 1, 2, 3, .."},{"lineNumber":294,"author":{"gitID":"ZhangYijiong"},"content":"* Existing order will be updated with input tagWord."},{"lineNumber":295,"author":{"gitID":"ZhangYijiong"},"content":"* Different from edit command, adding of tags is cumulative."},{"lineNumber":296,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":297,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":298,"author":{"gitID":"ZhangYijiong"},"content":"* Label orders with tag \u0027Delivering\u0027,\u0027Delivering\u0027 would change their position in the order book."},{"lineNumber":299,"author":{"gitID":"ZhangYijiong"},"content":"* Once a order is processed, it will go below unprocessed orders, so that there is no need for user to scroll all"},{"lineNumber":300,"author":{"gitID":"ZhangYijiong"},"content":"the way down to process newly-added unprocessed order."},{"lineNumber":301,"author":{"gitID":"ZhangYijiong"},"content":"* *Do not tag an order as \u0027Processed\u0027 as process commands would do the job.*"},{"lineNumber":302,"author":{"gitID":"ZhangYijiong"},"content":"* Once an order has been cooked, the order would be labelled as \u0027Cooked\u0027, and it will go to the top of the order book"},{"lineNumber":303,"author":{"gitID":"ZhangYijiong"},"content":"to remind user to send out delivery man."},{"lineNumber":304,"author":{"gitID":"ZhangYijiong"},"content":"* *Do not tag an order as \u0027Cooked\u0027 as complete commands would do the job.*"},{"lineNumber":305,"author":{"gitID":"ZhangYijiong"},"content":"* When an order is tagged as \u0027Delivering\u0027, it would go above all the cooked orders."},{"lineNumber":306,"author":{"gitID":"ZhangYijiong"},"content":"* Finally, when an order is tagged as \u0027Delivered\u0027, it would go all the way to the bottom as the order"},{"lineNumber":307,"author":{"gitID":"ZhangYijiong"},"content":" is consider closed."},{"lineNumber":308,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":309,"author":{"gitID":"ZhangYijiong"},"content":"Examples:"},{"lineNumber":310,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":311,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 1:"},{"lineNumber":312,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":313,"author":{"gitID":"ZhangYijiong"},"content":"* We have five orders being processed."},{"lineNumber":314,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":315,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Tag_1.png[width\u003d\"790\"]"},{"lineNumber":316,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":317,"author":{"gitID":"ZhangYijiong"},"content":"* Enter completeMore order command to complete first three orders, \u0027Curry Chicken\u0027 \u0027Ban Mian\u0027 and \u0027Chicken Chop\u0027"},{"lineNumber":318,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":319,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `cM 3`"},{"lineNumber":320,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":321,"author":{"gitID":"ZhangYijiong"},"content":"* Now these three orders are labelled as \u0027Cooked\u0027"},{"lineNumber":322,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":323,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Tag_2.png[width\u003d\"790\"]"},{"lineNumber":324,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":325,"author":{"gitID":"ZhangYijiong"},"content":"* We send out delivery man for Chicken Chop and tag it as \u0027Delivering\u0027"},{"lineNumber":326,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":327,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `tag 3 Delivering` Notice no t/ needed"},{"lineNumber":328,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":329,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Tag_4.png[width\u003d\"790\"]"},{"lineNumber":330,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":331,"author":{"gitID":"ZhangYijiong"},"content":"* We can see it jumps to the top of the order book."},{"lineNumber":332,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":333,"author":{"gitID":"ZhangYijiong"},"content":"* Finally when it is delivered, we enter"},{"lineNumber":334,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":335,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `tag 1 Delivered` to push it to the bottom"},{"lineNumber":336,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":337,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Tag_3.png[width\u003d\"790\"]"},{"lineNumber":338,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":339,"author":{"gitID":"ZhangYijiong"},"content":"// end::AddTag[]"},{"lineNumber":340,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":341,"author":{"gitID":"ZhangYijiong"},"content":"// tag::Load[]"},{"lineNumber":342,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Load a web page: `load url` (Since v1.5)"},{"lineNumber":343,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":344,"author":{"gitID":"ZhangYijiong"},"content":"You can try to load a web page in the browser panel, which is the middle window in the main window."},{"lineNumber":345,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":346,"author":{"gitID":"ZhangYijiong"},"content":"Format: `load url` or `ld url`"},{"lineNumber":347,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":348,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":349,"author":{"gitID":"ZhangYijiong"},"content":"* Url is the web page link, for instance: https://www.google.com.sg, https://www.youtube.com"},{"lineNumber":350,"author":{"gitID":"ZhangYijiong"},"content":"* Note that user needs to enter \u0027https://\u0027 before the normal web link entered in web browser."},{"lineNumber":351,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":352,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":353,"author":{"gitID":"ZhangYijiong"},"content":"* Unlike normal web browser, there is no go back previous page function and no open in new tab function."},{"lineNumber":354,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":355,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":356,"author":{"gitID":"ZhangYijiong"},"content":"* This is only an small extra function. As a result, *the function would not be guaranteed to work and"},{"lineNumber":357,"author":{"gitID":"ZhangYijiong"},"content":" the behaviour of the function may vary from user to user*."},{"lineNumber":358,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":359,"author":{"gitID":"ZhangYijiong"},"content":"Example"},{"lineNumber":360,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":361,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 1:"},{"lineNumber":362,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":363,"author":{"gitID":"ZhangYijiong"},"content":"* You want to load google search page to find out something."},{"lineNumber":364,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":365,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Load_1.png[width\u003d\"790\"]"},{"lineNumber":366,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":367,"author":{"gitID":"ZhangYijiong"},"content":"* Enter"},{"lineNumber":368,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":369,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `load https://www.google.com.sg` or `ld https://www.google.com.sg`"},{"lineNumber":370,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":371,"author":{"gitID":"ZhangYijiong"},"content":"* Then you can see"},{"lineNumber":372,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":373,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Load_2.png[width\u003d\"790\"]"},{"lineNumber":374,"author":{"gitID":"ZhangYijiong"},"content":"// end::Load[]"},{"lineNumber":375,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":376,"author":{"gitID":"ZhangYijiong"},"content":"// tag::ProcessingQueue[]"},{"lineNumber":377,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Process an order (add to the processing queue): `process` (Since v1.5)"},{"lineNumber":378,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":379,"author":{"gitID":"ZhangYijiong"},"content":"You can now process an existing order from the order book to the processing queue, indicating that the order now in being cooked."},{"lineNumber":380,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":381,"author":{"gitID":"ZhangYijiong"},"content":"Format: `process INDEX` or `ps INDEX`"},{"lineNumber":382,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":383,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":384,"author":{"gitID":"ZhangYijiong"},"content":"* You can use `ps INDEX` for faster input."},{"lineNumber":385,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":386,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":387,"author":{"gitID":"ZhangYijiong"},"content":"* Processing queue is the right dispalyed panel."},{"lineNumber":388,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":389,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":390,"author":{"gitID":"ZhangYijiong"},"content":"* Processing queue has a max capacity(default size is 5), to represents the ability of the restaurants to preparing"},{"lineNumber":391,"author":{"gitID":"ZhangYijiong"},"content":"orders(ie number of chefs, number of cookers, etc). Therefore, once the processing queue is full, no more order can be"},{"lineNumber":392,"author":{"gitID":"ZhangYijiong"},"content":"processed until some orders are cooked."},{"lineNumber":393,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":394,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":395,"author":{"gitID":"ZhangYijiong"},"content":"Things to take note"},{"lineNumber":396,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":397,"author":{"gitID":"ZhangYijiong"},"content":"* Index must be valid, meaning it can only be a positive integer that is no bigger than the total orders in the order book now."},{"lineNumber":398,"author":{"gitID":"ZhangYijiong"},"content":"* One order in the order book cannot be processed twice."},{"lineNumber":399,"author":{"gitID":"ZhangYijiong"},"content":"* Once a valid command is entered, the selected order would be added to the processing queue and the original order in the order book will be labelled as processed."},{"lineNumber":400,"author":{"gitID":"ZhangYijiong"},"content":"* If user manually remove \u0027Processed\u0027 tag from an order with tag \u0027Cooked\u0027 or \u0027Delivering\u0027 or \u0027Delivered\u0027, then further"},{"lineNumber":401,"author":{"gitID":"ZhangYijiong"},"content":"process commands would not add the order to the processing queue again."},{"lineNumber":402,"author":{"gitID":"ZhangYijiong"},"content":"* Processed orders in the order book(left panel) would sink below than unprocessed orders. If you think order disappears in the order book after type"},{"lineNumber":403,"author":{"gitID":"ZhangYijiong"},"content":"process command, try to scroll down below unprocessed orders to see it."},{"lineNumber":404,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":405,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":406,"author":{"gitID":"ZhangYijiong"},"content":"* Display of an order in the order queue is simplified, showing only food, address and inception time."},{"lineNumber":407,"author":{"gitID":"ZhangYijiong"},"content":"* The processing queue is a normal queue without any ordering."},{"lineNumber":408,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":409,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":410,"author":{"gitID":"ZhangYijiong"},"content":"[TIP]"},{"lineNumber":411,"author":{"gitID":"ZhangYijiong"},"content":"User could user lazier version `processNext` command, to avoiding trouble of entering INDEX"},{"lineNumber":412,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":413,"author":{"gitID":"ZhangYijiong"},"content":"Examples:"},{"lineNumber":414,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":415,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 1:"},{"lineNumber":416,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":417,"author":{"gitID":"ZhangYijiong"},"content":"* There is only one order in the order book. To process the first order, we enter"},{"lineNumber":418,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":419,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `process` or `ps`"},{"lineNumber":420,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":421,"author":{"gitID":"ZhangYijiong"},"content":"* we get feedback message saying that the index is required."},{"lineNumber":422,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":423,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_1.png[width\u003d\"790\"]"},{"lineNumber":424,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":425,"author":{"gitID":"ZhangYijiong"},"content":"* After that, we enter correct command"},{"lineNumber":426,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":427,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `process 1` or `ps 1`"},{"lineNumber":428,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":429,"author":{"gitID":"ZhangYijiong"},"content":"* We can see the result below. The order is added to the processing queue and the original order"},{"lineNumber":430,"author":{"gitID":"ZhangYijiong"},"content":" is labelled \"Processed\"."},{"lineNumber":431,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":432,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_2.png[width\u003d\"790\"]"},{"lineNumber":433,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":434,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 2:"},{"lineNumber":435,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":436,"author":{"gitID":"ZhangYijiong"},"content":"* After scenario 1, we add more orders to the order book. Now there are several order in the order book. Notice that the"},{"lineNumber":437,"author":{"gitID":"ZhangYijiong"},"content":"order Chicken Chop, which is processed in scenario 1, now is ranked below all unprocessed orders."},{"lineNumber":438,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":439,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_3.png[width\u003d\"790\"]"},{"lineNumber":440,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":441,"author":{"gitID":"ZhangYijiong"},"content":"* Now we enter command"},{"lineNumber":442,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":443,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `process 2` or `ps 2`"},{"lineNumber":444,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":445,"author":{"gitID":"ZhangYijiong"},"content":"* We can see the result below. The order \"Ice Milo\" is added to the processing queue and the original order"},{"lineNumber":446,"author":{"gitID":"ZhangYijiong"},"content":" is labelled \"Processed\". Now Ice Milo also goes below unprocessed orders."},{"lineNumber":447,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":448,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_4.png[width\u003d\"790\"]"},{"lineNumber":449,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":450,"author":{"gitID":"ZhangYijiong"},"content":"// end::ProcessingQueue[]"},{"lineNumber":451,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Process the next unprocessed order(add to the processing queue): `processNext` (Since v1.5)"},{"lineNumber":452,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":453,"author":{"gitID":"ZhangYijiong"},"content":"To save time, you can process an existing unprocessed order from the order book to the processing queue, without"},{"lineNumber":454,"author":{"gitID":"ZhangYijiong"},"content":"worrying about the index. ProcessNext would automatically find the first unprocessed order in the current shown list."},{"lineNumber":455,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":456,"author":{"gitID":"ZhangYijiong"},"content":"Format: `processNext` or `pN`"},{"lineNumber":457,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":458,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":459,"author":{"gitID":"ZhangYijiong"},"content":"* You can use `pN` for faster input. Note the capital \u0027N\u0027."},{"lineNumber":460,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":461,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":462,"author":{"gitID":"ZhangYijiong"},"content":"* Processing queue is the right dispalyed panel."},{"lineNumber":463,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":464,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":465,"author":{"gitID":"ZhangYijiong"},"content":"* Processing queue has a max capacity(default size is 5), to represents the ability of the restaurants to preparing"},{"lineNumber":466,"author":{"gitID":"ZhangYijiong"},"content":"orders(ie number of chefs, number of cookers, etc). Therefore, once the processing queue is full, no more order can be"},{"lineNumber":467,"author":{"gitID":"ZhangYijiong"},"content":"processed until some orders are cooked."},{"lineNumber":468,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":469,"author":{"gitID":"ZhangYijiong"},"content":"Things to take note"},{"lineNumber":470,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":471,"author":{"gitID":"ZhangYijiong"},"content":"* If all orders in the shown list have been processed, message \"All Order have been processed\"."},{"lineNumber":472,"author":{"gitID":"ZhangYijiong"},"content":"* One order in the order book cannot be processed twice."},{"lineNumber":473,"author":{"gitID":"ZhangYijiong"},"content":"* If user manually remove \u0027Processed\u0027 tag from an order with tag \u0027Cooked\u0027 or \u0027Delivering\u0027 or \u0027Delivered\u0027, then further"},{"lineNumber":474,"author":{"gitID":"ZhangYijiong"},"content":"process commands would not add the order to the processing queue again."},{"lineNumber":475,"author":{"gitID":"ZhangYijiong"},"content":"* Processed orders in the order book(left panel) would sink below than unprocessed orders. If you think order disappears in the order book after type"},{"lineNumber":476,"author":{"gitID":"ZhangYijiong"},"content":"process command, try to scroll down below unprocessed orders to see it."},{"lineNumber":477,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":478,"author":{"gitID":"ZhangYijiong"},"content":"[TIP]"},{"lineNumber":479,"author":{"gitID":"ZhangYijiong"},"content":"User could user even lazier version `processMore NUMBER` command, to avoiding trouble of entering"},{"lineNumber":480,"author":{"gitID":"ZhangYijiong"},"content":"`processNext` multiple time"},{"lineNumber":481,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":482,"author":{"gitID":"ZhangYijiong"},"content":"Examples:"},{"lineNumber":483,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":484,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 1:"},{"lineNumber":485,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":486,"author":{"gitID":"ZhangYijiong"},"content":"* Now our orders are these."},{"lineNumber":487,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":488,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_4.png[width\u003d\"790\"]"},{"lineNumber":489,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":490,"author":{"gitID":"ZhangYijiong"},"content":"* To process the next order, which is \u0027Curry Chicken\u0027 in this case, we simply enter"},{"lineNumber":491,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":492,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `processNext` or `pN`"},{"lineNumber":493,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":494,"author":{"gitID":"ZhangYijiong"},"content":"* We can see the result below. The \u0027Curry Chicken\u0027 order is added to the processing queue and the original order"},{"lineNumber":495,"author":{"gitID":"ZhangYijiong"},"content":" is labelled \"Processed\"."},{"lineNumber":496,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":497,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_5.png[width\u003d\"790\"]"},{"lineNumber":498,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":499,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 2:"},{"lineNumber":500,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":501,"author":{"gitID":"ZhangYijiong"},"content":"* After scenario 1, we realize Ice Milo is finished preparing. We use  Notice it goes all the way to the top of the list, as a"},{"lineNumber":502,"author":{"gitID":"ZhangYijiong"},"content":"remainder for you to send out the delivery man."},{"lineNumber":503,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":504,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":505,"author":{"gitID":"ZhangYijiong"},"content":"* For details of order\u0027s ranking in order book, please refer to tag command section)"},{"lineNumber":506,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":507,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":508,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_6.png[width\u003d\"790\"]"},{"lineNumber":509,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":510,"author":{"gitID":"ZhangYijiong"},"content":"* Now the next order to be processed is Ban Mian, which is at position 2. We enter"},{"lineNumber":511,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":512,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `processNext` or `pN`"},{"lineNumber":513,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":514,"author":{"gitID":"ZhangYijiong"},"content":"* We can see the result below. The order \"Ban Mian\" is added to the processing queue and the original order"},{"lineNumber":515,"author":{"gitID":"ZhangYijiong"},"content":" is labelled as \"Processed\"."},{"lineNumber":516,"author":{"gitID":"ZhangYijiong"},"content":"* ProcessNext skips the first processed order."},{"lineNumber":517,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":518,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_7.png[width\u003d\"790\"]"},{"lineNumber":519,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":520,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Process the next n unprocessed orders(add to processing queue): `processMore`(Since v1.5)"},{"lineNumber":521,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":522,"author":{"gitID":"ZhangYijiong"},"content":"Now you can process the next n unprocessed order at one simpler command."},{"lineNumber":523,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":524,"author":{"gitID":"ZhangYijiong"},"content":"Format: `processMore NUMBER` or `pM NUMBER`"},{"lineNumber":525,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":526,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":527,"author":{"gitID":"ZhangYijiong"},"content":"* You can use `pM` for faster input. Note the capital \u0027M\u0027."},{"lineNumber":528,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":529,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":530,"author":{"gitID":"ZhangYijiong"},"content":"* Processing queue is the right dispalyed panel."},{"lineNumber":531,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":532,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":533,"author":{"gitID":"ZhangYijiong"},"content":"* Processing queue has a max capacity(default size is 5), to represents the ability of the restaurants to preparing"},{"lineNumber":534,"author":{"gitID":"ZhangYijiong"},"content":"orders(ie number of chefs, number of cookers, etc). Therefore, once the processing queue is full, no more order can be"},{"lineNumber":535,"author":{"gitID":"ZhangYijiong"},"content":"processed until some orders are cooked."},{"lineNumber":536,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":537,"author":{"gitID":"ZhangYijiong"},"content":"Things to take note"},{"lineNumber":538,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":539,"author":{"gitID":"ZhangYijiong"},"content":"* Number must be a positive integer"},{"lineNumber":540,"author":{"gitID":"ZhangYijiong"},"content":"* There is no upper bound to the number, as once the all the orders are processed or the processing queue is full,"},{"lineNumber":541,"author":{"gitID":"ZhangYijiong"},"content":"the adding and labelling would stop. However, we advise user *not to enter absurdly large number to avoid unusual"},{"lineNumber":542,"author":{"gitID":"ZhangYijiong"},"content":" behavior*."},{"lineNumber":543,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":544,"author":{"gitID":"ZhangYijiong"},"content":"Examples:"},{"lineNumber":545,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":546,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 1:"},{"lineNumber":547,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":548,"author":{"gitID":"ZhangYijiong"},"content":"* Now our orders are these. There are five orders waiting to be processed."},{"lineNumber":549,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":550,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_8.png[width\u003d\"790\"]"},{"lineNumber":551,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":552,"author":{"gitID":"ZhangYijiong"},"content":"* To process all five orders, we simply enter"},{"lineNumber":553,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":554,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `processMore 5` or `pM 5`"},{"lineNumber":555,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":556,"author":{"gitID":"ZhangYijiong"},"content":"* We can see the result below. All five orders are added to the processing queue and the original orders"},{"lineNumber":557,"author":{"gitID":"ZhangYijiong"},"content":" are labelled \"Processed\"."},{"lineNumber":558,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":559,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Process_9.png[width\u003d\"790\"]"},{"lineNumber":560,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":561,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Complete an order (delete form processing queue): `completeOne` (Since v1.5)"},{"lineNumber":562,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":563,"author":{"gitID":"ZhangYijiong"},"content":"After processing an order and the food is now ready to be delivered, you can use complete order command to remove the"},{"lineNumber":564,"author":{"gitID":"ZhangYijiong"},"content":"order from the processing queue, and label the original order in the order book as \u0027Cooked\u0027."},{"lineNumber":565,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":566,"author":{"gitID":"ZhangYijiong"},"content":"Format: `completeOne INDEX` or `cOne INDEX`"},{"lineNumber":567,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":568,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":569,"author":{"gitID":"ZhangYijiong"},"content":"* You can use `cOne INDEX` for faster input. Note the capital \u0027O\u0027."},{"lineNumber":570,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":571,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":572,"author":{"gitID":"ZhangYijiong"},"content":"* Processing queue is the right dispalyed panel."},{"lineNumber":573,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":574,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":575,"author":{"gitID":"ZhangYijiong"},"content":"Things to take note"},{"lineNumber":576,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":577,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":578,"author":{"gitID":"ZhangYijiong"},"content":"* Completes and removes the order in the processing queue at the specified `INDEX`."},{"lineNumber":579,"author":{"gitID":"ZhangYijiong"},"content":"* The original order in the order book would be labelled as \u0027Cooked\u0027 and jumps to the top of the list."},{"lineNumber":580,"author":{"gitID":"ZhangYijiong"},"content":"* The index *must be a positive integer* 1, 2, 3, 4, 5, as the default full capacity of the processing queue is 5."},{"lineNumber":581,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":582,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":583,"author":{"gitID":"ZhangYijiong"},"content":"Examples:"},{"lineNumber":584,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":585,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 1:"},{"lineNumber":586,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":587,"author":{"gitID":"ZhangYijiong"},"content":"* Now our orders are these. There are three orders be processing. Suppose food \u0027Curry Chicken\u0027 has finished cooking."},{"lineNumber":588,"author":{"gitID":"ZhangYijiong"},"content":"Notice it is currently second in the processing queue."},{"lineNumber":589,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":590,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Complete_1.png[width\u003d\"790\"]"},{"lineNumber":591,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":592,"author":{"gitID":"ZhangYijiong"},"content":"* To complete it, we simply enter"},{"lineNumber":593,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":594,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `completeOne 2` or `cOne 2`"},{"lineNumber":595,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":596,"author":{"gitID":"ZhangYijiong"},"content":"* We can see the result below. \u0027Curry Chicken\u0027 is deleted from the processing queue and the original order"},{"lineNumber":597,"author":{"gitID":"ZhangYijiong"},"content":" is labelled \"Cooked\". Notice the \u0027Cooked\u0027 \u0027Curry Chicken\u0027 would go above unprocessed and processing orders to remind"},{"lineNumber":598,"author":{"gitID":"ZhangYijiong"},"content":" the user to send out delivery man."},{"lineNumber":599,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":600,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Complete_2.png[width\u003d\"790\"]"},{"lineNumber":601,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":602,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Complete n orders (delete form processing queue): `completeMore`"},{"lineNumber":603,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":604,"author":{"gitID":"ZhangYijiong"},"content":"Similar to completeOne command, now multiple orders can be finished and removed from the processing"},{"lineNumber":605,"author":{"gitID":"ZhangYijiong"},"content":"queue at the same time. Completes first n orders from the order queue, n is the NUMBER inputted. +"},{"lineNumber":606,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":607,"author":{"gitID":"ZhangYijiong"},"content":"Format: `completeOrder NUMBER` or `cMore NUMBER`"},{"lineNumber":608,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":609,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":610,"author":{"gitID":"ZhangYijiong"},"content":"* You can use `cM NUMBER` for faster input. Note the capital \u0027M\u0027."},{"lineNumber":611,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":612,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":613,"author":{"gitID":"ZhangYijiong"},"content":"* Order queue is the right dispalyed panel."},{"lineNumber":614,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":615,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":616,"author":{"gitID":"ZhangYijiong"},"content":"* Completes first n orders."},{"lineNumber":617,"author":{"gitID":"ZhangYijiong"},"content":"* The number cannot be more than the total orders in order queue."},{"lineNumber":618,"author":{"gitID":"ZhangYijiong"},"content":"* The index *must be a positive integer* 1, 2, 3, 4, 5, as the default full capacity of the processing queue is 5."},{"lineNumber":619,"author":{"gitID":"ZhangYijiong"},"content":"****"},{"lineNumber":620,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":621,"author":{"gitID":"ZhangYijiong"},"content":"Examples:"},{"lineNumber":622,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":623,"author":{"gitID":"ZhangYijiong"},"content":"Example scenario 1:"},{"lineNumber":624,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":625,"author":{"gitID":"ZhangYijiong"},"content":"* From previous example, there are still two orders be processing. Suppose food \u0027Chicken Chop\u0027 and"},{"lineNumber":626,"author":{"gitID":"ZhangYijiong"},"content":" \u0027Ban Mian\u0027 have finished cooking at the same time. We would now wants to complete both using one command."},{"lineNumber":627,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":628,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Complete_2.png[width\u003d\"790\"]"},{"lineNumber":629,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":630,"author":{"gitID":"ZhangYijiong"},"content":"* To do so, we simply enter"},{"lineNumber":631,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":632,"author":{"gitID":"ZhangYijiong"},"content":"\u003e\u003e `completeMore 2` or `cM 2`"},{"lineNumber":633,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":634,"author":{"gitID":"ZhangYijiong"},"content":"* We can see the result below. Both \u0027Chicken Chop\u0027 and \u0027Ban Mian\u0027 are deleted from the processing queue and"},{"lineNumber":635,"author":{"gitID":"ZhangYijiong"},"content":"the original orders are labelled \"Cooked\". Notice the \u0027Cooked\u0027 \u0027Chicken Chop\u0027 and \u0027Ban Mian\u0027 would go above"},{"lineNumber":636,"author":{"gitID":"ZhangYijiong"},"content":"unprocessed and processing orders to remind the user to send out delivery man."},{"lineNumber":637,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":638,"author":{"gitID":"ZhangYijiong"},"content":"image::UG_Complete_3.png[width\u003d\"790\"]"},{"lineNumber":639,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":640,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":641,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":642,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":643,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":648,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `hist` +"},{"lineNumber":649,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":652,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":653,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":657,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"Wuhao-ooo"},"content":"Restores the queue to the state before the previous _undoable_ command was executed. +"},{"lineNumber":660,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `ud` +"},{"lineNumber":661,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":664,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":665,"author":{"gitID":"Wuhao-ooo"},"content":"Undoable commands: those commands that modify the queue of orders (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":671,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":672,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":675,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":676,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":677,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":680,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":681,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":682,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":687,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `rd` +"},{"lineNumber":688,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":693,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":694,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":697,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":698,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":701,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":702,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":703,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":704,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":705,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":706,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Clearing all entries (order book and processing queue): `clear`"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"ZhangYijiong"},"content":"Clears all orders from the order book. +"},{"lineNumber":711,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `c` +"},{"lineNumber":712,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":715,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":719,"author":{"gitID":"Wuhao-ooo"},"content":"Alias: `ext` +"},{"lineNumber":720,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"Wuhao-ooo"},"content":"Customers\u0027 data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":725,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":728,"author":{"gitID":"Wuhao-ooo"},"content":"// tag::count[]"},{"lineNumber":729,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Count the number of orders a customer has placed in the past"},{"lineNumber":730,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":731,"author":{"gitID":"Wuhao-ooo"},"content":"The statistics of customers will be stored in the hard disk as an XML file."},{"lineNumber":732,"author":{"gitID":"Wuhao-ooo"},"content":"When a customer places an order, it accumulates (add 1) to the number of his/her past orders."},{"lineNumber":733,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":734,"author":{"gitID":"Wuhao-ooo"},"content":"Examples:"},{"lineNumber":735,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":736,"author":{"gitID":"Wuhao-ooo"},"content":"* Initially no order has been placed so the output XML file is empty."},{"lineNumber":737,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":738,"author":{"gitID":"Wuhao-ooo"},"content":"* `add n/Wu Hao p/91111111 f/Chicken Rice a/NUS` +"},{"lineNumber":739,"author":{"gitID":"Wuhao-ooo"},"content":"The customer with phone number \"91111111\" has accumulated 1 order. +"},{"lineNumber":740,"author":{"gitID":"Wuhao-ooo"},"content":"The result will be updated and stored in the XML file."},{"lineNumber":741,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":742,"author":{"gitID":"Wuhao-ooo"},"content":"image::user1.png[width\u003d\"800\"]"},{"lineNumber":743,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":744,"author":{"gitID":"Wuhao-ooo"},"content":"* `add n/Zequn p/92222222 f/Chicken Rice a/NUS` +"},{"lineNumber":745,"author":{"gitID":"Wuhao-ooo"},"content":"Another customer with a different phone number \"92222222\" has accumulated 1 order. +"},{"lineNumber":746,"author":{"gitID":"Wuhao-ooo"},"content":"The result will be updated and stored in the XML file."},{"lineNumber":747,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":748,"author":{"gitID":"Wuhao-ooo"},"content":"image::user2.png[width\u003d\"800\"]"},{"lineNumber":749,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":750,"author":{"gitID":"Wuhao-ooo"},"content":"* `delete 1` +"},{"lineNumber":751,"author":{"gitID":"Wuhao-ooo"},"content":"`add n/Wu Hao p/91111111 f/Chicken Rice a/NUS` +"},{"lineNumber":752,"author":{"gitID":"Wuhao-ooo"},"content":"`delete 1` +"},{"lineNumber":753,"author":{"gitID":"Wuhao-ooo"},"content":"`add n/Wu Hao p/91111111 f/Chicken Rice a/NUS` +"},{"lineNumber":754,"author":{"gitID":"Wuhao-ooo"},"content":"Now the first customer with phone number \"91111111\" has placed 3 orders in total in the past. +"},{"lineNumber":755,"author":{"gitID":"Wuhao-ooo"},"content":"The results are reflected in the XML file."},{"lineNumber":756,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":757,"author":{"gitID":"Wuhao-ooo"},"content":"image::user3.png[width\u003d\"800\"]"},{"lineNumber":758,"author":{"gitID":"Wuhao-ooo"},"content":"// end::count[]"},{"lineNumber":759,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":760,"author":{"gitID":"Wuhao-ooo"},"content":"// tag::querycount[]"},{"lineNumber":761,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Check a customer\u0027s current count of past orders `Coming in v2.0`"},{"lineNumber":762,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":763,"author":{"gitID":"Wuhao-ooo"},"content":"Gets the number of past orders given a customers phone number. +"},{"lineNumber":764,"author":{"gitID":"Wuhao-ooo"},"content":"Format: `count PHONE`"},{"lineNumber":765,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":766,"author":{"gitID":"Wuhao-ooo"},"content":"* The PHONE provided must be a valid phone number."},{"lineNumber":767,"author":{"gitID":"Wuhao-ooo"},"content":"* If the customer has not placed any order before, the result obtained is 0."},{"lineNumber":768,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":769,"author":{"gitID":"Wuhao-ooo"},"content":"Examples:"},{"lineNumber":770,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":771,"author":{"gitID":"Wuhao-ooo"},"content":"* `count 91238888`"},{"lineNumber":772,"author":{"gitID":"Wuhao-ooo"},"content":"* `count 11111111`"},{"lineNumber":773,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":774,"author":{"gitID":"Wuhao-ooo"},"content":"// end::querycount[]"},{"lineNumber":775,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":776,"author":{"gitID":"Wuhao-ooo"},"content":"// tag::identify[]"},{"lineNumber":777,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Identify loyal customer by past orders count and give discounts `Coming in v2.0`"},{"lineNumber":778,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":779,"author":{"gitID":"Wuhao-ooo"},"content":"When a customer\u0027s past orders count has been accumulated to 3/5/7/9 (numbers determined by restaurants). +"},{"lineNumber":780,"author":{"gitID":"Wuhao-ooo"},"content":"Messages will be shown to remind restaurants to give the customer discount on the current order."},{"lineNumber":781,"author":{"gitID":"Wuhao-ooo"},"content":"// end::identify[]"},{"lineNumber":782,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":783,"author":{"gitID":"ZacZequn"},"content":"// tag::menu[]"},{"lineNumber":784,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d Modify Menu `Coming in v2.0`"},{"lineNumber":785,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":786,"author":{"gitID":"ZacZequn"},"content":"The user will be allowed to modify menu e.g. addDish or deleteDish or editDish(change prices, names) by using the CLI instead of replacing the order menu file with a new menu file."},{"lineNumber":787,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":788,"author":{"gitID":"ZacZequn"},"content":"// end::menu[]"},{"lineNumber":789,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":793,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d Command Summary (full)(alphabetical)"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"ZacZequn"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER a/ADDRESS f/FOOD_ORDER [t/TAG]...` +"},{"lineNumber":798,"author":{"gitID":"ZacZequn"},"content":"e.g. `add n/James Ho p/22224444 a/123, Clementi Rd, 1234665 f/Chicken Rice t/friends`"},{"lineNumber":799,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":800,"author":{"gitID":"ZhangYijiong"},"content":"* *CompleteOne* : `completeOne INDEX` +"},{"lineNumber":801,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `completeOne 2`"},{"lineNumber":802,"author":{"gitID":"ZhangYijiong"},"content":"* *CompleteMore* : `completeMore NUMBER` +"},{"lineNumber":803,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `completeMore 5`"},{"lineNumber":804,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":805,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":806,"author":{"gitID":"ZacZequn"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [a/ADDRESS] [f/FOOD_ORDER] [t/TAG]...` +"},{"lineNumber":807,"author":{"gitID":"ZacZequn"},"content":"e.g. `edit 2 n/James Lee"},{"lineNumber":808,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":809,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":810,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":811,"author":{"gitID":"ZhangYijiong"},"content":"* *History* : `history`"},{"lineNumber":812,"author":{"gitID":"ZhangYijiong"},"content":"* *List* : `list`"},{"lineNumber":813,"author":{"gitID":"ZhangYijiong"},"content":"* *Load* : `load ` + web page link +"},{"lineNumber":814,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `load https://www.google.com.sg`"},{"lineNumber":815,"author":{"gitID":"ZhangYijiong"},"content":"* *Path* : \u0027path INDEX\u0027 +"},{"lineNumber":816,"author":{"gitID":"ZhangYijiong"},"content":"e.g.`path 2`"},{"lineNumber":817,"author":{"gitID":"ZhangYijiong"},"content":"* *Process* `process INDEX` +"},{"lineNumber":818,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `process 1`"},{"lineNumber":819,"author":{"gitID":"ZhangYijiong"},"content":"* *ProcessNext* : `processNext` +"},{"lineNumber":820,"author":{"gitID":"ZhangYijiong"},"content":"* *ProcessMore* : `processMore NUMBER` +"},{"lineNumber":821,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `processMore 2`"},{"lineNumber":822,"author":{"gitID":"ZhangYijiong"},"content":"* *Redo* : `redo`"},{"lineNumber":823,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":824,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":825,"author":{"gitID":"ZhangYijiong"},"content":"* *Tag* : `tag INDEX` + tagWord +"},{"lineNumber":826,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `tag 1 Delivered`"},{"lineNumber":827,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":828,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":829,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d Command Summary (short form)(alphabetical)"},{"lineNumber":830,"author":{"gitID":"ZhangYijiong"},"content":"* *Add* `a n/NAME p/PHONE_NUMBER a/ADDRESS f/FOOD_ORDER [t/TAG]...` +"},{"lineNumber":831,"author":{"gitID":"ZacZequn"},"content":"e.g. `a n/James Ho p/22224444 a/123, Clementi Rd, 1234665 f/Chicken Rice t/friend t/colleague`"},{"lineNumber":832,"author":{"gitID":"ZhangYijiong"},"content":"* *Clear* : `c`"},{"lineNumber":833,"author":{"gitID":"ZhangYijiong"},"content":"* *CompleteOne* : `cOne INDEX` +"},{"lineNumber":834,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `cOne 2`"},{"lineNumber":835,"author":{"gitID":"ZhangYijiong"},"content":"* *CompleteMore* : `cM NUMBER` +"},{"lineNumber":836,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `cM 5`"},{"lineNumber":837,"author":{"gitID":"ZhangYijiong"},"content":"* *Delete* : `d INDEX` +"},{"lineNumber":838,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `d 3`"},{"lineNumber":839,"author":{"gitID":"ZhangYijiong"},"content":"* *Edit* : `e INDEX [n/NAME] [p/PHONE_NUMBER] [a/ADDRESS] [f/FOOD_ORDER] [t/TAG]...` +"},{"lineNumber":840,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `e 2 n/James Lee"},{"lineNumber":841,"author":{"gitID":"ZhangYijiong"},"content":"* *Find* : `f KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":842,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `f James Jake`"},{"lineNumber":843,"author":{"gitID":"ZhangYijiong"},"content":"* *Help* : `h`"},{"lineNumber":844,"author":{"gitID":"ZhangYijiong"},"content":"* *History* : `history`"},{"lineNumber":845,"author":{"gitID":"ZhangYijiong"},"content":"* *List* : `l`"},{"lineNumber":846,"author":{"gitID":"ZhangYijiong"},"content":"* *Load* : `ld ` + web page link +"},{"lineNumber":847,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `ld https://www.google.com.sg`"},{"lineNumber":848,"author":{"gitID":"ZhangYijiong"},"content":"* *Path* : \u0027p INDEX\u0027 +"},{"lineNumber":849,"author":{"gitID":"ZhangYijiong"},"content":"e.g.`p 2`"},{"lineNumber":850,"author":{"gitID":"ZhangYijiong"},"content":"* *Process* `ps INDEX` +"},{"lineNumber":851,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `process 1`"},{"lineNumber":852,"author":{"gitID":"ZhangYijiong"},"content":"* *ProcessNext* : `pN` +"},{"lineNumber":853,"author":{"gitID":"ZhangYijiong"},"content":"* *ProcessMore* : `pM NUMBER` +"},{"lineNumber":854,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `processMore 2`"},{"lineNumber":855,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":856,"author":{"gitID":"ZhangYijiong"},"content":"* *Select* : `s INDEX` +"},{"lineNumber":857,"author":{"gitID":"ZhangYijiong"},"content":"e.g.`select 2`"},{"lineNumber":858,"author":{"gitID":"ZhangYijiong"},"content":"* *Tag* : `tag INDEX` + tagWord +"},{"lineNumber":859,"author":{"gitID":"ZhangYijiong"},"content":"e.g. `tag 1 Delivered`"},{"lineNumber":860,"author":{"gitID":"ZhangYijiong"},"content":"* *Undo* : `undo`"}],"authorContributionMap":{"ZacZequn":43,"ZhangYijiong":499,"Wuhao-ooo":107,"-":211}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.exceptions.DishNotFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"                + ORDER_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withOrder(VALID_ORDER_AMY)"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withOrder(VALID_ORDER_AMY)"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":90,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + ORDER_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withOrder(VALID_ORDER_AMY)"},{"lineNumber":96,"author":{"gitID":"ZacZequn"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":98,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ORDER_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":108,"author":{"gitID":"ZacZequn"},"content":"                + NAME_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":157,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + ORDER_DESC_AMY"},{"lineNumber":162,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":167,"author":{"gitID":"ZacZequn"},"content":"                + INVALID_ADDRESS_DESC;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"ZacZequn"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":205,"author":{"gitID":"ZacZequn"},"content":"        } catch (DishNotFoundException dfe) {"},{"lineNumber":206,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalArgumentException(\"dish not found in the menu\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":32,"-":217}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"ZhangYijiong"},"content":"            //URL test change to manual testing"},{"lineNumber":127,"author":{"gitID":"ZhangYijiong"},"content":"            //assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":2,"-":152}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":214,"author":{"gitID":"ZhangYijiong"},"content":"        String selectedAddress \u003d getPersonListPanel().getHandleToSelectedCard().getAddress();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"ZhangYijiong"},"content":"            expectedUrl \u003d new URL(BrowserPanel.GOOGLE_MAP_SEARCH_PAGE + selectedAddress.replaceAll(\" \", \"+\"));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":2,"-":291}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d Delivery - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":":repoURL: https://github.com/CS2103-F11-B4/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"By: `Team F11-B4`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":200,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":246,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"----"},{"lineNumber":248,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"},{"lineNumber":254,"author":{"gitID":"-"},"content":"----"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":257,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"----"},{"lineNumber":259,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"},{"lineNumber":274,"author":{"gitID":"-"},"content":"----"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":287,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":296,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":325,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":326,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":328,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":333,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":336,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":348,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":359,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":366,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":367,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":372,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":373,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":374,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"Wuhao-ooo"},"content":"// tag::count[]"},{"lineNumber":382,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Customers’ Orders Count feature"},{"lineNumber":383,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":384,"author":{"gitID":"Wuhao-ooo"},"content":"The counting of customers’ past orders can be stored in an additional local database. The data can be kept in a local XmlCustomerStats file."},{"lineNumber":385,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":386,"author":{"gitID":"Wuhao-ooo"},"content":"The data file consists of CustomerStats. It can be implemented using a HashMap since each customer is identified by his / her unique phoneNumber and has a counter numOfOrders keep counting the number of orders. So, the keys of the HashMap are the phone number Strings and the values are the order count integers corresponding to the phone number String."},{"lineNumber":387,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":388,"author":{"gitID":"Wuhao-ooo"},"content":"As you can see from the diagram below, these are the interactions among the components during an “add” command. After the Model component raises an AddressBookChangedEvent to update the content of the AddressBook, it raises another CustomerStatsChangedEvent to update the current customer’s order count."},{"lineNumber":389,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":390,"author":{"gitID":"Wuhao-ooo"},"content":"image::3.5.1.a.png[width\u003d\"800\"]"},{"lineNumber":391,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":392,"author":{"gitID":"Wuhao-ooo"},"content":"Then the EventsCenter reacts to the event. It finds the customer in the Customer Stats database using the phone number provided and add 1 to the corresponding numOfOrders value."},{"lineNumber":393,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":394,"author":{"gitID":"Wuhao-ooo"},"content":"To implement this feature, there are some modifications to the existing Model component and Storage component to support the additional data structure."},{"lineNumber":395,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":396,"author":{"gitID":"Wuhao-ooo"},"content":"image::3.5.1.b.png[width\u003d\"800\"]"},{"lineNumber":397,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":398,"author":{"gitID":"Wuhao-ooo"},"content":"As the diagram shown above, besides AddressBook and UserPref, now ModelManager has an additional CustomerStats class. It consists an ordersCount field which is a HashMap and has many Phone numbers and numOfOrders counters. Phone numbers and the numOfOrders counters are 1-1 mapped and each pair represent one customer that has placed at least one order before."},{"lineNumber":399,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":400,"author":{"gitID":"Wuhao-ooo"},"content":"image::3.5.1.c.png[width\u003d\"800\"]"},{"lineNumber":401,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":402,"author":{"gitID":"Wuhao-ooo"},"content":"In the Storage component, there is an additional CustomerStatsStorage interface and it is implemented by a XmlCustomerStatsStorage class to read and write the XML file on local machine."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Identification of customers"},{"lineNumber":407,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":408,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 1 (current choice):** Identify a customer by his/her phone number."},{"lineNumber":409,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Easy to implement."},{"lineNumber":410,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: Customers will lose their past orders count if they change phone number."},{"lineNumber":411,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 2:** Identify customers using individual accounts."},{"lineNumber":412,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Customers can still have the counting kept going on even if they change phone numbers, as long as the account does not change."},{"lineNumber":413,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: It requires additional data structures and a server system. Too hard to implement."},{"lineNumber":414,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":415,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store data for orders count"},{"lineNumber":416,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":417,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 1 (current choice):** Use a HashMap to store the phoneNumber-numOfOrders pair."},{"lineNumber":418,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Efficient to search for a given key and update its value."},{"lineNumber":419,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: Information not fully encapsulated."},{"lineNumber":420,"author":{"gitID":"Wuhao-ooo"},"content":"* **Alternative 2:** Use an ArrayList of Customer objects and each Customer object contains a numOfOrders attribute."},{"lineNumber":421,"author":{"gitID":"Wuhao-ooo"},"content":"** Pros: Better encapsulation of information"},{"lineNumber":422,"author":{"gitID":"Wuhao-ooo"},"content":"** Cons: It takes up more space and it requires a much longer time to find a customer and update the counter."},{"lineNumber":423,"author":{"gitID":"Wuhao-ooo"},"content":"// end::count[]"},{"lineNumber":424,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":425,"author":{"gitID":"ZacZequn"},"content":"// tag::menu[]"},{"lineNumber":426,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d Menu feature"},{"lineNumber":427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":428,"author":{"gitID":"ZacZequn"},"content":"All the dishes can be created as an object and then be stored in an additional local database. The data can be kept in a local XmlMenu file."},{"lineNumber":429,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":430,"author":{"gitID":"ZacZequn"},"content":"The data file consists of all the available food and drinks provided by the restaurant. Customers can only order those provided. In the case when anything which is not provided by the restaurant but is ordered by customers, exceptions will be thrown. Notification will be given to inform the user that customers should not order this particular food or drink."},{"lineNumber":431,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":432,"author":{"gitID":"ZacZequn"},"content":"In this case, HashMap is used. While the name of the food is the key, and the Dish object is the value."},{"lineNumber":433,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":434,"author":{"gitID":"ZacZequn"},"content":"In the upcoming Delivery v2.0, users will be able to update the data file by adding or deleting dishes objects inside the database."},{"lineNumber":435,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":436,"author":{"gitID":"ZacZequn"},"content":"As you can see from the diagram below, these are the interactions among the components during an “add” command. During the adding process, the availability of the food ordered will be checked. Order will only be added when ordered food is available."},{"lineNumber":437,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":438,"author":{"gitID":"ZacZequn"},"content":"image::menu_fig_1.png[width\u003d\"800\"]"},{"lineNumber":439,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":440,"author":{"gitID":"ZacZequn"},"content":"To achieve this enhancement, the following modifications are made for Model and Storage components. For Model components, besides AddressBook, UserPref and CustomerStats, now ModelManager has an additional Menu class. It consists a Data field with all the available food provided by the restaurant. In the Storage component, there is an additional MenuStorage interface and it is implemented by a XmlMenuStorage class to read the XML file on local machine."},{"lineNumber":441,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":442,"author":{"gitID":"ZacZequn"},"content":"image::menu_fig_2.png[width\u003d\"800\"]"},{"lineNumber":443,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":444,"author":{"gitID":"ZacZequn"},"content":"image::menu_fig_3.png[width\u003d\"800\"]"},{"lineNumber":445,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store menu"},{"lineNumber":449,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":450,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 1 (current choice):** Use a HashMap. String (names of dishes) will be the key, Dishes will be the value."},{"lineNumber":451,"author":{"gitID":"ZacZequn"},"content":"** Pros: Efficient to search for a given key and decide whether the dish is available."},{"lineNumber":452,"author":{"gitID":"ZacZequn"},"content":"** Cons: User may key in wrongly for names of dishes."},{"lineNumber":453,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 2:** Use a HashMap. Dishes will be the key, prices will be the value."},{"lineNumber":454,"author":{"gitID":"ZacZequn"},"content":"** Pros: It is easy to retrieve the price for each dishes."},{"lineNumber":455,"author":{"gitID":"ZacZequn"},"content":"** Cons: When the user key in the names of dishes, conversions are required to build a Dish object from the name of the dish(String). More information is required e.g. prices of all dishes."},{"lineNumber":456,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Restriction for ordering"},{"lineNumber":457,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":458,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 1 (current choice):** Allow user to input the names for dishes and drinks"},{"lineNumber":459,"author":{"gitID":"ZacZequn"},"content":"** Pros: No extra information is required e.g. a index reference."},{"lineNumber":460,"author":{"gitID":"ZacZequn"},"content":"** Cons: It could be time-consuming for typing all the names. There might be typos which make dishes can not be recognised."},{"lineNumber":461,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 2:** Allow user to input the indexes for dishes and drinks"},{"lineNumber":462,"author":{"gitID":"ZacZequn"},"content":"** Pros: It can be efficient if the user is familiar with the index reference for all food, as the user can just key in indexes."},{"lineNumber":463,"author":{"gitID":"ZacZequn"},"content":"** Cons: It requires a index reference. Extra work needs to be done for creating and maintaining the index reference."},{"lineNumber":464,"author":{"gitID":"ZacZequn"},"content":"// end::menu[]"},{"lineNumber":465,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":466,"author":{"gitID":"ZacZequn"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Maintaining the menu （Coming in v2.0)"},{"lineNumber":467,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":468,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 1 (proposed):** Use lazy deletion."},{"lineNumber":469,"author":{"gitID":"ZacZequn"},"content":"** Pros: Easy to implement."},{"lineNumber":470,"author":{"gitID":"ZacZequn"},"content":"** Cons: It may take a lot of memory space if there are a lot of dishes updated."},{"lineNumber":471,"author":{"gitID":"ZacZequn"},"content":"* **Alternative 2:** Delete the dish object."},{"lineNumber":472,"author":{"gitID":"ZacZequn"},"content":"** Pros: Save memory space"},{"lineNumber":473,"author":{"gitID":"ZacZequn"},"content":"** Cons: While adding back those pre-existing dishes, more work need to be done."},{"lineNumber":474,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":475,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":476,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d ProcessingQueue feature"},{"lineNumber":477,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":478,"author":{"gitID":"ZhangYijiong"},"content":"Processing queue gives restaurants owner a way to manage their kitchen and further differentiates different state of an"},{"lineNumber":479,"author":{"gitID":"ZhangYijiong"},"content":"order."},{"lineNumber":480,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":481,"author":{"gitID":"ZhangYijiong"},"content":"In the code, processing queue is represented by TaskList, which is an observable, ordered list comprises of Task object."},{"lineNumber":482,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":483,"author":{"gitID":"ZhangYijiong"},"content":"**Task list and processing queue are referring to the same thing, as Task list is just the name used in the code. Its"},{"lineNumber":484,"author":{"gitID":"ZhangYijiong"},"content":"intention is to serve as a processing queue.**"},{"lineNumber":485,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":486,"author":{"gitID":"ZhangYijiong"},"content":"**For clarification, in the code, the order object is represented using Person class, meaning although the functionality"},{"lineNumber":487,"author":{"gitID":"ZhangYijiong"},"content":" of the class changes, names of the original classes are retained. This applies to most of the classes. Therefore,"},{"lineNumber":488,"author":{"gitID":"ZhangYijiong"},"content":" order and person, order book and person list are essentially the same thing, only the names are wrong. For the following"},{"lineNumber":489,"author":{"gitID":"ZhangYijiong"},"content":" section, terms order and order book are used.**"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Processing Queue"},{"lineNumber":494,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":495,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 1:** Create another list of order, using existing Order class."},{"lineNumber":496,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Easy to implement."},{"lineNumber":497,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: It gets complicated when you want to process an order, as you could move the original order object to the"},{"lineNumber":498,"author":{"gitID":"ZhangYijiong"},"content":"processing queue or you could create a duplicate order object."},{"lineNumber":499,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 2(current choice)::** Create a brand-new class to represent order being processed."},{"lineNumber":500,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Difficult to implement"},{"lineNumber":501,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: Reduces potential conflicts between existing commands and new commands"},{"lineNumber":502,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":503,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Task Object"},{"lineNumber":504,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":505,"author":{"gitID":"ZhangYijiong"},"content":"The word \"Task\" is used because there exist a class named \"Order\" in Person package."},{"lineNumber":506,"author":{"gitID":"ZhangYijiong"},"content":"Thus, \"Task\" is used to avoid any confusion if it were to named as \"order\". Besides, orders needed to be cooked can be"},{"lineNumber":507,"author":{"gitID":"ZhangYijiong"},"content":"seen a task to finish in some sense.However, this could create other possible"},{"lineNumber":508,"author":{"gitID":"ZhangYijiong"},"content":"confusions."},{"lineNumber":509,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":510,"author":{"gitID":"ZhangYijiong"},"content":"The Task object represents an received order being cooked, as such there exist an one-to-one link between order"},{"lineNumber":511,"author":{"gitID":"ZhangYijiong"},"content":"in order book and task in taskList."},{"lineNumber":512,"author":{"gitID":"ZhangYijiong"},"content":"and stores information same"},{"lineNumber":513,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":514,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":515,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":516,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":517,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"ZhangYijiong"},"content":"The following class diagram illustrates the structure of a Task object."},{"lineNumber":521,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":522,"author":{"gitID":"ZhangYijiong"},"content":"image::Task_Class.png[width\u003d\"790\"]"},{"lineNumber":523,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":524,"author":{"gitID":"ZhangYijiong"},"content":"However, the actual construction of the task in commands omits attributes price, distance, past order count."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Construction of a task object"},{"lineNumber":529,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":530,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 1(rejected):** Constructed based order details(food), address, price of the order,"},{"lineNumber":531,"author":{"gitID":"ZhangYijiong"},"content":" distance from the owner, the customers\u0027 past order count."},{"lineNumber":532,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: It was originally design so that the particular task gets certain priority attached to it, and is able to"},{"lineNumber":533,"author":{"gitID":"ZhangYijiong"},"content":"jump queue."},{"lineNumber":534,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: It is fairer just to cook order based on the inception time of the order. In addition, the process command needs to"},{"lineNumber":535,"author":{"gitID":"ZhangYijiong"},"content":"take in lots of input, not efficient."},{"lineNumber":536,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 2(current choice)::** Construct using an existing order object (adopt order, address, other attributes"},{"lineNumber":537,"author":{"gitID":"ZhangYijiong"},"content":"are zero)"},{"lineNumber":538,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Makes process command much simpler"},{"lineNumber":539,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: Unused code such as Price class, Distance class and Count class."},{"lineNumber":540,"author":{"gitID":"ZhangYijiong"},"content":"// tag::ProcessingQueue[]"},{"lineNumber":541,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d TaskList"},{"lineNumber":542,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":543,"author":{"gitID":"ZhangYijiong"},"content":"TaskList is a ordered list of Task objects. It is used to store the task objects and perform operations on them."},{"lineNumber":544,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":546,"author":{"gitID":"ZhangYijiong"},"content":"Below is the code for TaskList and UniquePersonList. The implementation of TaskList mimics that of the"},{"lineNumber":547,"author":{"gitID":"ZhangYijiong"},"content":"UniquePersonList."},{"lineNumber":548,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":549,"author":{"gitID":"ZhangYijiong"},"content":"[source,java]"},{"lineNumber":550,"author":{"gitID":"ZhangYijiong"},"content":"----"},{"lineNumber":551,"author":{"gitID":"ZhangYijiong"},"content":"public class TaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":552,"author":{"gitID":"ZhangYijiong"},"content":"    // ......"},{"lineNumber":553,"author":{"gitID":"ZhangYijiong"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":554,"author":{"gitID":"ZhangYijiong"},"content":"    // ......"},{"lineNumber":555,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":556,"author":{"gitID":"ZhangYijiong"},"content":"----"},{"lineNumber":557,"author":{"gitID":"ZhangYijiong"},"content":"[source,java]"},{"lineNumber":558,"author":{"gitID":"ZhangYijiong"},"content":"----"},{"lineNumber":559,"author":{"gitID":"ZhangYijiong"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":560,"author":{"gitID":"ZhangYijiong"},"content":"    // ......"},{"lineNumber":561,"author":{"gitID":"ZhangYijiong"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":562,"author":{"gitID":"ZhangYijiong"},"content":"    // ......"},{"lineNumber":563,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":564,"author":{"gitID":"ZhangYijiong"},"content":"----"},{"lineNumber":565,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":566,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of ordering of task objects in task list"},{"lineNumber":567,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":568,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 1:** Use Java PriorityQueue"},{"lineNumber":569,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Efficient to add a task, complexity is lower than alternative 2."},{"lineNumber":570,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: Difficult to implement."},{"lineNumber":571,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 2:** Use an ArrayList of Order objects and comparable interface."},{"lineNumber":572,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Easy to implement, quick to access and edit orders."},{"lineNumber":573,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: When number of orders gets larger, the time taken would be slower as internally the priority queue is maintained"},{"lineNumber":574,"author":{"gitID":"ZhangYijiong"},"content":"by sorting (MergeSort). The GUI would hang for a short while before display results."},{"lineNumber":575,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":576,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d\u003d Storage of Task object and TaskList"},{"lineNumber":577,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":578,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 1(current choice): **Store Task objects together in the default XML storage file addressbook.xml."},{"lineNumber":579,"author":{"gitID":"ZhangYijiong"},"content":"** Pros Only 1 storage file is needed. The storage manager thus only needs to refer to one storage,"},{"lineNumber":580,"author":{"gitID":"ZhangYijiong"},"content":"except for customerStats.xml."},{"lineNumber":581,"author":{"gitID":"ZhangYijiong"},"content":"** Cons Any changes to the Person or Task will affect the storage of both the Person and Task objects,"},{"lineNumber":582,"author":{"gitID":"ZhangYijiong"},"content":"which would significantly increase coupling between the Person and Task classes."},{"lineNumber":583,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":584,"author":{"gitID":"ZhangYijiong"},"content":"* **Alternative 2: **Store Tasks objects in a separate XML file"},{"lineNumber":585,"author":{"gitID":"ZhangYijiong"},"content":"** Pros: Easier to manage as two storage are separated."},{"lineNumber":586,"author":{"gitID":"ZhangYijiong"},"content":"** Cons: Difficult to implement."},{"lineNumber":587,"author":{"gitID":"ZhangYijiong"},"content":"Additional method are needed to for existing save/load functions."},{"lineNumber":588,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":589,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d ProcessOrderCommand"},{"lineNumber":590,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":591,"author":{"gitID":"ZhangYijiong"},"content":"Below is a sequence diagram when \u0027process 1\u0027 is entered."},{"lineNumber":592,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":593,"author":{"gitID":"ZhangYijiong"},"content":"image::ProcessOrder_Sequence.png[width\u003d\"790\"]"},{"lineNumber":594,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":595,"author":{"gitID":"ZhangYijiong"},"content":"As see from the diagram, when the logic manager receives the input, it would sent it to the AddressBookParser, which decide"},{"lineNumber":596,"author":{"gitID":"ZhangYijiong"},"content":"which command the input is trying to access."},{"lineNumber":597,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":598,"author":{"gitID":"ZhangYijiong"},"content":"The keyword \u0027process\u0027 is then identified by the AddressBookParser, following by a instantiation of ProcessOrderCommandParser"},{"lineNumber":599,"author":{"gitID":"ZhangYijiong"},"content":" object to create a ProcessOrderCommand class to interact with model and perform its functionality."},{"lineNumber":600,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":601,"author":{"gitID":"ZhangYijiong"},"content":"ProcessOrderCommand object would call its method execute(), which would make several method calls to update the order book and task list in model,"},{"lineNumber":602,"author":{"gitID":"ZhangYijiong"},"content":"before it returns a CommandResult object back to logic manager."},{"lineNumber":603,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":604,"author":{"gitID":"ZhangYijiong"},"content":"As such, the operation \"process 1\" is carried and the result is shown in the GUI."},{"lineNumber":605,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":606,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d CompleteOrderCommand"},{"lineNumber":607,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":608,"author":{"gitID":"ZhangYijiong"},"content":"Below is a UML diagram when \u0027completeOne 1\u0027 is entered."},{"lineNumber":609,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":610,"author":{"gitID":"ZhangYijiong"},"content":"image::CompleteOneOrder_UML.png[width\u003d\"790\"]"},{"lineNumber":611,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":612,"author":{"gitID":"ZhangYijiong"},"content":"The class involved and sequence of method calling is similar to previous ProcessOrderCommand."},{"lineNumber":613,"author":{"gitID":"ZhangYijiong"},"content":"// end::ProcessingQueue[]"},{"lineNumber":614,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":615,"author":{"gitID":"ZhangYijiong"},"content":"// tag::Path[]"},{"lineNumber":616,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Path feature"},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"ZhangYijiong"},"content":"Path command uses similar implementation as Select command."},{"lineNumber":620,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":621,"author":{"gitID":"ZhangYijiong"},"content":"As you can see from the diagram below, these are the interactions among the components during an “Path” command. The Model component raises a PersonPanelPathChangedEvent."},{"lineNumber":622,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":623,"author":{"gitID":"ZhangYijiong"},"content":"image::figure3.8.1a.png[width\u003d\"800\"]"},{"lineNumber":624,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":625,"author":{"gitID":"ZhangYijiong"},"content":"The diagram below shows how EventsCenter reacts to the event."},{"lineNumber":626,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":627,"author":{"gitID":"ZhangYijiong"},"content":"image::figure3.8.1b.png[width\u003d\"800\"]"},{"lineNumber":628,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":629,"author":{"gitID":"ZhangYijiong"},"content":"To implement this feature, there are some modifications to the existing Model component and UI component."},{"lineNumber":630,"author":{"gitID":"ZhangYijiong"},"content":"// end::Path[]"},{"lineNumber":631,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":637,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":642,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":655,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":656,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":657,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":660,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":663,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":670,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":675,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":695,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":696,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":697,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":698,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":699,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":700,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":701,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":702,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":703,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":707,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":710,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":727,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":734,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":735,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":736,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":741,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":742,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":745,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":746,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":755,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":760,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":765,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":768,"author":{"gitID":"-"},"content":"+"},{"lineNumber":769,"author":{"gitID":"-"},"content":"****"},{"lineNumber":770,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":771,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":772,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":773,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":774,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":775,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":776,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":777,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":778,"author":{"gitID":"-"},"content":"****"},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":786,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":789,"author":{"gitID":"-"},"content":"+"},{"lineNumber":790,"author":{"gitID":"-"},"content":"****"},{"lineNumber":791,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":792,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":793,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":794,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":795,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":796,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":797,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":798,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":799,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":800,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":801,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":802,"author":{"gitID":"-"},"content":"****"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":805,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":810,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":813,"author":{"gitID":"-"},"content":"+"},{"lineNumber":814,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":815,"author":{"gitID":"-"},"content":"+"},{"lineNumber":816,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":817,"author":{"gitID":"-"},"content":"+"},{"lineNumber":818,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":819,"author":{"gitID":"-"},"content":"+"},{"lineNumber":820,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":821,"author":{"gitID":"-"},"content":"+"},{"lineNumber":822,"author":{"gitID":"-"},"content":"****"},{"lineNumber":823,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":824,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":825,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":826,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":827,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":828,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":829,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":830,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":831,"author":{"gitID":"-"},"content":"****"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":834,"author":{"gitID":"-"},"content":"+"},{"lineNumber":835,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":836,"author":{"gitID":"-"},"content":"+"},{"lineNumber":837,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":838,"author":{"gitID":"-"},"content":"+"},{"lineNumber":839,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":840,"author":{"gitID":"-"},"content":"+"},{"lineNumber":841,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":842,"author":{"gitID":"-"},"content":"+"},{"lineNumber":843,"author":{"gitID":"-"},"content":"****"},{"lineNumber":844,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":845,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":846,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":847,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":848,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":849,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":850,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":851,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":852,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":853,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":854,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":855,"author":{"gitID":"-"},"content":"****"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":858,"author":{"gitID":"-"},"content":"+"},{"lineNumber":859,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":860,"author":{"gitID":"-"},"content":"+"},{"lineNumber":861,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":862,"author":{"gitID":"-"},"content":"+"},{"lineNumber":863,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":864,"author":{"gitID":"-"},"content":"+"},{"lineNumber":865,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":866,"author":{"gitID":"-"},"content":"+"},{"lineNumber":867,"author":{"gitID":"-"},"content":"****"},{"lineNumber":868,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":869,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":870,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":871,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":872,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":873,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":874,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":875,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":876,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":877,"author":{"gitID":"-"},"content":"****"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":880,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":885,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":888,"author":{"gitID":"-"},"content":"+"},{"lineNumber":889,"author":{"gitID":"-"},"content":"****"},{"lineNumber":890,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":891,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":892,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":893,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":894,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":895,"author":{"gitID":"-"},"content":"****"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":898,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":905,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":906,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":911,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":912,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":913,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":914,"author":{"gitID":"-"},"content":""},{"lineNumber":915,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":918,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":923,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":928,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":931,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":936,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":937,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":942,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":943,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":944,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":947,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":952,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":959,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":960,"author":{"gitID":"-"},"content":""},{"lineNumber":961,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":964,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":971,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":976,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":977,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":980,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":991,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":996,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":999,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1026,"author":{"gitID":"Wuhao-ooo"},"content":"Delivery is targeted at restaurants, especially the small ones,  which want to have a system to keep track customers’ orders of delivery."},{"lineNumber":1027,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1028,"author":{"gitID":"Wuhao-ooo"},"content":"A restaurant can have hundreds of orders a day and it’s quite troublesome for the restaurant to manually keep track all customer information, including their names, contact numbers, addresses, orders and expected time of delivery etc."},{"lineNumber":1029,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1030,"author":{"gitID":"Wuhao-ooo"},"content":"Hence they need a software to store all personal information and order information in an organised manner."},{"lineNumber":1031,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"Wuhao-ooo"},"content":"* Owns a small-medium restaurant which provides delivery services/ big restaurants"},{"lineNumber":1036,"author":{"gitID":"Wuhao-ooo"},"content":"* Wants to have a database system for orders of deliveries from their customers"},{"lineNumber":1037,"author":{"gitID":"Wuhao-ooo"},"content":"* Not currently cooperating with delivery apps"},{"lineNumber":1038,"author":{"gitID":"Wuhao-ooo"},"content":"* Receives orders of food via phone (hotline)"},{"lineNumber":1039,"author":{"gitID":"Wuhao-ooo"},"content":"* Knows how to use CLI and prefer typing over using mouse"},{"lineNumber":1040,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"Wuhao-ooo"},"content":"*Value proposition*: Help restaurants maintain all the information of customers and a queue for delivery services"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"Wuhao-ooo"},"content":"*Feature contribution*"},{"lineNumber":1045,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1046,"author":{"gitID":"Wuhao-ooo"},"content":"* Wu Hao"},{"lineNumber":1047,"author":{"gitID":"Wuhao-ooo"},"content":"- Minor enhancement: Add alias to each command +"},{"lineNumber":1048,"author":{"gitID":"Wuhao-ooo"},"content":"In case the restaurant has to handle many orders during lunch time, this feature helps restaurant owners to manage"},{"lineNumber":1049,"author":{"gitID":"Wuhao-ooo"},"content":"the orders faster using shortcuts for commands."},{"lineNumber":1050,"author":{"gitID":"Wuhao-ooo"},"content":"- Minor enhancement: Add a light colour theme +"},{"lineNumber":1051,"author":{"gitID":"Wuhao-ooo"},"content":"An yellow-based light colour theme is now available as an alternative to the default dark grey colour theme. This"},{"lineNumber":1052,"author":{"gitID":"Wuhao-ooo"},"content":"is to give the users a warm and comfortable feeling when they are doing their busy work in the restaurant."},{"lineNumber":1053,"author":{"gitID":"Wuhao-ooo"},"content":"- Major enhancement: Add a customers\u0027 past orders count feature +"},{"lineNumber":1054,"author":{"gitID":"Wuhao-ooo"},"content":"The restaurant can identify the frequent and loyal customers to give discounts."},{"lineNumber":1055,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1056,"author":{"gitID":"ZacZequn"},"content":"* Zhang Zequn"},{"lineNumber":1057,"author":{"gitID":"ZacZequn"},"content":"- Minor enhancement: Add colours to different tags +"},{"lineNumber":1058,"author":{"gitID":"ZacZequn"},"content":"Same tags will be assigned the same colours which makes the differentiation of tags clearer."},{"lineNumber":1059,"author":{"gitID":"ZacZequn"},"content":"- Minor enhancement: Add Halal/Non-halal and Vegetarian/Non-vegetarian features +"},{"lineNumber":1060,"author":{"gitID":"ZacZequn"},"content":"Halal/Non-halal and Vegetarian/Non-vegetarian features now are available for Add command. Since these two features"},{"lineNumber":1061,"author":{"gitID":"ZacZequn"},"content":"are optional, if no input is given, the default value is Non-halal and Non-vegetarian."},{"lineNumber":1062,"author":{"gitID":"ZacZequn"},"content":"- Major enhancement: Add a menu (storage for all the dishes customers can order) +"},{"lineNumber":1063,"author":{"gitID":"ZacZequn"},"content":"The restaurant can modify the menu and customers can only order what are on the menu."},{"lineNumber":1064,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":1065,"author":{"gitID":"ZhangYijiong"},"content":"* Zhang Yijiong"},{"lineNumber":1066,"author":{"gitID":"ZhangYijiong"},"content":"- Minor enhancement: Add back up method in storage +"},{"lineNumber":1067,"author":{"gitID":"ZhangYijiong"},"content":"Users are able to back up the address book in a different location."},{"lineNumber":1068,"author":{"gitID":"ZhangYijiong"},"content":"- Minor enhancement: Add find location feature +"},{"lineNumber":1069,"author":{"gitID":"ZhangYijiong"},"content":"When clicking one particular person in the addressbook, the browser on the right will automatically show that person\u0027s"},{"lineNumber":1070,"author":{"gitID":"ZhangYijiong"},"content":"address using google map."},{"lineNumber":1071,"author":{"gitID":"ZhangYijiong"},"content":"- Major enhancement: Implement a processing queue structure to process orders from add method"},{"lineNumber":1072,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1081,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |new user |view instructions for commands | get familiar with CLI"},{"lineNumber":1082,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1083,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |retrieve a particular customer’s information | know whether he/she is a regular customer"},{"lineNumber":1084,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1085,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |check the current status of a particular customer’s order | answer the customer’s query"},{"lineNumber":1086,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1087,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |record down the customer’s order easily |"},{"lineNumber":1088,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1089,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |check how much the customer spend | decide whether should give him/her a promotional price"},{"lineNumber":1090,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1091,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know how many regular customers the restaurant has per day | can know how much ingredients should be prepared"},{"lineNumber":1092,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1093,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know next order to be delivered | send delivery courier to the right place in time"},{"lineNumber":1094,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1095,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |remove an order | complete an order when it’s delivered"},{"lineNumber":1096,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1097,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |check how many orders are still yet to be delivered | speed up preparation"},{"lineNumber":1098,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1099,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |cancel an order | no longer need to prepare for that order"},{"lineNumber":1100,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1101,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |edit the order |"},{"lineNumber":1102,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1103,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know whether the courier spoil the order |reorder for the customer"},{"lineNumber":1104,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1105,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know how many orders need to be completed for a day in the future|"},{"lineNumber":1106,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1107,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |update the customer’s delivering address and personal phone number|"},{"lineNumber":1108,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1109,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know whether the customer has exact amount of cash | prepare the change in advance"},{"lineNumber":1110,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1111,"author":{"gitID":"Wuhao-ooo"},"content":"|`* * *` |user |know whether the customer has additional requirements|"},{"lineNumber":1112,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1113,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |get feedback rating from the customer |improve the service next time"},{"lineNumber":1114,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1115,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |see the address of current order in the map|"},{"lineNumber":1116,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1117,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |check customer\u0027s ratings | decide whether should take the order"},{"lineNumber":1118,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1119,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |check revenue and cost of the day | calculate profit"},{"lineNumber":1120,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1121,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know which dishes are more favoured by customers | adjust the menu accordingly"},{"lineNumber":1122,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1123,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know the maximum number of orders during the peak hour |know how many delivery couriers should be employed"},{"lineNumber":1124,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1125,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know the peak hours everyday| facilitate manpower"},{"lineNumber":1126,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1127,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |retrieve personal information from historical data if the customer has placed an order before |"},{"lineNumber":1128,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1129,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know the customer’s frequently-order dishes |create a specialised menu for him/her"},{"lineNumber":1130,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1131,"author":{"gitID":"Wuhao-ooo"},"content":"|`* *` |user |know when the customer ordered for his/her first time| send gifts for anniversary"},{"lineNumber":1132,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1133,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |see the orders with addresses close to one another |deliver their orders together"},{"lineNumber":1134,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1135,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |see the optimal route the courier can take | assign several orders to a courier so that he can deliver them all within one trip"},{"lineNumber":1136,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1137,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |know the weather condition of an region | inform the customer earlier if the delivery cannot reach destination in time"},{"lineNumber":1138,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1139,"author":{"gitID":"Wuhao-ooo"},"content":"|`*` |user |know the traffic conditions of the region near the customer’s place |inform the customer earlier if the delivery cannot reach destination in time"},{"lineNumber":1140,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Delivery` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":1156,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":1158,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1165,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1169,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"** 3a1. AddressBook shows an error message."},{"lineNumber":1172,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add an order"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"1.  User request to add an order"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"2.  Delivery adds the offer to the current queue"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"3.  Delivery shows a list of all current orders"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"**Extensions**"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"* 1a. The input phone number is invalid"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"** 1a1. Delivery shows an error message indicating the correct phone number format"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"* 1b. The input address cannot be found"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"** 1b1. Delivery shows an error message indicating the current address is invalid"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"* 1c. The food ordered is sold out / not available"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"** 1c1. Delivery shows an error message indicating the food order cannot be placed successfully"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add an order with priority"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"1.  User request to add an order (prioritised)"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"2.  Delivery decides what is the priority"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"3.  Delivery adds the offer to the current queue (cut queue)"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"4.  Delivery shows a list of all current orders"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: delete an order"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"1.  User request to delete an order"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"2.  Check the status of the order e.g. unprepared, preparing or delivering"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"3.  Delivery deletes the offer from the queue containing the order"},{"lineNumber":1226,"author":{"gitID":"-"},"content":"4.  Delivery shows a list of all current orders"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"**Extensions**"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"* 1a. The food ordered is prepared"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"** 1a1. Delivery shows an message indicating the customer should be charged for the price of the food ordered"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"* 1b. The food ordered is delivering"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"** 1b1. Delivery shows an message indicating the customer should be charged for the price of the food ordered and the delivery fee"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query a specific time"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1247,"author":{"gitID":"-"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"1.  User request to query a specific time"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"2.  Delivery shows a list of all orders at that time"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query a specific location"},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"1.  User request to query a specific location"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"2.  Delivery shows a list of all orders that are going the location"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1260,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query a customer"},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"1.  User request to query a specific customer"},{"lineNumber":1267,"author":{"gitID":"-"},"content":"2.  Delivery shows a list of information of the customer"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: query revenue"},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"**MSS**"},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"1.  User request to query revenue of a day"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"2.  Delivery shows the revenue"},{"lineNumber":1277,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"**Extensions**"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"* 1a. The day is sometime in the future"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"** 1a1. Delivery shows an message indicating that feature cannot be used on future time."},{"lineNumber":1286,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":".  Should be able to work offline"},{"lineNumber":1296,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 orders in working queue and 5000 persons in historical database"},{"lineNumber":1297,"author":{"gitID":"-"},"content":".  Should be able to remain open for a long period of time while not taking up more than 100MB of RAM"},{"lineNumber":1298,"author":{"gitID":"-"},"content":".  Should cater to both IT proficient people and those who are new to Command Line Interface"},{"lineNumber":1299,"author":{"gitID":"-"},"content":".  Should work on both 32-bit and 64-bit environments."},{"lineNumber":1300,"author":{"gitID":"-"},"content":".  Should support English system"},{"lineNumber":1301,"author":{"gitID":"-"},"content":".  Should be able to retain information in event of crash or force shutdown."},{"lineNumber":1302,"author":{"gitID":"-"},"content":".  Should respond to user command within 2 seconds."},{"lineNumber":1303,"author":{"gitID":"-"},"content":".  View should fit the screen of any computer screen size."},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"[[personal-information]]Personal information::"},{"lineNumber":1311,"author":{"gitID":"-"},"content":"Personal information refers to the personal particulars of a customer, including his/her name, contact number, address and email address."},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"Wuhao-ooo"},"content":"[[meal-order]] Meal order information::"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"Meal order information refers to which dishes are ordered, what time it is ordered, what time it should be delivered, the total money of the dishes"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"[[gui]] GUI::"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"GUI stands for Graphical User Interface. It is a type of user interface that allows user to interact with the software through graphical icons and visualisation."},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"[[cli]]CLI::"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"CLI stands for Command-line interface. It is a way for the user to give commands to the computer program in the form of successive lines of text"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1327,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1328,"author":{"gitID":"-"},"content":""},{"lineNumber":1329,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1336,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1339,"author":{"gitID":"-"},"content":""},{"lineNumber":1340,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1341,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1349,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1356,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1357,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1362,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1363,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1364,"author":{"gitID":"ZhangYijiong"},"content":"// tag::Test[]"},{"lineNumber":1365,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Adding an order"},{"lineNumber":1366,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1367,"author":{"gitID":"ZhangYijiong"},"content":". Adding an order while there is no order currently"},{"lineNumber":1368,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1369,"author":{"gitID":"ZhangYijiong"},"content":".. Prerequisites: No order in the list."},{"lineNumber":1370,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `add n/Tom p/98765432 f/Chicken Rice a/1A Kent Ridge Road` +"},{"lineNumber":1371,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: First order in the list is the order added. Details of the added order shown in the status message."},{"lineNumber":1372,"author":{"gitID":"ZhangYijiong"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":1373,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `add n/Tom p/98765432 f/Hamburger a/1A Kent Ridge Road` +"},{"lineNumber":1374,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: Not added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1375,"author":{"gitID":"ZhangYijiong"},"content":".. Other incorrect delete commands to try: `add n/Tom p/98765432 f/Double Cheeseburger a/1A Kent Ridge Road``, +"},{"lineNumber":1376,"author":{"gitID":"ZhangYijiong"},"content":"     `add`   +"},{"lineNumber":1377,"author":{"gitID":"ZhangYijiong"},"content":"     `add n/Tom p/98765432 f/Chicken Rice` +"},{"lineNumber":1378,"author":{"gitID":"ZhangYijiong"},"content":"    `add n/Tom p/98765432 f/Chicken Rice`  +"},{"lineNumber":1379,"author":{"gitID":"ZhangYijiong"},"content":"   `add p/98765432 f/Chicken Rice a/1A Kent Ridge Road` +"},{"lineNumber":1380,"author":{"gitID":"ZhangYijiong"},"content":"   `add n/Tom f/Chicken Rice a/1A Kent Ridge Road` +"},{"lineNumber":1381,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Deleting an order"},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"ZhangYijiong"},"content":". Deleting an order while all orders are listed"},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"ZhangYijiong"},"content":".. Prerequisites: List all orders using the `list` command. Multiple orders in the list."},{"lineNumber":1388,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1389,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: First order is deleted from the list. Details of the deleted order shown in the status message."},{"lineNumber":1390,"author":{"gitID":"ZhangYijiong"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":1391,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1392,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1393,"author":{"gitID":"ZhangYijiong"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) `delete -1`,"},{"lineNumber":1394,"author":{"gitID":"ZhangYijiong"},"content":" `delete dfaf`, `delete !@#`  +"},{"lineNumber":1395,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Processing an order"},{"lineNumber":1399,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1400,"author":{"gitID":"ZhangYijiong"},"content":". Process an existing order at index i, add it to the processing queue on the right and label the"},{"lineNumber":1401,"author":{"gitID":"ZhangYijiong"},"content":"original order as \"Processed\""},{"lineNumber":1402,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1403,"author":{"gitID":"ZhangYijiong"},"content":".. Prerequisites: There exist orders in the order book."},{"lineNumber":1404,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `process 1` +"},{"lineNumber":1405,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: First order is added to the processing queue on the right. Original order is tagged as \"Processed\"."},{"lineNumber":1406,"author":{"gitID":"ZhangYijiong"},"content":"   Details of the added order shown in the status message."},{"lineNumber":1407,"author":{"gitID":"ZhangYijiong"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":1408,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `process 0` +"},{"lineNumber":1409,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1410,"author":{"gitID":"ZhangYijiong"},"content":".. Other incorrect delete commands to try: `process`, `process x` (where x is larger than the list size) `process -1`,"},{"lineNumber":1411,"author":{"gitID":"ZhangYijiong"},"content":" `process dfaf`, `process !@#`  +"},{"lineNumber":1412,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Completing an order"},{"lineNumber":1415,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1416,"author":{"gitID":"ZhangYijiong"},"content":". Complete a processed order at index i"},{"lineNumber":1417,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1418,"author":{"gitID":"ZhangYijiong"},"content":".. Prerequisites: There exist orders in the processing queue on the right."},{"lineNumber":1419,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `completeOne 1` +"},{"lineNumber":1420,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: First order is removed from processing queue on the right. Details of the added order shown in the status message."},{"lineNumber":1421,"author":{"gitID":"ZhangYijiong"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":1422,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `completeOne 0` +"},{"lineNumber":1423,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: No order is removed from the processing queue. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1424,"author":{"gitID":"ZhangYijiong"},"content":".. Other incorrect delete commands to try: `completeOne `, `completeOne x` (where x is larger than the list size) `completeOne -1`,"},{"lineNumber":1425,"author":{"gitID":"ZhangYijiong"},"content":" `completeOne dfaf`, `completeOne !@#`  +"},{"lineNumber":1426,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1427,"author":{"gitID":"-"},"content":""},{"lineNumber":1428,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1429,"author":{"gitID":"ZhangYijiong"},"content":"\u003d\u003d\u003d Showing path to an order"},{"lineNumber":1430,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1431,"author":{"gitID":"ZhangYijiong"},"content":". Show path to an unprocessed order at index i of the order book, on the browser panel using google map"},{"lineNumber":1432,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":1433,"author":{"gitID":"ZhangYijiong"},"content":".. Prerequisites: There exist orders in the processing queue on the right."},{"lineNumber":1434,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `path 1` +"},{"lineNumber":1435,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: Window in the middle shows path from own address to order one\u0027s address using google map."},{"lineNumber":1436,"author":{"gitID":"ZhangYijiong"},"content":"   Command success message shown in the status message."},{"lineNumber":1437,"author":{"gitID":"ZhangYijiong"},"content":".. Test case: `path 0` +"},{"lineNumber":1438,"author":{"gitID":"ZhangYijiong"},"content":"   Expected: No google map page shown. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1439,"author":{"gitID":"ZhangYijiong"},"content":".. Other incorrect delete commands to try: `path `, `path x` (where x is larger than the list size) `path -1`,"},{"lineNumber":1440,"author":{"gitID":"ZhangYijiong"},"content":" `path dfaf`, `path !@#`  +"},{"lineNumber":1441,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1442,"author":{"gitID":"-"},"content":""},{"lineNumber":1443,"author":{"gitID":"ZhangYijiong"},"content":"// end::Test[]"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1447,"author":{"gitID":"-"},"content":""},{"lineNumber":1448,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1449,"author":{"gitID":"-"},"content":""},{"lineNumber":1450,"author":{"gitID":"Wuhao-ooo"},"content":"// tag::testcounting[]"},{"lineNumber":1451,"author":{"gitID":"Wuhao-ooo"},"content":"\u003d\u003d\u003d Counting past orders"},{"lineNumber":1452,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":1453,"author":{"gitID":"Wuhao-ooo"},"content":". Counting customers\u0027 past orders based on phone numbers"},{"lineNumber":1454,"author":{"gitID":"Wuhao-ooo"},"content":".. Test case: `add n/Wu Hao p/91111111 f/Chicken Rice a/NUS` +"},{"lineNumber":1455,"author":{"gitID":"Wuhao-ooo"},"content":"Expected: The customer with phone number \"91111111\" has accumulated 1 order. +"},{"lineNumber":1456,"author":{"gitID":"Wuhao-ooo"},"content":"The result can be found in /data/customerstats.xml"},{"lineNumber":1457,"author":{"gitID":"Wuhao-ooo"},"content":".. Test case: (continued) `add n/Zequn p/92222222 f/Chicken Rice a/NUS` +"},{"lineNumber":1458,"author":{"gitID":"Wuhao-ooo"},"content":"Expected: Another customer with a different phone number \"92222222\" has accumulated 1 order. +"},{"lineNumber":1459,"author":{"gitID":"Wuhao-ooo"},"content":"The result will be updated and reflected in /data/customerstats.xml"},{"lineNumber":1460,"author":{"gitID":"Wuhao-ooo"},"content":".. Test case: (continued)`clear` +"},{"lineNumber":1461,"author":{"gitID":"Wuhao-ooo"},"content":"`add n/Wu Hao p/91111111 f/Chicken Rice a/NUS` +"},{"lineNumber":1462,"author":{"gitID":"Wuhao-ooo"},"content":"`clear` +"},{"lineNumber":1463,"author":{"gitID":"Wuhao-ooo"},"content":"`add n/Wu Hao p/91111111 f/Chicken Rice a/NUS` +"},{"lineNumber":1464,"author":{"gitID":"Wuhao-ooo"},"content":"Expected: Now the first customer with phone number \"91111111\" has placed 3 orders in total in the past. +"},{"lineNumber":1465,"author":{"gitID":"Wuhao-ooo"},"content":"The results are reflected in /data/customerstats.xml"},{"lineNumber":1466,"author":{"gitID":"Wuhao-ooo"},"content":"// end::testcounting[]"},{"lineNumber":1467,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"ZacZequn":56,"ZhangYijiong":217,"Wuhao-ooo":145,"-":1049}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"     *  Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"     *  in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"     *  @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"        switch (tagName) {"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"        case \"classmates\":"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        case \"owesMoney\":"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"            return \"teal\";"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"        case \"colleagues\":"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"        case \"neighbours\":"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"            return \"yellow\";"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"        case \"family\":"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"        case \"friend\":"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"            return \"orange\";"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"        case \"friends\":"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"            return \"brown\";"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"        case \"husband\":"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"            return \"grey\";"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"        default:"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"            return \"\";"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"     *  Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":"     *  color."},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":90,"author":{"gitID":"ZacZequn"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":91,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":46,"-":80}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.testutil.TypicalDishes.getTypicalMenu;"},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":100,"author":{"gitID":"ZacZequn"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs(), new CustomerStats(), getTypicalMenu());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":3,"Wuhao-ooo":1,"-":122}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.GOOGLE_MAP_SEARCH_PAGE"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"                + ALICE.getAddress().getGoogleMapSearchForm());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        //assertEquals(expectedPersonUrl, new URL(browserPanelHandle.getLoadedUrl()"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"        //.toString().substring(0, browserPanelHandle.getLoadedUrl().toString().indexOf(\"?\"))));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":4,"-":46}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"        String defaultConfigAsString \u003d \"App title : Delivery\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_ORDER \u003d \"Chicken Rice\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":81,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"                null, VALID_PHONE, VALID_ORDER,"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, null, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"ZacZequn"},"content":"                VALID_NAME, INVALID_PHONE, VALID_ORDER,"},{"lineNumber":94,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, null, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":103,"author":{"gitID":"ZacZequn"},"content":"                VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, null, VALID_TAGS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":136,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":7,"-":142}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), new Menu());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":121,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":3,"Wuhao-ooo":1,"-":123}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"                + PHONE_DESC_BOB + \" \" + ORDER_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"                .withOrder(VALID_ORDER_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":76,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":124,"author":{"gitID":"ZacZequn"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":174,"author":{"gitID":"ZacZequn"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"ZacZequn"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":207,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":211,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":8,"-":267}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.PathCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"    /*@Test"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"    public void parseCommand_addOrder() throws Exception {"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"        Task task \u003d new TaskBuilder().build();"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        ProcessOrderCommand command \u003d (ProcessOrderCommand) parser.parseCommand(TaskUtil.getAddOrderCommand(task));"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"        //test fails"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"        //assertEquals(new ProcessOrderCommand(task), command);"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"    */"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":62,"content":"    //@@author"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":70,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":72,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":73,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":74,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":76,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":80,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":85,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":87,"author":{"gitID":"Wuhao-ooo"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":88,"author":{"gitID":"Wuhao-ooo"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":89,"author":{"gitID":"Wuhao-ooo"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":90,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":92,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":98,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":103,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":105,"author":{"gitID":"Wuhao-ooo"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":106,"author":{"gitID":"Wuhao-ooo"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":107,"author":{"gitID":"Wuhao-ooo"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":108,"author":{"gitID":"Wuhao-ooo"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":109,"author":{"gitID":"Wuhao-ooo"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":110,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":112,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":123,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":128,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":130,"author":{"gitID":"Wuhao-ooo"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":131,"author":{"gitID":"Wuhao-ooo"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":132,"author":{"gitID":"Wuhao-ooo"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":133,"author":{"gitID":"Wuhao-ooo"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":134,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":136,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":144,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":146,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":147,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":148,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":150,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":165,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":167,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":168,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":169,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":170,"author":{"gitID":"Wuhao-ooo"},"content":"        try {"},{"lineNumber":171,"author":{"gitID":"Wuhao-ooo"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":172,"author":{"gitID":"Wuhao-ooo"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":173,"author":{"gitID":"Wuhao-ooo"},"content":"        } catch (ParseException pe) {"},{"lineNumber":174,"author":{"gitID":"Wuhao-ooo"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":175,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":178,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":186,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":188,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":189,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":190,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":192,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":193,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"ZhangYijiong"},"content":"    public void parseCommand_path() throws Exception {"},{"lineNumber":195,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand command \u003d (PathCommand) parser.parseCommand("},{"lineNumber":196,"author":{"gitID":"ZhangYijiong"},"content":"                PathCommand.COMMAND_WORD + \" \" + INDEX_SECOND_PERSON.getOneBased());"},{"lineNumber":197,"author":{"gitID":"ZhangYijiong"},"content":"        assertEquals(new PathCommand(INDEX_SECOND_PERSON), command);"},{"lineNumber":198,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":200,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":201,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"ZhangYijiong"},"content":"    public void parseCommand_pathAlias() throws Exception {"},{"lineNumber":203,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand command \u003d (PathCommand) parser.parseCommand("},{"lineNumber":204,"author":{"gitID":"ZhangYijiong"},"content":"                PathCommand.COMMAND_ALIAS + \" \" + INDEX_SECOND_PERSON.getOneBased());"},{"lineNumber":205,"author":{"gitID":"ZhangYijiong"},"content":"        assertEquals(new PathCommand(INDEX_SECOND_PERSON), command);"},{"lineNumber":206,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":208,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":212,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":217,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":219,"author":{"gitID":"Wuhao-ooo"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":220,"author":{"gitID":"Wuhao-ooo"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":221,"author":{"gitID":"Wuhao-ooo"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":222,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":224,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":232,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommandAlias() throws Exception {"},{"lineNumber":234,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":235,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":236,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":238,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":246,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"Wuhao-ooo"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommandAlias() throws Exception {"},{"lineNumber":248,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":249,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":250,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":252,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"ZhangYijiong":28,"Wuhao-ooo":93,"-":144}},{"path":"src/test/java/seedu/address/logic/parser/ProcessOrderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessOrderCommand;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"public class ProcessOrderCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    private ProcessOrderCommandParser parser \u003d new ProcessOrderCommandParser();"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseSuccess(parser, \"1\", new ProcessOrderCommand(INDEX_FIRST_PERSON));"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_invalidArgsSecond_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"#\","},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProcessOrderCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProcessOrderCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":34}},{"path":"src/test/java/seedu/address/logic/parser/CompleteOneOrderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.CompleteOneOrderCommand;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"public class CompleteOneOrderCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    private CompleteOneOrderCommandParser parser \u003d new CompleteOneOrderCommandParser();"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseSuccess(parser, \"1\", new CompleteOneOrderCommand(INDEX_FIRST_PERSON));"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_invalidArgsSecond_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"#\","},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteOneOrderCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteOneOrderCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":35}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"        // invalid phone followed by valid order"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + ORDER_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":99,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_ORDER_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":123,"author":{"gitID":"ZacZequn"},"content":"                .build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":160,"author":{"gitID":"ZacZequn"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":161,"author":{"gitID":"ZacZequn"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":162,"author":{"gitID":"ZacZequn"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":165,"author":{"gitID":"ZacZequn"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":182,"author":{"gitID":"ZacZequn"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":184,"author":{"gitID":"ZacZequn"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":15,"-":185}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AMY;"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"                .withPhone(VALID_PHONE_BOB).withOrder(VALID_ORDER_BOB)"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"        // multiple orders - last order accepted"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_AMY + ORDER_DESC_BOB"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"                .withOrder(VALID_ORDER_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"                .withPhone(VALID_PHONE_AMY).withOrder(VALID_ORDER_AMY)"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":90,"author":{"gitID":"ZacZequn"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ORDER_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"ZacZequn"},"content":"                        + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":99,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":103,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + ORDER_DESC_BOB"},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":106,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"        // missing order prefix"},{"lineNumber":108,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_ORDER_BOB"},{"lineNumber":109,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_ORDER_BOB"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":124,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":128,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + ORDER_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":131,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":132,"author":{"gitID":"ZacZequn"},"content":"        // invalid order"},{"lineNumber":133,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB +  PHONE_DESC_BOB + INVALID_ORDER_DESC"},{"lineNumber":134,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Order.MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"                + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":142,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"ZacZequn"},"content":"                + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":147,"author":{"gitID":"ZacZequn"},"content":"                        + INVALID_ADDRESS_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + ORDER_DESC_BOB"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":63,"-":91}},{"path":"src/test/java/seedu/address/logic/parser/PathCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.PathCommand;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":" * Test scope: similar to {@code DeleteCommandParserTest} and to{@code SelectCommandParserTest}}."},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"public class PathCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    private PathCommandParser parser \u003d new PathCommandParser();"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_validArgs_returnsPathCommand() {"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseSuccess(parser, \"3\", new PathCommand(INDEX_THIRD_PERSON));"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"ABC\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, PathCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":29}},{"path":"src/test/java/seedu/address/logic/parser/LoadCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.LoadCommand;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * Test scope: similar to {@code DeleteCommandParserTest} and to{@code SelectCommandParserTest}}."},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"public class LoadCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    private LoadCommandParser parser \u003d new LoadCommandParser();"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoadCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":22}},{"path":"src/test/java/seedu/address/logic/parser/TagOrderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.TagOrderCommand;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"public class TagOrderCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    private TagOrderCommandParser parser \u003d new TagOrderCommandParser();"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseSuccess(parser, \"1 friend\","},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"                new TagOrderCommand(INDEX_FIRST_PERSON, VALID_TAG_FRIEND));"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"1\","},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagOrderCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        assertParseFailure(parser, \"djfal;kjafld;\","},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagOrderCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":36}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":53,"author":{"gitID":"Wuhao-ooo"},"content":"                new UserPrefs(),"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(),"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"                new Menu());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Wuhao-ooo"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":77,"author":{"gitID":"Wuhao-ooo"},"content":"                new UserPrefs(),"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(),"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"                new Menu());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Wuhao-ooo"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":93,"author":{"gitID":"Wuhao-ooo"},"content":"                new UserPrefs(),"},{"lineNumber":94,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(),"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"                new Menu());"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"Wuhao-ooo"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":112,"author":{"gitID":"Wuhao-ooo"},"content":"                new UserPrefs(),"},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(),"},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"                new Menu());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":176,"author":{"gitID":"Wuhao-ooo"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":177,"author":{"gitID":"Wuhao-ooo"},"content":"                new UserPrefs(),"},{"lineNumber":178,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(),"},{"lineNumber":179,"author":{"gitID":"ZacZequn"},"content":"                new Menu());"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":225,"author":{"gitID":"Wuhao-ooo"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":226,"author":{"gitID":"Wuhao-ooo"},"content":"                new UserPrefs(),"},{"lineNumber":227,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(),"},{"lineNumber":228,"author":{"gitID":"ZacZequn"},"content":"                new Menu());"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":14,"Wuhao-ooo":13,"-":255}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), new Menu());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), new Menu());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"},{"lineNumber":96,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), new Menu());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), new Menu());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":10,"Wuhao-ooo":1,"-":189}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":3,"Wuhao-ooo":1,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"Wuhao-ooo":1,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.testutil.TypicalDishes.getTypicalMenu;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), getTypicalMenu());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), getTypicalMenu());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":4,"Wuhao-ooo":1,"-":52}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"            new CustomerStats(), new Menu());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), new Menu());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":6,"Wuhao-ooo":1,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    public static final String VALID_ORDER_AMY \u003d \"Chicken Rice\";"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    public static final String VALID_ORDER_BOB \u003d \"Chicken Rice\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    public static final String ORDER_DESC_AMY \u003d \" \" + PREFIX_ORDER + VALID_ORDER_AMY;"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"    public static final String ORDER_DESC_BOB \u003d \" \" + PREFIX_ORDER + VALID_ORDER_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    public static final String INVALID_ORDER_DESC \u003d \" \" + PREFIX_ORDER; // empty string not allowed for order"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"                .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"                .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":100,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":8,"-":148}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"            new CustomerStats(), new Menu());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"            new CustomerStats(), new Menu());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":6,"Wuhao-ooo":1,"-":65}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"            new CustomerStats(), new Menu());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":45,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"                new CustomerStats(), new Menu());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":5,"Wuhao-ooo":1,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"Wuhao-ooo":1,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"Wuhao-ooo":1,"-":97}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.events.model.CustomerStatsChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"        XmlCustomerStatsStorage customerStatsStorage \u003d new XmlCustomerStatsStorage(getTempFilePath(\"cs\"));"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        MenuStorage menuStorage \u003d new XmlMenuStorage(getTempFilePath(\"menu\"));"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, customerStatsStorage, menuStorage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":53,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":54,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"                new JsonUserPrefsStorage(\"dummy\"), new XmlCustomerStatsStorage(\"dummy\"),"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"                new XmlMenuStorage(\"dummy\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":91,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"Wuhao-ooo"},"content":"    public void getCustomerStatsFilePath() {"},{"lineNumber":93,"author":{"gitID":"Wuhao-ooo"},"content":"        assertNotNull(storageManager.getCustomerStatsFilePath());"},{"lineNumber":94,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":96,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"Wuhao-ooo"},"content":"    public void handleCustomerStatsChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":98,"author":{"gitID":"Wuhao-ooo"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":99,"author":{"gitID":"Wuhao-ooo"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorage(\"dummy\"),"},{"lineNumber":100,"author":{"gitID":"Wuhao-ooo"},"content":"                new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":101,"author":{"gitID":"Wuhao-ooo"},"content":"                new XmlCustomerStatsStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":102,"author":{"gitID":"Wuhao-ooo"},"content":"                new XmlMenuStorage(\"dummy\"));"},{"lineNumber":103,"author":{"gitID":"Wuhao-ooo"},"content":"        storage.handleCustomerStatsChangedEvent(new CustomerStatsChangedEvent(new CustomerStats()));"},{"lineNumber":104,"author":{"gitID":"Wuhao-ooo"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":105,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":107,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"Wuhao-ooo"},"content":"     * A Stub class for XmlCustomerStatsStorage to throw an exception when the save method is called"},{"lineNumber":109,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"Wuhao-ooo"},"content":"    class XmlCustomerStatsStorageExceptionThrowingStub extends XmlCustomerStatsStorage {"},{"lineNumber":111,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":112,"author":{"gitID":"Wuhao-ooo"},"content":"        public XmlCustomerStatsStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":113,"author":{"gitID":"Wuhao-ooo"},"content":"            super(filePath);"},{"lineNumber":114,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":116,"author":{"gitID":"Wuhao-ooo"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"Wuhao-ooo"},"content":"        public void saveCustomerStats(ReadOnlyCustomerStats customerStats, String filePath) throws IOException {"},{"lineNumber":118,"author":{"gitID":"Wuhao-ooo"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":119,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":122,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":4,"Wuhao-ooo":37,"-":98}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.exceptions.DishNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"ZacZequn"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"ZacZequn"},"content":"        public void checkOrder(Person target)"},{"lineNumber":132,"author":{"gitID":"ZacZequn"},"content":"                throws DishNotFoundException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":147,"author":{"gitID":"ZhangYijiong"},"content":"        //@@author ZhangYijiong"},{"lineNumber":148,"author":{"gitID":"ZhangYijiong"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"ZhangYijiong"},"content":"        public void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":150,"author":{"gitID":"ZhangYijiong"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":153,"author":{"gitID":"ZhangYijiong"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"ZhangYijiong"},"content":"        public void deleteTask(Task task) throws TaskNotFoundException {"},{"lineNumber":155,"author":{"gitID":"ZhangYijiong"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":158,"author":{"gitID":"ZhangYijiong"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"ZhangYijiong"},"content":"        public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":160,"author":{"gitID":"ZhangYijiong"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"ZhangYijiong"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":164,"author":{"gitID":"ZhangYijiong"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"ZhangYijiong"},"content":"        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":166,"author":{"gitID":"ZhangYijiong"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":167,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"ZhangYijiong"},"content":"        //@@author"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":6,"ZhangYijiong":26,"-":172}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"                .withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"-":74}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    private static final String INVALID_ORDER \u003d \"Chicken+Rice\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    private static final String INVALID_HALAL \u003d \"Halala\";"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    private static final String INVALID_VEGETARIAN \u003d \"Vegetarian1\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_ORDER \u003d BENSON.getOrder().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_HALAL \u003d BENSON.getHalal().toString();"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    private static final String VALID_VEGETARIAN \u003d BENSON.getVegetarian().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_ORDER,"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_ORDER,"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_ORDER,"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_invalidOrder_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_ORDER,"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d Order.MESSAGE_ORDER_CONSTRAINTS;"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":91,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_nullOrder_throwsIllegalValueException() {"},{"lineNumber":93,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":94,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Order.class.getSimpleName());"},{"lineNumber":96,"author":{"gitID":"ZacZequn"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":97,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":103,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"                        INVALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":"                null, VALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_invalidHalal_throwsIllegalValueException() {"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":121,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, INVALID_HALAL, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":123,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d Halal.MESSAGE_HALAL_CONSTRAINTS;"},{"lineNumber":124,"author":{"gitID":"ZacZequn"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":125,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":127,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_nullHalal_throwsIllegalValueException() {"},{"lineNumber":129,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":130,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, null, VALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":131,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Halal.class.getSimpleName());"},{"lineNumber":132,"author":{"gitID":"ZacZequn"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":133,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":135,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_invalidVegetarian_throwsIllegalValueException() {"},{"lineNumber":137,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, INVALID_VEGETARIAN, VALID_TAGS);"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d Vegetarian.MESSAGE_VEGETARIAN_CONSTRAINTS;"},{"lineNumber":141,"author":{"gitID":"ZacZequn"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":142,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":144,"author":{"gitID":"ZacZequn"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"ZacZequn"},"content":"    public void toModelType_nullVegetarian_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":147,"author":{"gitID":"ZacZequn"},"content":"                VALID_ADDRESS, VALID_HALAL, null, VALID_TAGS);"},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Vegetarian.class.getSimpleName());"},{"lineNumber":149,"author":{"gitID":"ZacZequn"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":153,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":159,"author":{"gitID":"ZacZequn"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_ORDER,"},{"lineNumber":160,"author":{"gitID":"ZacZequn"},"content":"                        VALID_ADDRESS, VALID_HALAL, VALID_VEGETARIAN, invalidTags);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":79,"-":85}},{"path":"src/test/java/seedu/address/logic/commands/PathCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.PersonPanelPathChangedEvent;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.Menu;"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":" * is almost the same as {@code SelectCommandTest}"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"public class PathCommandTest {"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    private Model model;"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"     * is the same to {@code SelectCommandTest}"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"     * is not able to work due to unsolved problem during initialization of javafx.fxml in"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"     * initialization of PersonCard in execution of PathCommand in assertExecutionSuccess"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"     * is the same to {@code SelectCommandTest}"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"     * is not able to work due to unsolved problem during initialization of javafx.fxml in"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"     * initialization of PersonCard in execution of PathCommand in assertExecutionSuccess"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"    public void equals() {"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand pathFirstCommand \u003d new PathCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand pathSecondCommand \u003d new PathCommand(INDEX_SECOND_PERSON);"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand pathThirdCommand \u003d new PathCommand(INDEX_THIRD_PERSON);"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"        // same object -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"        assertTrue(pathFirstCommand.equals(pathFirstCommand));"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"        assertTrue(pathThirdCommand.equals(pathThirdCommand));"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"        // same values -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand pathSecondCommandCopy \u003d new PathCommand(INDEX_SECOND_PERSON);"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"        assertTrue(pathSecondCommand.equals(pathSecondCommandCopy));"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":"        // different types -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":"        assertFalse(pathFirstCommand.equals(1));"},{"lineNumber":104,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":105,"author":{"gitID":"ZhangYijiong"},"content":"        // null -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"ZhangYijiong"},"content":"        assertFalse(pathSecondCommand.equals(null));"},{"lineNumber":107,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":108,"author":{"gitID":"ZhangYijiong"},"content":"        // different person -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"ZhangYijiong"},"content":"        assertFalse(pathFirstCommand.equals(pathThirdCommand));"},{"lineNumber":110,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":112,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"ZhangYijiong"},"content":"     * Executes a {@code PathCommand} with the given {@code index}, and checks that {@code PersonPanelPathChangedEvent}"},{"lineNumber":114,"author":{"gitID":"ZhangYijiong"},"content":"     * is similar to {@code SelectCommandTest} except for Event"},{"lineNumber":115,"author":{"gitID":"ZhangYijiong"},"content":"     * is raised with the correct index."},{"lineNumber":116,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"ZhangYijiong"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":118,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand pathCommand \u003d prepareCommand(index);"},{"lineNumber":119,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":120,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"ZhangYijiong"},"content":"            CommandResult commandResult \u003d pathCommand.execute();"},{"lineNumber":122,"author":{"gitID":"ZhangYijiong"},"content":"            assertEquals(String.format(PathCommand.MESSAGE_PATH_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":123,"author":{"gitID":"ZhangYijiong"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":124,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (CommandException ce) {"},{"lineNumber":125,"author":{"gitID":"ZhangYijiong"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":126,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":128,"author":{"gitID":"ZhangYijiong"},"content":"        PersonPanelPathChangedEvent lastEvent \u003d"},{"lineNumber":129,"author":{"gitID":"ZhangYijiong"},"content":"                (PersonPanelPathChangedEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":130,"author":{"gitID":"ZhangYijiong"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.getNewSelection().getDisplayedIndex()));"},{"lineNumber":131,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":133,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"ZhangYijiong"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":135,"author":{"gitID":"ZhangYijiong"},"content":"     * is the same to {@code SelectCommandTest} except for the test object"},{"lineNumber":136,"author":{"gitID":"ZhangYijiong"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":137,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"ZhangYijiong"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":139,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand pathCommand \u003d prepareCommand(index);"},{"lineNumber":140,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":141,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"ZhangYijiong"},"content":"            pathCommand.execute();"},{"lineNumber":143,"author":{"gitID":"ZhangYijiong"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":144,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (CommandException ce) {"},{"lineNumber":145,"author":{"gitID":"ZhangYijiong"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":146,"author":{"gitID":"ZhangYijiong"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":147,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":150,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns a {@code PathCommand} with parameters {@code index}."},{"lineNumber":152,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"ZhangYijiong"},"content":"    private PathCommand prepareCommand(Index index) {"},{"lineNumber":154,"author":{"gitID":"ZhangYijiong"},"content":"        PathCommand pathCommand \u003d new PathCommand(index);"},{"lineNumber":155,"author":{"gitID":"ZhangYijiong"},"content":"        pathCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":156,"author":{"gitID":"ZhangYijiong"},"content":"        return pathCommand;"},{"lineNumber":157,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":158}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newTasks);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"                        Collection\u003cTask\u003e tasks) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":"            return tasks;"},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":13,"-":92}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"        CustomerStats customerStats \u003d new CustomerStats();"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        Menu menu \u003d new Menu();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs, customerStats, menu);"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, customerStats, menu);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs, customerStats, menu)));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs, customerStats, menu)));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs, customerStats, menu)));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":6,"Wuhao-ooo":1,"-":60}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"        descriptor.setOrder(person.getOrder());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Order} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"    public EditPersonDescriptorBuilder withOrder(String order) {"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"        descriptor.setOrder(new Order(order));"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":12,"-":77}},{"path":"src/test/java/seedu/address/model/CustomerStatsTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"//@@author Wuhao-ooo"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"public class CustomerStatsTest {"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    private final CustomerStats customerStats \u003d new CustomerStats();"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"    public void constructor() {"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"        assertEquals(new HashMap\u003cString, Integer\u003e(), customerStats.getOrdersCount());"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":19}},{"path":"src/test/java/seedu/address/testutil/TypicalDishes.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Dish;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":" * A utility class containing a list of {@code Dish} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"public class TypicalDishes {"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    public static final Dish CHICKENRICE \u003d new DishBuilder().withName(\"Chicken Rice\").withPrice(\"3\").build();"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    public static final Dish CURRYCHICKEN \u003d new DishBuilder().withName(\"Curry Chicken\").withPrice(\"4\").build();"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"    public static final Dish CHICKENCHOP \u003d new DishBuilder().withName(\"Chicken Chop\").withPrice(\"5\").build();"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"    public static final Dish BANMIAN \u003d new DishBuilder().withName(\"Ban Mian\").withPrice(\"4\").build();"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    public static final Dish ICEMILO \u003d new DishBuilder().withName(\"Ice Milo\").withPrice(\"2\").build();"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"    public static final Dish COFFEE \u003d new DishBuilder().withName(\"Coffee\").withPrice(\"2\").build();"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"    private TypicalDishes() {} // prevents instantiation"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"     * Returns an {@code Menu} with all the typical dishes."},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    public static Menu getTypicalMenu() {"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"        Menu menu \u003d new Menu();"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"        for (Dish dish : getTypicalDishes()) {"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"            menu.addDish(dish);"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"        return menu;"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    public static List\u003cDish\u003e getTypicalDishes() {"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CHICKENRICE, CURRYCHICKEN, CHICKENCHOP, BANMIAN, ICEMILO, COFFEE));"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":40}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"     * Adds {@code Task} to the {@code AddressBook} that we are building."},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    public AddressBookBuilder withTask(Task task) {"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"            addressBook.addTask(task);"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (DuplicateTaskException dte) {"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"            throw new IllegalArgumentException(\"order is expected to be unique.\");"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":14,"-":53}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"        sb.append(PREFIX_ORDER + person.getOrder().fullOrder + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":34,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"-":36}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.dish.Price;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Count;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Distance;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code PersonBuilder}"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" * A utility class to help with building Task objects."},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"public class TaskBuilder {"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String DEFAULT_TASK_ORDER \u003d \"Chicken Rice\";"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String DEFAULT_TASK_ADDRESS \u003d \"1A Kent Ridge Road\";"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String DEFAULT_TASK_PRICE \u003d \"100\";"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String DEFAULT_TASK_DISTANCE \u003d \"5\";"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String DEFAULT_TASK_COUNT \u003d \"2\";"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Chili Sauce Required\";"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    private Order defaultOrder;"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    private Address defaultAddress;"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    private Price defaultPrice;"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    private Distance defaultDistance;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    private Count defaultCount;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    private String defaultDescription;"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder()  {"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        defaultOrder \u003d new Order(DEFAULT_TASK_ORDER);"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"        defaultAddress \u003d new Address(DEFAULT_TASK_ADDRESS);"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"        defaultPrice \u003d new Price(DEFAULT_TASK_PRICE);"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        defaultDistance \u003d new Distance(DEFAULT_TASK_DISTANCE);"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"        defaultCount \u003d new Count(DEFAULT_TASK_COUNT);"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"        defaultDescription \u003d DEFAULT_DESCRIPTION;"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"     * Initializes the TaskBuilder with the data of {@code taskToCopy}."},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder(Task taskToCopy) {"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"        defaultOrder \u003d taskToCopy.getOrder();"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        defaultAddress \u003d taskToCopy.getAddress();"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"        defaultPrice \u003d taskToCopy.getPrice();"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        defaultDistance \u003d taskToCopy.getDistance();"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"        defaultCount \u003d taskToCopy.getCount();"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"        defaultDescription \u003d taskToCopy.getDescription();"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"     * Sets the {@code Order} of the {@code Task} that we are building."},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder withOrder(String order) {"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        this.defaultOrder \u003d new Order(order);"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"     * Sets the {@code Address} of the {@code Task} that we are building."},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder withAddress(String address) {"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"        this.defaultAddress \u003d new Address(address);"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"     * Sets the {@code Price} of the {@code Task} that we are building."},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder withPrice(String price) {"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        this.defaultPrice \u003d new Price(price);"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"     * Sets the {@code Distance} of the {@code Task} that we are building."},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder withDistance(String distance) {"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"        this.defaultDistance \u003d new Distance(distance);"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"     * Sets the {@code Count} of the {@code Task} that we are building."},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder withCount(String count) {"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"        this.defaultCount \u003d new Count(count);"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"     * Sets the {@code Description} of the {@code Task} that we are building."},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"    public TaskBuilder withDescription(String description) {"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"        this.defaultDescription \u003d description;"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":"     * build task"},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":"    public Task build() {"},{"lineNumber":104,"author":{"gitID":"ZhangYijiong"},"content":"        return new Task(defaultOrder, defaultAddress, defaultPrice,"},{"lineNumber":105,"author":{"gitID":"ZhangYijiong"},"content":"                defaultDistance, defaultCount, defaultDescription);"},{"lineNumber":106,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":108,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":108}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_ORDER \u003d \"Chicken Rice\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_HALAL \u003d \"Non-halal\";"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_VEGETARIAN \u003d \"Non-vegetarian\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"    private Order order;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    private Halal halal;"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"    private Vegetarian vegetarian;"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"        order \u003d new Order(DEFAULT_ORDER);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"        halal \u003d new Halal(DEFAULT_HALAL);"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"        vegetarian \u003d new Vegetarian(DEFAULT_VEGETARIAN);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        order \u003d personToCopy.getOrder();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"        halal \u003d personToCopy.getHalal();"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        vegetarian \u003d personToCopy.getVegetarian();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Order} of the {@code Person} that we are building."},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"    public PersonBuilder withOrder(String order) {"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"        this.order \u003d new Order(order);"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":103,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Halal} of the {@code Person} that we are building."},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"ZacZequn"},"content":"    public PersonBuilder withHalal(String halal) {"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"        this.halal \u003d new Halal(halal);"},{"lineNumber":108,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":109,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Vegetarian} of the {@code Person} that we are building."},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"    public PersonBuilder withVegetarian(String vegetarian) {"},{"lineNumber":115,"author":{"gitID":"ZacZequn"},"content":"        this.vegetarian \u003d new Vegetarian(vegetarian);"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"        return new Person(name, phone, order, address, halal, vegetarian, tags);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":46,"-":79}},{"path":"src/test/java/seedu/address/testutil/DishBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Dish;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Name;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Price;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * A utility class to help with building Dish objects."},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"public class DishBuilder {"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final String DEFAULT_PRICE \u003d \"3\";"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    private Name name;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    private Price price;"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"    public DishBuilder() {"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"     * Initializes the DishBuilder with the data of {@code personToCopy}."},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    public DishBuilder(Dish dishToCopy) {"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"        name \u003d dishToCopy.getName();"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"        price \u003d dishToCopy.getPrice();"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Name} of the {@code Dish} that we are building."},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    public DishBuilder withName(String name) {"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"     * Sets the {@code Price} of the {@code Dish} that we are building."},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"    public DishBuilder withPrice(String price) {"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"        return this;"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    public Dish build() {"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"        return new Dish(name, price);"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":53}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_AMY;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withPhone(\"85355255\").withOrder(\"Chicken Chop\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withPhone(\"98765432\").withOrder(\"Chicken Chop\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(\"Chicken Chop\").withAddress(\"wall street\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(\"Chicken Chop\").withAddress(\"10th street\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(\"Chicken Chop\").withAddress(\"michegan ave\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(\"Chicken Chop\").withAddress(\"little tokyo\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(\"Chicken Chop\").withAddress(\"4th street\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(\"Chicken Chop\").withAddress(\"little india\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(\"Chicken Chop\").withAddress(\"chicago ave\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(VALID_ORDER_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"            .withOrder(VALID_ORDER_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":13,"-":66}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"    private static final String ORDER_FIELD_ID \u003d \"#order\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    private final Label orderLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        this.orderLabel \u003d getChildNode(ORDER_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"        return orderLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"        return tagLabels"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"                .stream()"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"                .findFirst()"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":14,"-":68}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.LoadPageChangedEvent;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.PersonPanelPathChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String GOOGLE_MAP_SEARCH_PAGE \u003d"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"            \"https://www.google.com.sg/maps/search/\";"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String GOOGLE_MAP_PATH_SEARCH_PAGE \u003d"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"            \"https://www.google.com.sg/maps/dir/\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"    private void loadGoogleMapAddressPage(Person person) {"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"        loadPage(GOOGLE_MAP_SEARCH_PAGE + person.getAddress().getGoogleMapSearchForm());"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"    private void loadGoogleMapPathPage(Person person) {"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        loadPage(GOOGLE_MAP_PATH_SEARCH_PAGE + Address.ADDRESS_USER_OWN"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"                + \"/\" + person.getAddress().getGoogleMapSearchForm());"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"    private void loadUserInputPage(String url) {"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"        loadPage(url);"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"    public void loadPage(String url) {"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"    private void loadDefaultPage() {"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"    public void freeResources() {"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        browser \u003d null;"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"    @Subscribe"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"        loadGoogleMapAddressPage(event.getNewSelection().person);"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"    private void handlePersonPanelPathChangedEvent(PersonPanelPathChangedEvent event) {"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"        loadGoogleMapPathPage(event.getNewSelection().person);"},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"    //@@author ZhangYijiong"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"    @Subscribe"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"    private void handleLoadPageChangedEvent(LoadPageChangedEvent event) {"},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"        loadUserInputPage(event.getUrl());"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":63,"-":40}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/Delivery_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"-":119}},{"path":"src/test/java/seedu/address/testutil/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COUNT;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTANCE;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessOrderCommand;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code PersonUtil}"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":" * A utility class for Task."},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"public class TaskUtil {"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns an addOrder command string for adding the {@code task}."},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public static String getAddOrderCommand(Task task) {"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"        return ProcessOrderCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"    public static String getTaskDetails(Task task) {"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        sb.append(PREFIX_ORDER + task.getOrder().toString() + \" \");"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"        sb.append(PREFIX_ADDRESS + task.getAddress().value + \" \");"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"        sb.append(PREFIX_PRICE + task.getPrice().value + \" \");"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        sb.append(PREFIX_DISTANCE + task.getDistance().value + \" \");"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"        sb.append(PREFIX_COUNT + task.getCount().value + \" \");"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"        sb.append(PREFIX_DESCRIPTION + task.getDescription() + \" \");"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"        return sb.toString();"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":42}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    private OrderQueuePanel orderQueuePanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"    private StackPane orderQueuePanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":100,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"ZhangYijiong"},"content":"        orderQueuePanel \u003d new OrderQueuePanel(logic.getFilteredTaskList());"},{"lineNumber":130,"author":{"gitID":"ZhangYijiong"},"content":"        orderQueuePanelPlaceholder.getChildren().add(orderQueuePanel.getRoot());"},{"lineNumber":131,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"ZhangYijiong"},"content":"    public OrderQueuePanel getOrderQueuePanel() {"},{"lineNumber":196,"author":{"gitID":"ZhangYijiong"},"content":"        return this.orderQueuePanel;"},{"lineNumber":197,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":11,"-":197}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    private int displayedIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    private Label order;"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"        order.setText(person.getOrder().fullOrder);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        this.displayedIndex \u003d displayedIndex;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"    private void initTags(Person person) {"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns the current personCard position in the PersonListPanel"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"     * Is for index checking in {@code PathCommandTest}"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"    public int getDisplayedIndex() {"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"        return this.displayedIndex;"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":12,"ZacZequn":24,"-":65}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"ZhangYijiong":1,"-":11}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    private String appTitle \u003d \"Delivery\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"-":71}},{"path":"src/main/java/seedu/address/ui/OrderCard.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.beans.binding.Bindings;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * An UI component that displays information of a {@code Event}."},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"public class OrderCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    private static final String FXML \u003d \"OrderCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    public final Task task;"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    private Label order;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    private Label id;"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    private Label address;"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    private Label description;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"    public OrderCard(Task task, int displayedIndex) {"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        this.task \u003d task;"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"        bindListeners(task);"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"     * Binds the individual UI elements to observe their respective {@code Task} properties"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"     * so that they will be notified of any changes."},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"    private void bindListeners(Task task) {"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"        order.textProperty().bind(Bindings.convert(task.orderObjectProperty()));"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        address.textProperty().bind(Bindings.convert(task.addressObjectProperty()));"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"        description.textProperty().bind(Bindings.convert(task.descriptionObjectProperty()));"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"        // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"        // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        if (!(other instanceof OrderCard)) {"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"        // state check"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"        OrderCard card \u003d (OrderCard) other;"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":65}},{"path":"src/main/java/seedu/address/ui/OrderQueuePanel.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.OrderPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code PersonListPanel}"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":" * Panel containing the queue of orders."},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"public class OrderQueuePanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    private static final String FXML \u003d \"OrderQueuePanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(OrderQueuePanel.class);"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    private ListView\u003cOrderCard\u003e orderListView;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public OrderQueuePanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"        setConnections(taskList);"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"    private void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"        ObservableList\u003cOrderCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"                taskList, (task) -\u003e new OrderCard(task, taskList.indexOf(task) + 1));"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"        orderListView.setItems(mappedList);"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"        orderListView.setCellFactory(listView -\u003e new OrderQueueViewCell());"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"        orderListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"                        logger.fine(\"Selection in order list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"                        raise(new OrderPanelSelectionChangedEvent(newValue));"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"                    }"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"                });"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"     * Scrolls to the {@code OrderCard} at the {@code index} and selects it."},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"    private void scrollTo(int index) {"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"            orderListView.scrollTo(index);"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"            orderListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"        });"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code OrderCard}."},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"    class OrderQueueViewCell extends ListCell\u003cOrderCard\u003e {"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"        @Override"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"        protected void updateItem(OrderCard order, boolean empty) {"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"            super.updateItem(order, empty);"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"            if (empty || order \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"                setGraphic(null);"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"                setText(null);"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"            } else {"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"                setGraphic(order.getRoot());"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":81}},{"path":"src/main/java/seedu/address/commons/events/ui/OrderPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.ui.OrderCard;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":" * Gets an event the panel change selection"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"public class OrderPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"    private final OrderCard newSelection;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"    public OrderPanelSelectionChangedEvent(OrderCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public OrderCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":26}},{"path":"src/main/java/seedu/address/commons/events/ui/LoadPageChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":" * Represents a"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"public class LoadPageChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"    private final String url;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"    public LoadPageChangedEvent(String url) {"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"        this.url \u003d url;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    public String getUrl() {"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"        return url;"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":26}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonPanelPathChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":" * Represents a change in the browser Panel"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"public class PersonPanelPathChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"    private final PersonCard newSelection;"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    public PersonPanelPathChangedEvent(PersonCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    public PersonCard getNewSelection() {"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"        return newSelection;"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":27}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":4,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ORDER, PREFIX_ADDRESS,"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"                        PREFIX_HALAL, PREFIX_VEGETARIAN, PREFIX_TAG);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_ORDER, PREFIX_ADDRESS)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"            Order order \u003d ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"            //@@author ZacZequn"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"            Optional\u003cHalal\u003e halalOptional \u003d ParserUtil.parseHalal(argMultimap.getValue(PREFIX_HALAL));"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"            Halal halal \u003d halalOptional.isPresent() ? halalOptional.get() : new Halal(null);"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"            Optional\u003cVegetarian\u003e vegetarianOptional \u003d"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"                    ParserUtil.parseVegetarian(argMultimap.getValue(PREFIX_VEGETARIAN));"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"            Vegetarian vegetarian \u003d vegetarianOptional.isPresent() ? vegetarianOptional.get() : new Vegetarian(null);"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"            //@@author"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"            Person person \u003d new Person(name, phone, order, address, halal, vegetarian, tagList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":21,"-":59}},{"path":"src/main/java/seedu/address/commons/events/model/MenuChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.ReadOnlyMenu;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Dish;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"/** Indicates the Menu in the model has changed*/"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"public class MenuChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"    public final ReadOnlyMenu data;"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    public MenuChangedEvent(ReadOnlyMenu data) {"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"        this.data \u003d data;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"        HashMap\u003cString, Dish\u003e theMenu \u003d data.getDishes();"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"        return theMenu.toString();"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":24}},{"path":"src/main/java/seedu/address/logic/parser/TagOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.TagOrderCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new TagOrderCommand object"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"public class TagOrderCommandParser implements Parser\u003cTagOrderCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context of the TagOrderCommand"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    public TagOrderCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"        String[] splittedArgs \u003d splitStrings(args.trim());"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"        Index index;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"        String tagWord;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        if (splittedArgs.length \u003e 2) {"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"                    TagOrderCommand.MESSAGE_ONE_TAG_ONLY));"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"            index \u003d ParserUtil.parseIndex(splittedArgs[0]);"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"            tagWord \u003d splittedArgs[1];"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"            Tag tag \u003d new Tag(tagWord);"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagOrderCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (ArrayIndexOutOfBoundsException aioobe) {"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagOrderCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagOrderCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        return new TagOrderCommand(index, tagWord);"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    private String[] splitStrings(String args) {"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"        return args.split(\"\\\\s+\");"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":40,"-":14}},{"path":"src/main/java/seedu/address/commons/events/model/CustomerStatsChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"//@@author Wuhao-ooo"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"/** Indicates the CustomerStats in the model has changed*/"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"public class CustomerStatsChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    public final ReadOnlyCustomerStats data;"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"    public CustomerStatsChangedEvent(ReadOnlyCustomerStats data) {"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"        this.data \u003d data;"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"        HashMap\u003cString, Integer\u003e ordersCount \u003d data.getOrdersCount();"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"        return ordersCount.toString();"},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":23}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.CompleteMoreOrderCommand;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.CompleteOneOrderCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.LoadCommand;"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.PathCommand;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessMoreCommand;"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessNextCommand;"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessOrderCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.TagOrderCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Wuhao-ooo"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"        case ProcessOrderCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessOrderCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"        case ProcessOrderCommand.COMMAND_ALIAS:"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessOrderCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"        case ProcessNextCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessNextCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"        case ProcessNextCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessNextCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"        case ProcessMoreCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessMoreCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"        case ProcessMoreCommand.COMMAND_ALIAS:"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessMoreCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"        case CompleteOneOrderCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"            return new CompleteOneOrderCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"        case CompleteOneOrderCommand.COMMAND_ALIAS:"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"            return new CompleteOneOrderCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"        case CompleteMoreOrderCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"            return new CompleteMoreOrderCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"        case CompleteMoreOrderCommand.COMMAND_ALIAS:"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"            return new CompleteMoreOrderCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"        case TagOrderCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"            return new TagOrderCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"        case LoadCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"            return new LoadCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"Wuhao-ooo"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Wuhao-ooo"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"Wuhao-ooo"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"ZhangYijiong"},"content":"        case PathCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"ZhangYijiong"},"content":"            return new PathCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":122,"author":{"gitID":"ZhangYijiong"},"content":"        case PathCommand.COMMAND_ALIAS:"},{"lineNumber":123,"author":{"gitID":"ZhangYijiong"},"content":"            return new PathCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"Wuhao-ooo"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"Wuhao-ooo"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"Wuhao-ooo"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"Wuhao-ooo"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"Wuhao-ooo"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"Wuhao-ooo"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"Wuhao-ooo"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"Wuhao-ooo"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":50,"Wuhao-ooo":12,"-":116}},{"path":"src/main/java/seedu/address/logic/parser/ProcessOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessOrderCommand;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new ProcessOrderCommand object"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"public class ProcessOrderCommandParser implements Parser\u003cProcessOrderCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context of the ProcessOrderCommand"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"     * and returns an ProcessOrderCommand object for execution."},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    public ProcessOrderCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessOrderCommand(index);"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProcessOrderCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":30}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.dish.Price;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Count;"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Distance;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":97,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":99,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":100,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code String order} into a {@code Order}."},{"lineNumber":102,"author":{"gitID":"ZacZequn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"ZacZequn"},"content":"     * @throws IllegalValueException if the given {@code order} is invalid."},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"ZacZequn"},"content":"    public static Order parseOrder(String order) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(order);"},{"lineNumber":108,"author":{"gitID":"ZacZequn"},"content":"        String trimmedOrder \u003d order.trim();"},{"lineNumber":109,"author":{"gitID":"ZacZequn"},"content":"        if (!Order.isValidOrder(trimmedOrder)) {"},{"lineNumber":110,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Order.MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":"        return new Order(trimmedOrder);"},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":115,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code Optional\u003cString\u003e order} into an {@code Optional\u003cOrder\u003e} if {@code order} is present."},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"    public static Optional\u003cOrder\u003e parseOrder(Optional\u003cString\u003e order) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(order);"},{"lineNumber":121,"author":{"gitID":"ZacZequn"},"content":"        return order.isPresent() ? Optional.of(parseOrder(order.get())) : Optional.empty();"},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code String halal} into an {@code Halal}."},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"ZacZequn"},"content":"     * @throws IllegalValueException if the given {@code halal} is invalid."},{"lineNumber":155,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"ZacZequn"},"content":"    public static Halal parseHalal(String halal) throws IllegalValueException {"},{"lineNumber":157,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(halal);"},{"lineNumber":158,"author":{"gitID":"ZacZequn"},"content":"        String trimmedHalal \u003d halal.trim();"},{"lineNumber":159,"author":{"gitID":"ZacZequn"},"content":"        if (!Halal.isValidHalal(trimmedHalal)) {"},{"lineNumber":160,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Halal.MESSAGE_HALAL_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"ZacZequn"},"content":"        return new Halal(trimmedHalal);"},{"lineNumber":163,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":165,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code Optional\u003cString\u003e halal} into an {@code Optional\u003cHalal\u003e} if {@code halal} is present."},{"lineNumber":167,"author":{"gitID":"ZacZequn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":168,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"ZacZequn"},"content":"    public static Optional\u003cHalal\u003e parseHalal(Optional\u003cString\u003e halal) throws IllegalValueException {"},{"lineNumber":170,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(halal);"},{"lineNumber":171,"author":{"gitID":"ZacZequn"},"content":"        return halal.isPresent() ? Optional.of(parseHalal(halal.get())) : Optional.empty();"},{"lineNumber":172,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":174,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code String vegetarian} into an {@code Vegetarian}."},{"lineNumber":176,"author":{"gitID":"ZacZequn"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":177,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":178,"author":{"gitID":"ZacZequn"},"content":"     * @throws IllegalValueException if the given {@code vegetarian} is invalid."},{"lineNumber":179,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"ZacZequn"},"content":"    public static Vegetarian parseVegetarian(String vegetarian) throws IllegalValueException {"},{"lineNumber":181,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(vegetarian);"},{"lineNumber":182,"author":{"gitID":"ZacZequn"},"content":"        String trimmedVegetarian \u003d vegetarian.trim();"},{"lineNumber":183,"author":{"gitID":"ZacZequn"},"content":"        if (!Vegetarian.isValidVegetarian(trimmedVegetarian)) {"},{"lineNumber":184,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Vegetarian.MESSAGE_VEGETARIAN_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"ZacZequn"},"content":"        return new Vegetarian(trimmedVegetarian);"},{"lineNumber":187,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":189,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"ZacZequn"},"content":"     * Parses a {@code Optional\u003cString\u003e vegetarian} into an {@code Optional\u003cVegetarian\u003e}"},{"lineNumber":191,"author":{"gitID":"ZacZequn"},"content":"     * if {@code vegetarian} is present."},{"lineNumber":192,"author":{"gitID":"ZacZequn"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":193,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"ZacZequn"},"content":"    public static Optional\u003cVegetarian\u003e parseVegetarian(Optional\u003cString\u003e vegetarian) throws IllegalValueException {"},{"lineNumber":195,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(vegetarian);"},{"lineNumber":196,"author":{"gitID":"ZacZequn"},"content":"        return vegetarian.isPresent() ? Optional.of(parseVegetarian(vegetarian.get())) : Optional.empty();"},{"lineNumber":197,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":199,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":227,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses a {@code String price} into a {@code Price}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":231,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":232,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"ZhangYijiong"},"content":"    public static Price parsePrice(String price) throws IllegalValueException {"},{"lineNumber":234,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(price);"},{"lineNumber":235,"author":{"gitID":"ZhangYijiong"},"content":"        String trimmedPrice \u003d price.trim();"},{"lineNumber":236,"author":{"gitID":"ZhangYijiong"},"content":"        if (!Price.isValidPrice(trimmedPrice)) {"},{"lineNumber":237,"author":{"gitID":"ZhangYijiong"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":238,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"ZhangYijiong"},"content":"        return new Price(trimmedPrice);"},{"lineNumber":240,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":242,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e} if {@code price} is present."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"ZhangYijiong"},"content":"    public static Optional\u003cPrice\u003e parsePrice(Optional\u003cString\u003e price) throws IllegalValueException {"},{"lineNumber":247,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(price);"},{"lineNumber":248,"author":{"gitID":"ZhangYijiong"},"content":"        return price.isPresent() ? Optional.of(parsePrice(price.get())) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":251,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses a {@code String distance} into a {@code Distance}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":255,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws IllegalValueException if the given {@code distance} is invalid."},{"lineNumber":256,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"ZhangYijiong"},"content":"    public static Distance parseDistance(String distance) throws IllegalValueException {"},{"lineNumber":258,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(distance);"},{"lineNumber":259,"author":{"gitID":"ZhangYijiong"},"content":"        String trimmedDistance \u003d distance.trim();"},{"lineNumber":260,"author":{"gitID":"ZhangYijiong"},"content":"        if (!Distance.isValidDistance(trimmedDistance)) {"},{"lineNumber":261,"author":{"gitID":"ZhangYijiong"},"content":"            throw new IllegalValueException(Distance.MESSAGE_DISTANCE_CONSTRAINTS);"},{"lineNumber":262,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"ZhangYijiong"},"content":"        return new Distance(trimmedDistance);"},{"lineNumber":264,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":266,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses a {@code Optional\u003cString\u003e distance} into an {@code Optional\u003cDistance\u003e} if {@code distance} is present."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"ZhangYijiong"},"content":"    public static Optional\u003cDistance\u003e parseDistance(Optional\u003cString\u003e distance) throws IllegalValueException {"},{"lineNumber":271,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(distance);"},{"lineNumber":272,"author":{"gitID":"ZhangYijiong"},"content":"        return distance.isPresent() ? Optional.of(parseDistance(distance.get())) : Optional.empty();"},{"lineNumber":273,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":275,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses a {@code String count} into a {@code Count}."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":279,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws IllegalValueException if the given {@code count} is invalid."},{"lineNumber":280,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"ZhangYijiong"},"content":"    public static Count parseCount(String count) throws IllegalValueException {"},{"lineNumber":282,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(count);"},{"lineNumber":283,"author":{"gitID":"ZhangYijiong"},"content":"        String trimmedCount \u003d count.trim();"},{"lineNumber":284,"author":{"gitID":"ZhangYijiong"},"content":"        if (!Count.isValidCount(trimmedCount)) {"},{"lineNumber":285,"author":{"gitID":"ZhangYijiong"},"content":"            throw new IllegalValueException(Count.MESSAGE_COUNT_CONSTRAINTS);"},{"lineNumber":286,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"ZhangYijiong"},"content":"        return new Count(trimmedCount);"},{"lineNumber":288,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":290,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses a {@code Optional\u003cString\u003e count} into an {@code Optional\u003cCount\u003e} if {@code count} is present."},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":293,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":294,"author":{"gitID":"ZhangYijiong"},"content":"    public static Optional\u003cCount\u003e parseCount(Optional\u003cString\u003e count) throws IllegalValueException {"},{"lineNumber":295,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(count);"},{"lineNumber":296,"author":{"gitID":"ZhangYijiong"},"content":"        return count.isPresent() ? Optional.of(parseCount(count.get())) : Optional.empty();"},{"lineNumber":297,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":63,"ZacZequn":81,"-":154}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"f/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final Prefix PREFIX_HALAL \u003d new Prefix(\"h/\");"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    public static final Prefix PREFIX_VEGETARIAN \u003d new Prefix(\"v/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"$/\");"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public static final Prefix PREFIX_COUNT \u003d new Prefix(\"c/\");"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    public static final Prefix PREFIX_DISTANCE \u003d new Prefix(\"dis/\");"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"des/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":3,"ZhangYijiong":4,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/CompleteOneOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.CompleteOneOrderCommand;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new CompleteOneOrderCommand object"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"public class CompleteOneOrderCommandParser implements Parser\u003cCompleteOneOrderCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context of the CompleteOneOrderCommand"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"     * and returns an CompleteOneOrderCommand object for execution."},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    public CompleteOneOrderCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"            return new CompleteOneOrderCommand(index);"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteOneOrderCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":32}},{"path":"src/main/java/seedu/address/logic/parser/ProcessNextCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessNextCommand;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new ProcessOrderCommand object"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"public class ProcessNextCommandParser implements Parser\u003cProcessNextCommand\u003e {"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} (String is none in this case)of arguments in the context"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"     * of the ProcessOrderCommand and returns an ProcessOrderCommand object for execution."},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    public ProcessNextCommand parse(String args) throws ParseException {"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"        return new ProcessNextCommand();"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":20}},{"path":"src/main/java/seedu/address/logic/parser/PathCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.PathCommand;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"public class PathCommandParser implements Parser\u003cPathCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context of the PathCommand"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"     * and returns an PathCommand object for execution."},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    public PathCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"            return new PathCommand(index);"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PathCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":30}},{"path":"src/main/java/seedu/address/logic/parser/CompleteMoreOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.CompleteMoreOrderCommand;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new CompleteMoreOrderCommand object"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"public class CompleteMoreOrderCommandParser implements Parser\u003cCompleteMoreOrderCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    private static final String NUMBER_FRONT_OF_QUEUE \u003d \"1\";"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context of the CompleteMoreOrderCommand"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"     * and returns an CompleteMoreOrderCommand object for execution."},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public CompleteMoreOrderCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"            Index numberOfTimes \u003d ParserUtil.parseIndex(args);"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"            Index index \u003d ParserUtil.parseIndex(NUMBER_FRONT_OF_QUEUE);"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"            return new CompleteMoreOrderCommand(index, numberOfTimes);"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteMoreOrderCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":36}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ORDER, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"                        PREFIX_HALAL, PREFIX_VEGETARIAN, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"            ParserUtil.parseOrder(argMultimap.getValue(PREFIX_ORDER)).ifPresent(editPersonDescriptor::setOrder);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"            ParserUtil.parseHalal(argMultimap.getValue(PREFIX_HALAL)).ifPresent(editPersonDescriptor::setHalal);"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"            ParserUtil.parseVegetarian(argMultimap.getValue(PREFIX_VEGETARIAN)).ifPresent("},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"                    editPersonDescriptor::setVegetarian);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":9,"-":77}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all orders\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"Wuhao-ooo":1,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"            + \": Deletes the order identified by the index number used in the last order listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted order: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"            throw new AssertionError(\"The target order cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":3,"Wuhao-ooo":1,"-":64}},{"path":"src/main/java/seedu/address/logic/parser/ProcessMoreCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.ProcessMoreCommand;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new ProcessMoreCommand object"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"public class ProcessMoreCommandParser implements Parser\u003cProcessMoreCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context of the CompleteMoreOrderCommand"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"     * and returns an CompleteMoreOrderCommand object for execution."},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    public ProcessMoreCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"            int numberOfTimes \u003d Integer.parseInt(args.trim());"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"            if (numberOfTimes \u003c\u003d 0) {"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"                throw new ParseException("},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProcessMoreCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"            }"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"            return new ProcessMoreCommand(numberOfTimes);"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"Number must be numerical\"));"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":35}},{"path":"src/main/java/seedu/address/logic/parser/LoadCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.LoadCommand;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":" * Parses input arguments and creates a new ProcessOrderCommand object"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"public class LoadCommandParser implements Parser\u003cLoadCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"     * Parses the given {@code String} of arguments in the context"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"     * of the ProcessOrderCommand and returns an ProcessOrderCommand object for execution."},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public LoadCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"        if (args.trim().equals(\"\")) {"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoadCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"        return new LoadCommand(args.trim());"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":27}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"rd\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/PathCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.PersonPanelPathChangedEvent;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":" * and show the path to the address of the person identified"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"public class PathCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"path\";"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"p\";"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Show the path to the address of the person identified \""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"            + \"by the index number used in the last person listing\\n\""},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\";"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_PATH_PERSON_SUCCESS \u003d \"Path to Person: %1$s\";"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    public PathCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        PersonCard personToFindPath \u003d new PersonCard("},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"                lastShownList.get(targetIndex.getZeroBased()), targetIndex.getOneBased());"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        EventsCenter.getInstance().post(new PersonPanelPathChangedEvent(personToFindPath));"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_PATH_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof PathCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.targetIndex.equals(((PathCommand) other).targetIndex)); // state check"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":59}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Orders in Delivery has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"Wuhao-ooo":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/CommandHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":" *  Provides helper methods for various command class"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"public class CommandHelper {"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"     * is used in ProcessOrderCommand, ProcessNextCommand, CompleteOneOrderCommand"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    public static Person createNewTaggedPerson(Person personToEdit, String tag) {"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"        assert tag !\u003d null;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"        Order updatedOrder \u003d personToEdit.getOrder();"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"        Halal updatedHalal \u003d personToEdit.getHalal();"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"        Vegetarian updatedVegetarian \u003d personToEdit.getVegetarian();"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        UniqueTagList updatedTags \u003d new UniqueTagList(personToEdit.getTags());"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"            updatedTags.add(new Tag(tag));"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (UniqueTagList.DuplicateTagException dte) {"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"            //does not add tag \"processing\" if already exists"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"        return new Person(updatedName, updatedPhone, updatedOrder, updatedAddress,"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"                updatedHalal, updatedVegetarian, updatedTags);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"     * finds first person that does not have a tag \"Processed\""},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"     * @param lastShownList list of persons last shown to the user"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"     * @return index of the first person does not have the tag"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"     * is used in ProcessOrderCommand, ProcessNextCommand"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    public static int findIndexOfPersonToBeProcessed(List\u003cPerson\u003e lastShownList) {"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        int targetIndex \u003d -1;"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        for (Person person:lastShownList) {"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"            if (!person.getTagList().contains(new Tag(\"Processed\"))) {"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"                targetIndex \u003d lastShownList.indexOf(person);"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"                break;"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"        return targetIndex;"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"     * finds the person that matches the order in the processing queue"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"     * @param taskToDelete Order to be completed"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"     * @param personList list of person"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"     * @return index of the matching person in personlist"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"     * is used in CompleteOneOrderCommand, CompleteMoreOrderCommand"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"    public static int findIndexOfMatchingPerson(Task taskToDelete, List\u003cPerson\u003e personList) {"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"        int editIndex \u003d -1;"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        for (Person person : personList) {"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"            if (person.getOrder().equals(taskToDelete.getOrder())"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"                    \u0026\u0026 person.getAddress().equals(taskToDelete.getAddress())) {"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"                editIndex \u003d personList.indexOf(person);"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"                break;"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        return editIndex;"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"     * check whether a person has already been processed"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"     * @param person person to be checked"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"     * @return boolean"},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"    public static boolean checkIsProcessed(Person person) {"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"        if (person.getTagList().contains(new Tag(\"Processed\"))"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"                || person.getTagList().contains(new Tag(\"Cooked\"))"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"                || person.getTagList().contains(new Tag(\"Delivering\"))"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"                || person.getTagList().contains(new Tag(\"Delivered\"))) {"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"        } else {"},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"            return false;"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZacZequn":5,"ZhangYijiong":81,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.exceptions.DishNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a order to Delivery. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"            + PREFIX_ORDER + \"FOOD_ORDER \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_HALAL + \"HALAL] \""},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_VEGETARIAN + \"VEGETARIAN] \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"            + PREFIX_ORDER + \"Chicken Rice \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"            + PREFIX_HALAL + \"Halal \""},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"            + PREFIX_VEGETARIAN + \"Vegetarian \";"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This order already exists in the address book\";"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_UNAVAILABLE_DISH \u003d \"This dish is not available in our menu\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"        } catch (DishNotFoundException e) {"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"            throw new CommandException(MESSAGE_UNAVAILABLE_DISH);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":15,"ZhangYijiong":2,"Wuhao-ooo":1,"-":59}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"hist\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HALAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VEGETARIAN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the order identified \""},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"            + \"by the index number used in the last order listing. \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_ORDER + \"ORDER] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_HALAL + \"HALAL] \""},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"            + \"[\" + PREFIX_VEGETARIAN + \"VEGETARIAN] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Order: %1$s\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This order already exists in the address book.\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"        Order updatedOrder \u003d editPersonDescriptor.getOrder().orElse(personToEdit.getOrder());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"        Halal updatedHalal \u003d editPersonDescriptor.getHalal().orElse(personToEdit.getHalal());"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"        Vegetarian updatedVegetarian \u003d editPersonDescriptor.getVegetarian().orElse(personToEdit.getVegetarian());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"ZacZequn"},"content":"        return new Person(updatedName, updatedPhone, updatedOrder, updatedAddress,"},{"lineNumber":123,"author":{"gitID":"ZacZequn"},"content":"                updatedHalal, updatedVegetarian, updatedTags);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":"        private Order order;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":154,"author":{"gitID":"ZacZequn"},"content":"        private Halal halal;"},{"lineNumber":155,"author":{"gitID":"ZacZequn"},"content":"        private Vegetarian vegetarian;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":162,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":163,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":167,"author":{"gitID":"ZacZequn"},"content":"            setOrder(toCopy.order);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":169,"author":{"gitID":"ZacZequn"},"content":"            setHalal(toCopy.halal);"},{"lineNumber":170,"author":{"gitID":"ZacZequn"},"content":"            setVegetarian(toCopy.vegetarian);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":176,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":178,"author":{"gitID":"ZacZequn"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.order, this.address,"},{"lineNumber":179,"author":{"gitID":"ZacZequn"},"content":"                    this.halal, this.vegetarian, this.tags);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":199,"author":{"gitID":"ZacZequn"},"content":"        public void setOrder(Order order) {"},{"lineNumber":200,"author":{"gitID":"ZacZequn"},"content":"            this.order \u003d order;"},{"lineNumber":201,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":203,"author":{"gitID":"ZacZequn"},"content":"        public Optional\u003cOrder\u003e getOrder() {"},{"lineNumber":204,"author":{"gitID":"ZacZequn"},"content":"            return Optional.ofNullable(order);"},{"lineNumber":205,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":207,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":217,"author":{"gitID":"ZacZequn"},"content":"        public void setHalal(Halal halal) {"},{"lineNumber":218,"author":{"gitID":"ZacZequn"},"content":"            this.halal \u003d halal;"},{"lineNumber":219,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":221,"author":{"gitID":"ZacZequn"},"content":"        public Optional\u003cHalal\u003e getHalal() {"},{"lineNumber":222,"author":{"gitID":"ZacZequn"},"content":"            return Optional.ofNullable(halal);"},{"lineNumber":223,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":225,"author":{"gitID":"ZacZequn"},"content":"        public void setVegetarian(Vegetarian vegetarian) {"},{"lineNumber":226,"author":{"gitID":"ZacZequn"},"content":"            this.vegetarian \u003d vegetarian;"},{"lineNumber":227,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":229,"author":{"gitID":"ZacZequn"},"content":"        public Optional\u003cVegetarian\u003e getVegetarian() {"},{"lineNumber":230,"author":{"gitID":"ZacZequn"},"content":"            return Optional.ofNullable(vegetarian);"},{"lineNumber":231,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":233,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":236,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":237,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":246,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":268,"author":{"gitID":"ZacZequn"},"content":"                    \u0026\u0026 getOrder().equals(e.getOrder())"},{"lineNumber":269,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":270,"author":{"gitID":"ZacZequn"},"content":"                    \u0026\u0026 getHalal().equals(e.getHalal())"},{"lineNumber":271,"author":{"gitID":"ZacZequn"},"content":"                    \u0026\u0026 getVegetarian().equals(e.getVegetarian())"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":58,"Wuhao-ooo":1,"-":216}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"            + \": Selects the order identified by the index number used in the last order listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Order: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":2,"Wuhao-ooo":1,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/ProcessNextCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.queue.TaskList;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":" * Add the first unprocessed order in the order queue to the application\u0027s"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":" * processing queue, label the corresponding order in the"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":" * order queue as Processed"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"public class ProcessNextCommand extends ProcessOrderCommand {"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"processNext\";"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"pN\";"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Adds the first unprocessed order into the processing queue\\n\""},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"            + \"No parameter needed\\n\""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    private static final String MESSAGE_All_PROCESSING \u003d \"All Order have been processed.\";"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"    private static int noOrderToBeProcessed \u003d -1;"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"    protected int targetIndex;"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"    protected Task toAdd;"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"    public ProcessNextCommand() {}"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(model);"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"        targetIndex \u003d noOrderToBeProcessed;"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"        targetIndex \u003d CommandHelper.findIndexOfPersonToBeProcessed(lastShownList);"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"        if (targetIndex \u003d\u003d noOrderToBeProcessed) {"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(MESSAGE_All_PROCESSING);"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"        // inception time of the order will be shown in description"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        String orderTime \u003d getCurrentTime();"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cTask\u003e taskList \u003d model.getFilteredTaskList();"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"        if (targetIndex \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"        if (taskList.size() \u003e\u003d TaskList.getMaxCapacity()) {"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(MESSAGE_FULL_CAPACITY);"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"        Person personToAdd \u003d lastShownList.get(targetIndex);"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"        toAdd \u003d new Task(personToAdd, orderTime);"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"        if (CommandHelper.checkIsProcessed(personToAdd)) {"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(MESSAGE_ALREADY_PROCESSED);"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"        //"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"        Person personToEdit \u003d personToAdd;"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"        // labels person with tag \"Processing\""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"        Person editedPerson \u003d CommandHelper.createNewTaggedPerson(personToEdit, \"Processed\");"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"        addAndTag(toAdd, personToEdit, editedPerson);"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof ProcessNextCommand // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 toAdd.equals(((ProcessNextCommand) other).toAdd));"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":90}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all order whose customers\u0027 names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"Wuhao-ooo":1,"-":35}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"ext\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Delivery as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"Wuhao-ooo":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final String COMMAND_ALIAS \u003d \"ud\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ProcessMoreCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":" * Add the first multiple unprocessed order in the order queue to the application\u0027s"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":" * processing queue, label the corresponding orders in the"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":" * order queue as Processed"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"public class ProcessMoreCommand extends ProcessNextCommand {"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"processMore\";"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"pM\";"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Adds first n unprocessed order into the processing queue.\\n\""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: Number (must be a positive integer)\\n\""},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\";"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    private int noOfTimes;"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"     * @param noOfTimes number that processNext needed to perform"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public ProcessMoreCommand(int noOfTimes) {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        this.noOfTimes \u003d noOfTimes;"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"        while (noOfTimes-- \u003e 0) {"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"            super.execute();"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof ProcessMoreCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 noOfTimes \u003d\u003d ((ProcessMoreCommand) other).noOfTimes);"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":51}},{"path":"src/main/java/seedu/address/logic/commands/TagOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":" * Tag an existing order in the order queue with given word"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"public class TagOrderCommand extends Command {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Tags the order identified by the index number with given tag\\n\""},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: String (description)\\n\""},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" Delivering\";"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_TAGGED_ORDER_SUCCESS \u003d \"Order tagged: %1$s\";"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This order already exists in the processing queue\";"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_ONE_TAG_ONLY \u003d \"Please enter one tag at a time\";"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    private Index targetIndex;"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"    private String tagWord;"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"     * @param index of the order in the filtered order list to edit"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"     * @param tagWord word the user wants to tag on the order"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"    public TagOrderCommand(Index index, String tagWord) {"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(index);"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(tagWord);"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        this.tagWord \u003d tagWord;"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"        Person personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"        // labels person with tag \"Processing\""},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"        Person editedPerson \u003d createNewTaggedPerson(personToEdit, tagWord);"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_TAGGED_ORDER_SUCCESS, editedPerson));"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof TagOrderCommand // instanceof handles nulls"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 tagWord.equals(((TagOrderCommand) other).tagWord))"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 targetIndex.equals(((TagOrderCommand) other).targetIndex);"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"     * @param personToEdit"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"     * @param tag word to be tagged on the person"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"     * @return a updated person with tag attached"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"    protected Person createNewTaggedPerson(Person personToEdit, String tag) {"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();"},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":"        Halal updatedHalal \u003d personToEdit.getHalal();"},{"lineNumber":104,"author":{"gitID":"ZhangYijiong"},"content":"        Vegetarian updatedVegetarian \u003d personToEdit.getVegetarian();"},{"lineNumber":105,"author":{"gitID":"ZhangYijiong"},"content":"        Name updatedName \u003d personToEdit.getName();"},{"lineNumber":106,"author":{"gitID":"ZhangYijiong"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();"},{"lineNumber":107,"author":{"gitID":"ZhangYijiong"},"content":"        Order updatedOrder \u003d personToEdit.getOrder();"},{"lineNumber":108,"author":{"gitID":"ZhangYijiong"},"content":"        UniqueTagList updatedTags \u003d new UniqueTagList(personToEdit.getTags());"},{"lineNumber":109,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":110,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"ZhangYijiong"},"content":"            updatedTags.add(new Tag(tag));"},{"lineNumber":112,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (UniqueTagList.DuplicateTagException dte) {"},{"lineNumber":113,"author":{"gitID":"ZhangYijiong"},"content":"            //does not add tag \"processing\" if already exists"},{"lineNumber":114,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"ZhangYijiong"},"content":"        return new Person(updatedName, updatedPhone, updatedOrder, updatedAddress,"},{"lineNumber":116,"author":{"gitID":"ZhangYijiong"},"content":"                updatedHalal, updatedVegetarian, updatedTags);"},{"lineNumber":117,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":119,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":119}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":6,"-":57}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.events.model.CustomerStatsChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, CustomerStatsStorage, MenuStorage {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"    String getCustomerStatsFilePath();"},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"     * Saves the current CustomerStats to the hard disk."},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":49,"author":{"gitID":"Wuhao-ooo"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":50,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Wuhao-ooo"},"content":"    void handleCustomerStatsChangedEvent(CustomerStatsChangedEvent csce);"},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"ZacZequn":1,"Wuhao-ooo":15,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/LoadCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.events.ui.LoadPageChangedEvent;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":" * and show the path to the address of the person identified"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"public class LoadCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"load\";"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Load the inputted web page \""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: web page link\\n\""},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" https://www.google.com.sg \""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"            + \"WARNING: PLEASE ENSURE URL ENTERED IS VALID AS SYSTEM WOULD NOT \""},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"            + \" FEEDBACK ERROR MESSAGE WHEN PAGE IS INVALID\";"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_LOAD_PAGE_SUCCESS \u003d \"Load Page: %1$s, need to have https://\\n\""},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"            + \"It could take a while if internet connection is slow.\\n\""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"            + \"However, if page does not load after a long time, please double check url entered\";"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    private final String url;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public LoadCommand(String url) {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        this.url \u003d url;"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"        EventsCenter.getInstance().post(new LoadPageChangedEvent(url));"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_LOAD_PAGE_SUCCESS, url));"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof LoadCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.url.equals(((LoadCommand) other).url)); // state check"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":49}},{"path":"src/main/java/seedu/address/logic/commands/CompleteOneOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code DeleteCommand}"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":" * Deletes an order in the processing queue identified by its index"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"public class CompleteOneOrderCommand extends Command {"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"completeOne\";"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"cOne\";"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Completes the order identified by the index number in the processing queue.\\n\""},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\";"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Completed Order: %1$s\";"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    protected Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"    public CompleteOneOrderCommand() {}"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"    public CompleteOneOrderCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        deleteSelectedTask(taskToDelete);"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"        int editIndex \u003d CommandHelper.findIndexOfMatchingPerson(taskToDelete, personList);"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"        updateDeletedPersonTag(personList, editIndex);"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"     * Deletes the selected task from taskList"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"     * @param taskToDelete task to be deleted"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"    protected void deleteSelectedTask(Task taskToDelete) {"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"            model.deleteTask(taskToDelete);"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (TaskNotFoundException enfe) {"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"            assert false : \"The target task cannot be missing\";"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"     * Marks matching person in the personList as \"Cooked\""},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"     * @param personList list of person"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"     * @param editIndex index of the person in the personList to be edited"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws CommandException throws various exceptions"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    protected void updateDeletedPersonTag(List\u003cPerson\u003e personList, int editIndex) throws CommandException {"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"            Person personToEdit \u003d personList.get(editIndex);"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":"            // labels order with tag \"Cooked\""},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"            Person editedPerson \u003d CommandHelper.createNewTaggedPerson(personToEdit, \"Cooked\");"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(\"No matching order in order queue\");"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(ProcessOrderCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof CompleteOneOrderCommand // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.targetIndex.equals(((CompleteOneOrderCommand) other).targetIndex)); // state check"},{"lineNumber":104,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":105}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.events.model.CustomerStatsChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.ReadOnlyMenu;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":" * Manages storage of AddressBook data and CustomerStats data in local storage."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    private CustomerStatsStorage customerStatsStorage;"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    private MenuStorage menuStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,"},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"                          UserPrefsStorage userPrefsStorage,"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"                          CustomerStatsStorage customerStatsStorage,"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"                          MenuStorage menuStorage) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"        this.customerStatsStorage \u003d customerStatsStorage;"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"        this.menuStorage \u003d menuStorage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void backUpAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBookStorage.backUpAddressBook(addressBook);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":107,"author":{"gitID":"Wuhao-ooo"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CustomerStats methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":108,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":109,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsFilePath() {"},{"lineNumber":111,"author":{"gitID":"Wuhao-ooo"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":112,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":114,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"Wuhao-ooo"},"content":"    public Optional\u003cReadOnlyCustomerStats\u003e readCustomerStats() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"Wuhao-ooo"},"content":"        return readCustomerStats(customerStatsStorage.getCustomerStatsFilePath());"},{"lineNumber":117,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":119,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"Wuhao-ooo"},"content":"    public Optional\u003cReadOnlyCustomerStats\u003e readCustomerStats(String filePath) throws DataConversionException,"},{"lineNumber":121,"author":{"gitID":"Wuhao-ooo"},"content":"            IOException {"},{"lineNumber":122,"author":{"gitID":"Wuhao-ooo"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":123,"author":{"gitID":"Wuhao-ooo"},"content":"        return customerStatsStorage.readCustomerStats(filePath);"},{"lineNumber":124,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":126,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats) throws IOException {"},{"lineNumber":128,"author":{"gitID":"Wuhao-ooo"},"content":"        saveCustomerStats(customerStats, customerStatsStorage.getCustomerStatsFilePath());"},{"lineNumber":129,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":131,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats, String filePath) throws IOException {"},{"lineNumber":133,"author":{"gitID":"Wuhao-ooo"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":134,"author":{"gitID":"Wuhao-ooo"},"content":"        customerStatsStorage.saveCustomerStats(customerStats, filePath);"},{"lineNumber":135,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":137,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"Wuhao-ooo"},"content":"    @Subscribe"},{"lineNumber":139,"author":{"gitID":"Wuhao-ooo"},"content":"    public void handleCustomerStatsChangedEvent(CustomerStatsChangedEvent event) {"},{"lineNumber":140,"author":{"gitID":"Wuhao-ooo"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":141,"author":{"gitID":"Wuhao-ooo"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"Wuhao-ooo"},"content":"            saveCustomerStats(event.data);"},{"lineNumber":143,"author":{"gitID":"Wuhao-ooo"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitID":"Wuhao-ooo"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":145,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":149,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Menu methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"ZacZequn"},"content":"    public String getMenuFilePath() {"},{"lineNumber":154,"author":{"gitID":"ZacZequn"},"content":"        return menuStorage.getMenuFilePath();"},{"lineNumber":155,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":157,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"ZacZequn"},"content":"    public Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException {"},{"lineNumber":159,"author":{"gitID":"ZacZequn"},"content":"        return readMenu(menuStorage.getMenuFilePath());"},{"lineNumber":160,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":162,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"ZacZequn"},"content":"    public Optional\u003cReadOnlyMenu\u003e readMenu(String filePath) throws DataConversionException, IOException {"},{"lineNumber":164,"author":{"gitID":"ZacZequn"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":165,"author":{"gitID":"ZacZequn"},"content":"        return menuStorage.readMenu(filePath);"},{"lineNumber":166,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":168,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"ZacZequn"},"content":"    public void saveMenu(ReadOnlyMenu menu) throws IOException {"},{"lineNumber":170,"author":{"gitID":"ZacZequn"},"content":"        saveMenu(menu, menuStorage.getMenuFilePath());"},{"lineNumber":171,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":173,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"ZacZequn"},"content":"    public void saveMenu(ReadOnlyMenu menu, String filePath) throws IOException {"},{"lineNumber":175,"author":{"gitID":"ZacZequn"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":176,"author":{"gitID":"ZacZequn"},"content":"        menuStorage.saveMenu(menu, filePath);"},{"lineNumber":177,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":179,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":37,"Wuhao-ooo":49,"-":93}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.dish.Price;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Count;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Distance;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code XmlAdaptedPerson}"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":" * JAXB-friendly version of the Task."},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"public class XmlAdaptedTask {"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    private String order;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    private String address;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    private String price;"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    private String distance;"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    private String count;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"    private String description;"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    public XmlAdaptedTask(String order, String address, String price,"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"                            String distance, String count, String description) {"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"        this.order \u003d order;"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        this.address \u003d address;"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"        this.price \u003d price;"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        this.distance \u003d distance;"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"        this.count \u003d count;"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"        this.description \u003d description;"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"        order \u003d source.getOrder().toString();"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"        address \u003d source.getAddress().toString();"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"        price \u003d source.getPrice().value;"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"        distance \u003d source.getDistance().toString();"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"        count \u003d source.getCount().value;"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"        description \u003d source.getDescription();"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        if (!Order.isValidOrder(order)) {"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Order.MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"        final Order order \u003d new Order(this.order);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"        final Price price \u003d new Price(this.price);"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"        final Distance distance \u003d new Distance(this.distance);"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        final Count count \u003d new Count(this.count);"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"        final String description \u003d new String(this.description);"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"        return new Task(order, address, price, distance, count, description);"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":73,"ZacZequn":4,"-":8}},{"path":"src/main/java/seedu/address/storage/MenuStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.ReadOnlyMenu;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":" * Represents a storage for menu."},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"public interface MenuStorage {"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"    String getMenuFilePath();"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     * Returns Menu data as a {@link ReadOnlyMenu}."},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"    Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"     * @see #getMenuFilePath()"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"    Optional\u003cReadOnlyMenu\u003e readMenu(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"     * Saves the given {@link ReadOnlyMenu} to the storage."},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"     * @param menu cannot be null."},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    void saveMenu(ReadOnlyMenu menu) throws IOException;"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"     * @see #saveMenu(ReadOnlyMenu)"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"    void saveMenu(ReadOnlyMenu menu, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":45}},{"path":"src/main/java/seedu/address/logic/commands/CompleteMoreOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code CompleteOneOrderCommand}"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":" * Deletes n orders at the front of the queue, n is the user input."},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"public class CompleteMoreOrderCommand extends CompleteOneOrderCommand {"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"completeMore\";"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"cM\";"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Complete n orders in the current queue, n be the user input.\\n\""},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: Number (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2\";"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_COMPLETE_TASK_SUCCESS \u003d \"Order(s) Completed\";"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    private final Index numberOfTimes;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"    public CompleteMoreOrderCommand(Index targetIndex, Index numberOfTimes) {"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        this.numberOfTimes \u003d numberOfTimes;"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"        int number \u003d numberOfTimes.getOneBased();"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"        while (number-- !\u003d 0) {"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"            List\u003cTask\u003e taskList \u003d model.getFilteredTaskList();"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"            checkIsMoreThanFullCapacity(number, taskList);"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"            Task taskToDelete \u003d taskList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"            deleteSelectedTask(taskToDelete);"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"            List\u003cPerson\u003e personList \u003d model.getFilteredPersonList();"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"            int editIndex \u003d CommandHelper.findIndexOfMatchingPerson(taskToDelete, personList);"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"            updateDeletedPersonTag(personList, editIndex);"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_COMPLETE_TASK_SUCCESS));"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"     * Checks whether given number is more than the orders in the processing queue"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"     * @param number number of orders to be completed"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"     * @param taskList list of task"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws CommandException throws exception"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"    private void checkIsMoreThanFullCapacity(int number, List\u003cTask\u003e taskList) throws CommandException {"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"        if (number \u003e\u003d taskList.size()) {"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(\"There are only \" + taskList.size()"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"                    + \" orders being cooking\");"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof CompleteMoreOrderCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.numberOfTimes.equals(((CompleteMoreOrderCommand) other).numberOfTimes)); // state check"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":77}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    private String order;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    private String halal;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"    private String vegetarian;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"    public XmlAdaptedPerson(String name, String phone, String order, String address,"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"                            String halal, String vegetarian, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        this.order \u003d order;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"        this.halal \u003d halal;"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"        this.vegetarian \u003d vegetarian;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"        order \u003d source.getOrder().fullOrder;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"        halal \u003d source.getHalal().value;"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":"        vegetarian \u003d source.getVegetarian().value;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":112,"author":{"gitID":"ZacZequn"},"content":"        if (this.order \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Order.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"ZacZequn"},"content":"        if (!Order.isValidOrder(this.order)) {"},{"lineNumber":116,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Order.MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"ZacZequn"},"content":"        final Order order \u003d new Order(this.order);"},{"lineNumber":119,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":120,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":130,"author":{"gitID":"ZacZequn"},"content":"        if (this.halal \u003d\u003d null) {"},{"lineNumber":131,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Halal.class.getSimpleName()));"},{"lineNumber":132,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"ZacZequn"},"content":"        if (!Halal.isValidHalal(this.halal)) {"},{"lineNumber":134,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Halal.MESSAGE_HALAL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"ZacZequn"},"content":"        final Halal halal \u003d new Halal(this.halal);"},{"lineNumber":137,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"        if (this.vegetarian \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"                    Vegetarian.class.getSimpleName()));"},{"lineNumber":141,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"ZacZequn"},"content":"        if (!Vegetarian.isValidVegetarian(this.vegetarian)) {"},{"lineNumber":143,"author":{"gitID":"ZacZequn"},"content":"            throw new IllegalValueException(Vegetarian.MESSAGE_VEGETARIAN_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"ZacZequn"},"content":"        final Vegetarian vegetarian \u003d new Vegetarian(this.vegetarian);"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":"        return new Person(name, phone, order, address, halal, vegetarian, tags);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":43,"-":124}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":" * Stores addressbook data, customerstats data and menu data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"     * Saves the given customer stats data to the specified file."},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"    public static void saveCustomerDataToFile(File file, XmlSerializableCustomerStats customerStats)"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"            throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"            XmlUtil.saveDataToFile(file, customerStats);"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"        } catch (JAXBException e) {"},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":49,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Wuhao-ooo"},"content":"     * Returns customer stats in the file or an empty address book"},{"lineNumber":54,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Wuhao-ooo"},"content":"    public static XmlSerializableCustomerStats loadCustomerDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":56,"author":{"gitID":"Wuhao-ooo"},"content":"            FileNotFoundException {"},{"lineNumber":57,"author":{"gitID":"Wuhao-ooo"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"Wuhao-ooo"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableCustomerStats.class);"},{"lineNumber":59,"author":{"gitID":"Wuhao-ooo"},"content":"        } catch (JAXBException e) {"},{"lineNumber":60,"author":{"gitID":"Wuhao-ooo"},"content":"            throw new DataConversionException(e);"},{"lineNumber":61,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"     * Saves the given menu data to the specified file."},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"    public static void saveMenuDataToFile(File file, XmlSerializableMenu menu)"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"            throws FileNotFoundException {"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"            XmlUtil.saveDataToFile(file, menu);"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"        } catch (JAXBException e) {"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"     * Returns menu stats in the file or an empty address book"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"    public static XmlSerializableMenu loadMenuDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":"            FileNotFoundException {"},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableMenu.class);"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"        } catch (JAXBException e) {"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"            throw new DataConversionException(e);"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":27,"Wuhao-ooo":26,"-":38}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"        for (XmlAdaptedTask k : tasks) {"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"            addressBook.addTask(k.toModelType());"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 tasks.equals(otherAb.tasks);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":9,"-":72}},{"path":"src/main/java/seedu/address/storage/XmlMenuStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.ReadOnlyMenu;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":" * A class to access Menu data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"public class XmlMenuStorage implements MenuStorage {"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlMenuStorage.class);"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    public XmlMenuStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"    public String getMenuFilePath() {"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    public Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"        return readMenu(filePath);"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"     * Similar to {@link #readMenu()}"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"    public Optional\u003cReadOnlyMenu\u003e readMenu(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"            FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"        File menuFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"        if (!menuFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"            logger.info(\"Menu file \"  + menuFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"        XmlSerializableMenu xmlMenu \u003d XmlFileStorage.loadMenuDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"            return Optional.of(xmlMenu.toModelType());"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"            logger.info(\"Illegal values found in \" + menuFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"    public void saveMenu(ReadOnlyMenu menu) throws IOException {"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"        saveMenu(menu, filePath);"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"     * Similar to {@link #saveMenu(ReadOnlyMenu)}"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"    public void saveMenu(ReadOnlyMenu menu, String filePath) throws IOException {"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(menu);"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(filePath);"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"        XmlFileStorage.saveMenuDataToFile(file, new XmlSerializableMenu(menu));"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":83}},{"path":"src/main/java/seedu/address/storage/XmlSerializableMenu.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.ReadOnlyMenu;"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Dish;"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":" * An Immutable Menu that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"@XmlRootElement(name \u003d \"menu\")"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"public class XmlSerializableMenu {"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"    private HashMap\u003cString, Dish\u003e dishes;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"     * Creates an empty XmlSerializableMenu."},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    public XmlSerializableMenu() {"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"        dishes \u003d new HashMap\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"     * Conversion"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"    public XmlSerializableMenu(ReadOnlyMenu src) {"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        this();"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"        dishes \u003d src.getDishes();"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"     * Converts this menu into the model\u0027s {@code Menu} object."},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"    public Menu toModelType() throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"        Menu menu \u003d new Menu();"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"        menu.setMenu(dishes);"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"        return menu;"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":51}},{"path":"src/main/java/seedu/address/storage/CustomerStatsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"//@@author Wuhao-ooo"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":" * Represents a storage for customers\u0027 orders count."},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"public interface CustomerStatsStorage {"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"    String getCustomerStatsFilePath();"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"     * Returns CustomerStats data as a {@link ReadOnlyCustomerStats}."},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"    Optional\u003cReadOnlyCustomerStats\u003e readCustomerStats() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"     * @see #getCustomerStatsFilePath()"},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"    Optional\u003cReadOnlyCustomerStats\u003e readCustomerStats(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"     * Saves the given {@link ReadOnlyCustomerStats} to the storage."},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"     * @param customerStats cannot be null."},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"    void saveCustomerStats(ReadOnlyCustomerStats customerStats) throws IOException;"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"     * @see #saveCustomerStats(ReadOnlyCustomerStats)"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"    void saveCustomerStats(ReadOnlyCustomerStats customerStats, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":45}},{"path":"src/main/java/seedu/address/storage/XmlSerializableCustomerStats.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"//@@author Wuhao-ooo"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":" * An Immutable CustomerStats that is serializable to XML format"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"@XmlRootElement(name \u003d \"customerstats\")"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"public class XmlSerializableCustomerStats {"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"    @XmlElement"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"    private HashMap\u003cString, Integer\u003e orderCount;"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"     * Creates an empty XmlSerializableCustomerStats."},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"    public XmlSerializableCustomerStats() {"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"        orderCount \u003d new HashMap\u003c\u003e();"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"     * Conversion"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"    public XmlSerializableCustomerStats(ReadOnlyCustomerStats src) {"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"        this();"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"        orderCount \u003d src.getOrdersCount();"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"    public CustomerStats toModelType() {"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"        CustomerStats customerStats \u003d new CustomerStats();"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"        customerStats.setOrdersCount(orderCount);"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"        return customerStats;"},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":49}},{"path":"src/main/java/seedu/address/model/ReadOnlyCustomerStats.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"//@@author Wuhao-ooo"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":" * Unmodifiable view of customers statistics"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"public interface ReadOnlyCustomerStats {"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"     * Returns a copy of the data in CustomerStats."},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"     * Modifications on this copy will not affect the original CustomerStats data"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"    HashMap\u003cString, Integer\u003e getOrdersCount();"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":16}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.CustomerStats;"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.ReadOnlyMenu;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.util.SampleMenuDataUtil;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.storage.CustomerStatsStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.storage.MenuStorage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.storage.XmlCustomerStatsStorage;"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.storage.XmlMenuStorage;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"Wuhao-ooo"},"content":"        CustomerStatsStorage customerStatsStorage \u003d new XmlCustomerStatsStorage(userPrefs.getCustomerStatsFilePath());"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"        MenuStorage menuStorage \u003d new XmlMenuStorage(userPrefs.getMenuFilePath());"},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, customerStatsStorage, menuStorage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":101,"author":{"gitID":"Wuhao-ooo"},"content":"        Optional\u003cReadOnlyCustomerStats\u003e customerStatsOptional;"},{"lineNumber":102,"author":{"gitID":"ZacZequn"},"content":"        Optional\u003cReadOnlyMenu\u003e menuOptional;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":104,"author":{"gitID":"Wuhao-ooo"},"content":"        ReadOnlyCustomerStats initialCustomerStats;"},{"lineNumber":105,"author":{"gitID":"ZacZequn"},"content":"        ReadOnlyMenu initialMenu;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"Wuhao-ooo"},"content":"        //@@author Wuhao-ooo"},{"lineNumber":121,"author":{"gitID":"Wuhao-ooo"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"Wuhao-ooo"},"content":"            customerStatsOptional \u003d storage.readCustomerStats();"},{"lineNumber":123,"author":{"gitID":"Wuhao-ooo"},"content":"            if (!customerStatsOptional.isPresent()) {"},{"lineNumber":124,"author":{"gitID":"Wuhao-ooo"},"content":"                logger.info(\"Data file for customer stats not found. Will be starting with an empty file\");"},{"lineNumber":125,"author":{"gitID":"Wuhao-ooo"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"Wuhao-ooo"},"content":"            initialCustomerStats \u003d new CustomerStats();"},{"lineNumber":127,"author":{"gitID":"Wuhao-ooo"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":128,"author":{"gitID":"Wuhao-ooo"},"content":"            logger.warning(\"Data file for customer stats in wrong format. Will be starting with an empty file\");"},{"lineNumber":129,"author":{"gitID":"Wuhao-ooo"},"content":"            initialCustomerStats \u003d new CustomerStats();"},{"lineNumber":130,"author":{"gitID":"Wuhao-ooo"},"content":"        }  catch (IOException e) {"},{"lineNumber":131,"author":{"gitID":"Wuhao-ooo"},"content":"            logger.warning(\"Problem while reading from the customer stats file. Will be starting with an empty file\");"},{"lineNumber":132,"author":{"gitID":"Wuhao-ooo"},"content":"            initialCustomerStats \u003d new CustomerStats();"},{"lineNumber":133,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Wuhao-ooo"},"content":"        //@@author"},{"lineNumber":135,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":136,"author":{"gitID":"ZacZequn"},"content":"        //@@author ZacZequn"},{"lineNumber":137,"author":{"gitID":"ZacZequn"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"            menuOptional \u003d storage.readMenu();"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"            if (!menuOptional.isPresent()) {"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"                logger.info(\"Data file for menu not found. Will be starting with an empty file\");"},{"lineNumber":141,"author":{"gitID":"ZacZequn"},"content":"            }"},{"lineNumber":142,"author":{"gitID":"ZacZequn"},"content":"            initialMenu \u003d menuOptional.orElseGet(SampleMenuDataUtil::getSampleMenu);"},{"lineNumber":143,"author":{"gitID":"ZacZequn"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":144,"author":{"gitID":"ZacZequn"},"content":"            logger.warning(\"Data file for menu in wrong format. Menu will be starting with an empty file\");"},{"lineNumber":145,"author":{"gitID":"ZacZequn"},"content":"            initialMenu \u003d new Menu();"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"        }  catch (IOException e) {"},{"lineNumber":147,"author":{"gitID":"ZacZequn"},"content":"            logger.warning(\"Problem while reading from the menu file. Menu will be starting with an empty file\");"},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":"            initialMenu \u003d new Menu();"},{"lineNumber":149,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"        //@@author"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":152,"author":{"gitID":"ZacZequn"},"content":"        return new ModelManager(initialData, userPrefs, initialCustomerStats, initialMenu);"},{"lineNumber":153,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":182,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":210,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":28,"Wuhao-ooo":24,"-":207}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Halal;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.person.Vegetarian;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Rice\"),"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Curry Chicken\"),"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Ban Mian\"),"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"),"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Coffee\"),"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Chicken Chop\"),"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"                new Order(\"Ice Milo\"),"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Halal(null), new Vegetarian(null),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":21,"-":54}},{"path":"src/main/java/seedu/address/model/dish/exceptions/DishNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish.exceptions;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":" * Signals that the operation is unable to find the specified dish."},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"public class DishNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"    public DishNotFoundException(String message) {"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":11}},{"path":"src/main/java/seedu/address/logic/commands/ProcessOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.Calendar;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.Date;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.queue.TaskList;"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":" * Add an order to the application\u0027s processing queue, label the corresponding order in the"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":" * order queue as Processed"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"public class ProcessOrderCommand extends Command {"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_WORD \u003d \"process\";"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COMMAND_ALIAS \u003d \"ps\";"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"            + \": Adds the order identified by the index number into the processing queue\\n\""},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Order added: %1$s\";"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This order already exists in the processing queue.\";"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_FULL_CAPACITY \u003d \"Kitchen is at full capacity. No available chef.\";"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_ALREADY_PROCESSED \u003d \"This order has already being processed.\\n\""},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"            + \"WARNING: DO NOT OVERWRTIE EXISTING ‘Processed’, ‘Cooked’ TAGS.\";"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    protected Index targetIndex;"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"    protected Task toAdd;"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"    public ProcessOrderCommand() {}"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"     * @param targetIndex index of order to be processed in the order queue"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    public ProcessOrderCommand(Index targetIndex) {"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(model);"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"        // inception time of the order will be shown in description"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"        String orderTime \u003d getCurrentTime();"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"        List\u003cTask\u003e taskList \u003d model.getFilteredTaskList();"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"        if (taskList.size() \u003e\u003d TaskList.getMaxCapacity()) {"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(MESSAGE_FULL_CAPACITY);"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"        Person personToAdd \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"        if (CommandHelper.checkIsProcessed(personToAdd)) {"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(MESSAGE_ALREADY_PROCESSED);"},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"        toAdd \u003d new Task(personToAdd, orderTime);"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"        Person personToEdit \u003d personToAdd;"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"        // labels person with tag \"Processing\""},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"        Person editedPerson \u003d CommandHelper.createNewTaggedPerson(personToEdit, \"Processed\");"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"        addAndTag(toAdd, personToEdit, editedPerson);"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"     * adds the order to the processing queue, and tag the matching person"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"     * with tag \"Processed\""},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"     * @param toAdd task to be added"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"     * @param personToEdit original person"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"     * @param editedPerson replacement"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws CommandException exceptions"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"    protected void addAndTag(Task toAdd, Person personToEdit, Person editedPerson) throws CommandException {"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":"            model.addTask(toAdd);"},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":"            try {"},{"lineNumber":104,"author":{"gitID":"ZhangYijiong"},"content":"                model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":105,"author":{"gitID":"ZhangYijiong"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":106,"author":{"gitID":"ZhangYijiong"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":107,"author":{"gitID":"ZhangYijiong"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":108,"author":{"gitID":"ZhangYijiong"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":109,"author":{"gitID":"ZhangYijiong"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"ZhangYijiong"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":111,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":112,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":113,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":114,"author":{"gitID":"ZhangYijiong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":115,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":118,"author":{"gitID":"ZhangYijiong"},"content":"    protected String getCurrentTime() {"},{"lineNumber":119,"author":{"gitID":"ZhangYijiong"},"content":"        Date date \u003d new Date();"},{"lineNumber":120,"author":{"gitID":"ZhangYijiong"},"content":"        date.getTime();"},{"lineNumber":121,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":122,"author":{"gitID":"ZhangYijiong"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":123,"author":{"gitID":"ZhangYijiong"},"content":"        return cal.get(Calendar.HOUR_OF_DAY) + \":\""},{"lineNumber":124,"author":{"gitID":"ZhangYijiong"},"content":"                + cal.get(Calendar.MINUTE) + \":\""},{"lineNumber":125,"author":{"gitID":"ZhangYijiong"},"content":"                + cal.get(Calendar.SECOND);"},{"lineNumber":126,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":128,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof ProcessOrderCommand // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 targetIndex.equals(((ProcessOrderCommand) other).targetIndex));"},{"lineNumber":133,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":134}},{"path":"src/main/java/seedu/address/storage/XmlCustomerStatsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"//@@author Wuhao-ooo"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.model.ReadOnlyCustomerStats;"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":" * A class to access CustomerStats data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"public class XmlCustomerStatsStorage implements CustomerStatsStorage {"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlCustomerStatsStorage.class);"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":"    public XmlCustomerStatsStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsFilePath() {"},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"    public Optional\u003cReadOnlyCustomerStats\u003e readCustomerStats() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"        return readCustomerStats(filePath);"},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"     * Similar to {@link #readCustomerStats()}"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":"    public Optional\u003cReadOnlyCustomerStats\u003e readCustomerStats(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"            FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"        File customerStatsFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":50,"author":{"gitID":"Wuhao-ooo"},"content":"        if (!customerStatsFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"Wuhao-ooo"},"content":"            logger.info(\"CustomerStats file \"  + customerStatsFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":55,"author":{"gitID":"Wuhao-ooo"},"content":"        XmlSerializableCustomerStats xmlCustomerStats \u003d XmlFileStorage.loadCustomerDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"Wuhao-ooo"},"content":"        return Optional.of(xmlCustomerStats.toModelType());"},{"lineNumber":57,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":59,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats) throws IOException {"},{"lineNumber":61,"author":{"gitID":"Wuhao-ooo"},"content":"        saveCustomerStats(customerStats, filePath);"},{"lineNumber":62,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":64,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Wuhao-ooo"},"content":"     * Similar to {@link #saveCustomerStats(ReadOnlyCustomerStats)}"},{"lineNumber":66,"author":{"gitID":"Wuhao-ooo"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":67,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"Wuhao-ooo"},"content":"    public void saveCustomerStats(ReadOnlyCustomerStats customerStats, String filePath) throws IOException {"},{"lineNumber":69,"author":{"gitID":"Wuhao-ooo"},"content":"        requireNonNull(customerStats);"},{"lineNumber":70,"author":{"gitID":"Wuhao-ooo"},"content":"        requireNonNull(filePath);"},{"lineNumber":71,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":72,"author":{"gitID":"Wuhao-ooo"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":73,"author":{"gitID":"Wuhao-ooo"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":74,"author":{"gitID":"Wuhao-ooo"},"content":"        XmlFileStorage.saveCustomerDataToFile(file, new XmlSerializableCustomerStats(customerStats));"},{"lineNumber":75,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":76}},{"path":"src/main/java/seedu/address/model/util/SampleMenuDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.util;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.Menu;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.ReadOnlyMenu;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Dish;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Name;"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Price;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"public class SampleMenuDataUtil {"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static Dish[] getSampleDishes() {"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"        return new Dish[] {"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"            new Dish(new Name(\"Chicken Rice\"), new Price(\"3\")),"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"            new Dish(new Name(\"Curry Chicken\"), new Price(\"4\")),"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"            new Dish(new Name(\"Chicken Chop\"), new Price(\"5\")),"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"            new Dish(new Name(\"Ban Mian\"), new Price(\"4\")),"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"            new Dish(new Name(\"Ice Milo\"), new Price(\"2\")),"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"            new Dish(new Name(\"Coffee\"), new Price(\"2\"))"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"        };"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    public static ReadOnlyMenu getSampleMenu() {"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"        Menu sampleMenu \u003d new Menu();"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"        for (Dish sampleDish : getSampleDishes()) {"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"            sampleMenu.addDish(sampleDish);"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"        return sampleMenu;"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":33}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"        Collections.sort(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"        Collections.sort(internalList);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"        Collections.sort(internalList);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":4,"-":120}},{"path":"src/main/java/seedu/address/model/dish/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":" * Represents a Dish\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"public class Name {"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"            \"Dish names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Name}."},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"     * @param name A valid name."},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    public Name(String name) {"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"        this.fullName \u003d name;"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid dish name."},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":60}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String ADDRESS_USER_OWN \u003d \"NUS\";"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"     * Change address into a form that will be used by Google Map"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    public String getGoogleMapSearchForm() {"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"        return this.value.replaceAll(\" \", \"+\");"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":10,"-":58}},{"path":"src/main/java/seedu/address/model/dish/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s price number in the address book."},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":"public class Price {"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"            \"Price numbers can only contain numbers\";"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    public static final String PRICE_VALIDATION_REGEX \u003d \"\\\\d{1,}\";"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Price}."},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"     * @param price A valid price number."},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"    public Price(String price) {"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(price);"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"        this.value \u003d price;"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid person price number."},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidPrice(String test) {"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"        return test.matches(PRICE_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"     *  Returns price in integer form to be able used by {@code compareTo} in Task"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"    public int toInt() {"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"        return Integer.parseInt(value);"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":60}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"public class Person implements Comparable\u003cPerson\u003e {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    private final Order order;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"    private final Halal halal;"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    private final Vegetarian vegetarian;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    public Person(Name name, Phone phone, Order order, Address address,"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"                  Halal halal, Vegetarian vegetarian, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"        requireAllNonNull(name, phone, order, address, halal, vegetarian, tags);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        this.order \u003d order;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"        this.halal \u003d halal;"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        this.vegetarian \u003d vegetarian;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"     * This method is only used in AddOrder command"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    public Person(Name name, Phone phone, Order order, Address address,"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"                  Halal halal, Vegetarian vegetarian, UniqueTagList tags) {"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"        requireAllNonNull(name, phone, order, address, halal, vegetarian, tags);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"        this.order \u003d order;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        this.halal \u003d halal;"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"        this.vegetarian \u003d vegetarian;"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"        // here input tags is a UniqueTagList"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"        this.tags \u003d tags;"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"    public Order getOrder() {"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"        return order;"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"    public Halal getHalal() {"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"        return halal;"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"    public Vegetarian getVegetarian() {"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"        return vegetarian;"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns a UniqueTagList of the person"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"    public UniqueTagList getTagList() {"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"        return tags;"},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":117,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 otherPerson.getOrder().equals(this.getOrder())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":124,"author":{"gitID":"ZacZequn"},"content":"        return Objects.hash(name, phone, order, address, halal, vegetarian, tags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":133,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Order: \")"},{"lineNumber":134,"author":{"gitID":"ZacZequn"},"content":"                .append(getOrder())"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":137,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Halal: \")"},{"lineNumber":138,"author":{"gitID":"ZacZequn"},"content":"                .append(getHalal())"},{"lineNumber":139,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Vegetarian: \")"},{"lineNumber":140,"author":{"gitID":"ZacZequn"},"content":"                .append(getVegetarian())"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":147,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":148,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"ZhangYijiong"},"content":"    public int compareTo(Person other) {"},{"lineNumber":150,"author":{"gitID":"ZhangYijiong"},"content":"        int valueOwn \u003d getValue(this);"},{"lineNumber":151,"author":{"gitID":"ZhangYijiong"},"content":"        int valueOther \u003d getValue(other);"},{"lineNumber":152,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":153,"author":{"gitID":"ZhangYijiong"},"content":"        if (valueOwn \u003e valueOther) {"},{"lineNumber":154,"author":{"gitID":"ZhangYijiong"},"content":"            return 1;"},{"lineNumber":155,"author":{"gitID":"ZhangYijiong"},"content":"        } else if (valueOwn \u003c valueOther) {"},{"lineNumber":156,"author":{"gitID":"ZhangYijiong"},"content":"            return -1;"},{"lineNumber":157,"author":{"gitID":"ZhangYijiong"},"content":"        } else {"},{"lineNumber":158,"author":{"gitID":"ZhangYijiong"},"content":"            return 0;"},{"lineNumber":159,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":161,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":163,"author":{"gitID":"ZhangYijiong"},"content":"    private int getValue(Person person) {"},{"lineNumber":164,"author":{"gitID":"ZhangYijiong"},"content":"        UniqueTagList tagsOwn \u003d person.getTagList();"},{"lineNumber":165,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":166,"author":{"gitID":"ZhangYijiong"},"content":"        Tag processed \u003d new Tag(\"Processed\");"},{"lineNumber":167,"author":{"gitID":"ZhangYijiong"},"content":"        Tag cooked \u003d new Tag(\"Cooked\");"},{"lineNumber":168,"author":{"gitID":"ZhangYijiong"},"content":"        Tag delivering \u003d new Tag(\"Delivering\");"},{"lineNumber":169,"author":{"gitID":"ZhangYijiong"},"content":"        Tag delivered \u003d new Tag(\"Delivered\");"},{"lineNumber":170,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":171,"author":{"gitID":"ZhangYijiong"},"content":"        int valueOwn \u003d 0;"},{"lineNumber":172,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":173,"author":{"gitID":"ZhangYijiong"},"content":"        if (tagsOwn.contains(processed)) {"},{"lineNumber":174,"author":{"gitID":"ZhangYijiong"},"content":"            valueOwn +\u003d 1;"},{"lineNumber":175,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"ZhangYijiong"},"content":"        if (tagsOwn.contains(cooked)) {"},{"lineNumber":177,"author":{"gitID":"ZhangYijiong"},"content":"            valueOwn -\u003d 2;"},{"lineNumber":178,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"ZhangYijiong"},"content":"        if (tagsOwn.contains(delivering)) {"},{"lineNumber":180,"author":{"gitID":"ZhangYijiong"},"content":"            valueOwn -\u003d 4;"},{"lineNumber":181,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"ZhangYijiong"},"content":"        if (tagsOwn.contains(delivered)) {"},{"lineNumber":183,"author":{"gitID":"ZhangYijiong"},"content":"            valueOwn +\u003d 10;"},{"lineNumber":184,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"ZhangYijiong"},"content":"        return valueOwn;"},{"lineNumber":186,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":56,"ZacZequn":38,"-":93}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":5,"-":26}},{"path":"src/main/java/seedu/address/model/person/Order.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s order in the address book."},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOrder(String)}"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"public class Order {"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_ORDER_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"            \"Invalid order\";"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"    public static final String ORDER_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    public final String fullOrder;"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Order}."},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"     * @param order A valid order."},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"    public Order(String order) {"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(order);"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"        checkArgument(isValidOrder(order), MESSAGE_ORDER_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"        this.fullOrder \u003d order.toString();"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid person order."},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidOrder(String test) {"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"        return test.matches(ORDER_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"        return fullOrder.toString();"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Order // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.fullOrder.equals(((Order) other).fullOrder)); // state check"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        return fullOrder.hashCode();"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":60}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"    private String customerStatsFilePath \u003d \"data/customerstats.xml\";"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"    private String customerStatsName \u003d \"MyCustomerStats\";"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    private String menuFilePath \u003d \"data/menu.xml\";"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"    private String menuName \u003d \"MyMenu\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsFilePath() {"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"        return customerStatsFilePath;"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    public String getMenuFilePath() {"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"        return menuFilePath;"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":61,"author":{"gitID":"Wuhao-ooo"},"content":"    public String getCustomerStatsName() {"},{"lineNumber":62,"author":{"gitID":"Wuhao-ooo"},"content":"        return customerStatsName;"},{"lineNumber":63,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":65,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":8,"Wuhao-ooo":14,"-":78}},{"path":"src/main/java/seedu/address/model/dish/Dish.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.dish;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":" * Represents a Dish in the address book."},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"public class Dish {"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"    private final Name name;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    private final Price price;"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     * If we know the name and price."},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"    public Dish(Name name, Price price) {"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"        requireAllNonNull(name, price);"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"        this.price \u003d price;"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"     * If we only know the name. Only used for testing purpose"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"    public Dish(Name name) {"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"        requireAllNonNull(name);"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"        this.price \u003d new Price(\"3\");"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        return name;"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"    public Price getPrice() {"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"        return price;"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"        if (!(other instanceof Dish)) {"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"            return false;"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"        Dish otherDish \u003d (Dish) other;"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":"        return otherDish.getName().equals(this.getName())"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 otherDish.getPrice().equals(this.getPrice());"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"        return Objects.hash(name, price);"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"        builder.append(getName())"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"                .append(\" Price: \")"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":"                .append(getPrice());"},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":"        return builder.toString();"},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":76}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.queue.TaskList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"    private final TaskList tasks;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    public AddressBook() {"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"            setTasks(newData.getTaskList());"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"        } catch (DuplicateTaskException e) {"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"            assert false : \"AddressBooks should not have duplicate tasks\";"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":109,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":150,"author":{"gitID":"ZacZequn"},"content":"                person.getName(), person.getPhone(), person.getOrder(),"},{"lineNumber":151,"author":{"gitID":"ZacZequn"},"content":"                person.getAddress(), person.getHalal(), person.getVegetarian(), correctTagReferences);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"ZhangYijiong"},"content":"    //// task-level operations"},{"lineNumber":173,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":174,"author":{"gitID":"ZhangYijiong"},"content":"    public void addTask(Task k) throws DuplicateTaskException {"},{"lineNumber":175,"author":{"gitID":"ZhangYijiong"},"content":"        tasks.add(k);"},{"lineNumber":176,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":178,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"ZhangYijiong"},"content":"     * Removes {@code task} from this {@code AddressBook}."},{"lineNumber":180,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws TaskNotFoundException if the {@code task} is not in this {@code AddressBook}."},{"lineNumber":181,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean removeTask(Task task) throws TaskNotFoundException {"},{"lineNumber":183,"author":{"gitID":"ZhangYijiong"},"content":"        if (tasks.remove(task)) {"},{"lineNumber":184,"author":{"gitID":"ZhangYijiong"},"content":"            return true;"},{"lineNumber":185,"author":{"gitID":"ZhangYijiong"},"content":"        } else {"},{"lineNumber":186,"author":{"gitID":"ZhangYijiong"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":187,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"ZhangYijiong"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":210,"author":{"gitID":"ZhangYijiong"},"content":"        return tasks.asObservableList();"},{"lineNumber":211,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":218,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":219,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":42,"ZacZequn":2,"-":183}},{"path":"src/main/java/seedu/address/model/person/Vegetarian.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s preference on food  in the address book."},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidVegetarian(String)}"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"public class Vegetarian {"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_VEGETARIAN_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"            \"Person\u0027s preference should only be Vegetarian or Non-vegetarian\";"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Vegetarian}."},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     * @param vegetarian A valid vegetarian."},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"    public Vegetarian(String vegetarian) {"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"        if (isNull(vegetarian)) {"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"            this.value \u003d \"Non-vegetarian\";"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"        } else {"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"            checkArgument(isValidVegetarian(vegetarian), MESSAGE_VEGETARIAN_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"            if (vegetarian.equalsIgnoreCase(\"Vegetarian\")) {"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"                this.value \u003d \"Vegetarian\";"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"            } else {"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"                this.value \u003d \"Non-vegetarian\";"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid halal preference."},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidVegetarian(String test) {"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(test);"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"        if (test.equalsIgnoreCase(\"Vegetarian\") || (test.equalsIgnoreCase(\"Non-vegetarian\"))) {"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"            return true;"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"        return false;"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"        return value;"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Vegetarian // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.value.equals(((Vegetarian) other).value)); // state check"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"        return value.hashCode();"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":62}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"import seedu.address.commons.events.model.CustomerStatsChangedEvent;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.commons.events.model.MenuChangedEvent;"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.exceptions.DishNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"    private final CustomerStats customerStats;"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    private final Menu menu;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs, ReadOnlyCustomerStats customerStats,"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"                        ReadOnlyMenu menu) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"                + \" and user prefs \" + userPrefs"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"                + \" and customer stats \" + customerStats"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"                + \" and menu \" + menu);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":52,"author":{"gitID":"Wuhao-ooo"},"content":"        this.customerStats \u003d new CustomerStats();"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        this.menu \u003d new Menu(menu);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"        this(new AddressBook(), new UserPrefs(), new CustomerStats(), new Menu());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author Wuhao-ooo"},{"lineNumber":78,"author":{"gitID":"Wuhao-ooo"},"content":"    /** Raises an event to indicate customer stats has changed */"},{"lineNumber":79,"author":{"gitID":"Wuhao-ooo"},"content":"    private void indicateCustomerStatsChanged() {"},{"lineNumber":80,"author":{"gitID":"Wuhao-ooo"},"content":"        raise(new CustomerStatsChangedEvent(customerStats));"},{"lineNumber":81,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":83,"author":{"gitID":"Wuhao-ooo"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"    /** Raises an event to indicate customer stats has changed */"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"    private void indicateMenuChanged() {"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"        raise(new MenuChangedEvent(menu));"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":90,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"ZacZequn"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException, DishNotFoundException {"},{"lineNumber":99,"author":{"gitID":"ZacZequn"},"content":"        indicateMenuChanged();"},{"lineNumber":100,"author":{"gitID":"ZacZequn"},"content":"        checkOrder(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":104,"author":{"gitID":"Wuhao-ooo"},"content":"        customerStats.addCount(person.getPhone().toString());"},{"lineNumber":105,"author":{"gitID":"Wuhao-ooo"},"content":"        indicateCustomerStatsChanged();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"ZhangYijiong"},"content":"    public synchronized void addTask(Task task) throws DuplicateTaskException {"},{"lineNumber":119,"author":{"gitID":"ZhangYijiong"},"content":"        addressBook.addTask(task);"},{"lineNumber":120,"author":{"gitID":"ZhangYijiong"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"ZhangYijiong"},"content":"    public synchronized void deleteTask(Task task) throws TaskNotFoundException {"},{"lineNumber":126,"author":{"gitID":"ZhangYijiong"},"content":"        addressBook.removeTask(task);"},{"lineNumber":127,"author":{"gitID":"ZhangYijiong"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"ZhangYijiong"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":133,"author":{"gitID":"ZhangYijiong"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":134,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":136,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"ZhangYijiong"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":139,"author":{"gitID":"ZhangYijiong"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":140,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":142,"author":{"gitID":"ZacZequn"},"content":"    //@@author ZacZequn"},{"lineNumber":143,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"ZacZequn"},"content":"    public void checkOrder(Person target)  throws DishNotFoundException {"},{"lineNumber":145,"author":{"gitID":"ZacZequn"},"content":"        if (menu.get(target.getOrder().toString()) \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitID":"ZacZequn"},"content":"            throw new DishNotFoundException(\"Dish not available\");"},{"lineNumber":147,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"ZacZequn"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":27,"ZhangYijiong":24,"Wuhao-ooo":14,"-":119}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":" * Exception for when the event is not found"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"public class TaskNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":7}},{"path":"src/main/java/seedu/address/model/Menu.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Dish;"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":" * Wraps all data at the menu level"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"public class Menu implements ReadOnlyMenu {"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"    private HashMap\u003cString, Dish\u003e dishes;"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"    /*"},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"     *   among constructors."},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"    {"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"        dishes \u003d new HashMap\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"    public Menu() {}"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":"     * Creates an Menu using the Dishes {@code toBeCopied}"},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"    public Menu(ReadOnlyMenu toBeCopied) {"},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"        this();"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"        resetData(toBeCopied);"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"    public void setMenu(HashMap\u003cString, Dish\u003e theDishes) {"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"        dishes \u003d theDishes;"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    public void setMenu(Menu theMenu) {"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"        dishes \u003d theMenu.getDishes();"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"     * Resets the existing data of this {@code Menu} with {@code newData}."},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"    public void resetData(ReadOnlyMenu newData) {"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"        setMenu(newData.getDishes());"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"     * Returns the dish in Menu if available."},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"     * Otherwise return null."},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"    public Dish get(String dish) {"},{"lineNumber":63,"author":{"gitID":"ZacZequn"},"content":"        return dishes.get(dish);"},{"lineNumber":64,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":66,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"ZacZequn"},"content":"     * Adds a dish to the menu."},{"lineNumber":68,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"ZacZequn"},"content":"    public void addDish(Dish dish) {"},{"lineNumber":70,"author":{"gitID":"ZacZequn"},"content":"        dishes.put(dish.getName().toString(), dish);"},{"lineNumber":71,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":73,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":74,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"ZacZequn"},"content":"     * Returns a copy of the data in Menu."},{"lineNumber":76,"author":{"gitID":"ZacZequn"},"content":"     * Modifications on this copy will not affect the original Menu data"},{"lineNumber":77,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"ZacZequn"},"content":"    public HashMap\u003cString, Dish\u003e getDishes() {"},{"lineNumber":80,"author":{"gitID":"ZacZequn"},"content":"        return new HashMap\u003c\u003e(dishes);"},{"lineNumber":81,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":83,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitID":"ZacZequn"},"content":"        String menu \u003d \"\";"},{"lineNumber":86,"author":{"gitID":"ZacZequn"},"content":"        for (String name : dishes.keySet()) {"},{"lineNumber":87,"author":{"gitID":"ZacZequn"},"content":"            menu +\u003d (name + \" \");"},{"lineNumber":88,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"ZacZequn"},"content":"        menu \u003d menu.trim();"},{"lineNumber":90,"author":{"gitID":"ZacZequn"},"content":"        return menu;"},{"lineNumber":91,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":92}},{"path":"src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":" * Signals that the operation will result in duplicate Task objects."},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"public class DuplicateTaskException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"    public DuplicateTaskException() {"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"        super(\"Operation would result in duplicate tasks\");"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":12,"-":1}},{"path":"src/main/java/seedu/address/model/person/Halal.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":" * Represents a Person\u0027s preference on food  in the address book."},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidHalal(String)}"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"public class Halal {"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":"    public static final String MESSAGE_HALAL_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"            \"Person\u0027s preference should only be Halal or Non-halal\";"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"     * Constructs a {@code Halal}."},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"ZacZequn"},"content":"     * @param halal A valid halal."},{"lineNumber":21,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"ZacZequn"},"content":"    public Halal(String halal) {"},{"lineNumber":23,"author":{"gitID":"ZacZequn"},"content":"        if (isNull(halal)) {"},{"lineNumber":24,"author":{"gitID":"ZacZequn"},"content":"            this.value \u003d \"Non-halal\";"},{"lineNumber":25,"author":{"gitID":"ZacZequn"},"content":"        } else {"},{"lineNumber":26,"author":{"gitID":"ZacZequn"},"content":"            checkArgument(isValidHalal(halal), MESSAGE_HALAL_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"ZacZequn"},"content":"            if (halal.equalsIgnoreCase(\"Halal\")) {"},{"lineNumber":28,"author":{"gitID":"ZacZequn"},"content":"                this.value \u003d \"Halal\";"},{"lineNumber":29,"author":{"gitID":"ZacZequn"},"content":"            } else {"},{"lineNumber":30,"author":{"gitID":"ZacZequn"},"content":"                this.value \u003d \"Non-halal\";"},{"lineNumber":31,"author":{"gitID":"ZacZequn"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":35,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"ZacZequn"},"content":"     * Returns true if a given string is a valid halal preference."},{"lineNumber":37,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ZacZequn"},"content":"    public static boolean isValidHalal(String test) {"},{"lineNumber":39,"author":{"gitID":"ZacZequn"},"content":"        requireNonNull(test);"},{"lineNumber":40,"author":{"gitID":"ZacZequn"},"content":"        if (test.equalsIgnoreCase(\"Halal\") || (test.equalsIgnoreCase(\"Non-halal\"))) {"},{"lineNumber":41,"author":{"gitID":"ZacZequn"},"content":"            return true;"},{"lineNumber":42,"author":{"gitID":"ZacZequn"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"ZacZequn"},"content":"        return false;"},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"        return value;"},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":51,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"ZacZequn"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"ZacZequn"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"ZacZequn"},"content":"                || (other instanceof Halal // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"ZacZequn"},"content":"                \u0026\u0026 this.value.equals(((Halal) other).value)); // state check"},{"lineNumber":56,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":58,"author":{"gitID":"ZacZequn"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"ZacZequn"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"ZacZequn"},"content":"        return value.hashCode();"},{"lineNumber":61,"author":{"gitID":"ZacZequn"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":62}},{"path":"src/main/java/seedu/address/model/task/Distance.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.model.task;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code Count}"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":" * Represents an Task\u0027s distance"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDistance(String)}"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"public class Distance {"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_DISTANCE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"            \"Distance numbers can only be positive integers, in terms of km\";"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String DISTANCE_VALIDATION_REGEX \u003d \"\\\\d{1,}\";"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"     * Constructs a {@code Distance}."},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"     * @param distance A valid distance number."},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    public Distance(String distance) {"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(distance);"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"        checkArgument(isValidDistance(distance), MESSAGE_DISTANCE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"        this.value \u003d distance;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns true if a given string is a valid task distance number."},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"    public static boolean isValidDistance(String test) {"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        return test.matches(DISTANCE_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof Distance // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.value.equals(((Distance) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"     *  Returns distance in integer form to be able used by {@code compareTo} in Task"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"    public int toInt() {"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"        return Integer.parseInt(value);"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":62}},{"path":"src/main/java/seedu/address/model/task/Count.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"//@@author ZhangYijiong"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.model.task;"},{"lineNumber":3,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":4,"author":{"gitID":"ZhangYijiong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":" * Implementation follows {@code Price}"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":" * Represents an Task\u0027s past order count number"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCount(String)}"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"public class Count {"},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String MESSAGE_COUNT_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"            \"Count numbers can only be positive integers\";"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"    public static final String COUNT_VALIDATION_REGEX \u003d \"\\\\d{1,}\";"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"     * Constructs a {@code Count}."},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"     * @param count A valid count number."},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    public Count(String count) {"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(count);"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"        checkArgument(isValidCount(count), MESSAGE_COUNT_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":"        this.value \u003d count;"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns true if a given string is a valid task count number."},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"    public static boolean isValidCount(String test) {"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        return test.matches(COUNT_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof Count // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.value.equals(((Count) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"     *  Returns count in integer form to be able used by {@code compareTo} in Task"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"    public int toInt() {"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"        return Integer.parseInt(value);"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"}"}],"authorContributionMap":{"ZhangYijiong":61}},{"path":"src/main/java/seedu/address/model/ReadOnlyMenu.java","lines":[{"lineNumber":1,"author":{"gitID":"ZacZequn"},"content":"//@@author ZacZequn"},{"lineNumber":2,"author":{"gitID":"ZacZequn"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":4,"author":{"gitID":"ZacZequn"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.Dish;"},{"lineNumber":7,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":8,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":9,"author":{"gitID":"ZacZequn"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ZacZequn"},"content":" * Unmodifiable view of customers statistics"},{"lineNumber":11,"author":{"gitID":"ZacZequn"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ZacZequn"},"content":"public interface ReadOnlyMenu {"},{"lineNumber":13,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":14,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"ZacZequn"},"content":"     * Returns a copy of the data in Menu."},{"lineNumber":16,"author":{"gitID":"ZacZequn"},"content":"     * Modifications on this copy will not affect the original Menu data"},{"lineNumber":17,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"ZacZequn"},"content":"    HashMap\u003cString, Dish\u003e getDishes();"},{"lineNumber":19,"author":{"gitID":"ZacZequn"},"content":"}"}],"authorContributionMap":{"ZacZequn":19}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"ZacZequn"},"content":"import seedu.address.model.dish.exceptions.DishNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":32,"author":{"gitID":"ZacZequn"},"content":"    void addPerson(Person person) throws DuplicatePersonException, DishNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"ZacZequn"},"content":"    /** Check whether it is a valid order */"},{"lineNumber":45,"author":{"gitID":"ZacZequn"},"content":"    void checkOrder(Person target) throws DishNotFoundException;"},{"lineNumber":46,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":47,"author":{"gitID":"ZacZequn"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"ZacZequn"},"content":"     * @throws DishNotFoundException if {@code target} could not be found in the list."},{"lineNumber":49,"author":{"gitID":"ZacZequn"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"ZacZequn"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":"    /** Returns an unmodifiable view of the filtered task list */"},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"    /** Adds the given task */"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"    void addTask(Task task) throws DuplicateTaskException;"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"    /** Deletes the given task */"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"    void deleteTask(Task task) throws TaskNotFoundException;"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"     * Updates the filter of the filtered task list to filter by the given {@code predicate}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ZacZequn":9,"ZhangYijiong":17,"-":49}},{"path":"src/main/java/seedu/address/model/task/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.beans.property.ObjectProperty;"},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import javafx.beans.property.SimpleObjectProperty;"},{"lineNumber":7,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.dish.Price;"},{"lineNumber":8,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Order;"},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":13,"author":{"gitID":"ZhangYijiong"},"content":"/** The word \"Task\" is used to avoid confusion between order object in the queue and order of a person"},{"lineNumber":14,"author":{"gitID":"ZhangYijiong"},"content":" *"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"public class Task implements Comparable\u003cTask\u003e {"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":"    private static final int MULTIPLICATION_FACTOR_PRICE \u003d 10;"},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":"    private static final int MULTIPLICATION_FACTOR_DISTANCE \u003d 25;"},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":"    private static final int MULTIPLICATION_FACTOR_COUNT \u003d 5;"},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":"    private ObjectProperty\u003cOrder\u003e order;"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":"    private ObjectProperty\u003cAddress\u003e address;"},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":"    private ObjectProperty\u003cPrice\u003e price;"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":"    private ObjectProperty\u003cDistance\u003e distance;"},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":"    private ObjectProperty\u003cCount\u003e count;"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":"    private ObjectProperty\u003cString\u003e description;"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"    public Task(Order order, Address address, Price price, Distance distance, Count count, String description) {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":"        requireAllNonNull(order, address, price, distance, count);"},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"        this.order \u003d new SimpleObjectProperty\u003c\u003e(order);"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":"        this.price \u003d new SimpleObjectProperty\u003c\u003e(price);"},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"        this.distance \u003d new SimpleObjectProperty\u003c\u003e(distance);"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"        this.count \u003d new SimpleObjectProperty\u003c\u003e(count);"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"        this.description \u003d new SimpleObjectProperty\u003c\u003e(description);"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"    public Task(Task source) {"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"        this(source.getOrder(), source.getAddress(), source.getPrice(), source.getDistance(), source.getCount(),"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"                source.getDescription());"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"    public Task(Person person, String orderTime) {"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":"        this(person.getOrder(), person.getAddress(), new Price(\"0\"),"},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"                new Distance(\"0\"), new Count(\"0\"), orderTime);"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"    public Order getOrder() {"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"        return order.get();"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":"    public Address getAddress() {"},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"        return address.get();"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    public Price getPrice() {"},{"lineNumber":58,"author":{"gitID":"ZhangYijiong"},"content":"        return price.get();"},{"lineNumber":59,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":61,"author":{"gitID":"ZhangYijiong"},"content":"    public Distance getDistance() {"},{"lineNumber":62,"author":{"gitID":"ZhangYijiong"},"content":"        return distance.get();"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"    public Count getCount() {"},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"        return count.get();"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"    public String getDescription() {"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"        return description.get();"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"    public ObjectProperty\u003cOrder\u003e orderObjectProperty() {"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":"        return order;"},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"    public ObjectProperty\u003cAddress\u003e addressObjectProperty() {"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"        return address;"},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    public ObjectProperty\u003cPrice\u003e priceObjectProperty() {"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"        return price;"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"    public ObjectProperty\u003cDistance\u003e distanceObjectProperty() {"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":"        return distance;"},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"    public ObjectProperty\u003cCount\u003e countObjectProperty() {"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":"        return count;"},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"    public ObjectProperty\u003cString\u003e descriptionObjectProperty() {"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":"        return description;"},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":106,"author":{"gitID":"ZhangYijiong"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":107,"author":{"gitID":"ZhangYijiong"},"content":"            return false;"},{"lineNumber":108,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":110,"author":{"gitID":"ZhangYijiong"},"content":"        // state check"},{"lineNumber":111,"author":{"gitID":"ZhangYijiong"},"content":"        Task t \u003d (Task) other;"},{"lineNumber":112,"author":{"gitID":"ZhangYijiong"},"content":"        return t.getOrder().equals(this.getOrder())"},{"lineNumber":113,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 t.getAddress().equals(this.getAddress())"},{"lineNumber":114,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 t.getPrice().equals(this.getPrice())"},{"lineNumber":115,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 t.getDistance().equals(this.getDistance())"},{"lineNumber":116,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 t.getCount().equals(this.getCount());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":122,"author":{"gitID":"ZhangYijiong"},"content":"        builder.append(\" Order:\")"},{"lineNumber":123,"author":{"gitID":"ZhangYijiong"},"content":"                .append(getOrder())"},{"lineNumber":124,"author":{"gitID":"ZhangYijiong"},"content":"                .append(\" Address: \")"},{"lineNumber":125,"author":{"gitID":"ZhangYijiong"},"content":"                .append(getAddress())"},{"lineNumber":126,"author":{"gitID":"ZhangYijiong"},"content":"                .append(\" Description: \")"},{"lineNumber":127,"author":{"gitID":"ZhangYijiong"},"content":"                .append(getDescription());"},{"lineNumber":128,"author":{"gitID":"ZhangYijiong"},"content":"        return builder.toString();"},{"lineNumber":129,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":131,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"ZhangYijiong"},"content":"    public int compareTo(Task other) {"},{"lineNumber":133,"author":{"gitID":"ZhangYijiong"},"content":"        if (this.getPriority() \u003c other.getPriority()) {"},{"lineNumber":134,"author":{"gitID":"ZhangYijiong"},"content":"            return 1;"},{"lineNumber":135,"author":{"gitID":"ZhangYijiong"},"content":"        } else if (this.getPriority() \u003e other.getPriority()) {"},{"lineNumber":136,"author":{"gitID":"ZhangYijiong"},"content":"            return -1;"},{"lineNumber":137,"author":{"gitID":"ZhangYijiong"},"content":"        } else {"},{"lineNumber":138,"author":{"gitID":"ZhangYijiong"},"content":"            return 0;"},{"lineNumber":139,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":142,"author":{"gitID":"ZhangYijiong"},"content":"    private int getPriority() {"},{"lineNumber":143,"author":{"gitID":"ZhangYijiong"},"content":"        int count \u003d this.getCount().toInt();"},{"lineNumber":144,"author":{"gitID":"ZhangYijiong"},"content":"        int distance \u003d this.getDistance().toInt();"},{"lineNumber":145,"author":{"gitID":"ZhangYijiong"},"content":"        int price \u003d this.getPrice().toInt();"},{"lineNumber":146,"author":{"gitID":"ZhangYijiong"},"content":"        return calculatePriority(price, distance, count);"},{"lineNumber":147,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":149,"author":{"gitID":"ZhangYijiong"},"content":"    private int calculatePriority(int price, int distance, int count) {"},{"lineNumber":150,"author":{"gitID":"ZhangYijiong"},"content":"        return MULTIPLICATION_FACTOR_PRICE * price"},{"lineNumber":151,"author":{"gitID":"ZhangYijiong"},"content":"                - MULTIPLICATION_FACTOR_DISTANCE * distance"},{"lineNumber":152,"author":{"gitID":"ZhangYijiong"},"content":"                + MULTIPLICATION_FACTOR_COUNT * count;"},{"lineNumber":153,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"ZhangYijiong"},"content":"}"},{"lineNumber":155,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":156,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":157,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":142,"-":15}},{"path":"src/main/java/seedu/address/model/CustomerStats.java","lines":[{"lineNumber":1,"author":{"gitID":"Wuhao-ooo"},"content":"//@@author Wuhao-ooo"},{"lineNumber":2,"author":{"gitID":"Wuhao-ooo"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":4,"author":{"gitID":"Wuhao-ooo"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":6,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":7,"author":{"gitID":"Wuhao-ooo"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Wuhao-ooo"},"content":" * Wraps all data at the customer-stats level"},{"lineNumber":9,"author":{"gitID":"Wuhao-ooo"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Wuhao-ooo"},"content":"public class CustomerStats implements ReadOnlyCustomerStats {"},{"lineNumber":11,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":12,"author":{"gitID":"Wuhao-ooo"},"content":"    private HashMap\u003cString, Integer\u003e ordersCount;"},{"lineNumber":13,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":14,"author":{"gitID":"Wuhao-ooo"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"Wuhao-ooo"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":16,"author":{"gitID":"Wuhao-ooo"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":17,"author":{"gitID":"Wuhao-ooo"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"Wuhao-ooo"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":19,"author":{"gitID":"Wuhao-ooo"},"content":"     *   among constructors."},{"lineNumber":20,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Wuhao-ooo"},"content":"    {"},{"lineNumber":22,"author":{"gitID":"Wuhao-ooo"},"content":"        ordersCount \u003d new HashMap\u003c\u003e();"},{"lineNumber":23,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":25,"author":{"gitID":"Wuhao-ooo"},"content":"    public CustomerStats() {}"},{"lineNumber":26,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":27,"author":{"gitID":"Wuhao-ooo"},"content":"    public void setOrdersCount(HashMap\u003cString, Integer\u003e ordersCountHashMap) {"},{"lineNumber":28,"author":{"gitID":"Wuhao-ooo"},"content":"        ordersCount \u003d ordersCountHashMap;"},{"lineNumber":29,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":31,"author":{"gitID":"Wuhao-ooo"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Wuhao-ooo"},"content":"     * Update the count of a given phone number in the customers\u0027 stats."},{"lineNumber":33,"author":{"gitID":"Wuhao-ooo"},"content":"     * If the phone does not exist in the key set, put it to the key set with corresponding value 1"},{"lineNumber":34,"author":{"gitID":"Wuhao-ooo"},"content":"     * Otherwise add 1 to the corresponding value"},{"lineNumber":35,"author":{"gitID":"Wuhao-ooo"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Wuhao-ooo"},"content":"    public void addCount(String phone) {"},{"lineNumber":37,"author":{"gitID":"Wuhao-ooo"},"content":"        if (!ordersCount.containsKey(phone)) {"},{"lineNumber":38,"author":{"gitID":"Wuhao-ooo"},"content":"            ordersCount.put(phone, 1);"},{"lineNumber":39,"author":{"gitID":"Wuhao-ooo"},"content":"        } else {"},{"lineNumber":40,"author":{"gitID":"Wuhao-ooo"},"content":"            ordersCount.put(phone, ordersCount.get(phone) + 1);"},{"lineNumber":41,"author":{"gitID":"Wuhao-ooo"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":44,"author":{"gitID":"Wuhao-ooo"},"content":""},{"lineNumber":45,"author":{"gitID":"Wuhao-ooo"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"Wuhao-ooo"},"content":"    public HashMap\u003cString, Integer\u003e getOrdersCount() {"},{"lineNumber":47,"author":{"gitID":"Wuhao-ooo"},"content":"        return new HashMap\u003c\u003e(ordersCount);"},{"lineNumber":48,"author":{"gitID":"Wuhao-ooo"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Wuhao-ooo"},"content":"}"}],"authorContributionMap":{"Wuhao-ooo":49}},{"path":"src/main/java/seedu/address/model/queue/TaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"ZhangYijiong"},"content":"package seedu.address.model.queue;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ZhangYijiong"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ZhangYijiong"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":11,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.Task;"},{"lineNumber":16,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.DuplicateTaskException;"},{"lineNumber":17,"author":{"gitID":"ZhangYijiong"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":18,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":19,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":20,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":21,"author":{"gitID":"ZhangYijiong"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"ZhangYijiong"},"content":" * The implementation adopts {@code UniquePersonList }"},{"lineNumber":23,"author":{"gitID":"ZhangYijiong"},"content":" * A list of Tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":24,"author":{"gitID":"ZhangYijiong"},"content":" *"},{"lineNumber":25,"author":{"gitID":"ZhangYijiong"},"content":" * Supports a minimal set of list operations."},{"lineNumber":26,"author":{"gitID":"ZhangYijiong"},"content":" *"},{"lineNumber":27,"author":{"gitID":"ZhangYijiong"},"content":" * @see Task#equals(Object)"},{"lineNumber":28,"author":{"gitID":"ZhangYijiong"},"content":" */"},{"lineNumber":29,"author":{"gitID":"ZhangYijiong"},"content":"public class TaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":30,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":31,"author":{"gitID":"ZhangYijiong"},"content":"    // represents no. of chefs total, can be changed by user"},{"lineNumber":32,"author":{"gitID":"ZhangYijiong"},"content":"    private static int maxCapacity \u003d 5;"},{"lineNumber":33,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":34,"author":{"gitID":"ZhangYijiong"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":35,"author":{"gitID":"ZhangYijiong"},"content":"    // used by asObservableList()"},{"lineNumber":36,"author":{"gitID":"ZhangYijiong"},"content":"    private final ObservableList\u003cTask\u003e mappedList \u003d EasyBind.map(internalList, (task) -\u003e task);"},{"lineNumber":37,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":38,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"ZhangYijiong"},"content":"     * @return current max capacity"},{"lineNumber":41,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"ZhangYijiong"},"content":"    public static int getMaxCapacity() {"},{"lineNumber":43,"author":{"gitID":"ZhangYijiong"},"content":"        return maxCapacity;"},{"lineNumber":44,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":46,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"ZhangYijiong"},"content":"     * @param maxCapacity new max capacity"},{"lineNumber":49,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"ZhangYijiong"},"content":"    public static void setMaxCapacity(int maxCapacity) {"},{"lineNumber":51,"author":{"gitID":"ZhangYijiong"},"content":"        TaskList.maxCapacity \u003d maxCapacity;"},{"lineNumber":52,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":54,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"ZhangYijiong"},"content":"     * Returns true if the list contains an equivalent task as the given argument."},{"lineNumber":56,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"ZhangYijiong"},"content":"     * Adds a task to the list."},{"lineNumber":64,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws DuplicateTaskException"},{"lineNumber":65,"author":{"gitID":"ZhangYijiong"},"content":"     * if the task to add is a duplicate of an existing task in the list."},{"lineNumber":66,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"ZhangYijiong"},"content":"    public void add(Task toAdd) throws DuplicateTaskException {"},{"lineNumber":68,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(toAdd);"},{"lineNumber":69,"author":{"gitID":"ZhangYijiong"},"content":"        if (contains(toAdd)) {"},{"lineNumber":70,"author":{"gitID":"ZhangYijiong"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":71,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"ZhangYijiong"},"content":"        internalList.add(new Task(toAdd));"},{"lineNumber":73,"author":{"gitID":"ZhangYijiong"},"content":"        Collections.sort(internalList);"},{"lineNumber":74,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":76,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ZhangYijiong"},"content":"     * Replaces the task {@code target} in the list with {@code editedTask}."},{"lineNumber":78,"author":{"gitID":"ZhangYijiong"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws DuplicateTaskException if the replacement is equivalent to another existing task in the list."},{"lineNumber":80,"author":{"gitID":"ZhangYijiong"},"content":"     * @throws TaskNotFoundException if {@code target} could not be found in the list."},{"lineNumber":81,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"ZhangYijiong"},"content":"    public void setTask(Task target, Task editedTask)"},{"lineNumber":83,"author":{"gitID":"ZhangYijiong"},"content":"            throws DuplicateTaskException, TaskNotFoundException {"},{"lineNumber":84,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(editedTask);"},{"lineNumber":85,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":86,"author":{"gitID":"ZhangYijiong"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":87,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":88,"author":{"gitID":"ZhangYijiong"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":89,"author":{"gitID":"ZhangYijiong"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":90,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":92,"author":{"gitID":"ZhangYijiong"},"content":"        if (!target.equals(editedTask) \u0026\u0026 internalList.contains(editedTask)) {"},{"lineNumber":93,"author":{"gitID":"ZhangYijiong"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":94,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":96,"author":{"gitID":"ZhangYijiong"},"content":"        internalList.set(index, new Task(editedTask));"},{"lineNumber":97,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":99,"author":{"gitID":"ZhangYijiong"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"ZhangYijiong"},"content":"     * Removes the equivalent Task from the list."},{"lineNumber":101,"author":{"gitID":"ZhangYijiong"},"content":"     * * @throws TaskNotFoundException if {@code toRemove} could not be found in the list."},{"lineNumber":102,"author":{"gitID":"ZhangYijiong"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"ZhangYijiong"},"content":"    public boolean remove(Task toRemove) throws TaskNotFoundException {"},{"lineNumber":104,"author":{"gitID":"ZhangYijiong"},"content":"        requireNonNull(toRemove);"},{"lineNumber":105,"author":{"gitID":"ZhangYijiong"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":106,"author":{"gitID":"ZhangYijiong"},"content":"        if (!taskFoundAndDeleted) {"},{"lineNumber":107,"author":{"gitID":"ZhangYijiong"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":108,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"ZhangYijiong"},"content":"        return taskFoundAndDeleted;"},{"lineNumber":110,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":111,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":113,"author":{"gitID":"ZhangYijiong"},"content":"    public void setTasks(TaskList replacement) {"},{"lineNumber":114,"author":{"gitID":"ZhangYijiong"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":115,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":117,"author":{"gitID":"ZhangYijiong"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws DuplicateTaskException {"},{"lineNumber":118,"author":{"gitID":"ZhangYijiong"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":119,"author":{"gitID":"ZhangYijiong"},"content":"        final TaskList replacement \u003d new TaskList();"},{"lineNumber":120,"author":{"gitID":"ZhangYijiong"},"content":"        for (final Task task : tasks) {"},{"lineNumber":121,"author":{"gitID":"ZhangYijiong"},"content":"            replacement.add(task);"},{"lineNumber":122,"author":{"gitID":"ZhangYijiong"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"ZhangYijiong"},"content":"        setTasks(replacement);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"ZhangYijiong"},"content":"    public ObservableList\u003cTask\u003e asObservableList() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"ZhangYijiong"},"content":"        return FXCollections.unmodifiableObservableList(mappedList);"},{"lineNumber":132,"author":{"gitID":"ZhangYijiong"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"ZhangYijiong"},"content":""},{"lineNumber":134,"author":{"gitID":"ZhangYijiong"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"ZhangYijiong"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":142,"author":{"gitID":"ZhangYijiong"},"content":"                || (other instanceof TaskList // instanceof handles nulls"},{"lineNumber":143,"author":{"gitID":"ZhangYijiong"},"content":"                \u0026\u0026 this.internalList.equals(((TaskList) other).internalList));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"},{"lineNumber":151,"author":{"gitID":"ZhangYijiong"},"content":""}],"authorContributionMap":{"ZhangYijiong":117,"-":34}}]
