var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-W11-B1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"}],"authorContributionMap":{"Aussiroth":1,"-":4}},{"path":"unused/RemoveTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.RemoveTagCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" * Parses input arguments and creates a new RemoveTagCommand object"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"public class RemoveTagCommandParser implements Parser\u003cRemoveTagCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     * Parses the given {@code String} of arguments in the context of the DemoveTagCommand"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"     * and returns an RemoveTagCommand object for execution."},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"    public RemoveTagCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            Tag tag \u003d ParserUtil.parseTag(args);"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            return new RemoveTagCommand(tag);"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveTagCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":23,"-":8}},{"path":"unused/RemoveTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":" * Deletes a tag from the address book."},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"public class RemoveTagCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD \u003d \"removeTag\";"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"rmt\";"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"            + \": Removes a tag from the addressbook.\\n\""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"            + \"Parameters: tag name(must be a valid tag existing in addressbook\\n\""},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends\";"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tag: %1$s\";"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    private Tag targetTag;"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public RemoveTagCommand(Tag targetTag) {"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        this.targetTag \u003d targetTag;"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(targetTag);"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"            model.deleteTag(targetTag);"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TAG_SUCCESS, targetTag));"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d lastShownList.stream()"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"                .map(Person::getTags)"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"                .flatMap(List::stream)"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        if (!tagsInPersons.contains(targetTag)) {"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TAG);"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof RemoveTagCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.targetTag.equals(((RemoveTagCommand) other).targetTag)); // state check"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"}"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":""}],"authorContributionMap":{"alexawangzi":59,"-":10}},{"path":"docs/team/alexawangzi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"\u003d Wang Zi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B1/main"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d PROJECT: STUtor - v1.5"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"---"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Overview"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"STUtor -v1.5 is a desktop application targeting tutor coordinators"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"to help them _match_ and _manage_ a large database of tutors and students. +"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"The user can perform actions such as adding/ removing a person, editing and viewing"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"personal information, matching a student with a tutor, and so on. +"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"The user interacts with the application using a CLI, and it has a GUI created with JavaFX. +"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"The application is written in Java, and has about 25 kLoC."},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Major Enhancement"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"* Added the ability to *match/unmatch a student with a tutor*"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"** What it does:"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"allows the user to choose a student and a tutor and match them."},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"Compatibilty checking will be done to ensure validity of the pair(must be one student and one tutor,"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"must be of the same subject, etc)."},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"Similarly, the user can choose a currently matched pair and unmatch it."},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"** Justification:"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"This feature makes the accounting process of matching and unmatching easier,"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"saving time in marking individual tutor or student and updating their status."},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"All the user has to provide is the indices of the target student and tutor."},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"** Highlights:"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"The commands spans multiple components in the architecture of the application."},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"and careful thinking is required to ensure good usage of the existing classes"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"without increasing the coupling."},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"Please refer to my writings in the *\"Contribution to the Developer Guide\"* section for detailed explanations on implementation."},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Minor Enhancement"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"* Added the ability to accept *case-insensitive input* and *shortcuts* for filling in personal information."},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"** What it does:"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"When the user is editing information of a person, he/she can type in mixed case."},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"Automatic conversion to \u003c\u003cproper-case, proper case\u003e\u003e will be done."},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"Similarly, he/she can use shortcuts, and the input will be converted to full form."},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"** Justification:"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"Since the application is CLI-based and the user has a large database to manage, a lot of typing is required."},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"Having shortcuts saves time for typing, and acceptance of case-insensitive input means data will be stored"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"and displayed in an uniform format."},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Code Contributed"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"** [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/functional/alexawangzi.md[Functional code]]"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"** [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/test/alexawangzi.md[Test code]]"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Other Contributions"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"** Enhancements to existing features:"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"Added a remove tag function to remove a certain tag from all persons in the database."},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"** Documentation:"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide to make is more end-user friendly: https://github.com/CS2103JAN2018-W11-B1/main/pull/98/files[#98]"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"** Community:"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T15-B1/main/issues/58[1], https://github.com/CS2103JAN2018-T15-B1/main/issues/71[2])"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"|_Given below are sections I contributed to the User Guide."},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"They showcase my ability to write documentation targeting end-users._"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"include::../UserGuide.adoc[tag\u003dmatch]"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"include::../UserGuide.adoc[tag\u003dunmatch]"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"include::../UserGuide.adoc[tag\u003denterpriseVersion]"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":84,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"include::../DeveloperGuide.adoc[tag\u003dmatchunmatch]"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"include::../DeveloperGuide.adoc[tag\u003dfillingshortcut]"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"include::../DeveloperGuide.adoc[tag\u003dcaseinsensitiveinput]"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"include::../DeveloperGuide.adoc[tag\u003dmanualtestMatchUnmatch]"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"[appendix]"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Glossary"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"[[proper-case]] Proper case::"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"Proper case is any text that is written with each of the first letters of every word being capitalized."},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"For example, \"This Is An Example Of Proper Case.\""}],"authorContributionMap":{"alexawangzi":89,"sherlynng":3,"-":7}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"\u003d STUtor - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":":toclevels: 4"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B1/main"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"By: `Team W11-B1`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* STUtor is a *desktop app* tailored for *tuition coordinators* to easily _match_ and _manage_ a database of tutors and students."},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"* This app is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":23,"author":{"gitID":"-"},"content":"* If you can type fast, STUtor can get your *tutor and student management tasks done efficiently*."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"[%hardbreaks]"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"[%hardbreaks]"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"[%hardbreaks]"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"[%hardbreaks]"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"* This guide gives you an overview of the _basic_ and _advanced_ features of STUtor."},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d Getting Started"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This section helps you set up your STUtor app on your computer."},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":".  Ensure you have Java version __1.8.0_60__ or later installed in your Computer."},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":".  Download the latest _STUtor.jar_ link:{repoURL}/releases[here]."},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":".  Copy the file to the folder you want to use for storing your STUtor."},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":".  Double-click the file to start the app. You will see the interface in a few seconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"// tag::ui[]"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"image::Ui_withLabels.png[width\u003d\"500\"]"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"*  Sections of STUtor:"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"** Section 1: *Command Box* to type your commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":"** Section 2: *Result Display* to show the results of your command"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"** Section 3: *Pair List* to list all pairs currently matched"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"** Section 4: *Person List* to list all persons in the entire database"},{"lineNumber":55,"author":{"gitID":"-"},"content":"** Section 5: *Information Panel* to show all details of a person"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"// end::ui[]"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"*  Type the command in the Command Box and press kbd:[Enter] to execute it. +"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"e.g. typing `*help*` and pressing kbd:[Enter] will open the help window."},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"*  Some example commands you can try:"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"** To list all contacts: `*list*`"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"** To add a contact named `John Doe` and his particulars to STUtor: `*add* n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50 sub/Math lvl/Lower Sec r/Student`"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"** To delete the 3rd contact shown in the current list: `*delete* 3`"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"** To exit the app: `*exit*`"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For more details for each command, you can view \u003c\u003cBasic Features\u003e\u003e."},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":70,"author":{"gitID":"-"},"content":"To use the features, you need to key in the commands in the Command Box."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Command Format"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"* Words in UPPER_CASE are the *parameters to be supplied* by you"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g. For `*add* n/NAME`, NAME is a parameter which can be used as `*add* n/John Doe`."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"* Items in *square brackets* are *optional*"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":83,"author":{"gitID":"-"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g `*add* n/NAME [$/PRICE]` can be used as `*add* n/John Doe $/40` or as `*add* n/John Doe`."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"* Items with `…`​ after them can be *used multiple times* including zero times"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g. `*findmissing* [FIELD]...` can be used as `*findmissing*` (i.e. no field is supplied), `*findmissing* phone email`"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"* Parameters can be in *any order*"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"* For advanced users, a *shorter alias* for most commands exist to reduce typing. These are provided in the information for each command."},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Basic Features"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Viewing help : `*help*`"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"At any time if you are unsure of how to use STUtor, this command will bring you to the help page."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Format: `*help*`"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":106,"author":{"gitID":"Aussiroth"},"content":"// tag::add[]"},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a person: `*add*` or `*a*`"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"Adds a new person to STUtor. +"},{"lineNumber":109,"author":{"gitID":"-"},"content":"You can add a person with the following fields: NAME, PHONE, EMAIL, ADDRESS, SUBJECT, LEVEL, PRICE and ROLE."},{"lineNumber":110,"author":{"gitID":"-"},"content":"Take note that some fields are restricted to the following options:"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"[width\u003d\"80%\",cols\u003d\"\u003c30%,\u003c50%\",options\u003d\"header\",]"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":114,"author":{"gitID":"-"},"content":"|Field |Options"},{"lineNumber":115,"author":{"gitID":"-"},"content":"|SUBJECT | English, Chinese,  Math, Chemistry, Physics"},{"lineNumber":116,"author":{"gitID":"-"},"content":"|LEVEL | Lower Primary, Upper Primary, Lower Secondary, Upper Secondary"},{"lineNumber":117,"author":{"gitID":"-"},"content":"|PRICE | Must be a positive number"},{"lineNumber":118,"author":{"gitID":"-"},"content":"|ROLE | Student, Tutor"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":121,"author":{"gitID":"-"},"content":"** Alias can be used to reduce typing. Refer to \u003c\u003cField Shortcut Summary\u003e\u003e for more details."},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"** These information is displayed as tags for easy reference."},{"lineNumber":123,"author":{"gitID":"-"},"content":"**  Upon adding to STUtor, all persons will have a default STATUS of \"Not Matched\"."},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":"[NOTE]"},{"lineNumber":127,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":128,"author":{"gitID":"Aussiroth"},"content":"Only the NAME field is required for the command to be accepted, all other fields are optional. +"},{"lineNumber":129,"author":{"gitID":"Aussiroth"},"content":"To fill in the other fields later, you can use the edit command to edit the person with the new information. +"},{"lineNumber":130,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":131,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"Format: `*add* n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [$/PRICE] [sub/SUBJECT] [lvl/LEVEL] [r/ROLE] [t/TAG]...`"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"* `*add* n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50 sub/Math lvl/Lower Sec  r/Student`"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"* `*add* n/Betsy Crowe p/91562389 e/betsycrowe@example.com a/Pasir Ris Drive 10, #06-02 $/30 sub/Chinese lvl/Upper Pri  r/Tutor`"},{"lineNumber":138,"author":{"gitID":"sherlynng"},"content":"* `*add* n/Carl Kurz`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":141,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":142,"author":{"gitID":"Aussiroth"},"content":"You can press kbd:[Tab] key once after typing `*add*` or `*a*` and it will autofill the command. +"},{"lineNumber":143,"author":{"gitID":"Aussiroth"},"content":"Further pressing of kbd:[Tab] key will jump to the next field to be filled in. +"},{"lineNumber":144,"author":{"gitID":"Aussiroth"},"content":"You can press kbd:[Delete] key to delete a field (and its prefix). +"},{"lineNumber":145,"author":{"gitID":"Aussiroth"},"content":"You can view the diagram below for a clearer visualization on how it works. +"},{"lineNumber":146,"author":{"gitID":"Aussiroth"},"content":"*Important!* If you enter only empty spaces after a prefix, it will be read as no value entered into the optional field. You do not need to delete prefixes for unentered fields to enter the command."},{"lineNumber":147,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"sherlynng"},"content":"image::AutofillAdd_Tab.png[width\u003d\"700\"]"},{"lineNumber":150,"author":{"gitID":"sherlynng"},"content":"image::AutofillAdd_Delete.png[width\u003d\"700\"]"},{"lineNumber":151,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":152,"author":{"gitID":"Aussiroth"},"content":"// end::add[]"},{"lineNumber":153,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":154,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Listing all persons : `*list*` or `*l*`"},{"lineNumber":155,"author":{"gitID":"sherlynng"},"content":"Shows a list of all persons in STUtor. +"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"Format: `*list*`"},{"lineNumber":158,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":159,"author":{"gitID":"Aussiroth"},"content":"// tag::edit[]"},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":161,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Editing a person : `*edit*` or `*e*`"},{"lineNumber":162,"author":{"gitID":"sherlynng"},"content":"Edits an existing person in STUtor. +"},{"lineNumber":163,"author":{"gitID":"-"},"content":"This also allows you to fill in unentered fields by simply editing that field."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"****"},{"lineNumber":166,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":167,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":168,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":169,"author":{"gitID":"-"},"content":"* A person\u0027s STATUS is not editable by you. It will automatically update after \u003c\u003cMatching a student and a tutor\u003e\u003e"},{"lineNumber":170,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":172,"author":{"gitID":"-"},"content":"****"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"Format: `*edit* INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [$/PRICE] [sub/SUBJECT] [lvl/LEVEL] [r/ROLE] [t/TAG]...`"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":"* `*edit* 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":179,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":180,"author":{"gitID":"sherlynng"},"content":"* `*edit* 2 n/Betsy Crower t/` +"},{"lineNumber":181,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"sherlynng"},"content":"// tag::sampleautofill[]"},{"lineNumber":184,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":185,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":186,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"You can press kbd:[Tab] key once after typing `*edit*` or `*e*` and it will autofill the command. +"},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":"INDEX to be specified will be highlighted. +"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"Further pressing of kbd:[Tab] key will jump to the next field to be filled in. +"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"You can press kbd:[Delete] key to delete a field (and its prefix). +"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"You can view the diagram below for a clearer visualization on how it works. +"},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":"*Important!* You will need to delete the prefixes for fields you are not intending to change."},{"lineNumber":193,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":194,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":195,"author":{"gitID":"sherlynng"},"content":"image::AutofillEdit.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":197,"author":{"gitID":"sherlynng"},"content":"// end::sampleautofill[]"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":"// end::edit[]"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"// tag::filter[]"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Filtering all persons list by subject, level, role or status: `*filter*` `[In V1.3]`"},{"lineNumber":203,"author":{"gitID":"-"},"content":"Filters all persons list whose SUBJECT, LEVEL, STATUS, or ROLE contain any of the given keywords. +"},{"lineNumber":204,"author":{"gitID":"-"},"content":"To get back the list of persons that is unfiltered, you can simply execute the `*list*` command. +"},{"lineNumber":205,"author":{"gitID":"-"},"content":"****"},{"lineNumber":206,"author":{"gitID":"-"},"content":"* The filter is case insensitive."},{"lineNumber":207,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":208,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":209,"author":{"gitID":"-"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g `maTH` will match `Math`"},{"lineNumber":210,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Eng` will not match `English`."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* Persons with matching keyword will be returned."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* This command is unable to filter an already filtered list."},{"lineNumber":214,"author":{"gitID":"-"},"content":"****"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"Format: `*filter* KEYWORD`"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"sherlynng"},"content":"* `*filter* Math` +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"Returns persons with `Math` subject"},{"lineNumber":222,"author":{"gitID":"-"},"content":"* `*filter* maTH` +"},{"lineNumber":223,"author":{"gitID":"-"},"content":"Returns persons with `Math` subject"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d\u003d Upcoming improvement [Coming in V2.0] +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"`*filter* KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"The proposed improvement of filter command will return you persons who matches all the KEYWORD specified."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"// end::filter[]"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Locating persons by name: `*find*` or `*f*`"},{"lineNumber":232,"author":{"gitID":"sherlynng"},"content":"Finds persons whose NAME contain any of the given keywords. +"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"****"},{"lineNumber":235,"author":{"gitID":"sherlynng"},"content":"* The search is case insensitive."},{"lineNumber":236,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":237,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":238,"author":{"gitID":"sherlynng"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g `hans` will match `Hans`"},{"lineNumber":239,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."},{"lineNumber":241,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`."},{"lineNumber":243,"author":{"gitID":"sherlynng"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":244,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":245,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":246,"author":{"gitID":"sherlynng"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":247,"author":{"gitID":"-"},"content":"****"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"sherlynng"},"content":"Format: `*find* KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"sherlynng"},"content":"* `*find* John` +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":255,"author":{"gitID":"sherlynng"},"content":"* `*find* Betsy Tim John` +"},{"lineNumber":256,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"Aussiroth"},"content":"// tag::findmissing[]"},{"lineNumber":259,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Finding people with missing fields: `*findmissing*` or `*fm*` `[In V1.4]`"},{"lineNumber":261,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":262,"author":{"gitID":"Aussiroth"},"content":"Lists only people who have fields that you have not yet entered, making it easy for you to search for that person you want to edit in data. +"},{"lineNumber":263,"author":{"gitID":"Aussiroth"},"content":"If no arguments for FIELD is entered, lists all people with at least one field with an empty value. +"},{"lineNumber":264,"author":{"gitID":"Aussiroth"},"content":"Otherwise, finds all people with an empty value in at least one entered FIELD."},{"lineNumber":265,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":266,"author":{"gitID":"Aussiroth"},"content":"****"},{"lineNumber":267,"author":{"gitID":"-"},"content":"* The field name is case insensitive."},{"lineNumber":268,"author":{"gitID":"-"},"content":"* List of all possible fields:"},{"lineNumber":269,"author":{"gitID":"Aussiroth"},"content":"** address"},{"lineNumber":270,"author":{"gitID":"Aussiroth"},"content":"** email"},{"lineNumber":271,"author":{"gitID":"Aussiroth"},"content":"** level"},{"lineNumber":272,"author":{"gitID":"Aussiroth"},"content":"** phone"},{"lineNumber":273,"author":{"gitID":"Aussiroth"},"content":"** price"},{"lineNumber":274,"author":{"gitID":"Aussiroth"},"content":"** role"},{"lineNumber":275,"author":{"gitID":"Aussiroth"},"content":"** subject"},{"lineNumber":276,"author":{"gitID":"Aussiroth"},"content":"****"},{"lineNumber":277,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":278,"author":{"gitID":"Aussiroth"},"content":"Format: `*findmissing* [FIELD]...`"},{"lineNumber":279,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":280,"author":{"gitID":"Aussiroth"},"content":"Examples:"},{"lineNumber":281,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":282,"author":{"gitID":"Aussiroth"},"content":"* `*findmissing* role` +"},{"lineNumber":283,"author":{"gitID":"Aussiroth"},"content":"Returns any person who has no entered role."},{"lineNumber":284,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":285,"author":{"gitID":"Aussiroth"},"content":"* `*findmissing* phone email` +"},{"lineNumber":286,"author":{"gitID":"Aussiroth"},"content":"Returns any person who has no entered phone or email."},{"lineNumber":287,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":288,"author":{"gitID":"Aussiroth"},"content":"* `*findmissing*` +"},{"lineNumber":289,"author":{"gitID":"Aussiroth"},"content":"Returns any person who has no entered value for at least 1 field."},{"lineNumber":290,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":291,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Deleting a person : `*delete*` or `*d*`"},{"lineNumber":292,"author":{"gitID":"sherlynng"},"content":"Deletes the specified person from STUtor. +"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"****"},{"lineNumber":295,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":296,"author":{"gitID":"sherlynng"},"content":"* The index refers to the index number shown in the *most recent listing*."},{"lineNumber":297,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":298,"author":{"gitID":"-"},"content":"****"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"Aussiroth"},"content":"// end::findmissing[]"},{"lineNumber":301,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"Format: `*delete* INDEX`"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"sherlynng"},"content":"* `*list*` +"},{"lineNumber":307,"author":{"gitID":"sherlynng"},"content":"`*delete* 2` +"},{"lineNumber":308,"author":{"gitID":"sherlynng"},"content":"Deletes the 2nd person in STUtor."},{"lineNumber":309,"author":{"gitID":"sherlynng"},"content":"* `*find* Betsy` +"},{"lineNumber":310,"author":{"gitID":"sherlynng"},"content":"`*delete* 1` +"},{"lineNumber":311,"author":{"gitID":"sherlynng"},"content":"Deletes the 1st person in the results of the `*find*` command."},{"lineNumber":312,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":313,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":314,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":315,"author":{"gitID":"sherlynng"},"content":"You can press kbd:[Tab] key once after typing `*delete*` or `*d*` and it will autofill the command."},{"lineNumber":316,"author":{"gitID":"sherlynng"},"content":"INDEX to be specified will be highlighted."},{"lineNumber":317,"author":{"gitID":"sherlynng"},"content":"You can view the diagram below for a clearer visualization on how it works."},{"lineNumber":318,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"sherlynng"},"content":"image::AutofillDelete.png[width\u003d\"500\"]"},{"lineNumber":321,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":322,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Selecting a person : `*select*` or `*s*`"},{"lineNumber":323,"author":{"gitID":"sherlynng"},"content":"Selects the person identified by the index number used in the *last person listing*. +"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"****"},{"lineNumber":326,"author":{"gitID":"sherlynng"},"content":"* Selects the person and displays person details at the specified `INDEX`."},{"lineNumber":327,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":328,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"****"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"Format: `*select* INDEX`"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"sherlynng"},"content":"* `*list*` +"},{"lineNumber":336,"author":{"gitID":"sherlynng"},"content":"`*select* 2` +"},{"lineNumber":337,"author":{"gitID":"sherlynng"},"content":"Selects the 2nd person in STUtor."},{"lineNumber":338,"author":{"gitID":"sherlynng"},"content":"* `*find* Betsy` +"},{"lineNumber":339,"author":{"gitID":"sherlynng"},"content":"`*select* 1` +"},{"lineNumber":340,"author":{"gitID":"sherlynng"},"content":"Selects the 1st person in the results of the `*find*` command."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":343,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":344,"author":{"gitID":"sherlynng"},"content":"You can press kbd:[Tab] key once after typing `*select*` or `*s*` and it will autofill the command."},{"lineNumber":345,"author":{"gitID":"sherlynng"},"content":"INDEX to be specified will be highlighted."},{"lineNumber":346,"author":{"gitID":"sherlynng"},"content":"You can view the diagram below for a clearer visualization on how it works."},{"lineNumber":347,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":348,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":349,"author":{"gitID":"sherlynng"},"content":"image::AutofillSelect.png[width\u003d\"500\"]"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"alexawangzi"},"content":"// tag::match[]"},{"lineNumber":352,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Matching a student with a tutor : `*match*` or `*m*` `[In V1.4]`"},{"lineNumber":353,"author":{"gitID":"-"},"content":"You can easily match a student with a tutor if they were to have lessons together."},{"lineNumber":354,"author":{"gitID":"-"},"content":"To indicate who you want to match, simply provide two index numbers used in the *last person listing*. +"},{"lineNumber":355,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":356,"author":{"gitID":"alexawangzi"},"content":"****"},{"lineNumber":357,"author":{"gitID":"alexawangzi"},"content":"* The indices supplied must be *compatible*. They must correspond to one *student* and one *tutor*."},{"lineNumber":358,"author":{"gitID":"-"},"content":"They must have *the same subject and level*."},{"lineNumber":359,"author":{"gitID":"alexawangzi"},"content":"* The order of entering indices does not matter."},{"lineNumber":360,"author":{"gitID":"alexawangzi"},"content":"  That is, you can enter the student\u0027s index first followed by the tutor\u0027s index,"},{"lineNumber":361,"author":{"gitID":"alexawangzi"},"content":"  or the other way round."},{"lineNumber":362,"author":{"gitID":"alexawangzi"},"content":"****"},{"lineNumber":363,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":364,"author":{"gitID":"alexawangzi"},"content":"Format: `*match* PERSON_A_INDEX PERSON_B_INDEX` or `*m* PERSON_A_INDEX PERSON_B_INDEX`"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"alexawangzi"},"content":"Examples:"},{"lineNumber":367,"author":{"gitID":"alexawangzi"},"content":"`*match* 1 3` +"},{"lineNumber":368,"author":{"gitID":"alexawangzi"},"content":"Match the person at index 1 to the person at index 3."},{"lineNumber":369,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":370,"author":{"gitID":"alexawangzi"},"content":"[NOTE]"},{"lineNumber":371,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":372,"author":{"gitID":"alexawangzi"},"content":"* If the match is valid (The two persons are compatible),"},{"lineNumber":373,"author":{"gitID":"alexawangzi"},"content":"you will see a success message. +"},{"lineNumber":374,"author":{"gitID":"alexawangzi"},"content":"See the figure below for an illustration."},{"lineNumber":375,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":376,"author":{"gitID":"alexawangzi"},"content":".UI before `*match* 1 3` is executed."},{"lineNumber":377,"author":{"gitID":"alexawangzi"},"content":"image::matchIllustration1.png[width\u003d\"500\"]"},{"lineNumber":378,"author":{"gitID":"-"},"content":".UI after `*match* 1 3` is executed. New pair is dispalyed on the Pair List, with pair information displayed as tags."},{"lineNumber":379,"author":{"gitID":"alexawangzi"},"content":"image::matchIllustration2.png[width\u003d\"500\"]"},{"lineNumber":380,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":381,"author":{"gitID":"alexawangzi"},"content":"[NOTE]"},{"lineNumber":382,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":383,"author":{"gitID":"alexawangzi"},"content":"* If the match is not valid, you will see a error message saying"},{"lineNumber":384,"author":{"gitID":"alexawangzi"},"content":"`Matching failed.` +"},{"lineNumber":385,"author":{"gitID":"alexawangzi"},"content":"You will also see detailed information on what went wrong."},{"lineNumber":386,"author":{"gitID":"alexawangzi"},"content":"For example: +"},{"lineNumber":387,"author":{"gitID":"alexawangzi"},"content":"** `Incompatible role`"},{"lineNumber":388,"author":{"gitID":"alexawangzi"},"content":"** `Incompatible price.`"},{"lineNumber":389,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"* If the tutor demands higher price than what the student offers, the matching will be deemed as incompatible."},{"lineNumber":391,"author":{"gitID":"alexawangzi"},"content":"When the tutor demands a price lower than what the student offers,"},{"lineNumber":392,"author":{"gitID":"alexawangzi"},"content":"the price for the pair will be the higher price offered by the student."},{"lineNumber":393,"author":{"gitID":"alexawangzi"},"content":" +"},{"lineNumber":394,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":395,"author":{"gitID":"alexawangzi"},"content":"// end::match[]"},{"lineNumber":396,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":397,"author":{"gitID":"alexawangzi"},"content":"[NOTE]"},{"lineNumber":398,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":399,"author":{"gitID":"sherlynng"},"content":"You can press kbd:[Tab] key once after typing `*match*` or `*m*` and it will autofill the command."},{"lineNumber":400,"author":{"gitID":"sherlynng"},"content":"INDEX to be specified will be highlighted. Press kbd:[Tab] key again will jump to the next index to be filled in."},{"lineNumber":401,"author":{"gitID":"sherlynng"},"content":"You can view the diagram below for a clearer visualization on how it works."},{"lineNumber":402,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":403,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":404,"author":{"gitID":"sherlynng"},"content":"image::AutofillMatch.png[width\u003d\"700\"]"},{"lineNumber":405,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":406,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":407,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d\u003d Upcoming improvement [Coming in V2.0] +"},{"lineNumber":408,"author":{"gitID":"alexawangzi"},"content":"** SmartMatch"},{"lineNumber":409,"author":{"gitID":"alexawangzi"},"content":"*  Upon selecting a person with his/her index, a list of compatible match choices will appear."},{"lineNumber":410,"author":{"gitID":"-"},"content":"You can sort the list based on price, location, rating, etc."},{"lineNumber":411,"author":{"gitID":"alexawangzi"},"content":"You can then pair the person with one of the given choices."},{"lineNumber":412,"author":{"gitID":"-"},"content":"*  If you cannot confirm the match yet but wishes to take note of a potential match,"},{"lineNumber":413,"author":{"gitID":"alexawangzi"},"content":"you can mark the pair as `Matching in Progress`."},{"lineNumber":414,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":415,"author":{"gitID":"alexawangzi"},"content":"** Display of pair information"},{"lineNumber":416,"author":{"gitID":"alexawangzi"},"content":"*  You will be able to view the schedule and billing information of the pair."},{"lineNumber":417,"author":{"gitID":"alexawangzi"},"content":"After selecting a matched pair, such information will be displayed on the `DetailsPanel`."},{"lineNumber":418,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":419,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":420,"author":{"gitID":"alexawangzi"},"content":"// tag::unmatch[]"},{"lineNumber":421,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":422,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Unmatching a student and a tutor : `*ummatch*` or `*um*` `[In V1.4]`"},{"lineNumber":423,"author":{"gitID":"alexawangzi"},"content":"Once a pair finishes the course, you can unmatch them."},{"lineNumber":424,"author":{"gitID":"-"},"content":"Simply select the pair identified by the index numbers used in the Pair List. +"},{"lineNumber":425,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":426,"author":{"gitID":"alexawangzi"},"content":"Format: `*unmatch* INDEX` or `*um* INDEX`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"alexawangzi"},"content":"Examples:"},{"lineNumber":429,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":430,"author":{"gitID":"alexawangzi"},"content":"* `*unmatch* 1` +"},{"lineNumber":431,"author":{"gitID":"alexawangzi"},"content":"Unmatch the pair at index 1. +"},{"lineNumber":432,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":433,"author":{"gitID":"alexawangzi"},"content":"// end::unmatch[]"},{"lineNumber":434,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":435,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":436,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":437,"author":{"gitID":"sherlynng"},"content":"You can press kbd:[Tab] key once after typing `*unmatch*` or `*um*` and it will autofill the command."},{"lineNumber":438,"author":{"gitID":"sherlynng"},"content":"INDEX to be specified will be highlighted."},{"lineNumber":439,"author":{"gitID":"sherlynng"},"content":"You can view the diagram below for a clearer visualization on how it works."},{"lineNumber":440,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":441,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":442,"author":{"gitID":"sherlynng"},"content":"image::AutofillUnmatch.png[width\u003d\"500\"]"},{"lineNumber":443,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":444,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `*history*` or `*h*`"},{"lineNumber":445,"author":{"gitID":"alexawangzi"},"content":"You can list all the commands that you have entered in reverse chronological order. +"},{"lineNumber":446,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":449,"author":{"gitID":"-"},"content":"You can press kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows and it will display the previous and next input respectively in the Command Box."},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"Format: `*history*`"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":455,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `*undo*` or `*u*`"},{"lineNumber":456,"author":{"gitID":"alexawangzi"},"content":"You can easily restore STUtor to the state before the previous _undoable_ command was executed. +"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":459,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":460,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify STUtor\u0027s content (e.g. `*add*`, `*delete*`, `*edit*` and `*clear*`)."},{"lineNumber":461,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"Format: `*undo*`"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"alexawangzi"},"content":"* `*delete* 1` +"},{"lineNumber":468,"author":{"gitID":"alexawangzi"},"content":"`*list*` +"},{"lineNumber":469,"author":{"gitID":"alexawangzi"},"content":"`*undo*` (reverses the `*delete* 1` command) +"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"alexawangzi"},"content":"* `*select* 1` +"},{"lineNumber":472,"author":{"gitID":"alexawangzi"},"content":"`*list*` +"},{"lineNumber":473,"author":{"gitID":"alexawangzi"},"content":"`*undo*` +"},{"lineNumber":474,"author":{"gitID":"alexawangzi"},"content":"The `*undo*` command fails as there are no undoable commands executed previously."},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"alexawangzi"},"content":"* `*delete* 1` +"},{"lineNumber":477,"author":{"gitID":"alexawangzi"},"content":"`*clear*` +"},{"lineNumber":478,"author":{"gitID":"alexawangzi"},"content":"`*undo*` (reverses the `*clear*` command) +"},{"lineNumber":479,"author":{"gitID":"alexawangzi"},"content":"`*undo*` (reverses the `*delete* 1` command) +"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `*redo*` or `*r*`"},{"lineNumber":482,"author":{"gitID":"alexawangzi"},"content":"You can easily reverse the most recent `*undo*` command. +"},{"lineNumber":483,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"Format: `*redo*`"},{"lineNumber":485,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"alexawangzi"},"content":"* `*delete* 1` +"},{"lineNumber":489,"author":{"gitID":"alexawangzi"},"content":"`*undo*` (reverses the `*delete* 1` command) +"},{"lineNumber":490,"author":{"gitID":"alexawangzi"},"content":"`*redo*` (reapplies the `*delete* 1` command) +"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"alexawangzi"},"content":"* `*delete* 1` +"},{"lineNumber":493,"author":{"gitID":"alexawangzi"},"content":"`*redo*` +"},{"lineNumber":494,"author":{"gitID":"alexawangzi"},"content":"The `*redo*` command fails as there are no `*undo*` commands executed previously."},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"alexawangzi"},"content":"* `*delete* 1` +"},{"lineNumber":497,"author":{"gitID":"alexawangzi"},"content":"`*clear*` +"},{"lineNumber":498,"author":{"gitID":"alexawangzi"},"content":"`*undo*` (reverses the `*clear*` command) +"},{"lineNumber":499,"author":{"gitID":"alexawangzi"},"content":"`*undo*` (reverses the `*delete* 1` command) +"},{"lineNumber":500,"author":{"gitID":"alexawangzi"},"content":"`*redo*` (reapplies the `*delete* 1` command) +"},{"lineNumber":501,"author":{"gitID":"alexawangzi"},"content":"`*redo*` (reapplies the `*clear*` command) +"},{"lineNumber":502,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `*clear*` or `*c*`"},{"lineNumber":505,"author":{"gitID":"alexawangzi"},"content":"To clear all entries from your STUtor, use the `*clear*` command. +"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"Format: `*clear*`"},{"lineNumber":508,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `*exit*`"},{"lineNumber":512,"author":{"gitID":"alexawangzi"},"content":"Exits the program. +"},{"lineNumber":513,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"Format: `*exit*`"},{"lineNumber":515,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":516,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"alexawangzi"},"content":"STUtor data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":519,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":522,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":523,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Advanced Features"},{"lineNumber":524,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":525,"author":{"gitID":"sherlynng"},"content":"// tag::remark[]"},{"lineNumber":526,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":527,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Creating a remark for a person : `*remark*` or `*rk*` `[In V1.3]`"},{"lineNumber":528,"author":{"gitID":"sherlynng"},"content":"You can create a remark for the person identified by the index number used in the *last person listing*. +"},{"lineNumber":529,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":530,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":531,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":532,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":533,"author":{"gitID":"sherlynng"},"content":"* You can remove a remark by typing `r/` without specifying any remark after it."},{"lineNumber":534,"author":{"gitID":"sherlynng"},"content":"* You can edit a remark by typing `edit` after indicating the index you want to edit."},{"lineNumber":535,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":536,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":537,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":538,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":539,"author":{"gitID":"sherlynng"},"content":"The new remark created will not be shown automatically. You will have to select the person again to"},{"lineNumber":540,"author":{"gitID":"sherlynng"},"content":"\u0027refresh\u0027 the `Information Panel`."},{"lineNumber":541,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"Auto-refreshing of person details will be done in V2.0."},{"lineNumber":543,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":544,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"Format: +"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"* To create a new remark: `*remark* INDEX r/REMARK` +"},{"lineNumber":548,"author":{"gitID":"-"},"content":"* To edit an existing remark: `*remark* INDEX edit` or `*remark* edit INDEX`"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"sherlynng"},"content":"Examples:"},{"lineNumber":551,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":552,"author":{"gitID":"sherlynng"},"content":"* `*list*` +"},{"lineNumber":553,"author":{"gitID":"sherlynng"},"content":"`*remark* 2 r/Fast learner.` +"},{"lineNumber":554,"author":{"gitID":"sherlynng"},"content":"Creates a remark \u0027Fast learner.\u0027 for the 2nd person in STUtor."},{"lineNumber":555,"author":{"gitID":"sherlynng"},"content":"* `*find* Betsy` +"},{"lineNumber":556,"author":{"gitID":"sherlynng"},"content":"`*remark* 1 r/` +"},{"lineNumber":557,"author":{"gitID":"sherlynng"},"content":"Removes the remark for the 1st person in the results of the `*find*` command."},{"lineNumber":558,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":559,"author":{"gitID":"sherlynng"},"content":"* `*list*` +"},{"lineNumber":560,"author":{"gitID":"sherlynng"},"content":"`*remark* 1 edit` +"},{"lineNumber":561,"author":{"gitID":"sherlynng"},"content":"Edits the remark of the 1st person in STUtor."},{"lineNumber":562,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":563,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":564,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":565,"author":{"gitID":"sherlynng"},"content":"You can press kbd:[Tab] key once after typing `*remark*` or `*rk*` and it will autofill the command."},{"lineNumber":566,"author":{"gitID":"sherlynng"},"content":"INDEX to be specified will be highlighted. Press kbd:[Tab] key again will jump to the position for you to input your remark."},{"lineNumber":567,"author":{"gitID":"sherlynng"},"content":"You can view the diagram below for a clearer visualization on how it works."},{"lineNumber":568,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":569,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":570,"author":{"gitID":"sherlynng"},"content":"image::AutofillRemark.png[width\u003d\"700\"]"},{"lineNumber":571,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":572,"author":{"gitID":"sherlynng"},"content":"// end::remark[]"},{"lineNumber":573,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":574,"author":{"gitID":"sherlynng"},"content":"// tag::rate[]"},{"lineNumber":575,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Giving a rating to a person : `*rate*` or `*rt*` `[In V1.4]`"},{"lineNumber":576,"author":{"gitID":"sherlynng"},"content":"You can give a rating to the person identified by the index number used in the *last person listing*."},{"lineNumber":577,"author":{"gitID":"-"},"content":"By default, the rating will be accumulated."},{"lineNumber":578,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":579,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":580,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":581,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":582,"author":{"gitID":"sherlynng"},"content":"* Rating must be a number *between 0 and 5 (inclusive)* with *at most 1 decimal place*."},{"lineNumber":583,"author":{"gitID":"sherlynng"},"content":"* Placing a `-` after the rating gives an *absolute rating* to the person specified."},{"lineNumber":584,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":585,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":586,"author":{"gitID":"-"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g `*rate* 1 r/2.0-` will set rating of the 1st person in the results"},{"lineNumber":587,"author":{"gitID":"sherlynng"},"content":"to 2.0 and number of people who rated the person will be resetted to 1."},{"lineNumber":588,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":589,"author":{"gitID":"sherlynng"},"content":"* Without placing `-` after the rating gives an *cumulative rating* to the person specified."},{"lineNumber":590,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":591,"author":{"gitID":"sherlynng"},"content":"[%hardbreak]"},{"lineNumber":592,"author":{"gitID":"-"},"content":"{nbsp}{nbsp}{nbsp}{nbsp} e.g `*rate* 1 r/2.0` will add on to the current rating of the 1st person"},{"lineNumber":593,"author":{"gitID":"sherlynng"},"content":"and the person\u0027s average ratings will be displayed. Number of people who rated the person will also increase by 1."},{"lineNumber":594,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":595,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":596,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":597,"author":{"gitID":"sherlynng"},"content":"Rating value is rounded off to nearest 1 decimal place."},{"lineNumber":598,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":599,"author":{"gitID":"sherlynng"},"content":"****"},{"lineNumber":600,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":601,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":602,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":603,"author":{"gitID":"sherlynng"},"content":"The new rating created will not be shown automatically. You will have to select the person again to"},{"lineNumber":604,"author":{"gitID":"sherlynng"},"content":"\u0027refresh\u0027 the `Information Panel`."},{"lineNumber":605,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"Auto-refreshing of person details will be done in V2.0."},{"lineNumber":607,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":608,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":609,"author":{"gitID":"sherlynng"},"content":"Format: `*rate* INDEX r/RATE`"},{"lineNumber":610,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":611,"author":{"gitID":"sherlynng"},"content":"Examples:"},{"lineNumber":612,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":613,"author":{"gitID":"sherlynng"},"content":"* `*list*` +"},{"lineNumber":614,"author":{"gitID":"sherlynng"},"content":"`*rate* 2 r/2.0-` +"},{"lineNumber":615,"author":{"gitID":"sherlynng"},"content":"Gives an absolute rating of 2.0 to the 2nd person in STUtor."},{"lineNumber":616,"author":{"gitID":"sherlynng"},"content":"* `*find* Betsy` +"},{"lineNumber":617,"author":{"gitID":"sherlynng"},"content":"`*rate* 1 r/4.2` +"},{"lineNumber":618,"author":{"gitID":"sherlynng"},"content":"Gives an accumulated rating for the 1st person in the results of the `*find*` command."},{"lineNumber":619,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":620,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":621,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":622,"author":{"gitID":"sherlynng"},"content":"You can press kbd:[Tab] key once after typing `*rate*` or `*rt*` and it will autofill the command."},{"lineNumber":623,"author":{"gitID":"sherlynng"},"content":"INDEX to be specified will be highlighted. Press kbd:[Tab] key again will jump to the position for you to input your rating."},{"lineNumber":624,"author":{"gitID":"sherlynng"},"content":"You can view the diagram below for a clearer visualization on how it works."},{"lineNumber":625,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":626,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":627,"author":{"gitID":"sherlynng"},"content":"image::AutofillRate.png[width\u003d\"700\"]"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"sherlynng"},"content":"// end::rate[]"},{"lineNumber":630,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"// tag::viewstats[]"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing the statistic : `*viewStats*` `[In V1.4]`"},{"lineNumber":634,"author":{"gitID":"-"},"content":"Shows statistical information for role and subject distribution. +"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"image::CompleteChartSnap.png[width\u003d\"500\"]"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"****"},{"lineNumber":639,"author":{"gitID":"-"},"content":"* The statistic will not update in real time."},{"lineNumber":640,"author":{"gitID":"-"},"content":"* To get an update, call for `*viewStats*` command once more."},{"lineNumber":641,"author":{"gitID":"-"},"content":"* To exit from `*viewStats*`, you can simply click on person in the person list."},{"lineNumber":642,"author":{"gitID":"-"},"content":"****"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"Format: `*viewStats*`"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d\u003d Upcoming improvement [Coming in V2.0] +"},{"lineNumber":647,"author":{"gitID":"-"},"content":"The proposed improvement of viewStats will provide user with more data such as people with different status and more."},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"// end::viewstats[]"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"alexawangzi"},"content":"// tag::enterpriseVersion[]"},{"lineNumber":652,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Enterprise Version `[Coming in V2.0]`"},{"lineNumber":653,"author":{"gitID":"alexawangzi"},"content":"With added functionalities, the Enterprise Version of STUtor will serve tuition centers and agencies."},{"lineNumber":654,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":655,"author":{"gitID":"alexawangzi"},"content":"** Remote centralised database"},{"lineNumber":656,"author":{"gitID":"-"},"content":"*  Real-time synchronization will allow multiple coordinators to work on the same database."},{"lineNumber":657,"author":{"gitID":"-"},"content":"* Information about the students, tutors and pairs will be stored securely, allowing easy backup and data recovery."},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"alexawangzi"},"content":"** Data Encryption"},{"lineNumber":661,"author":{"gitID":"alexawangzi"},"content":"*  The coordinator will need a password issued by the tuition center to access the application,"},{"lineNumber":662,"author":{"gitID":"alexawangzi"},"content":"therefore ensuring the confidentiality of the data."},{"lineNumber":663,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":664,"author":{"gitID":"alexawangzi"},"content":"// end::enterpriseVersion[]"},{"lineNumber":665,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":669,"author":{"gitID":"alexawangzi"},"content":"*A*: +"},{"lineNumber":670,"author":{"gitID":"alexawangzi"},"content":"1) Please install STUtor in the other computer. +"},{"lineNumber":671,"author":{"gitID":"alexawangzi"},"content":"2) Navigate to *main/data*, and overwrite the empty `STUtor.xml` file"},{"lineNumber":672,"author":{"gitID":"alexawangzi"},"content":"with the file of the same name found on your previous computer."},{"lineNumber":673,"author":{"gitID":"alexawangzi"},"content":"You can the file under the same path of *main/data*"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"Aussiroth"},"content":"*Q*: How do I update my version of STUtor to a new released version? +"},{"lineNumber":676,"author":{"gitID":"Aussiroth"},"content":"*A*: +"},{"lineNumber":677,"author":{"gitID":"Aussiroth"},"content":"1) Download the _STUtor.jar_ file from our link:{repoURL}/releases[release page]. +"},{"lineNumber":678,"author":{"gitID":"Aussiroth"},"content":"2) Copy the downloaded file and paste it in the the folder the old _STUtor.jar_ is located in. Confirm to overwrite the existing file. +"},{"lineNumber":679,"author":{"gitID":"Aussiroth"},"content":"3) Now you can simply run the new _STUtor.jar_ to be able to use the new version with all your data preserved."},{"lineNumber":680,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":681,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":682,"author":{"gitID":"alexawangzi"},"content":"// tag::commandsummary[]"},{"lineNumber":683,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":684,"author":{"gitID":"alexawangzi"},"content":"You can use the following shortcuts when typing the commands."},{"lineNumber":685,"author":{"gitID":"alexawangzi"},"content":"Note that there is no shortcuts for `help` and `exit` commands."},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"alexawangzi"},"content":"[width\u003d\"80%\",cols\u003d\"\u003c20%,\u003c20%,\u003c20%,\u003c20%\",options\u003d\"header\",]"},{"lineNumber":688,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":689,"author":{"gitID":"alexawangzi"},"content":"|Command |Shortcut |Format |Example"},{"lineNumber":690,"author":{"gitID":"-"},"content":"|`add`  | `a` |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS $/PRICE sub/SUBJECT lvl/LEVEL  r/ROLE [t/TAG]...`|`add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50 sub/Math lvl/Lower Sec r/Student`"},{"lineNumber":691,"author":{"gitID":"alexawangzi"},"content":"|`delete`|`d`|`delete INDEX`|`delete 3`"},{"lineNumber":692,"author":{"gitID":"-"},"content":"|`edit`|`e`|`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [$/PRICE] [sub/SUBJECT] [lvl/LEVEL] [r/ROLE] [t/TAG]...` |`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":693,"author":{"gitID":"alexawangzi"},"content":"|`filter`| |`filter KEYWORD`|`filter Math`"},{"lineNumber":694,"author":{"gitID":"alexawangzi"},"content":"|`find`|`f`|`find KEYWORD [MORE_KEYWORDS]`|`find James Jake`"},{"lineNumber":695,"author":{"gitID":"sherlynng"},"content":"|`findmissing`|`fm`|`findmissing [FIELD]...`|`findmissing phone`"},{"lineNumber":696,"author":{"gitID":"sherlynng"},"content":"|`match`|`m`|`match INDEX_A INDEX_B`|`match 1 2`"},{"lineNumber":697,"author":{"gitID":"sherlynng"},"content":"|`unmatch`|`um`|`unmatch INDEX`|`unmatch 2`"},{"lineNumber":698,"author":{"gitID":"sherlynng"},"content":"|`rate`|`rt`|`rate INDEX r/`|`rate INDEX r/3.5`"},{"lineNumber":699,"author":{"gitID":"sherlynng"},"content":"|`remark`|`rk`|`remark INDEX r/`|`remark 2 r/Fast learner.`"},{"lineNumber":700,"author":{"gitID":"alexawangzi"},"content":"|`select`|`s`|`select INDEX`|`select 2`"},{"lineNumber":701,"author":{"gitID":"alexawangzi"},"content":"|`list`|`l`||"},{"lineNumber":702,"author":{"gitID":"-"},"content":"|`viewStats`|||"},{"lineNumber":703,"author":{"gitID":"alexawangzi"},"content":"|`clear`|`c`||"},{"lineNumber":704,"author":{"gitID":"alexawangzi"},"content":"|`history`|`h`||"},{"lineNumber":705,"author":{"gitID":"alexawangzi"},"content":"|`undo`|`u`||"},{"lineNumber":706,"author":{"gitID":"alexawangzi"},"content":"|`redo`|`r`||"},{"lineNumber":707,"author":{"gitID":"alexawangzi"},"content":"|`help`|||"},{"lineNumber":708,"author":{"gitID":"alexawangzi"},"content":"|`exit`|||"},{"lineNumber":709,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":710,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":711,"author":{"gitID":"alexawangzi"},"content":"// end::commandsummary[]"},{"lineNumber":712,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":713,"author":{"gitID":"alexawangzi"},"content":"// tag::prefixshortcut[]"},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d Field Shortcut Summary"},{"lineNumber":715,"author":{"gitID":"alexawangzi"},"content":"To save time in adding a person, or editing a person\u0027s details, use the following shortcuts."},{"lineNumber":716,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":717,"author":{"gitID":"alexawangzi"},"content":"[width\u003d\"59%\",cols\u003d\"\u003c30%,\u003c35%,\u003c35%\",options\u003d\"header\",]"},{"lineNumber":718,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":719,"author":{"gitID":"alexawangzi"},"content":"|Applicable field |Shortcut |Equivalence in full"},{"lineNumber":720,"author":{"gitID":"-"},"content":"|SUBJECT | `sub/chem`| `sub/chemistry`"},{"lineNumber":721,"author":{"gitID":"-"},"content":"|SUBJECT | `sub/phy`| `sub/physics`"},{"lineNumber":722,"author":{"gitID":"-"},"content":"|SUBJECT | `sub/chi`| `sub/chinese`"},{"lineNumber":723,"author":{"gitID":"-"},"content":"|SUBJECT | `sub/eng`| `sub/english`"},{"lineNumber":724,"author":{"gitID":"-"},"content":"|LEVEL | `lvl/us`| `lvl/upper sec`"},{"lineNumber":725,"author":{"gitID":"-"},"content":"|LEVEL | `lvl/ls`| `lvl/lower sec`"},{"lineNumber":726,"author":{"gitID":"-"},"content":"|LEVEL | `lvl/up`| `lvl/upper pri`"},{"lineNumber":727,"author":{"gitID":"-"},"content":"|LEVEL | `lvl/lp`| `lvl/lower pri`"},{"lineNumber":728,"author":{"gitID":"-"},"content":"|ROLE | `r/t`| `r/tutor`"},{"lineNumber":729,"author":{"gitID":"-"},"content":"|ROLE | `r/s`| `r/student`"},{"lineNumber":730,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":731,"author":{"gitID":"alexawangzi"},"content":"// end::prefixshortcut[]"}],"authorContributionMap":{"alexawangzi":162,"Aussiroth":64,"sherlynng":246,"-":259}},{"path":"unused/RemoveTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":" * {@code RemoveTagCommand}."},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"public class RemoveTagCommandTest {"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public void execute_removeValidTag_success() throws Exception {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(\"English\");"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(RemoveTagCommand.MESSAGE_DELETE_TAG_SUCCESS, tagToDelete);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.deleteTag(tagToDelete);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(removeTagCommand, model, expectedMessage, expectedModel);"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    public void execute_removeInvalidTag_failure() throws Exception {"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(\"nonExistingTag\");"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_TAG);"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(removeTagCommand, model, expectedMessage);"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    public void executeUndoRedo_validTag_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(\"English\");"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        // delete -\u003e first tag deleted"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        removeTagCommand.execute();"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        undoRedoStack.push(removeTagCommand);"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        // undo -\u003e reverts addressbook back to previous state"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        // redo -\u003e same tag deleted again"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.deleteTag(tagToDelete);"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    public void executeUndoRedo_invalidTag_failure() {"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        Tag tagToDelete \u003d new Tag(\"nonExistingTag\");"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d prepareCommand(tagToDelete);"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_TAG);"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        // execution failed -\u003e removeTagCommand not pushed into undoRedoStack"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(removeTagCommand, model, expectedMessage);"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    private RemoveTagCommand prepareCommand(Tag tag) {"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        RemoveTagCommand removeTagCommand \u003d new RemoveTagCommand(tag);"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        removeTagCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        return removeTagCommand;"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":83,"-":13}},{"path":"docs/team/sherlynng.adoc","lines":[{"lineNumber":1,"author":{"gitID":"sherlynng"},"content":"\u003d Ng Xin Ler - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"sherlynng"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"sherlynng"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B1/main"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d PROJECT: STUtor - V1.5"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"---"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d Overview"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"STUtor -V1.5 is a *desktop app* tailored for *tuition coordinators* to easily _match_ and _manage_ a database of tutors and students. +"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX."},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"It is written in Java, and has about 25 kLoC."},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"* *Major enhancement*:"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"added *the ability to review a person*"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"** What it does:"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"allows the user to _write a remark_ or _give a rating_ to a tutor/student based on their performance."},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"** Justification:"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"This feature allows the tuition coordinator to keep track on the performance of tutors and students."},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"This helps future matching as tutors/students strengths and weaknesses can be taken into consideration."},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"Rating allows the tuition coordinator to take note of the better performing and underperforming tutors/students."},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"** Highlights:"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"`Remark` and `Rate` require vastly different handling of inputs: `Remark` accepting any format (including null) while `Rate`"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"requires a fixed format between 0.0 to 5.0 (decimal can be omitted). For editing a remark, as it requires interaction with"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"`CommandBox` from UI, observer pattern is used to reduce coupling."},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"* *Minor enhancement*:"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"Added the ability to autofill commands using `Tab` key and delete prefixes using `Delete` key."},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"This facilitates the user when typing in commands, especially for long commands such as `add` and `edit`."},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/functional/sherlynng.md[Functional code]] [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/test/sherlynng.md[Test code]]"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"* *Other contributions*:"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"** Enhancements to existing features:"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"*** Update BrowserPanel to reflect all attributes of a person (Pull requests https://github.com/CS2103JAN2018-W11-B1/main/pull/45[#45])"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"** Documentation:"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"*** Create UI mock up for initial planning of UI (Pull requests https://github.com/CS2103JAN2018-W11-B1/main/pull/26[#26])"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"*** Cosmetic tweaks to existing contents of the User Guide to increase user friendliness: https://github.com/CS2103JAN2018-W11-B1/main/pull/140/files[#140]"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"** Community:"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W10-B4/main/issues/126[1], https://github.com/CS2103JAN2018-W10-B4/main/issues/127[2])"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"include::../UserGuide.adoc[tag\u003dremark]"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"include::../UserGuide.adoc[tag\u003drate]"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Auofill Feature"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"A sample command is shown below:"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Edit Command"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"include::../UserGuide.adoc[tag\u003dsampleautofill]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":68,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"include::../DeveloperGuide.adoc[tag\u003dreview]"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"include::../DeveloperGuide.adoc[tag\u003dautofill]"}],"authorContributionMap":{"alexawangzi":7,"sherlynng":54,"-":11}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"STUtor is developed by the https://github.com/CS2103JAN2018-W11-B1[CS2103JAN2018-W11-B1] team. +"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Akshay Narayan"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"image::okkhoy.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"{empty}[https://github.com/okkhoy[github]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"Role: Project Supervisor"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Danny Ng Ming Xuan"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"image::dannyngmx94.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/dannyngmx94[github]] [\u003c\u003cdannyngmx94#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"Role: Testing"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: UI"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Ng Xin Ler"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"image::sherlynng.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/sherlynng[github]] [\u003c\u003csherlynng#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"Role: Documentation, Code quality"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: Storage"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Wang Zi"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"image::alexawangzi.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/alexawangzi[github]] [\u003c\u003calexawangzi#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"Role: Integration, Scheduling and tracking"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: Model"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Yan Hong Yao Alvin"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"image::aussiroth.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"{empty}[http://github.com/aussiroth[github]] [\u003c\u003caussiroth#, portfolio\u003e\u003e]"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"Role: Team Lead"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"Responsibilities: Logic"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"alexawangzi":1,"Aussiroth":26,"-":27}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"\u003d STUtor"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"https://travis-ci.org/CS2103JAN2018-W11-B1/main[image:https://travis-ci.org/CS2103JAN2018-W11-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"https://ci.appveyor.com/project/alexawangzi/main/branch/master[image:https://ci.appveyor.com/api/projects/status/uawhtnq68lp8dg2e/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"https://coveralls.io/github/CS2103JAN2018-W11-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W11-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d UI"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"ifdef::env-github[]"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"ifndef::env-github[]"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"endif::[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"* This is a desktop Address Book application, specialised for people who need to coordinate tutors with students."},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"* Whether working for a tuition company, or as a freelance, this will help you keep track of everything going on with your students and tutors."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"* Original source for the code in this project is the Addressbook-level4 created by the SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":34,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"alexawangzi":3,"Aussiroth":10,"sherlynng":3,"-":21}},{"path":"docs/team/aussiroth.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"\u003d Yan Hong Yao Alvin - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d PROJECT: STUtor - v1.5"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"---"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"STUtor -v1.5 is a desktop address book targeting tutor coordinators"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"to help them _matching_ and _managing_ a large database of tutors and students. +"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX."},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"It is written in Java, and has about 25 kLoC."},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"* *Major enhancement*:"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"Changed the functionality of add command to reduce number of compulsory fields."},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"** What it does:"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"Allows the user to add a new person with only their name, without entering any of the other fields."},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"** Justification:"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"This feature makes management and including new people much easier. When adding new tutors or students to the application, the coordinator might not always get all the required fields and may need to clarify further. +"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"This setup allows them to go ahead and add the person first, while being able to find and edit in the details later. +"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"Furthermore, if the user wants to add all the details at once, the command becomes extremely long - therefore users will feel less burdened if they have a choice to not add in all the details in one-shot."},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"** Highlights:"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"As much of the app makes use of the different values such as the subject and education level, it was important to make sure that the design used to allow optional fields would not lead to significant bugs or errors when handling these fields. +"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"Furthermore, the documentation had to be clear to make sure that future developers when making use of these fields would be able to expect the possibility of optional fields, and be able to correctly handle them. +"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"Finally, as a complement to this feature, I created an additional command that allows users to search for people whose fields are missing, to be able to list out those they need to request information from, or to find the correct person to edit."},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"* *Minor enhancement*:"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"Added the creation of special tags based off 5 attributes of the person."},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"These tags would make use of the method of displaying tags to show important information about the tutor and student, such as the subject they are looking for a tutor/student for. +"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"Each attribute has a special color associated with it to make visual recognition easy, as well as ordering them in a single, specific order."},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/functional/aussiroth.md[Functional code]] [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/test/aussiroth.md[Test code]]"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"* *Other contributions*:"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"** Project management:"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"*** Managed releases `v1.2` - `v1.5` (6 releases) on GitHub"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"** Enhancements to existing features:"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"*** Wrote additional tests for existing features and tests across the work of all team members to improve coverage significantly. These tests are located across many different parts of the code base."},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"(Pull requests https://github.com/CS2103JAN2018-W11-B1/main/pull/40[#40], https://github.com/CS2103JAN2018-W11-B1/main/pull/64[#64], https://github.com/CS2103JAN2018-W11-B1/main/pull/155[#155], https://github.com/CS2103JAN2018-W11-B1/main/pull/179[#179])"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"** Documentation:"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"*** Did some changes to the developer guide to improve reader-friendliness of existing content: https://github.com/CS2103JAN2018-W11-B1/main/pull/96[#96]"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"** Community:"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W15-B4/main/issues/183[1], https://github.com/CS2103JAN2018-W15-B4/main/issues/203[2], https://github.com/CS2103JAN2018-W15-B4/main/issues/190[3])"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"Part of extract for Add and Edit in the user guide was done by me - About the optional fields and how the attribute tags work."},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"include::../UserGuide.adoc[tag\u003dadd]"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"include::../UserGuide.adoc[tag\u003dedit]"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"include::../UserGuide.adoc[tag\u003dfindmissing]"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"include::../DeveloperGuide.adoc[tag\u003dattributetags]"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"include::../DeveloperGuide.adoc[tag\u003doptionaladd]"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":""}],"authorContributionMap":{"alexawangzi":17,"Aussiroth":45,"-":14}},{"path":"docs/team/dannyngmx94.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Danny Ng Ming Xuan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B1/main"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d PROJECT: STUtor - v1.5"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"---"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Overview"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"STUtor -v1.5 is a desktop address book targeting tutor coordinators"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"to help them _matching_ and _managing_ a large database of tutors and students. +"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX."},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"It is written in Java, and has about 25 kLoC."},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"* *Major enhancement*:"},{"lineNumber":20,"author":{"gitID":"-"},"content":"Added the ability to *view statistical data of students and tutors in app*"},{"lineNumber":21,"author":{"gitID":"-"},"content":"** What it does:"},{"lineNumber":22,"author":{"gitID":"-"},"content":"Displays in graphical form to the user data such as number of students/tutors and the breakdown of subjects learning/teaching by the respective group."},{"lineNumber":23,"author":{"gitID":"-"},"content":"** Justification:"},{"lineNumber":24,"author":{"gitID":"-"},"content":"This feature makes collection of data much simpler. Without this feature, if the coordinator wants to collect these data, he/she will need to perform multiple actions and consolidate the data manually. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"However, with the help of this feature, all the manual and time consuming task of data collection can be done at the call of the viewStats command. +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Furthermore, the data will be displayed beautifully in graphical representation."},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Highlights:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This feature require the use of various components such as Logic, Model and UI. It is recommended for future developers to read up on the components mentioned for better understanding."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* *Minor enhancement*:"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Added the ability to *filter list* by *subject*, *level*, *status* or *role*. The keyword used for filter is case-insensitive."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/functional/dannyngmx94.md[Functional code]] [https://github.com/CS2103JAN2018-W11-B1/main/blob/master/collated/test/dannyngmx94.md[Test code]]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Added color label. (Pull request https://github.com/CS2103JAN2018-W11-B1/main/pull/4[#4])"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"** Documentation:"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"***Did some changes to the developer guide to improve reader-friendliness of existing content: https://github.com/CS2103JAN2018-W11-B1/main/pull/96[#96]"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"** Community:"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-T09-B4/main/issues/142[1], https://github.com/CS2103JAN2018-T09-B4/main/issues/151[2])"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dfilter]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dviewstats]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":63,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dfilter]"},{"lineNumber":66,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dviewstats]"},{"lineNumber":67,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dmanualtest]"},{"lineNumber":68,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"alexawangzi":15,"Aussiroth":3,"-":50}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"        //assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        //assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        //assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":4,"-":81}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotDeleteException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonMatchedCannotDeleteException e) {"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"            e.printStackTrace();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":143,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"-":200}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_STUDENT;"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_UNMATCHED;"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_AMY;"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":82,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":83,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + SUBJECT_DESC_AMY + \"  \" + LEVEL_DESC_AMY + \"  \""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"                //+ STATUS_DESC_UNMATCHED"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"                + \"  \" + PRICE_DESC_AMY + \" \" + ROLE_DESC_AMY + \" \" + TAG_DESC_FRIEND;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_AMY).withPrice(VALID_PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withRole(ROLE_STUDENT)"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"                //.withStatus(STATUS_UNMATCHED)"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":115,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_AMY).withPrice(VALID_PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"                //.withStatus(STATUS_UNMATCHED)"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY  + ROLE_DESC_AMY"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_AMY).withPrice(VALID_PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"                //.withStatus(STATUS_UNMATCHED)"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":137,"author":{"gitID":"Aussiroth"},"content":"                .withAddress(VALID_ADDRESS_BOB).withPrice(VALID_PRICE_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + LEVEL_DESC_AMY + SUBJECT_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"Aussiroth"},"content":"                + TAG_DESC_FRIEND + EMAIL_DESC_BOB + LEVEL_DESC_BOB + SUBJECT_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":153,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_BOB;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"Friend\";"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY;"},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT"},{"lineNumber":188,"author":{"gitID":"alexawangzi"},"content":"                + AddCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":197,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":202,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":208,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":209,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"Aussiroth"},"content":"        //@@author aussiroth"},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":214,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":"                + INVALID_PRICE_DESC + SUBJECT_DESC_AMY + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":216,"author":{"gitID":"Aussiroth"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":217,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":219,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid subject -\u003e rejected */"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":221,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + INVALID_SUBJECT_DESC + STATUS_DESC_UNMATCHED + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":223,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":225,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid level -\u003e rejected */"},{"lineNumber":226,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":227,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + INVALID_LEVEL_DESC + ROLE_DESC_AMY"},{"lineNumber":228,"author":{"gitID":"Aussiroth"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":229,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid role -\u003e rejected */"},{"lineNumber":232,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":233,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + LEVEL_DESC_AMY + INVALID_ROLE_DESC"},{"lineNumber":234,"author":{"gitID":"Aussiroth"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":236,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":237,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":238,"author":{"gitID":"Aussiroth"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":239,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_AMY + SUBJECT_DESC_AMY + LEVEL_DESC_AMY + ROLE_DESC_AMY"},{"lineNumber":240,"author":{"gitID":"Aussiroth"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":241,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":242,"author":{"gitID":"Aussiroth"},"content":"        //@@author"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":269,"author":{"gitID":"Aussiroth"},"content":"        System.out.println(\"command is \" + command);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":35,"Aussiroth":62,"-":219}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":120,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":"        Model newModel \u003d getModel();"},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(expectedModel, newModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":"     * Calls {@code DetailsPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"sherlynng":3,"-":261}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.HENRY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":31,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL, HENRY);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        // first names of Benson and Daniel and Henry are \"Meier\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, HENRY);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":172,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"-":193}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"\u003d STUtor - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B1/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"By: `Team W11-B1`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"STUtor is a desktop application made specifically for the purpose of tuition coordinating. This guide provides information that will help you get started out with contributing to the project, such as the architecture and implementation of the available features."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":41,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":43,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":44,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":55,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":64,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":65,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to *999* to prevent IntelliJ from contracting the import statements"},{"lineNumber":68,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W11-B1/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W11-B1/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":83,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":95,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":100,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":103,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":108,"author":{"gitID":"Aussiroth"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. If you want to update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":113,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"Aussiroth"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The User Interface (UI) of the App."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":130,"author":{"gitID":"Aussiroth"},"content":"* Reveals its functionality using a `{Component Name}Manager` class."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"Aussiroth"},"content":"For example, the `Logic` component (refer to figure 2 below) defines it\u0027s API in the `Logic.java` interface and reveals its functionality using the `LogicManager.java` class."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":135,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":138,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"Aussiroth"},"content":"The _Sequence Diagram_ below (figure 3) shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":146,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"Aussiroth"},"content":"The diagram below (figure 4) shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":154,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":159,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":162,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `InfoPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":174,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":187,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":190,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":191,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":192,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"Given below is the _Sequence Diagram_ (figure 8)  for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":197,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":200,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":203,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":210,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":215,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":218,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":225,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":"Such classes include the `LogsCenter` and `EventsCenter` that are used to implement the logging in the application and event-centered design respectively."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"Aussiroth"},"content":"[NOTE]"},{"lineNumber":238,"author":{"gitID":"Aussiroth"},"content":"You may want to find out about the approach for existing features described here before starting to code!"},{"lineNumber":239,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"Aussiroth"},"content":".Logic Command Class Diagram"},{"lineNumber":249,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":254,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"----"},{"lineNumber":256,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"},{"lineNumber":262,"author":{"gitID":"-"},"content":"----"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":265,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":266,"author":{"gitID":"-"},"content":"----"},{"lineNumber":267,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":"}"},{"lineNumber":282,"author":{"gitID":"-"},"content":"----"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"Aussiroth"},"content":".Stack Diagram for Undo/Redo after `Delete`"},{"lineNumber":289,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"Aussiroth"},"content":".Stack Diagram for Undo/Redo after `Add`"},{"lineNumber":294,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":297,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"Aussiroth"},"content":".Stack Diagram for Undo/Redo after `Undo`"},{"lineNumber":304,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":307,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"Aussiroth"},"content":"The following _sequence diagram_ (figure 15) shows how the undo operation works:"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"Aussiroth"},"content":".Sequence Diagram for `Undo`"},{"lineNumber":312,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"Aussiroth"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. In this scenario, the `redoStack` is no longer empty. When the new command is executed, the `redoStack` will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"Aussiroth"},"content":".Stack Diagram for Undo/Redo after a new command `Clear`"},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"Aussiroth"},"content":".Stack Diagram for Undo/Redo after `List`"},{"lineNumber":327,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"Aussiroth"},"content":".Activity Diagram for Undo/Redo"},{"lineNumber":332,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":339,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":340,"author":{"gitID":"Aussiroth"},"content":"** Cons: It may be difficult for new developers to understand the template pattern."},{"lineNumber":341,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":342,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":350,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":351,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":360,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":361,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":363,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":371,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":373,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":374,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":382,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":387,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":388,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":389,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"sherlynng"},"content":"// tag::uimodifications[]"},{"lineNumber":397,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":398,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d UI Modifications"},{"lineNumber":399,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":400,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Details Panel"},{"lineNumber":401,"author":{"gitID":"-"},"content":"The details panel is modified to show the selected person’s details instead of opening up a URL."},{"lineNumber":402,"author":{"gitID":"-"},"content":"This allows better visualization of a person’s details as each person now has up to 11 attributes: `Name`, `Phone`,"},{"lineNumber":403,"author":{"gitID":"sherlynng"},"content":"`Address`, `Email`, `Role`, `Status`, `Subject`, `Level`, `Price`, `Remark`, `Rate` to be displayed."},{"lineNumber":404,"author":{"gitID":"sherlynng"},"content":"Below shows the modifications made:"},{"lineNumber":405,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":406,"author":{"gitID":"sherlynng"},"content":"**Before**"},{"lineNumber":407,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":408,"author":{"gitID":"sherlynng"},"content":"image::OldBrowserPanel.png[width\u003d\"500\"]"},{"lineNumber":409,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":410,"author":{"gitID":"sherlynng"},"content":"**After**"},{"lineNumber":411,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":412,"author":{"gitID":"sherlynng"},"content":"image::NewDetailsPanel.png[width\u003d\"500\"]"},{"lineNumber":413,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":414,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":415,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":416,"author":{"gitID":"sherlynng"},"content":"The UI is modified using `SceneBuilder` and the layout is specified in link:{repoURL}/blob/master/src/main/resources/view/DetailsPanel.fxml[`DetailsPanel.fxml`]."},{"lineNumber":417,"author":{"gitID":"-"},"content":"link:{repoURL}/blob/master/src/main/java/seedu/address/ui/DetailsPanel.java[`DetailsPanel.java`] subscribes to `handlePersonPanelSelectionChangedEvent`, where this allows the details panel to"},{"lineNumber":418,"author":{"gitID":"sherlynng"},"content":"be updated whenever the user selects on a specific person."},{"lineNumber":419,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"We choose to place the person\u0027s name at the top of the details panel for easy identification of a person while"},{"lineNumber":421,"author":{"gitID":"sherlynng"},"content":"other details are organized in a table format for easy reference. Rows of the table are also alternately colored"},{"lineNumber":422,"author":{"gitID":"sherlynng"},"content":"to increase readability."},{"lineNumber":423,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":424,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":425,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":426,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Layout of Details Panel"},{"lineNumber":427,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":428,"author":{"gitID":"sherlynng"},"content":"* **Alternative 1 (current choice):** Use table to display person details with a column specifying the type of attribute"},{"lineNumber":429,"author":{"gitID":"sherlynng"},"content":"and the other specifying the actual content."},{"lineNumber":430,"author":{"gitID":"sherlynng"},"content":"** Pros: Easy to read and refer to."},{"lineNumber":431,"author":{"gitID":"sherlynng"},"content":"** Cons: May not look visually appealing due to grids and lines."},{"lineNumber":432,"author":{"gitID":"sherlynng"},"content":"* **Alternative 2:** Centralized display of person details without usage of tables and reference to the type of attribute."},{"lineNumber":433,"author":{"gitID":"sherlynng"},"content":"** Pros: More visually appealing as formatting is less rigid and squarish."},{"lineNumber":434,"author":{"gitID":"sherlynng"},"content":"** Cons: Locating an attribute may not be easy due to lack of labelling."},{"lineNumber":435,"author":{"gitID":"sherlynng"},"content":"// end::uimodifications[]"},{"lineNumber":436,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":437,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Person Card"},{"lineNumber":438,"author":{"gitID":"sherlynng"},"content":"Person card is improved to show the list of person’s details more concisely and clearly."},{"lineNumber":439,"author":{"gitID":"sherlynng"},"content":"Below shows the improvements made:"},{"lineNumber":440,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":441,"author":{"gitID":"sherlynng"},"content":"**Before**"},{"lineNumber":442,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":443,"author":{"gitID":"sherlynng"},"content":"image::OldPersonCard.png[width\u003d\"300\"]"},{"lineNumber":444,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":445,"author":{"gitID":"sherlynng"},"content":"**After**"},{"lineNumber":446,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":447,"author":{"gitID":"sherlynng"},"content":"image::NewPersonCard.png[width\u003d\"300\"]"},{"lineNumber":448,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":449,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Removal of Unnecessary Information"},{"lineNumber":450,"author":{"gitID":"sherlynng"},"content":"Besides `Name`, all other details are removed from the person card. We choose to remove it as these details can"},{"lineNumber":451,"author":{"gitID":"-"},"content":"be easily viewed by selecting on the person card since the details panel now shows the full details of a person."},{"lineNumber":452,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":453,"author":{"gitID":"Aussiroth"},"content":"As such, we decided to only leave the necessary details that the user will frequently refer"},{"lineNumber":454,"author":{"gitID":"sherlynng"},"content":"to in the person card. This helps to reduce cluttering on the side panel and allows the user to be able to view a"},{"lineNumber":455,"author":{"gitID":"sherlynng"},"content":"longer list of people at one time."},{"lineNumber":456,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":457,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Coloring of Tags"},{"lineNumber":458,"author":{"gitID":"sherlynng"},"content":"To allow easy identification of the category that a tag belongs to, different colors are used for different attributes"},{"lineNumber":459,"author":{"gitID":"Aussiroth"},"content":"of a person. A standardized color is used for each attribute this colour is determined from the `tagType` attribute of the `Tag`."},{"lineNumber":460,"author":{"gitID":"Aussiroth"},"content":"This ensures the color will be consistent for each person and the color will be retained when the user reopens the application."},{"lineNumber":461,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":462,"author":{"gitID":"sherlynng"},"content":"// tag::autofill[]"},{"lineNumber":463,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":464,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Autofill"},{"lineNumber":465,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":466,"author":{"gitID":"sherlynng"},"content":"Due to the significant amount of attributes to type in, especially when adding or editing a person, we decided to create"},{"lineNumber":467,"author":{"gitID":"sherlynng"},"content":"autofill feature to reduce the time taken to enter a person\u0027s details. Besides `add` and `edit`, commands with"},{"lineNumber":468,"author":{"gitID":"sherlynng"},"content":"definite format (i.e. `remark`, `rate`, `delete`, `select`, `unmatch`, `match`) have this feature implemented as well."},{"lineNumber":469,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":471,"author":{"gitID":"sherlynng"},"content":"Autofill feature is implemented in link:{repoURL}/blob/master/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox.java`]."},{"lineNumber":472,"author":{"gitID":"sherlynng"},"content":"When keyboard `Delete` or `Tab` is pressed, depending on the user input in the command box, the caret position"},{"lineNumber":473,"author":{"gitID":"sherlynng"},"content":"will be shifted accordingly. Below shows the workflow when `Delete` or `Tab` is pressed."},{"lineNumber":474,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":475,"author":{"gitID":"sherlynng"},"content":".Activity Diagram for Autofill"},{"lineNumber":476,"author":{"gitID":"sherlynng"},"content":"image::AutofillActivityDiagram.png[width\u003d\"400\"]"},{"lineNumber":477,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":478,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Find Next Field"},{"lineNumber":479,"author":{"gitID":"sherlynng"},"content":"To find the next field to shift the caret to, manipulation of `String` is used to locate the next instance of `/` in the"},{"lineNumber":480,"author":{"gitID":"sherlynng"},"content":"command box. By searching the position of the next `/`, it indicates where the next field should be entered."},{"lineNumber":481,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":482,"author":{"gitID":"sherlynng"},"content":".Visualization for find next field"},{"lineNumber":483,"author":{"gitID":"sherlynng"},"content":"image::AutofillAdd_Tab2.png[width\u003d\"500\"]"},{"lineNumber":484,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":485,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Delete Previous Prefix"},{"lineNumber":486,"author":{"gitID":"sherlynng"},"content":"To delete the previous prefix, the last instance of `{nbsp}{nbsp}` from the current caret position is located. Any text"},{"lineNumber":487,"author":{"gitID":"sherlynng"},"content":"between this position and the caret position is deleted to remove the desired prefix and user input (if any). The caret"},{"lineNumber":488,"author":{"gitID":"sherlynng"},"content":"then procedes to find next field to be shifted to. Below shows what happens when `Delete` is pressed when caret position is at `n/`."},{"lineNumber":489,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":490,"author":{"gitID":"sherlynng"},"content":".Visualization for delete previous prefix"},{"lineNumber":491,"author":{"gitID":"sherlynng"},"content":"image::AutofillAdd_Delete.png[width\u003d\"500\"]"},{"lineNumber":492,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":493,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Select index to edit"},{"lineNumber":494,"author":{"gitID":"sherlynng"},"content":"To select/highlight the index to edit, the first instance of a digit is searched from the current caret position. The index"},{"lineNumber":495,"author":{"gitID":"sherlynng"},"content":"is then highlighted by selecting the caret forward."},{"lineNumber":496,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":497,"author":{"gitID":"sherlynng"},"content":".Visualization for select index to edit"},{"lineNumber":498,"author":{"gitID":"sherlynng"},"content":"image::AutofillMatch.png[width\u003d\"500\"]"},{"lineNumber":499,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":500,"author":{"gitID":"sherlynng"},"content":"We decide to create shortcuts for even for commands that do not have lengthy inputs (e.g. `add` and `edit`) as it makes typing"},{"lineNumber":501,"author":{"gitID":"sherlynng"},"content":"command easier for our user. By highlighting the index to edit, user can simply type the index they want to edit without"},{"lineNumber":502,"author":{"gitID":"sherlynng"},"content":"manually having to shift the caret to change the index."},{"lineNumber":503,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Keyboard key for `Delete`"},{"lineNumber":507,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":508,"author":{"gitID":"sherlynng"},"content":"* **Alternative 1 (current choice):** Use `Delete` button."},{"lineNumber":509,"author":{"gitID":"sherlynng"},"content":"** Pros: Intuitive to user."},{"lineNumber":510,"author":{"gitID":"-"},"content":"** Cons: May lead to confusion since the original functionality of the `DELETE` button does not work now."},{"lineNumber":511,"author":{"gitID":"sherlynng"},"content":"* **Alternative 2:** Use other keyboard keys that users typically do not use, for example `F2`."},{"lineNumber":512,"author":{"gitID":"sherlynng"},"content":"** Pros: Will not lead to confusion of expected keyboard functionalities."},{"lineNumber":513,"author":{"gitID":"sherlynng"},"content":"** Cons: Not intuitive for users to use as they would not expect it to be a key for delete function."},{"lineNumber":514,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":515,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Commands that can be autofilled"},{"lineNumber":516,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":517,"author":{"gitID":"sherlynng"},"content":"* **Alternative 1 (current choice):** Commands that have a fixed fomat can be autofilled."},{"lineNumber":518,"author":{"gitID":"sherlynng"},"content":"** Pros: Easy to use for the user as expected behavior of the autofill feature can be predicted."},{"lineNumber":519,"author":{"gitID":"sherlynng"},"content":"** Cons: May lead to some confusion as only selected commands can be autofilled."},{"lineNumber":520,"author":{"gitID":"sherlynng"},"content":"* **Alternative 2:** All commands can be autofilled."},{"lineNumber":521,"author":{"gitID":"sherlynng"},"content":"** Pros: Will not lead to confusion as to which commands can be autofilled."},{"lineNumber":522,"author":{"gitID":"sherlynng"},"content":"** Cons: For commands that do not have a definite format (e.g. `find KEYWORD [MORE_KEYWORDS]`), it can be confusing for the user if the app"},{"lineNumber":523,"author":{"gitID":"sherlynng"},"content":"only autofills `find` and expects the user to remember the command format. Furthermore, using command alias (e.g. `f`) requires"},{"lineNumber":524,"author":{"gitID":"sherlynng"},"content":"less typing from the user."},{"lineNumber":525,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":526,"author":{"gitID":"sherlynng"},"content":"// end::autofill[]"},{"lineNumber":527,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":528,"author":{"gitID":"Aussiroth"},"content":"// tag::attributetags[]"},{"lineNumber":529,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Automatic creation of tags from person attributes"},{"lineNumber":530,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":531,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":532,"author":{"gitID":"Aussiroth"},"content":"Each of the attributes `Price`, `Subject`, `Level` and `Status` of a person each have a tag with the value added to the person."},{"lineNumber":533,"author":{"gitID":"Aussiroth"},"content":"This is done when user performs `add` or `edit` command."},{"lineNumber":534,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":535,"author":{"gitID":"Aussiroth"},"content":"The creation of these tags from attributes is facilitated by static methods from a class in logic, called `AttributeTagSetter`. This class contains methods to remove existing attribute tags from a person, which can be used when needing to edit or find non-attribute tags of the person."},{"lineNumber":536,"author":{"gitID":"Aussiroth"},"content":"Another method is to create the new attribute tags from provided input and return the new set of tags. This class is currently invoked from a static context, as its use currently is solely for managing the tags of a given `Person`."},{"lineNumber":537,"author":{"gitID":"Aussiroth"},"content":"When parsing and making an add or edit command, it makes use of these methods to obtain the correct attribute tags and sets them."},{"lineNumber":538,"author":{"gitID":"Aussiroth"},"content":"The sequence diagram below (figure 18) shows where the creation of these tags in the sequence of parsing an `Add` command. +"},{"lineNumber":539,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":540,"author":{"gitID":"Aussiroth"},"content":".Sequence diagram for creating attribute tags"},{"lineNumber":541,"author":{"gitID":"Aussiroth"},"content":"image::AttributeTagsSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":542,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":543,"author":{"gitID":"Aussiroth"},"content":"[NOTE]"},{"lineNumber":544,"author":{"gitID":"Aussiroth"},"content":"Since the `Price`, `Subject`, `Level` and `Status` attributes have been parsed and checked to conform to expected values, there is no need to reparse the values when creating them as a `Tag`. +"},{"lineNumber":545,"author":{"gitID":"Aussiroth"},"content":"The acceptable inputs for a `Tag` must necessarily allow all the acceptable inputs for `Price`, `Subject`, `Level`, `Status` and `Role` to prevent errors."},{"lineNumber":546,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":547,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d Model Implementation"},{"lineNumber":548,"author":{"gitID":"Aussiroth"},"content":"The `Tag` class can support the ability to classify which attribute the tag was created from. This is done by adding an enum `AllTagsType` to the `Tag` class."},{"lineNumber":549,"author":{"gitID":"Aussiroth"},"content":"A tag can be created without being from an attribute, with just a tag name. In this case, creating a `Tag` with no provided `AllTagsType` will initialise the `tagType` to `DEFAULT`."},{"lineNumber":550,"author":{"gitID":"Aussiroth"},"content":"Otherwise, creation of the tag will require the tagType to be passed in."},{"lineNumber":551,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":552,"author":{"gitID":"Aussiroth"},"content":"This is the current `Tag` class in UML notation"},{"lineNumber":553,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":554,"author":{"gitID":"Aussiroth"},"content":".`Tag` Class"},{"lineNumber":555,"author":{"gitID":"Aussiroth"},"content":"image::TagClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":556,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":557,"author":{"gitID":"Aussiroth"},"content":"This new attribute is used to implement the capability to standardize all tags created as a `Price` attribute to have the same color, all tags created as a `Subject` attribute to have the same color, and so on."},{"lineNumber":558,"author":{"gitID":"Aussiroth"},"content":"This has been implemented as a new overloaded `getTagColorStyleFor` method, which takes in a Tag instead of a String. Depending on the tagType value, the correct colour will be assigned to the tag."},{"lineNumber":559,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":560,"author":{"gitID":"Aussiroth"},"content":"[NOTE]"},{"lineNumber":561,"author":{"gitID":"Aussiroth"},"content":"Any tag that is not set to one of the 4 attributes will fall through to the default type, where they will have the same color. This is currently done as such to prevent accidental collisions of color with the 4 attribute tags."},{"lineNumber":562,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":563,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d Storage Implementation"},{"lineNumber":564,"author":{"gitID":"Aussiroth"},"content":"The method for storing tags has also been changed slightly. Previously, just the `tagName` needed to be stored. Now both the `tagName` and `tagType` must be stored. +"},{"lineNumber":565,"author":{"gitID":"Aussiroth"},"content":"This has been accomplished by having XML store the single field in the form \"TAGNAME,TAGTYPE\" (see figure 19). +"},{"lineNumber":566,"author":{"gitID":"Aussiroth"},"content":"The respective tagName and tagType can be obtained by splitting the read string representing the tag data from the file around the \",\" separator. Since tags can only be alphanumeric, this provides a safe character to split around."},{"lineNumber":567,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":568,"author":{"gitID":"Aussiroth"},"content":".Storage of `Tag`"},{"lineNumber":569,"author":{"gitID":"Aussiroth"},"content":"image::tagStorage.png[width\u003d\"400\"]"},{"lineNumber":570,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Making use of tags to display the information"},{"lineNumber":574,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 1 (current choice):** Create a `Tag` for each attribute we want to display"},{"lineNumber":575,"author":{"gitID":"Aussiroth"},"content":"** Pros: Reuses the code used to display tags, so that there is no need to manually code each attribute to appear similar to a tag."},{"lineNumber":576,"author":{"gitID":"Aussiroth"},"content":"** Cons: Increased risk of violating Single Responsibility Principle if the `Tag` needs to change if attributes in `Person` change."},{"lineNumber":577,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":578,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 2:** Update the UI to allow the information to be displayed as needed."},{"lineNumber":579,"author":{"gitID":"Aussiroth"},"content":"** Pros: Makes the logic section more intuitive as the user enters data and that data is stored a single attribute."},{"lineNumber":580,"author":{"gitID":"Aussiroth"},"content":"** Cons: Increases repetition in the UI by having a design for each attribute, increases amount of work if the UI display is changed in the future."},{"lineNumber":581,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":582,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Method of saving tag information in the saved XML file"},{"lineNumber":583,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":584,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 1 (current choice):** Keep the `XmlAdaptedTag` stored in a single XML field."},{"lineNumber":585,"author":{"gitID":"Aussiroth"},"content":"** Pros: There is no need to change the format of the XML file."},{"lineNumber":586,"author":{"gitID":"Aussiroth"},"content":"** Cons: Need to ensure that the `tagName` and `tagType` can be clearly split when saved to the XML file, and retrieved back."},{"lineNumber":587,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 2:** Change the format of `XmlAdaptedTag`"},{"lineNumber":588,"author":{"gitID":"Aussiroth"},"content":"** Pros: Easier for advanced users to edit without causing an error, easy to retrieve values from file."},{"lineNumber":589,"author":{"gitID":"Aussiroth"},"content":"** Cons: Risks causing issues with how `Tag` is saved as part of `XmlAdaptedPerson` and by itself as `XmlAdaptedTag`"},{"lineNumber":590,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":591,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Method to represent the attribute the tag was created from"},{"lineNumber":592,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":593,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 1 (current choice):** Create a new attribute in `Tag` to represent its type."},{"lineNumber":594,"author":{"gitID":"Aussiroth"},"content":"** Pros: Since the type belongs to and describes a `Tag`, this improves the cohesion of `Tag` and is intuitive."},{"lineNumber":595,"author":{"gitID":"Aussiroth"},"content":"** Cons: Need to make sure there is a way to represent user input tags and it is handled properly each time tag type is used."},{"lineNumber":596,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":597,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 2:** Check the value in the tag against a known set of values to determine its type."},{"lineNumber":598,"author":{"gitID":"Aussiroth"},"content":"** Pros: Keeps the `Tag` class a simple as possible."},{"lineNumber":599,"author":{"gitID":"Aussiroth"},"content":"** Cons: Difficult to maintain, must ensure that there are no values that can possibly be in more than 1 person attribute."},{"lineNumber":600,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":601,"author":{"gitID":"Aussiroth"},"content":"// end::attributetags[]"},{"lineNumber":602,"author":{"gitID":"alexawangzi"},"content":"// tag::fillingshortcut[]"},{"lineNumber":603,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Shortcuts for the user in filling fields"},{"lineNumber":604,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":606,"author":{"gitID":"alexawangzi"},"content":"Due to the nature of the application, the user will input certain information repetitively."},{"lineNumber":607,"author":{"gitID":"alexawangzi"},"content":"For example, `Role` can only be one of `Student` or `Tutor`."},{"lineNumber":608,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":609,"author":{"gitID":"Aussiroth"},"content":"Thus, we have created shortcuts to improve efficiency in filling the fields."},{"lineNumber":610,"author":{"gitID":"alexawangzi"},"content":"We currently support shortcuts for `Subject`, `Level`, and `Role`."},{"lineNumber":611,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":612,"author":{"gitID":"sherlynng"},"content":"[width\u003d\"59%\",cols\u003d\"\u003c30%,\u003c35%,\u003c35%\",options\u003d\"header\",]"},{"lineNumber":613,"author":{"gitID":"sherlynng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":614,"author":{"gitID":"alexawangzi"},"content":"|Applicable field |Shortcut |Equivalence in full"},{"lineNumber":615,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/chem`| `sub/chemistry`"},{"lineNumber":616,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/phy`| `sub/physics`"},{"lineNumber":617,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/chi`| `sub/chinese`"},{"lineNumber":618,"author":{"gitID":"alexawangzi"},"content":"|subject | `sub/eng`| `sub/english`"},{"lineNumber":619,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/us`| `lvl/upper sec`"},{"lineNumber":620,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/ls`| `lvl/lower sec`"},{"lineNumber":621,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/up`| `lvl/upper pri`"},{"lineNumber":622,"author":{"gitID":"alexawangzi"},"content":"|level | `lvl/lp`| `lvl/lower pri`"},{"lineNumber":623,"author":{"gitID":"alexawangzi"},"content":"|role | `r/t`| `r/tutor`"},{"lineNumber":624,"author":{"gitID":"alexawangzi"},"content":"|role | `r/s`| `r/student`"},{"lineNumber":625,"author":{"gitID":"alexawangzi"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":626,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":627,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Model Implementation"},{"lineNumber":628,"author":{"gitID":"alexawangzi"},"content":"The shortcut is first validated, then the field information is converted to its full form."},{"lineNumber":629,"author":{"gitID":"alexawangzi"},"content":"Below is the function that performs conversion in the Role class. Other classes follow similar implementation."},{"lineNumber":630,"author":{"gitID":"alexawangzi"},"content":"[source,java]"},{"lineNumber":631,"author":{"gitID":"alexawangzi"},"content":"----"},{"lineNumber":632,"author":{"gitID":"alexawangzi"},"content":" public String convertToFullRole(String original) {"},{"lineNumber":633,"author":{"gitID":"alexawangzi"},"content":"      String cur \u003d original.toLowerCase();"},{"lineNumber":634,"author":{"gitID":"alexawangzi"},"content":"       if (cur \u003d\u003d null) {"},{"lineNumber":635,"author":{"gitID":"alexawangzi"},"content":"           return \"\";"},{"lineNumber":636,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"s\")) {"},{"lineNumber":637,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"Student\";"},{"lineNumber":638,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"t\")) {"},{"lineNumber":639,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"Tutor\";"},{"lineNumber":640,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":641,"author":{"gitID":"alexawangzi"},"content":"       return cur;"},{"lineNumber":642,"author":{"gitID":"alexawangzi"},"content":" }"},{"lineNumber":643,"author":{"gitID":"alexawangzi"},"content":"----"},{"lineNumber":644,"author":{"gitID":"alexawangzi"},"content":"// end::fillingshortcut[]"},{"lineNumber":645,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":646,"author":{"gitID":"alexawangzi"},"content":"// tag::caseinsensitiveinput[]"},{"lineNumber":647,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Case-insensitive input"},{"lineNumber":648,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":650,"author":{"gitID":"alexawangzi"},"content":"We made input of fields case-insensitive."},{"lineNumber":651,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":652,"author":{"gitID":"Aussiroth"},"content":"After parsing and validation, the field entered is converted to \u003c\u003cproper-case, proper case\u003e\u003e internally, so tags generated from the field information will be standardized and more readable for the user."},{"lineNumber":653,"author":{"gitID":"alexawangzi"},"content":"The exceptions are `Price` and `Phone` as they consist only of numbers and require no case conversion."},{"lineNumber":654,"author":{"gitID":"alexawangzi"},"content":"`Email` and `Name` are kept in the same case in which they were entered."},{"lineNumber":655,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":656,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d Model Implementation"},{"lineNumber":657,"author":{"gitID":"alexawangzi"},"content":"We utilise the `ProperCaseConverter` object to convert all parsed and valid input into proper case."},{"lineNumber":658,"author":{"gitID":"alexawangzi"},"content":"The sequence diagram below shows how this is achieved in the constructor of `Role` class."},{"lineNumber":659,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":660,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":661,"author":{"gitID":"alexawangzi"},"content":".Sequence Diagram for achieveing case insensitive input"},{"lineNumber":662,"author":{"gitID":"alexawangzi"},"content":"image::SDforCaseInsensitiveInput.png[width\u003d\"800\"]"},{"lineNumber":663,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":664,"author":{"gitID":"alexawangzi"},"content":"The other classes utilise the `ProperCaseConverter` object in a similar way."},{"lineNumber":665,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":666,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":667,"author":{"gitID":"alexawangzi"},"content":"[NOTE]"},{"lineNumber":668,"author":{"gitID":"alexawangzi"},"content":"The user can input shortcuts in case-insensitive fashion. +"},{"lineNumber":669,"author":{"gitID":"alexawangzi"},"content":"For instance, the user may input `add n/jOHN dOE p/98765432 e/johND@eXaMpLe.com a/NUS #04-02 $/50 sub/PHy lvl/uP t/T`"},{"lineNumber":670,"author":{"gitID":"-"},"content":", the stored entry will be `jOHN dOE Phone: 98765432 Email: johND@eXaMpLe.com Address: NUS #04-02 Tags: [Tutor][Upper Pri][50][Physics][Not Matched]`"},{"lineNumber":671,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":672,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":673,"author":{"gitID":"alexawangzi"},"content":"// end::caseinsensitiveinput[]"},{"lineNumber":674,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"// tag::filter[]"},{"lineNumber":676,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filter feature"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":679,"author":{"gitID":"-"},"content":"We have added the `filter` command which inherit from `Command`. The user can `filter` according to the attributes `Subject`, `Level` and `Status` of a person."},{"lineNumber":680,"author":{"gitID":"-"},"content":"However, the current implementation can only filter for 1 argument."},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the filter command works:"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"image::FilterCommandSequenceDiagramV3.png[width\u003d\"800\"]"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":687,"author":{"gitID":"-"},"content":"The user must input arguments in case full fashion and it is case insensitive."},{"lineNumber":688,"author":{"gitID":"-"},"content":"For instance, the entry `filter maTH` will work."},{"lineNumber":689,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":690,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":691,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Argument for Filter Command"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Argument to be filtered must be typed in full fashion and it is case"},{"lineNumber":695,"author":{"gitID":"-"},"content":"insensitive."},{"lineNumber":696,"author":{"gitID":"-"},"content":"** Pros: Incorrect case of the argument typed will still produce the intended result."},{"lineNumber":697,"author":{"gitID":"-"},"content":"** Cons: User have to type the complete word."},{"lineNumber":698,"author":{"gitID":"-"},"content":"* **Alternative 2:** Argument to be filtered can be incomplete and it is case insensitive."},{"lineNumber":699,"author":{"gitID":"-"},"content":"** Pros: User can type less."},{"lineNumber":700,"author":{"gitID":"-"},"content":"** Cons: Arguments such as `Not Matched` and `Matched` cannot be differentiated."},{"lineNumber":701,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"// end::filter[]"},{"lineNumber":703,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":704,"author":{"gitID":"Aussiroth"},"content":"// tag::optionaladd[]"},{"lineNumber":705,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Optional Fields for Add Command"},{"lineNumber":706,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"Aussiroth"},"content":"The `Add` command is extremely long and unwieldly if the user has to type all the information in at once. +"},{"lineNumber":709,"author":{"gitID":"Aussiroth"},"content":"To make it easier for the user to enter new people or a person they lack all the data to enter at once, the `Add` command allows the user to specify only the name command and leave out all other fields as optional."},{"lineNumber":710,"author":{"gitID":"Aussiroth"},"content":"The `AddCommandParser` now will only check that the `Name` field has been submitted by the user before proceeding to add the new entry into STUtor."},{"lineNumber":711,"author":{"gitID":"Aussiroth"},"content":"For all fields that the user did not enter a value for, an empty string `\"\"` will be assigned to that field."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Method to store unentered fields"},{"lineNumber":716,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":717,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 1 (current choice):** Store it as an empty string `\"\"`"},{"lineNumber":718,"author":{"gitID":"Aussiroth"},"content":"** Pros: Does not affect most of the other functionality as they will still successfully read an empty string and ignore it."},{"lineNumber":719,"author":{"gitID":"Aussiroth"},"content":"** Cons: Need to ensure that empty string is an accepted input when making a new attribute class. +"},{"lineNumber":720,"author":{"gitID":"Aussiroth"},"content":"User can enter prefix with only spaces as a valid input, which will be read as an unentered field, which may be unintuitive."},{"lineNumber":721,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":722,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 2:** Store it as a `null` value"},{"lineNumber":723,"author":{"gitID":"Aussiroth"},"content":"** Pros: More intuitive to store a missing value as `null`."},{"lineNumber":724,"author":{"gitID":"Aussiroth"},"content":"** Cons: When an attribute value needs to be obtained or used, must check for `null` value and handle accordingly. +"},{"lineNumber":725,"author":{"gitID":"Aussiroth"},"content":"Must create a special constructor for the attribute class to accept a `null` for its internal `String` value."},{"lineNumber":726,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":727,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Find Missing Command"},{"lineNumber":728,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":729,"author":{"gitID":"-"},"content":"The intention and design behind this command is to complement the allowing of users to leave fields for a person\u0027s values unentered."},{"lineNumber":730,"author":{"gitID":"Aussiroth"},"content":"As the design of the command, parser and sequence when a user enters a find missing command to be very similar to the filter command, the documentation"},{"lineNumber":731,"author":{"gitID":"Aussiroth"},"content":"here will focus more on the design considerations and rationale instead of repeating sequence diagrams that are almost the same as given previously. +"},{"lineNumber":732,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":733,"author":{"gitID":"Aussiroth"},"content":"Currently, the command makes use of a new predicate, `FindMissingPredicate`, to perform the check. +"},{"lineNumber":734,"author":{"gitID":"Aussiroth"},"content":"The implementation of the OR search in the `FindMissingPredicate` is as follows: +"},{"lineNumber":735,"author":{"gitID":"Aussiroth"},"content":"For each entered field by the user, if that field is unentered by the user, then the predicate will immediately return `true` as the person fits the criteria."},{"lineNumber":736,"author":{"gitID":"Aussiroth"},"content":"If at the end of checking all values at the list, then the person has all fields specified by the user filled. Therefore, the predicate will return `false` in this case. +"},{"lineNumber":737,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":738,"author":{"gitID":"Aussiroth"},"content":"Rationale for having a new command and predicate is that reusing the `Filter` command or predicate would violate Single Responsibility Principle and the idea of Separation of Concerns."},{"lineNumber":739,"author":{"gitID":"Aussiroth"},"content":"The `Filter` command and classes associated closely to it should have the single concern of listing people according to a search term. +"},{"lineNumber":740,"author":{"gitID":"Aussiroth"},"content":"Therefore, it is better design to create a new command for this feature."},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Design of predicate used"},{"lineNumber":745,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 1 (current choice):** One single predicate, containing a `List` of entered user arguments."},{"lineNumber":746,"author":{"gitID":"Aussiroth"},"content":"** Pros: Ensures the predicate used in the `FindMissingCommand` remains of type `FindMissingPredicate`. Easy to test and inspect manually and to update the command predicate if needed."},{"lineNumber":747,"author":{"gitID":"Aussiroth"},"content":"** Cons: Increased complexity of ensuring the predicate test will correctly give a true or false value."},{"lineNumber":748,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":749,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 2:** Create one predicate for each user argument, then make use of `Predicate` method to perform a logical OR."},{"lineNumber":750,"author":{"gitID":"Aussiroth"},"content":"** Pros: Predicate simply needs to check for the field that was given as its keyword."},{"lineNumber":751,"author":{"gitID":"Aussiroth"},"content":"** Cons: Due to the `Predicate.or` method being provided by Java, it is difficult to debug and ensure an intended `.equals` check is performed."},{"lineNumber":752,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":753,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Method of taking in user input"},{"lineNumber":754,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 1 (current choice):** Have user arguments be combined in an OR manner."},{"lineNumber":755,"author":{"gitID":"Aussiroth"},"content":"** Pros: Makes it easier for the user to find a person they may not be too sure which field was left empty for, since they can specify multiple ones to search. +"},{"lineNumber":756,"author":{"gitID":"Aussiroth"},"content":"Current option used since it fits best with the user need of simply finding those with missing fields to refresh their memory on which people they need to fill out the attributes for."},{"lineNumber":757,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":758,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 2:** Have user arguments be combined in an AND manner."},{"lineNumber":759,"author":{"gitID":"Aussiroth"},"content":"** Pros: Allows the user to narrow down a search, especially if the size of the stored contacts is large."},{"lineNumber":760,"author":{"gitID":"Aussiroth"},"content":"** Cons: Might be too specific for the user, if they forget exactly which fields were left empty they will not be able to find the user. +"},{"lineNumber":761,"author":{"gitID":"Aussiroth"},"content":"This is the opposite of the OR choice, therefore the implementation depends on the user need."},{"lineNumber":762,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":763,"author":{"gitID":"Aussiroth"},"content":"* **Alternative 3:** Allow user to enter only 1 argument"},{"lineNumber":764,"author":{"gitID":"Aussiroth"},"content":"** Pros: Simplifies the command significantly with only 1 field to search for."},{"lineNumber":765,"author":{"gitID":"Aussiroth"},"content":"** Cons: Artificially limits the command heavily for users, where those who want to search for multiple missing fields will not be able to."},{"lineNumber":766,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":767,"author":{"gitID":"Aussiroth"},"content":"// end::optionaladd[]"},{"lineNumber":768,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":769,"author":{"gitID":"sherlynng"},"content":"// tag::review[]"},{"lineNumber":770,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Review Feature"},{"lineNumber":771,"author":{"gitID":"sherlynng"},"content":"As a tuition coordinator may receive feedback from students or tutors regarding their lessons, this feature helps the tuition coordinator"},{"lineNumber":772,"author":{"gitID":"sherlynng"},"content":"to manage these information easily. Review feature in STUtor includes both adding a remark and rating for a student or tutor."},{"lineNumber":773,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":774,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Remark Command"},{"lineNumber":775,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":776,"author":{"gitID":"sherlynng"},"content":"There are two ways users can interact with the Remark Command:"},{"lineNumber":777,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":778,"author":{"gitID":"sherlynng"},"content":". Create a new remark"},{"lineNumber":779,"author":{"gitID":"sherlynng"},"content":". Edit a current remark"},{"lineNumber":780,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":781,"author":{"gitID":"sherlynng"},"content":"[NOTE]"},{"lineNumber":782,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":783,"author":{"gitID":"sherlynng"},"content":"By default, when a person is added into STUtor, we create an empty remark (i.e. empty string) as usually at the start, there will"},{"lineNumber":784,"author":{"gitID":"sherlynng"},"content":"be no available feedback for a particular student or tutor yet."},{"lineNumber":785,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":786,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":787,"author":{"gitID":"sherlynng"},"content":"`RemarkCommandParser` is implemented such that when creating a new remark, there is no restriction to the content of a"},{"lineNumber":788,"author":{"gitID":"sherlynng"},"content":"remark. Any input indicated after the prefix `r/` will be taken to be the new remark created for the person indicated at"},{"lineNumber":789,"author":{"gitID":"sherlynng"},"content":"the specified `INDEX`. If there is no remark indicated after `r/`, it is assumed that the user wants to remove the current remark."},{"lineNumber":790,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":791,"author":{"gitID":"sherlynng"},"content":"For editing a remark, prefix `r/` is not used to differentiate having the word \u0027edit\u0027 in the remark or executing edit remark command"},{"lineNumber":792,"author":{"gitID":"sherlynng"},"content":"by getting the preamble in `RemarkCommandParser`. If it is an edit remark command, overloaded constructor for `RemarkCommand`"},{"lineNumber":793,"author":{"gitID":"sherlynng"},"content":"with extra `isEditRemark` parameter is used instead of the constructor used when creating a new remark (without the extra parameter)."},{"lineNumber":794,"author":{"gitID":"sherlynng"},"content":"As editing a remark requires making changes to the command box, `EditRemarkEvent` is used to signal `CommandBox` to make the"},{"lineNumber":795,"author":{"gitID":"sherlynng"},"content":"appropriate modifications."},{"lineNumber":796,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":797,"author":{"gitID":"sherlynng"},"content":"The following sequence diagrams shows how the remark operation works:"},{"lineNumber":798,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":799,"author":{"gitID":"sherlynng"},"content":"image::RemarkCommandSequenceDiagram.png[width\u003d\"370\"]"},{"lineNumber":800,"author":{"gitID":"sherlynng"},"content":".Sequence Diagram for `remark`"},{"lineNumber":801,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":802,"author":{"gitID":"sherlynng"},"content":"image::RemarkCommandSequenceDiagram1.png[width\u003d\"370\"]"},{"lineNumber":803,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":806,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Constructor for Remark Command"},{"lineNumber":807,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":808,"author":{"gitID":"sherlynng"},"content":"* **Alternative 1 (current choice):** Overloading constructor with extra parameter `isEditRemark`"},{"lineNumber":809,"author":{"gitID":"sherlynng"},"content":"** Pros: Allows forward/backward compatibility such that methods that used the original constructor with two parameters can still"},{"lineNumber":810,"author":{"gitID":"sherlynng"},"content":"be used since create remark command is implemented before edit remark."},{"lineNumber":811,"author":{"gitID":"sherlynng"},"content":"** Cons: May not be easy for new developers to understand at first glance when to use which constructor."},{"lineNumber":812,"author":{"gitID":"sherlynng"},"content":"* **Alternative 2:** Modify current constructor to take in new parameter."},{"lineNumber":813,"author":{"gitID":"sherlynng"},"content":"** Pros: Easy for new developers to understand at first glance as there is only one constructor."},{"lineNumber":814,"author":{"gitID":"sherlynng"},"content":"** Cons: May cause some methods and tests that uses the old constructor to break."},{"lineNumber":815,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":816,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d Rate Command"},{"lineNumber":817,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":818,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"Rating is from 0.0 (low rating) to 5.0 (high rating)."},{"lineNumber":820,"author":{"gitID":"sherlynng"},"content":"Regex is used to limit user input to a maximum of 1 decimal place and any number below 0.0 or above 5.0 is rejected."},{"lineNumber":821,"author":{"gitID":"sherlynng"},"content":"Sum of all ratings is stored as a `double` inside `Rate` class and the displayed value is calculated by taking the sum"},{"lineNumber":822,"author":{"gitID":"sherlynng"},"content":"and divide it by the number of people who rated the person."},{"lineNumber":823,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":824,"author":{"gitID":"sherlynng"},"content":"When a person is first added to STUtor, both total rate `value` and `count` is initialized to 0."},{"lineNumber":825,"author":{"gitID":"-"},"content":"Since the person has yet to be rated, rating will be displayed as `-` in the `DetailsPanel`."},{"lineNumber":826,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":827,"author":{"gitID":"sherlynng"},"content":"We have decided to allow two types of ratings in STUtor:"},{"lineNumber":828,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"* Cumulative rating"},{"lineNumber":830,"author":{"gitID":"-"},"content":"* Absolute rating"},{"lineNumber":831,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":832,"author":{"gitID":"sherlynng"},"content":"Default will be cumulative rating as it is more natural and useful to combine all ratings given to a specific person to gauge his/her"},{"lineNumber":833,"author":{"gitID":"sherlynng"},"content":"abilities. In STUtor, `value` in `Rate` class stores the total sum of all ratings given to the person."},{"lineNumber":834,"author":{"gitID":"sherlynng"},"content":"To display the cumulated rating, `DetailsPanel` calls `getDisplayedValue` method in `Rate` class and"},{"lineNumber":835,"author":{"gitID":"sherlynng"},"content":"cumulated rating is calculated using the total `value` and divide it by `count`."},{"lineNumber":836,"author":{"gitID":"-"},"content":"Every time a new rate is added, `count` increases as well."},{"lineNumber":837,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":838,"author":{"gitID":"sherlynng"},"content":"Absolute rating is also implemented for users that wants to clear all old data or wants to shortlist/blacklist a student or tutor."},{"lineNumber":839,"author":{"gitID":"sherlynng"},"content":"`checkRateIsAbsolute` method in `ParserUtil` class is used to find out if the user requires an absolute rating by checking the last character"},{"lineNumber":840,"author":{"gitID":"sherlynng"},"content":"in the user input. When setting an absolute rating, the app resets `count` back to 1 and rate `value` is set to the value indicated by the user."},{"lineNumber":841,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":842,"author":{"gitID":"sherlynng"},"content":"The following sequence diagrams shows how the rate operation works:"},{"lineNumber":843,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":844,"author":{"gitID":"sherlynng"},"content":"image::RateCommandSequenceDiagram.png[width\u003d\"370\"]"},{"lineNumber":845,"author":{"gitID":"sherlynng"},"content":".Sequence Diagram for `rate`"},{"lineNumber":846,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":847,"author":{"gitID":"sherlynng"},"content":"image::RateCommandSequenceDiagram1.png[width\u003d\"370\"]"},{"lineNumber":848,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":850,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Indication for Absolute Rating"},{"lineNumber":851,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":852,"author":{"gitID":"sherlynng"},"content":"* **Alternative 1 (current choice):** Indicate using keyboard input `-`"},{"lineNumber":853,"author":{"gitID":"sherlynng"},"content":"** Pros: Easy and quick to access `-`."},{"lineNumber":854,"author":{"gitID":"sherlynng"},"content":"** Cons: Not intuitive for new users that absolute rating is represented by `-`."},{"lineNumber":855,"author":{"gitID":"sherlynng"},"content":"* **Alternative 2:** Indicate using different prefix for absolute and cumulative rating"},{"lineNumber":856,"author":{"gitID":"sherlynng"},"content":"** Pros: More intuitive for users to handle the different types of rating."},{"lineNumber":857,"author":{"gitID":"sherlynng"},"content":"** Cons: Implementation requires more complex handling (e.g. prefix can be omitted, presence of both prefixes)."},{"lineNumber":858,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":859,"author":{"gitID":"sherlynng"},"content":"// end::review[]"},{"lineNumber":860,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"// tag::viewstats[]"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d View Stats Command"},{"lineNumber":864,"author":{"gitID":"-"},"content":"As a tutor coordinator, it is important to have data of the people in the app at your fingertip."},{"lineNumber":865,"author":{"gitID":"-"},"content":"This can be achieved by the `viewStats` command as consolidate statistical data regarding the people in the app."},{"lineNumber":866,"author":{"gitID":"-"},"content":"With these data, user will be able to foresee issues such as insufficient tutor for a particular subject with ease."},{"lineNumber":867,"author":{"gitID":"-"},"content":"Without this command, user will have to do manual consolidation which is inefficient. +"},{"lineNumber":868,"author":{"gitID":"-"},"content":"Currently, the statistical data are presented in the form of pie chart which improves readability. A snapshot showing"},{"lineNumber":869,"author":{"gitID":"-"},"content":"the role distribution between students and tutors is shown below."},{"lineNumber":870,"author":{"gitID":"-"},"content":""},{"lineNumber":871,"author":{"gitID":"-"},"content":".Snapshot of `viewStats`"},{"lineNumber":872,"author":{"gitID":"-"},"content":"image::CompleteChartSnap.png[width\u003d\"500\"]"},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"Whenever `viewStats` command is executed, a `ShowChartEvent` will be generated and posted to the `EventCenter`."},{"lineNumber":877,"author":{"gitID":"-"},"content":"Subsequently, the `handleShowChartEvent` from `ChartPanel` will be notified as it is subscribed to the `EventCenter`."},{"lineNumber":878,"author":{"gitID":"-"},"content":"`ChartPanel` will then generate the graph from the `ObservableList` and it will be displayed on the UI."},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":881,"author":{"gitID":"-"},"content":"Whenever any command which alters the information of people in the app is executed, execute the `viewStats` command to get the latest update."},{"lineNumber":882,"author":{"gitID":"-"},"content":"Why does this work? Executing the `viewStats` command will generate new graphs obtained from the updated ObservableList."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Displaying of statistical data"},{"lineNumber":887,"author":{"gitID":"-"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Replace the details in details panel with graph."},{"lineNumber":889,"author":{"gitID":"-"},"content":"** Pros: Do not have to deviate from the use of command line input."},{"lineNumber":890,"author":{"gitID":"-"},"content":"** Cons: Cannot view person detail and statistical data simultaneously."},{"lineNumber":891,"author":{"gitID":"-"},"content":"* **Alternative 2:** Open a new window to show graph."},{"lineNumber":892,"author":{"gitID":"-"},"content":"** Pros: Can use the app and view the statistical data simultaneously."},{"lineNumber":893,"author":{"gitID":"-"},"content":"** Cons: Create inconvenience as user need to take additional steps to close the window."},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Displaying subjects data"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Represent subjects taught by tutor and subjects student wants to learn in bar chart."},{"lineNumber":898,"author":{"gitID":"-"},"content":"** Pros: A subject with 0 tutor teaching or 0 student wanting to learn is well represented."},{"lineNumber":899,"author":{"gitID":"-"},"content":"** Cons: If the difference between 2 subjects is too large, it might be hard to read the number from y-axis."},{"lineNumber":900,"author":{"gitID":"-"},"content":"* **Alternative 2:** Represent subjects taught by tutor and subjects student wants to learn in pie chart."},{"lineNumber":901,"author":{"gitID":"-"},"content":"** Pros: Even if the difference between 2 subject is large, data will still be easy to read."},{"lineNumber":902,"author":{"gitID":"-"},"content":"** Cons: When there are multiple subjects with 0 tutor teaching or 0 student wanting to learn, the label of the subjects might overlap and it is hard to resolve."},{"lineNumber":903,"author":{"gitID":"-"},"content":"// end::viewstats[]"},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"alexawangzi"},"content":"// tag::matchunmatch[]"},{"lineNumber":906,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Match Command \u0026 Unmatch Command"},{"lineNumber":907,"author":{"gitID":"alexawangzi"},"content":"A tuition coordinator needs to record which students are receiving tuition from which tutors."},{"lineNumber":908,"author":{"gitID":"alexawangzi"},"content":"Intuitively, the `match` command allows the user to pair a student with a tutor,"},{"lineNumber":909,"author":{"gitID":"alexawangzi"},"content":"while the `unmatch` command removes the pair. +"},{"lineNumber":910,"author":{"gitID":"alexawangzi"},"content":"The matched pairs will be saved to `UniquePairList` in model,"},{"lineNumber":911,"author":{"gitID":"alexawangzi"},"content":"stored in STUtor.xml as a `XmlAdaptedPair`, and displayed on the Pair List panel (the leftmost vertical panel) for user to see."},{"lineNumber":912,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":913,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":914,"author":{"gitID":"alexawangzi"},"content":"A matched pair is represented by a `Pair.java` object."},{"lineNumber":915,"author":{"gitID":"alexawangzi"},"content":"We use a `PairHash.java` class to help with creating, deleting and identifying a pair,"},{"lineNumber":916,"author":{"gitID":"alexawangzi"},"content":"all of which are essential for the `match` and `unmatch` commands to work properly."},{"lineNumber":917,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":918,"author":{"gitID":"alexawangzi"},"content":".Class diagram of Pair and PairHash class."},{"lineNumber":919,"author":{"gitID":"alexawangzi"},"content":"image::PairPairHashClassDiagram.png[width\u003d\"700\"]"},{"lineNumber":920,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":921,"author":{"gitID":"alexawangzi"},"content":"The `PairHash` is derived using Java\u0027s `Objects.hash()` method."},{"lineNumber":922,"author":{"gitID":"alexawangzi"},"content":"Among the parameters, student.toString() and tutor.toString() are used instead of the actual"},{"lineNumber":923,"author":{"gitID":"alexawangzi"},"content":"`Student` or `Tutor` objects. The rational for this choice will become clearer later. +"},{"lineNumber":924,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":925,"author":{"gitID":"alexawangzi"},"content":".Diagram showing associations between Person, Pair and PairHash class."},{"lineNumber":926,"author":{"gitID":"alexawangzi"},"content":"image::PairClassDiagram.png[width\u003d\"700\"]"},{"lineNumber":927,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":928,"author":{"gitID":"alexawangzi"},"content":"As seen from the above diagram, a person (`Student` or `Tutor`) can have any number of unique `PairHash`, that is,"},{"lineNumber":929,"author":{"gitID":"alexawangzi"},"content":"*a student can be paired to multiple tutors and vice versa.* +"},{"lineNumber":930,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":931,"author":{"gitID":"alexawangzi"},"content":"The current implementation of `match` and `unmatch` relies on the one-to-one association between `Pair` and `PairHash`."},{"lineNumber":932,"author":{"gitID":"alexawangzi"},"content":"`PairHash` is used to facilitate matching and unmatching, as well as updating the status of a person. +"},{"lineNumber":933,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":934,"author":{"gitID":"alexawangzi"},"content":"`PairHash` objects associated with a particular `Person` object is stored inside that `Person` as a list."},{"lineNumber":935,"author":{"gitID":"alexawangzi"},"content":"When a `Pair` is created through the `match` command, a `PairHash` is generated and automatically stored in the"},{"lineNumber":936,"author":{"gitID":"alexawangzi"},"content":"`Pair` itself, as well as in the `Student` and `Tutor` objects involved (see below)."},{"lineNumber":937,"author":{"gitID":"alexawangzi"},"content":"Similarly, when a `Pair` is removed through the `unmatch` command, its `PairHash` is extracted"},{"lineNumber":938,"author":{"gitID":"alexawangzi"},"content":"and used to retrieve the `Student` and `Tutor` marked by it. This `PairHash` is then deleted from the persons."},{"lineNumber":939,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":940,"author":{"gitID":"alexawangzi"},"content":".Activity diagram for Match Command"},{"lineNumber":941,"author":{"gitID":"alexawangzi"},"content":"image::MatchActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":942,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":943,"author":{"gitID":"alexawangzi"},"content":"Now the rational for using toString() instead of the `Person` object itself is clear:"},{"lineNumber":944,"author":{"gitID":"alexawangzi"},"content":"since the `Person` object stores a list of pairHashes, direct hashing with the person object will give different hashes but"},{"lineNumber":945,"author":{"gitID":"alexawangzi"},"content":"essentially adding duplicates to the `UniquePairList` in model."},{"lineNumber":946,"author":{"gitID":"alexawangzi"},"content":"The toString() method only return fields that are not related to matching, therefore"},{"lineNumber":947,"author":{"gitID":"alexawangzi"},"content":"prevents duplicates from being saved to the database."},{"lineNumber":948,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":949,"author":{"gitID":"alexawangzi"},"content":"[NOTE]"},{"lineNumber":950,"author":{"gitID":"alexawangzi"},"content":"Whenever a `PairHash` is add to/ removed from the list, a check is done to makes sure the status"},{"lineNumber":951,"author":{"gitID":"alexawangzi"},"content":"of the person remains correct. If the list is empty, that `Person` \u0027s status will be `Not Matched`, else it will be `Matched`."},{"lineNumber":952,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Acceptance of Many-to-Many matches"},{"lineNumber":956,"author":{"gitID":"alexawangzi"},"content":"* **Alternative 1 (current choice):** Allow a student to be paired to multiple tutors and vice versa."},{"lineNumber":957,"author":{"gitID":"alexawangzi"},"content":"** Pros: Realistic as as one student may take tuition for several subjects, and a tutor is likely to take a few students."},{"lineNumber":958,"author":{"gitID":"alexawangzi"},"content":"** Cons: Requires the `Person` class to store multiple `PairHash` instead of one."},{"lineNumber":959,"author":{"gitID":"alexawangzi"},"content":"Updating of status requires extra checkings to ensure correctness."},{"lineNumber":960,"author":{"gitID":"alexawangzi"},"content":"* **Alternative 2:** Only allow one-to-one matches."},{"lineNumber":961,"author":{"gitID":"alexawangzi"},"content":"** Pros: The `Person` class only need to store one `PairHash`."},{"lineNumber":962,"author":{"gitID":"alexawangzi"},"content":"** Cons: Not realistic."},{"lineNumber":963,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":964,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Creating, deleting and identifying a pair"},{"lineNumber":965,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":966,"author":{"gitID":"alexawangzi"},"content":"* **Alternative 1 (current choice):** Use `PairHash` to to identify the `Pair` itself, and mark `Person` in the Pair."},{"lineNumber":967,"author":{"gitID":"alexawangzi"},"content":"Saving the `PairHash` to the `Person` when `Pair` is created, delete the same `PairHash` from `Person`"},{"lineNumber":968,"author":{"gitID":"alexawangzi"},"content":"when this `Pair` is unmatched."},{"lineNumber":969,"author":{"gitID":"alexawangzi"},"content":"** Pros: Reduce coupling between `Pair` and `Person`."},{"lineNumber":970,"author":{"gitID":"alexawangzi"},"content":"** Cons: `PairHash` has a very slight chance of having collisions, which might result in errors in data."},{"lineNumber":971,"author":{"gitID":"alexawangzi"},"content":"* **Alternative 2:** Store the `Pair` directly in `Person`."},{"lineNumber":972,"author":{"gitID":"alexawangzi"},"content":"** Pros: Easy to code."},{"lineNumber":973,"author":{"gitID":"alexawangzi"},"content":"** Cons: High degree of coupling between `Pair` and `Person`."},{"lineNumber":974,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":975,"author":{"gitID":"alexawangzi"},"content":"// end::matchunmatch[]"},{"lineNumber":976,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":977,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":978,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":979,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":985,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":990,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/details/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1003,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1004,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1005,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1014,"author":{"gitID":"-"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1043,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1044,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1045,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1082,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1083,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1084,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"* Tuition coordinator"},{"lineNumber":1099,"author":{"gitID":"Aussiroth"},"content":"* Has to manage a significant number of tutors and students"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"* Prefers desktop application over other types"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"* Prefers typing over mouse input and can type fast"},{"lineNumber":1102,"author":{"gitID":"Aussiroth"},"content":"* Is reasonably comfortable using command line input (CLI) applications"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"*Value proposition*: Efficient management of students and tutors information and matching them."},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"sherlynng"},"content":"*Feature Contributions*:"},{"lineNumber":1107,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1108,"author":{"gitID":"sherlynng"},"content":"[width\u003d\"59%\",cols\u003d\"\u003c30%,\u003c35%,\u003c35%\",options\u003d\"header\",]"},{"lineNumber":1109,"author":{"gitID":"sherlynng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1110,"author":{"gitID":"sherlynng"},"content":"|Name |Minor Enhancement |Major Enhancement"},{"lineNumber":1111,"author":{"gitID":"Aussiroth"},"content":"|Danny NG Ming Xuan |Create new command to filter the person list with respect to the various attributes in"},{"lineNumber":1112,"author":{"gitID":"Aussiroth"},"content":"Person card. This will enable the user to view persons with attributes he/she is interested in.|Create `viewStats` command."},{"lineNumber":1113,"author":{"gitID":"sherlynng"},"content":"This allows the user to view information such as number of students/tutors/matched and more in the form of graph."},{"lineNumber":1114,"author":{"gitID":"sherlynng"},"content":"|NG Xin Ler |Create autofill for commands that are longer or have fixed input. This helps to reduce the amount of time"},{"lineNumber":1115,"author":{"gitID":"sherlynng"},"content":"the user has to type in a command.|"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"Allow writing of review (including `remark` and `rating` for a person. This allows the user to evaluate the performance"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"of a person, so that the user can refer to them for future matching."},{"lineNumber":1118,"author":{"gitID":"-"},"content":"|WANG Zi |Create shortcut for the user in filling subject, level and role. For instance, `sub/eng` and"},{"lineNumber":1119,"author":{"gitID":"sherlynng"},"content":"`sub/english` both result in adding the subject English. After that, accommodate case-insensitive input, and"},{"lineNumber":1120,"author":{"gitID":"sherlynng"},"content":"standardize display to follow \u003c\u003cproper-case, proper case\u003e\u003e."},{"lineNumber":1121,"author":{"gitID":"-"},"content":"|Create `match` and `unmatch` command. This allows the user to match/unmatch a pair of Tutor and Student."},{"lineNumber":1122,"author":{"gitID":"sherlynng"},"content":"|YAN Hong Yao Alvin | Automatically generate tags for some attribute fields. This makes them easy to view by the user |"},{"lineNumber":1123,"author":{"gitID":"sherlynng"},"content":"Allow all non-name fields to be optional. This makes input easier for the user as the add command is extremely long otherwise."},{"lineNumber":1124,"author":{"gitID":"sherlynng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1125,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1126,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c36%,\u003c40%\",options\u003d\"header\",]"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1135,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new tutor/student |"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a tutor/student |remove entries that I no longer need"},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"|`* * *` |user |find a tutor/student by name |locate details of persons without having to go through the entire list"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":"|`* * *` |user |edit the \u003c\u003cfields, fields\u003e\u003e of a tutor/student |change fields without re-adding the entry"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"|`* * *` |user |list all tutors or students separately |view a cleaner list without mixing tutors and students"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"|`* * *` |user |see a tutor/student’s \u003c\u003cstatus, status\u003e\u003e |know who is not matched"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"|`* * *` |user |mark a tutor/student as \u003c\u003cmatched, matched\u003e\u003e with some other tutor/student |"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"|`* *` |analytical user |view statistics on tutor/student numbers and statuses |have a clearer picture of the status of tutor/student"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":"|`* *` |user |protect the app with a password |ensure confidentiality of the contacts"},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"Aussiroth"},"content":"|`* *` |user |sort matching list by price |find the best match at the lowest price"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"|`* *` |user |rate a tutor according to student’s feedback |assess tutors’ capability"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"|`* *` |user |store a list of all tutor/student that have been matched |have a cleaner list consisting of only unmatched tutor/student and also able to refer to past records if required"},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"|`* *` |user |find all pairs of tutor/students that are \u003c\u003cmatching-in-progress, matching in progress\u003e\u003e |easily set a pair to matched or unmatched depending if they have agreed upon the tutoring"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"|`* *` |user |indicate the special request by tutor/student (e.g. prefer female tutor)|consider these factors when performing match"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"|`* *` |user |change theme of the app |personalise the app to user’s preference"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"|`* *` |forgetful user | view password hint |recall my password"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"|`* *` |user with poor eyesight |change the font and font size |easily read the output text"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"|`*` |user |add upload tutors’ qualifications via pdf file |add in data easily without typing them down individually"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"|`*` |user |view the location markers of tutor/student on a map |see the geographical concentration of tutors/students"},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"Aussiroth"},"content":"|`*` |user |automatically send an email to the matched pair of tutor and student |inform both parties efficiently"},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"|`*` |user |allow a tutor/student to have multiple subject to teach/learn |have more possibilities when matching tutors and students"},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"|`*` |user |sort the matching list by distance |pair tutor/student who lives nearer to each other"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"|`*` |user |sync database to remote centralized database |work on multiple devices without losing data"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"|`*` |user |auto-match tutor and student based on available time slots |save time in matching schedules"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"Aussiroth"},"content":"(For all use cases below, the *System* is `STUtor` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1202,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor shows a list of persons"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1204,"author":{"gitID":"Aussiroth"},"content":"4.  STUtor deletes the person"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1211,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1212,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1216,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1218,"author":{"gitID":"Aussiroth"},"content":"** 3a1. STUtor shows an error message."},{"lineNumber":1219,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1221,"author":{"gitID":"-"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit the field of a certain tutor/student"},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"1.  User requests to edit a field of a certain tutor/student"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"2.  STUtor updates the field"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1233,"author":{"gitID":"-"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"* 1a. The given tutor/student is invalid."},{"lineNumber":1236,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1238,"author":{"gitID":"Aussiroth"},"content":"** 1a1. STUtor shows an error message."},{"lineNumber":1239,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Match tutor and student [Coming in V2.0]"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"1.  User requests to show a list of all tutors/students"},{"lineNumber":1248,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor returns a list of all tutors/students"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"3.  User selects a tutor/student for matching"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"4.  STUtor returns a list of students/tutors that fulfils the field of tutor/student selected"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"5.  User creates a match with the most suitable field"},{"lineNumber":1252,"author":{"gitID":"Aussiroth"},"content":"6.  STUtor creates the match and updates the status of the matched tutor and student to ‘Matching-in-progress’"},{"lineNumber":1253,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1260,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1261,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1262,"author":{"gitID":"Aussiroth"},"content":"** 3a1. STUtor shows an error message."},{"lineNumber":1263,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1267,"author":{"gitID":"-"},"content":"* 4a. The list is empty (no tutor/student fulfills the field)"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1270,"author":{"gitID":"-"},"content":""},{"lineNumber":1271,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Confirm a match [Coming in V2.0]"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"1.  User requests for a list of pending matches"},{"lineNumber":1277,"author":{"gitID":"Aussiroth"},"content":"2.  STUtor shows a list of ‘Matching-in-progress’ entries"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"3.  User select a particular entry"},{"lineNumber":1279,"author":{"gitID":"Aussiroth"},"content":"4.  STUtor updates the status of the tutor and student"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1286,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1287,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1292,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1294,"author":{"gitID":"Aussiroth"},"content":"** 3a1. STUtor shows an error message."},{"lineNumber":1295,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1299,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1302,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1303,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1304,"author":{"gitID":"-"},"content":".  Data can be easily transferred from one computer to another."},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"sherlynng"},"content":"[[proper-case]] Proper case::"},{"lineNumber":1316,"author":{"gitID":"sherlynng"},"content":"Proper case is any text that is written with each of the first letters of every word being capitalized."},{"lineNumber":1317,"author":{"gitID":"sherlynng"},"content":"For example, \"This Is An Example Of Proper Case.\""},{"lineNumber":1318,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"[[fields]] Fields::"},{"lineNumber":1320,"author":{"gitID":"-"},"content":"Name, address, phone, email, subject, level, price and role"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"[[match]] Match::"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"A tutor and a student are paired for a subject"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"[[matched]] Matched::"},{"lineNumber":1326,"author":{"gitID":"-"},"content":"Tutor and student have confirmed the match and are ready to start lessons"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"[[matching-in-progress]] Matching in progress::"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"Waiting for tutor and student to confirm the match"},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"[[status]] Status::"},{"lineNumber":1332,"author":{"gitID":"-"},"content":"Includes not matched, matching-in-progress, matched"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":"// tag::manualtest[]"},{"lineNumber":1335,"author":{"gitID":"-"},"content":""},{"lineNumber":1336,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"The instructions given below aims to guide user on how to test the app manually."},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1342,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1349,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1350,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1351,"author":{"gitID":"-"},"content":".. If jar file does not launch as instructed in the previous step, please follow the subsequent steps: +"},{"lineNumber":1352,"author":{"gitID":"-"},"content":"... Run command prompt and navigate to the directory where the jar file is"},{"lineNumber":1353,"author":{"gitID":"-"},"content":"... Run `java -jar FILENAME.jar`. Please change FILENAME to the saved name of the jar file"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window using `exit` or click on the x on the top right corner."},{"lineNumber":1358,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Opening the help menu"},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":". Opening the help menu"},{"lineNumber":1364,"author":{"gitID":"-"},"content":""},{"lineNumber":1365,"author":{"gitID":"-"},"content":".. Prerequisites: None."},{"lineNumber":1366,"author":{"gitID":"-"},"content":".. Test case: `help` +"},{"lineNumber":1367,"author":{"gitID":"-"},"content":"   Expected: A new window is opened. User guide is shown in the new window."},{"lineNumber":1368,"author":{"gitID":"-"},"content":""},{"lineNumber":1369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":". Adding a person"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":".. Prerequisites: None."},{"lineNumber":1374,"author":{"gitID":"-"},"content":".. Test case: `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50 sub/Math lvl/Lower Sec  r/Student` +"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"   Expected: Person is added to the bottom of the  list. Details of the added person shown in the status message."},{"lineNumber":1376,"author":{"gitID":"-"},"content":".. Test case: `add` +"},{"lineNumber":1377,"author":{"gitID":"-"},"content":"   Expected: Details panel will remain unchanged. Invalid command format, add command format and an example of add shown in the status message."},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"alexawangzi"},"content":". Adding a person using case insensitive input and shortcuts"},{"lineNumber":1380,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":1381,"author":{"gitID":"alexawangzi"},"content":".. Prerequisites: None."},{"lineNumber":1382,"author":{"gitID":"alexawangzi"},"content":".. Test case: `add n/John al Doe p/98765432 e/johnd@ExaMplE.com a/311, Clementi Ave 2, #02-25 $/50 sub/chEM lvl/Ls r/S` +"},{"lineNumber":1383,"author":{"gitID":"-"},"content":"   Expected: Person is added to the bottom of the list.Details of the added person shown in the status message."},{"lineNumber":1384,"author":{"gitID":"alexawangzi"},"content":"   The person will be tagged with \"Chemistry\", \"Lower Sec\", \"Student\". His name and email will be kept in mixed case."},{"lineNumber":1385,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person"},{"lineNumber":1387,"author":{"gitID":"-"},"content":""},{"lineNumber":1388,"author":{"gitID":"-"},"content":". Selecting a person while all persons are listed"},{"lineNumber":1389,"author":{"gitID":"-"},"content":""},{"lineNumber":1390,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1391,"author":{"gitID":"-"},"content":".. Test case: `select 1` +"},{"lineNumber":1392,"author":{"gitID":"-"},"content":"   Expected: First contact is selected from the list, details of person 1 is shown in the Details Panel. Status message shows selected person: 1."},{"lineNumber":1393,"author":{"gitID":"-"},"content":".. Test case: `select 0` +"},{"lineNumber":1394,"author":{"gitID":"-"},"content":"   Expected: No person is selected, Details Panel will remain unchanged. Invalid command format shown in the status message."},{"lineNumber":1395,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `select`, `select x` (where x is larger than the list size) +"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1399,"author":{"gitID":"-"},"content":""},{"lineNumber":1400,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1401,"author":{"gitID":"-"},"content":""},{"lineNumber":1402,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1403,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1405,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1406,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1407,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"},{"lineNumber":1408,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1409,"author":{"gitID":"-"},"content":""},{"lineNumber":1410,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all data"},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"-"},"content":". Clearing all data in app"},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":".. Prerequisites: None."},{"lineNumber":1415,"author":{"gitID":"-"},"content":".. Test case: `clear` +"},{"lineNumber":1416,"author":{"gitID":"-"},"content":"   Expected: All data in app is cleared. App has been cleared shown in status message."},{"lineNumber":1417,"author":{"gitID":"-"},"content":".. Test case: `undo` +"},{"lineNumber":1418,"author":{"gitID":"-"},"content":"   Expected: All cleared data are restored. Undo success shown in status message."},{"lineNumber":1419,"author":{"gitID":"-"},"content":""},{"lineNumber":1420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filtering the list"},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":". Filtering the list by KEYWORD"},{"lineNumber":1423,"author":{"gitID":"-"},"content":""},{"lineNumber":1424,"author":{"gitID":"-"},"content":".. Prerequisites: None."},{"lineNumber":1425,"author":{"gitID":"-"},"content":".. Test case: `filter student` +"},{"lineNumber":1426,"author":{"gitID":"-"},"content":"   Expected: All persons with student tag are displayed in the list. The number of people that match the KEYWORD is shown in status message."},{"lineNumber":1427,"author":{"gitID":"-"},"content":".. Test case: `filter tutor math` +"},{"lineNumber":1428,"author":{"gitID":"-"},"content":"   Expected: No person is displayed in the list. 0 listed person shown in the status message."},{"lineNumber":1429,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `filter` +"},{"lineNumber":1430,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1431,"author":{"gitID":"-"},"content":""},{"lineNumber":1432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing the statistics"},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":". Viewing statistics"},{"lineNumber":1435,"author":{"gitID":"-"},"content":""},{"lineNumber":1436,"author":{"gitID":"-"},"content":".. Prerequisites: None."},{"lineNumber":1437,"author":{"gitID":"-"},"content":".. Test case: `viewStats` +"},{"lineNumber":1438,"author":{"gitID":"-"},"content":"   Expected: A panel opens within Details Panel. Data represented in graph should match the persons in list."},{"lineNumber":1439,"author":{"gitID":"-"},"content":".. Test case: `viewStats 123` +"},{"lineNumber":1440,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1441,"author":{"gitID":"-"},"content":".. Test case: `viewStats` followed by `add n/unknown r/tutor` and `viewStats` again +"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"   Expected: The updated pie chart should show 1 more tutor than the previous pie chart."},{"lineNumber":1443,"author":{"gitID":"-"},"content":""},{"lineNumber":1444,"author":{"gitID":"-"},"content":"// end::manualtest[]"},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"Aussiroth"},"content":"\u003d\u003d\u003d Testing optional fields"},{"lineNumber":1447,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":1448,"author":{"gitID":"Aussiroth"},"content":". Adding a person with only name"},{"lineNumber":1449,"author":{"gitID":"Aussiroth"},"content":".. Prerequisites: All people entered into STUtor have all attributes filled in."},{"lineNumber":1450,"author":{"gitID":"Aussiroth"},"content":".. Test case: `add n/Johnny Doe` +"},{"lineNumber":1451,"author":{"gitID":"Aussiroth"},"content":"   Expected: Person is added to the bottom of the  list. Details of the added person shown in the status message. Person does not have an attribute other than name, and will not have any tags shown."},{"lineNumber":1452,"author":{"gitID":"Aussiroth"},"content":".. Test case: `findmissing` +"},{"lineNumber":1453,"author":{"gitID":"Aussiroth"},"content":"   Expected: List of 1 person, containing only Johnny Doe as entered earlier. Message lists successful listing of 1 person."},{"lineNumber":1454,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1455,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Autofill a command"},{"lineNumber":1456,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":1457,"author":{"gitID":"sherlynng"},"content":". Autofills a command in the command box"},{"lineNumber":1458,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1459,"author":{"gitID":"sherlynng"},"content":".. Prerequisites: None."},{"lineNumber":1460,"author":{"gitID":"sherlynng"},"content":".. Test case: Type `add` then press the `Tab` key +"},{"lineNumber":1461,"author":{"gitID":"sherlynng"},"content":"   Expected: Add command with all fields will be displayed: `add n/ p/ e/ a/ $/ sub/ lvl/ r/`."},{"lineNumber":1462,"author":{"gitID":"sherlynng"},"content":"   Position of caret will also be shifted to the first field to be entered (i.e. after `n/`)"},{"lineNumber":1463,"author":{"gitID":"sherlynng"},"content":".. Test case: Type `add`, press the `Tab` key then the `Delete` key +"},{"lineNumber":1464,"author":{"gitID":"sherlynng"},"content":"   Expected: After pressing `Tab` key, expected output will be the same as above in part ii."},{"lineNumber":1465,"author":{"gitID":"sherlynng"},"content":"   After pressing `Delete` key, the field and corresponding prefix will be removed and the caret will shift to the"},{"lineNumber":1466,"author":{"gitID":"sherlynng"},"content":"   next field to be filled in (i.e. the command box now looks like this: `add p/ e/ a/ $/ sub/ lvl/ r/`, with the caret"},{"lineNumber":1467,"author":{"gitID":"sherlynng"},"content":"   placed after `p/`."},{"lineNumber":1468,"author":{"gitID":"sherlynng"},"content":".. Test case: Type `add`, press the `Tab` key, type `John Doe`, shift caret to after `John` and press the `Delete` key (Not Recommended) +"},{"lineNumber":1469,"author":{"gitID":"sherlynng"},"content":"   Expected: After pressing `Tab` key, expected output will be the same as above in part ii."},{"lineNumber":1470,"author":{"gitID":"sherlynng"},"content":"   By shifting the caret to the middle of a field (i.e. `n/John Doe`, with the caret positioned after `John`, input from"},{"lineNumber":1471,"author":{"gitID":"sherlynng"},"content":"   John to its prefix (i.e. `n/John` will be removed but `Doe` will still be there (i.e. the command box now looks like this:"},{"lineNumber":1472,"author":{"gitID":"sherlynng"},"content":"   `add Doe p/ e/ a/ $/ sub/ lvl/ r/`, with the caret positioned after `p/`."},{"lineNumber":1473,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1474,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Adding a remark"},{"lineNumber":1475,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1476,"author":{"gitID":"sherlynng"},"content":". Adding a remark to a specified person in STUtor"},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1479,"author":{"gitID":"sherlynng"},"content":".. Test case: `remark 1 r/Hardworking Student` +"},{"lineNumber":1480,"author":{"gitID":"sherlynng"},"content":"   Expected: Creates a remark \u0027Hardworking Student\u0027 for the 1st person in the list."},{"lineNumber":1481,"author":{"gitID":"sherlynng"},"content":".. Test case: `remark 1 edit` +"},{"lineNumber":1482,"author":{"gitID":"sherlynng"},"content":"   Expected: Edits a remark for the 1st person in the list. The person\u0027s previous remark (i.e. \u0027Hardworking Student\u0027 will be"},{"lineNumber":1483,"author":{"gitID":"sherlynng"},"content":"   displayed in the command box and the user will be able to edit the remark from there."},{"lineNumber":1484,"author":{"gitID":"sherlynng"},"content":".. Test case: `remark 1 r/` +"},{"lineNumber":1485,"author":{"gitID":"sherlynng"},"content":"   Expected: Removes the remark for the 1st person in the list."},{"lineNumber":1486,"author":{"gitID":"sherlynng"},"content":".. Test case: `remark 0 r/` +"},{"lineNumber":1487,"author":{"gitID":"sherlynng"},"content":"   Expected: No remark is added as the index specified is not within the range of persons in the list. Error details shown in the status message."},{"lineNumber":1488,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1489,"author":{"gitID":"sherlynng"},"content":"\u003d\u003d\u003d Adding a rating"},{"lineNumber":1490,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1491,"author":{"gitID":"sherlynng"},"content":". Adding a rating to a specified person in STUtor"},{"lineNumber":1492,"author":{"gitID":"-"},"content":""},{"lineNumber":1493,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1494,"author":{"gitID":"sherlynng"},"content":".. Test case: `rate 1 r/3.3` +"},{"lineNumber":1495,"author":{"gitID":"sherlynng"},"content":"   Expected: If this is the first time the first person in the list is being rated, the person will be given a rating of 3.3 and number of"},{"lineNumber":1496,"author":{"gitID":"sherlynng"},"content":"   people who rated the person will be 1. Else, all ratings for the person will be accumulated, average rating for the"},{"lineNumber":1497,"author":{"gitID":"sherlynng"},"content":"   person (to nearest 1 decimal place) will be displayed and the number of people who rated the person will increase by 1."},{"lineNumber":1498,"author":{"gitID":"sherlynng"},"content":".. Test case: `rate 1 r/4.0-` +"},{"lineNumber":1499,"author":{"gitID":"sherlynng"},"content":"   Expected: If this is the first time the person is being rated, the person will be given a rating of 4.0 and number of"},{"lineNumber":1500,"author":{"gitID":"sherlynng"},"content":"   people who rated the person will be 1. Else, this will resets the person\u0027s rating to 4.0 and the number of people who"},{"lineNumber":1501,"author":{"gitID":"sherlynng"},"content":"   rated the person to 1."},{"lineNumber":1502,"author":{"gitID":"sherlynng"},"content":".. Test case: `rate 0 r/4.0` +"},{"lineNumber":1503,"author":{"gitID":"sherlynng"},"content":"   Expected: No rating is added as the index specified is not within the range of persons in the list."},{"lineNumber":1504,"author":{"gitID":"sherlynng"},"content":"   Error details shown in the status message."},{"lineNumber":1505,"author":{"gitID":"sherlynng"},"content":".. Test case: `rate 1 r/6.0` +"},{"lineNumber":1506,"author":{"gitID":"sherlynng"},"content":"   Expected: No rating is added as the rate specified is not within range. Error details shown in the status message."},{"lineNumber":1507,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":1508,"author":{"gitID":"alexawangzi"},"content":"// tag::manualtestMatchUnmatch[]"},{"lineNumber":1509,"author":{"gitID":"alexawangzi"},"content":"\u003d\u003d\u003d Testing match and unmatch"},{"lineNumber":1510,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":1511,"author":{"gitID":"alexawangzi"},"content":". Match compatible student and tutor and then unmatch"},{"lineNumber":1512,"author":{"gitID":"alexawangzi"},"content":".. Prerequisites: clear your STUtor."},{"lineNumber":1513,"author":{"gitID":"alexawangzi"},"content":".. Test case: +"},{"lineNumber":1514,"author":{"gitID":"alexawangzi"},"content":"... `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50 sub/Math lvl/Lower Sec  r/Student` +"},{"lineNumber":1515,"author":{"gitID":"alexawangzi"},"content":"... `add n/Mary Chang p/81890003 e/marychang@example.com a/178, Rosewood Garden, #03-01 $/50 sub/Math lvl/Lower Sec  r/Tutor` +"},{"lineNumber":1516,"author":{"gitID":"alexawangzi"},"content":"... `match 1 2` +"},{"lineNumber":1517,"author":{"gitID":"alexawangzi"},"content":"  Expected: Pair is added to Pair List panel. Details of the added pair shown in the status message."},{"lineNumber":1518,"author":{"gitID":"alexawangzi"},"content":"  \"Math\", \"Lower Sec\" and \"50\" will be displayed as tags below the newly created pair."},{"lineNumber":1519,"author":{"gitID":"alexawangzi"},"content":"  The two persons have status updated to \"Matched\"."},{"lineNumber":1520,"author":{"gitID":"alexawangzi"},"content":".. Test case: +"},{"lineNumber":1521,"author":{"gitID":"alexawangzi"},"content":"   Continue form the previous test case, type the command `unmatch 1` +"},{"lineNumber":1522,"author":{"gitID":"alexawangzi"},"content":"   Expected: Pair is remove from the Pair List panel. Details of the unmatched pair shown in the status message."},{"lineNumber":1523,"author":{"gitID":"alexawangzi"},"content":"               The two persons have status updated to \"Not Matched\"."},{"lineNumber":1524,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":1525,"author":{"gitID":"alexawangzi"},"content":". Match incompatible student and tutor"},{"lineNumber":1526,"author":{"gitID":"alexawangzi"},"content":".. Prerequisites: clear your STUtor."},{"lineNumber":1527,"author":{"gitID":"alexawangzi"},"content":".. Test case: +"},{"lineNumber":1528,"author":{"gitID":"alexawangzi"},"content":"... `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50 sub/English lvl/Lower Sec  r/Student` +"},{"lineNumber":1529,"author":{"gitID":"alexawangzi"},"content":"... `add n/Mary Chang p/81890003 e/marychang@example.com a/178, Rosewood Garden, #03-01 $/50 sub/Math lvl/Lower Sec  r/Tutor` +"},{"lineNumber":1530,"author":{"gitID":"alexawangzi"},"content":"... `match 1 2` +"},{"lineNumber":1531,"author":{"gitID":"alexawangzi"},"content":"  Expected: Error mesage of \"Matching failed. Incompatible subject.\" shown in the status message."},{"lineNumber":1532,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":1533,"author":{"gitID":"alexawangzi"},"content":". Unmatch pair at invalid index"},{"lineNumber":1534,"author":{"gitID":"alexawangzi"},"content":".. Prerequisites: clear your STUtor."},{"lineNumber":1535,"author":{"gitID":"alexawangzi"},"content":".. Test case: +"},{"lineNumber":1536,"author":{"gitID":"alexawangzi"},"content":"... `unmatch 1` +"},{"lineNumber":1537,"author":{"gitID":"alexawangzi"},"content":"  Expected: Error mesage of \"The pair index provided is invalid.\" shown in the status message."},{"lineNumber":1538,"author":{"gitID":"alexawangzi"},"content":"// end::manualtestMatchUnmatch[]"}],"authorContributionMap":{"alexawangzi":175,"Aussiroth":190,"sherlynng":277,"-":896}},{"path":"src/test/java/seedu/address/ui/PairListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPairs.getTypicalPairs;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.ui.testutil.GuiTestAssertPair.assertCardDisplaysPair;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import guitests.guihandles.PairCardHandle;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import guitests.guihandles.PairListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"public class PairListPanelTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    private static final ObservableList\u003cPair\u003e TYPICAL_PAIRS \u003d"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            FXCollections.observableList(getTypicalPairs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    private PairListPanelHandle pairListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        PairListPanel pairListPanel \u003d new PairListPanel(TYPICAL_PAIRS);"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"        uiPartRule.setUiPart(pairListPanel);"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        pairListPanelHandle \u003d new PairListPanelHandle(getChildNode(pairListPanel.getRoot(),"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"                PairListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    public void display() {"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PAIRS.size(); i++) {"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"            pairListPanelHandle.navigateToCard(TYPICAL_PAIRS.get(i));"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"            Pair expectedPair \u003d TYPICAL_PAIRS.get(i);"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"            PairCardHandle actualCard \u003d pairListPanelHandle.getPairCardHandle(i);"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"            assertCardDisplaysPair(expectedPair, actualCard);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":33,"-":13}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.RemarkCommand.COMMAND_WORD;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"import seedu.address.commons.events.logic.EditRemarkEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"    //@@author sherlynng"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_addCommandPressTab_autofill() {"},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"add n/ p/ e/ a/ $/ sub/ lvl/ r/\";"},{"lineNumber":169,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":170,"author":{"gitID":"sherlynng"},"content":"        // checks for add command word"},{"lineNumber":171,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"add\");"},{"lineNumber":172,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":174,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":175,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":176,"author":{"gitID":"sherlynng"},"content":"        // checks for add command word alias"},{"lineNumber":177,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"a\");"},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":179,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":180,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":181,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":182,"author":{"gitID":"sherlynng"},"content":"        // checks if tab works correctly"},{"lineNumber":183,"author":{"gitID":"sherlynng"},"content":"        expectedOutput \u003d \"add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 $/50\""},{"lineNumber":184,"author":{"gitID":"sherlynng"},"content":"                         + \" sub/Math lvl/Lower Sec r/Student\";"},{"lineNumber":185,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d enterPersonDetails();"},{"lineNumber":186,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":187,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":189,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_addCommandPressDelete_removePreviousPrefix() {"},{"lineNumber":191,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"add p/ e/ a/ $/ sub/ lvl/ r/\";"},{"lineNumber":192,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":193,"author":{"gitID":"sherlynng"},"content":"        // checks for add command word"},{"lineNumber":194,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"add\");"},{"lineNumber":195,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":196,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.DELETE);"},{"lineNumber":197,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":198,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":199,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":200,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":202,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_selectCommandPressTab_autofill() {"},{"lineNumber":204,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"select 1\";"},{"lineNumber":205,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":206,"author":{"gitID":"sherlynng"},"content":"        // checks for select command word"},{"lineNumber":207,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"select\");"},{"lineNumber":208,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":209,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":210,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":211,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":212,"author":{"gitID":"sherlynng"},"content":"        // checks for select command word alias"},{"lineNumber":213,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"s\");"},{"lineNumber":214,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":215,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":216,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":217,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":219,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_deleteCommandPressTab_autofill() {"},{"lineNumber":221,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"delete 1\";"},{"lineNumber":222,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":223,"author":{"gitID":"sherlynng"},"content":"        // checks for delete command word"},{"lineNumber":224,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"delete\");"},{"lineNumber":225,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":226,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":227,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":228,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":229,"author":{"gitID":"sherlynng"},"content":"        // checks for delete command word alias"},{"lineNumber":230,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"d\");"},{"lineNumber":231,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":232,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":233,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":234,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":236,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_unmatchCommandPressTab_autofill() {"},{"lineNumber":238,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"unmatch 1\";"},{"lineNumber":239,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":240,"author":{"gitID":"sherlynng"},"content":"        // checks for unmatch command word"},{"lineNumber":241,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"unmatch\");"},{"lineNumber":242,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":243,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":244,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":245,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":246,"author":{"gitID":"sherlynng"},"content":"        // checks for unmatch command word alias"},{"lineNumber":247,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"um\");"},{"lineNumber":248,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":249,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":250,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":251,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":253,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_unmatchCommandChangeIndex_autofill() {"},{"lineNumber":255,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"unmatch 2\";"},{"lineNumber":256,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":257,"author":{"gitID":"sherlynng"},"content":"        // checks for unmatch command word"},{"lineNumber":258,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"unmatch\");"},{"lineNumber":259,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":260,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":261,"author":{"gitID":"sherlynng"},"content":"        // change index in unmatch command"},{"lineNumber":262,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.DIGIT2);"},{"lineNumber":263,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":264,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":265,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":266,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":268,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":269,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_matchCommandPressTab_autofill() {"},{"lineNumber":270,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"match 1 2\";"},{"lineNumber":271,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":272,"author":{"gitID":"sherlynng"},"content":"        // checks for match command word"},{"lineNumber":273,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"match\");"},{"lineNumber":274,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":275,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":276,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":277,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":278,"author":{"gitID":"sherlynng"},"content":"        // checks for match command word alias"},{"lineNumber":279,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"m\");"},{"lineNumber":280,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":281,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":282,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":283,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":285,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_matchCommandChangeIndexes_autofill() {"},{"lineNumber":287,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"match 4 5\";"},{"lineNumber":288,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":289,"author":{"gitID":"sherlynng"},"content":"        // checks for match command word"},{"lineNumber":290,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"match\");"},{"lineNumber":291,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":292,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":293,"author":{"gitID":"sherlynng"},"content":"        // change indexes in match command"},{"lineNumber":294,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.DIGIT4);"},{"lineNumber":295,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":296,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.DIGIT5);"},{"lineNumber":297,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":298,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":299,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":300,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":302,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":303,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_editCommandPressTab_autofill() {"},{"lineNumber":304,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"edit 1 n/ p/ e/ a/ $/ sub/ lvl/ r/\";"},{"lineNumber":305,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":306,"author":{"gitID":"sherlynng"},"content":"        // checks for edit command word"},{"lineNumber":307,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"edit\");"},{"lineNumber":308,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":309,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":310,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":311,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":312,"author":{"gitID":"sherlynng"},"content":"        // checks for edit command word alias"},{"lineNumber":313,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"e\");"},{"lineNumber":314,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":315,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":316,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":317,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":319,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":320,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_editCommandPressDelete_removePreviousPrefix() {"},{"lineNumber":321,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"edit 1 p/ e/ a/ $/ sub/ lvl/ r/\";"},{"lineNumber":322,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":323,"author":{"gitID":"sherlynng"},"content":"        // checks for edit command word"},{"lineNumber":324,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"edit\");"},{"lineNumber":325,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":326,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":327,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":328,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.DELETE);"},{"lineNumber":329,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":330,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":331,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":332,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":333,"author":{"gitID":"sherlynng"},"content":"        // delete 6 more times for testing repetitive pressing of delete button"},{"lineNumber":334,"author":{"gitID":"sherlynng"},"content":"        int i \u003d 0;"},{"lineNumber":335,"author":{"gitID":"sherlynng"},"content":"        while (i \u003c 6) {"},{"lineNumber":336,"author":{"gitID":"sherlynng"},"content":"            guiRobot.push(KeyCode.DELETE);"},{"lineNumber":337,"author":{"gitID":"sherlynng"},"content":"            i++;"},{"lineNumber":338,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":339,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"Tutor\");"},{"lineNumber":340,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":341,"author":{"gitID":"sherlynng"},"content":"        expectedOutput \u003d \"edit 1 r/Tutor\";"},{"lineNumber":342,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":343,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":344,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":346,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":347,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_remarkCommandPressTab_autofill() {"},{"lineNumber":348,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"remark 1 r/\";"},{"lineNumber":349,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":350,"author":{"gitID":"sherlynng"},"content":"        // checks for remark command word"},{"lineNumber":351,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"remark\");"},{"lineNumber":352,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":353,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":354,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":355,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":356,"author":{"gitID":"sherlynng"},"content":"        // checks for remark command word alias"},{"lineNumber":357,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"rk\");"},{"lineNumber":358,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":359,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":360,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":361,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":363,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":364,"author":{"gitID":"sherlynng"},"content":"    public void handleKeyPress_rateCommandPressTab_autofill() {"},{"lineNumber":365,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d \"rate 1 r/\";"},{"lineNumber":366,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":367,"author":{"gitID":"sherlynng"},"content":"        // checks for rate command word"},{"lineNumber":368,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"rate\");"},{"lineNumber":369,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":370,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":371,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":372,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":373,"author":{"gitID":"sherlynng"},"content":"        // checks for rate command word alias"},{"lineNumber":374,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.setInput(\"rt\");"},{"lineNumber":375,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":376,"author":{"gitID":"sherlynng"},"content":"        actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":377,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":378,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":379,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":380,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":381,"author":{"gitID":"sherlynng"},"content":"     * Enters Person details using GUI robot"},{"lineNumber":382,"author":{"gitID":"sherlynng"},"content":"     * @return String entered by GUI robot"},{"lineNumber":383,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":384,"author":{"gitID":"sherlynng"},"content":"    private String enterPersonDetails() {"},{"lineNumber":385,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"John Doe\");"},{"lineNumber":386,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":387,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"98765432\");"},{"lineNumber":388,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":389,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"johnd@example.com\");"},{"lineNumber":390,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":391,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"311, Clementi Ave 2, #02-25\");"},{"lineNumber":392,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":393,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"50\");"},{"lineNumber":394,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":395,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"Math\");"},{"lineNumber":396,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":397,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"Lower Sec\");"},{"lineNumber":398,"author":{"gitID":"sherlynng"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":399,"author":{"gitID":"sherlynng"},"content":"        commandBoxHandle.insertInput(\"Student\");"},{"lineNumber":400,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":401,"author":{"gitID":"sherlynng"},"content":"        return commandBoxHandle.getInput();"},{"lineNumber":402,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":403,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":404,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":405,"author":{"gitID":"sherlynng"},"content":"    public void editRemarkEventTest_success() {"},{"lineNumber":406,"author":{"gitID":"sherlynng"},"content":"        Person person \u003d ALICE;"},{"lineNumber":407,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":408,"author":{"gitID":"sherlynng"},"content":"        EditRemarkEvent editRemarkEventStub \u003d new EditRemarkEvent(COMMAND_WORD + \" \""},{"lineNumber":409,"author":{"gitID":"sherlynng"},"content":"                + INDEX_FIRST_PERSON + \" \" + PREFIX_REMARK + person.getRemark());"},{"lineNumber":410,"author":{"gitID":"sherlynng"},"content":"        postNow(editRemarkEventStub);"},{"lineNumber":411,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":412,"author":{"gitID":"sherlynng"},"content":"        String expectedOutput \u003d COMMAND_WORD + \" \" + INDEX_FIRST_PERSON + \" \" + PREFIX_REMARK + person.getRemark();"},{"lineNumber":413,"author":{"gitID":"sherlynng"},"content":"        String actualOutput \u003d commandBoxHandle.getInput();"},{"lineNumber":414,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":415,"author":{"gitID":"sherlynng"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":416,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedOutput, actualOutput);"},{"lineNumber":417,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":262,"-":156}},{"path":"src/test/java/seedu/address/ui/PairCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPair;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import guitests.guihandles.PairCardHandle;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.PairBuilder;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"public class PairCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"        // no tags"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"        Pair pairWithNoTags \u003d new PairBuilder().withTags(new String[0]).build();"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"        PairCard pairCard \u003d new PairCard(pairWithNoTags, 1);"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"        uiPartRule.setUiPart(pairCard);"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"        assertCardDisplay(pairCard, pairWithNoTags, 1);"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"        // with tags"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"        Pair pairWithTags \u003d new PairBuilder().build();"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"        pairCard \u003d new PairCard(pairWithTags, 2);"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        uiPartRule.setUiPart(pairCard);"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"        assertCardDisplay(pairCard, pairWithTags, 2);"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        Pair pair \u003d new PairBuilder().build();"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        PairCard pairCard \u003d new PairCard(pair, 0);"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        // same pair, same index -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        PairCard copy \u003d new PairCard(pair, 0);"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(pairCard.equals(copy));"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(pairCard.equals(pairCard));"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(pairCard.equals(null));"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(pairCard.equals(0));"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        // different pair, same index -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        Pair differentPair \u003d new PairBuilder().withStudent(ELLE).build();"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(pairCard.equals(new PairCard(differentPair, 0)));"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        // same pair, different index -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(pairCard.equals(new PairCard(pair, 1)));"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"     * Asserts that {@code pairCard} displays the details of {@code expectedPair} correctly and matches"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"     * {@code expectedId}."},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    private void assertCardDisplay(PairCard pairCard, Pair expectedPair, int expectedId) {"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        PairCardHandle pairCardHandle \u003d new PairCardHandle(pairCard.getRoot());"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        // verify id is displayed correctly"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", pairCardHandle.getId());"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        // verify pair details are displayed correctly"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        assertCardDisplaysPair(expectedPair, pairCardHandle);"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":68,"-":5}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.ui.PersonCard.TAG_COLOR_STYLES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import guitests.guihandles.DetailsPanelHandle;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import guitests.guihandles.PairCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPair}."},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    public static void assertCardDisplaysPair(Pair expectedPair, PairCardHandle actualCard) {"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(expectedPair.getPairName(), actualCard.getName());"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        assertTagsEqual(expectedPair, actualCard);"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"     * Asserts that {@code actualPanel} displays the details of {@code expectedPerson}."},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"    public static void assertPanelDisplaysDetails(Person expectedPerson, DetailsPanelHandle actualBrowser) {"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getName().fullName, actualBrowser.getName());"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getPhone().value, actualBrowser.getPhone());"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getEmail().value, actualBrowser.getEmail());"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getAddress().value, actualBrowser.getAddress());"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getStatus().value, actualBrowser.getStatus());"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getRole().value, actualBrowser.getRole());"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getSubject().value, actualBrowser.getSubject());"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getLevel().value, actualBrowser.getLevel());"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        assertEquals(\"$\" + expectedPerson.getPrice().value + \" / hr\", actualBrowser.getPrice());"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedPerson.getRemark().value, actualBrowser.getRemark());"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Double.toString(expectedPerson.getRate().getDisplayedValue()), actualBrowser.getRate());"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Integer.toString(expectedPerson.getRate().getCount()), actualBrowser.getRateCount());"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the has code of the tag\u0027s content."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"        /*expectedTags.forEach(tag -\u003e"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"                    actualCard.getTagStyleClasses(tag)));*/"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPair} with the correct"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"     * color."},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"    private static void assertTagsEqual(Pair expectedPair, PairCardHandle actualCard) {"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPair.getTags().stream()"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":103,"author":{"gitID":"Aussiroth"},"content":"        /*expectedTags.forEach(tag -\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"                    actualCard.getTagStyleClasses(tag)));*/"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":17,"Aussiroth":5,"sherlynng":19,"-":99}},{"path":"src/test/java/seedu/address/commons/core/VersionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class VersionTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Version.fromString(\"This is not a version string\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(19, version.getMajor());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(10, version.getMinor());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(20, version.getPatch());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(true, version.isEarlyAccess());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // boundary at 0"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // normal values"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        version \u003d new Version(4, 10, 5, false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // big numbers"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        version \u003d new Version(100, 100, 100, true);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Version one;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Version another;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // Tests equality"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, true);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, true);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        one \u003d new Version(11, 12, 13, false);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        another \u003d new  Version(11, 12, 13, false);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Tests different patch"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 5, false);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, false);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // Tests different minor"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 5, 0, false);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"        //test different early access"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Tests different major"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, true);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // Tests high major vs low minor"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 1, 0, true);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // Tests high patch vs low minor"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 10, false);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 1, 0, false);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // Tests same major minor different patch"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, false);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Tests early access vs not early access on same version number"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 0, false);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, false);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, true);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(100100100, version.hashCode());"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        version \u003d new Version(10, 10, 10, false);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(1010010010, version.hashCode());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Version one;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Version another;"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, false);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        one \u003d new Version(100, 191, 275, true);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        another \u003d new  Version(100, 191, 275, true);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":139,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(one.equals(one));"},{"lineNumber":140,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(one.equals(null));"},{"lineNumber":141,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(one.equals(1));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                                              int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":5,"-":143}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"        String defaultConfigAsString \u003d \"App title : STUtor\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(defaultConfig.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    public void hashCodeMethod() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        Config anotherDefaultConfig \u003d new Config();"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(defaultConfig.hashCode() \u003d\u003d anotherDefaultConfig.hashCode());"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":8,"-":32}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NINTH_PERSON;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotEditException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        /*"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"         Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":79,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":80,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        Index index \u003d INDEX_NINTH_PERSON;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + PRICE_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"                + \" \" + SUBJECT_DESC_BOB + \" \" + LEVEL_DESC_BOB + \" \" + ROLE_DESC_BOB + TAG_DESC_FRIEND + \" \";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"                .withSubject(VALID_SUBJECT_BOB).withLevel(VALID_LEVEL_BOB)"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).withRole(VALID_ROLE_BOB).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"                getModel().getFilteredPersonList().get(INDEX_NINTH_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + PRICE_DESC_BOB + LEVEL_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"        index \u003d INDEX_NINTH_PERSON;"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        index \u003d INDEX_NINTH_PERSON;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"        index \u003d INDEX_THIRD_PERSON;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"        index \u003d INDEX_NINTH_PERSON;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_AMY + PRICE_DESC_AMY + SUBJECT_DESC_AMY + LEVEL_DESC_AMY"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"                + ROLE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"        // thiscan be misleading: card selection actually remains unchanged but the"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":181,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_NAME_DESC,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_PHONE_DESC,"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_EMAIL_DESC,"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"        //@@author aussiroth"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_PRICE_DESC,"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":"                Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid subject -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_SUBJECT_DESC,"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"                Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid level -\u003e rejected */"},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":207,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_LEVEL_DESC,"},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"                Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":211,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":212,"author":{"gitID":"Aussiroth"},"content":"                        + INVALID_TAG_DESC,"},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":214,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":216,"author":{"gitID":"Aussiroth"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":217,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":"        index \u003d INDEX_NINTH_PERSON;"},{"lineNumber":219,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":221,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + PRICE_DESC_BOB + LEVEL_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":223,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":224,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":225,"author":{"gitID":"Aussiroth"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":226,"author":{"gitID":"Aussiroth"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":227,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + PRICE_DESC_BOB + LEVEL_DESC_BOB  + SUBJECT_DESC_BOB"},{"lineNumber":228,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB;"},{"lineNumber":229,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":"        //@@author"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":256,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":260,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":261,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonMatchedCannotEditException e) {"},{"lineNumber":262,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Editing should not be rejected even if person is matched.\");"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":26,"Aussiroth":59,"-":241}},{"path":"src/test/java/seedu/address/commons/util/FileUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"public class FileUtilTest extends FileUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void getPath() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        // valid case"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(\"folder\" + File.separator + \"sub-folder\", FileUtil.getPath(\"folder/sub-folder\"));"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        // null parameter -\u003e throws NullPointerException"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        FileUtil.getPath(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // no forwards slash -\u003e assertion failure"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        FileUtil.getPath(\"folder\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    public void createFile() throws Exception {"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        FileUtil.createFile(new File(\"test.txt\"));"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(FileUtil.createFile(new File(\"test.txt\")));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        //cleanup the file created for test"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        File file \u003d new File(\"test.txt\");"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        file.delete();"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":10,"-":30}},{"path":"src/test/java/seedu/address/commons/util/JsonUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.SerializableTestClass;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"public class JsonUtilTest extends JsonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final File SERIALIZATION_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"serialize.json\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":44}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"public class AppUtilTest extends AppUtil {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":46}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"public class StringUtilTest extends StringUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":158}},{"path":"src/test/java/seedu/address/commons/util/ConfigUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"public class ConfigUtilTest extends ConfigUtil {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/ConfigUtilTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void read_null_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        read(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        read(\"NotJsonFormatConfig.json\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        config.setAppTitle(\"Typical App Title\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(\"C:\\\\preferences.json\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() throws IOException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        save(null, \"SomeFile.json\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void save_nullFile_throwsNullPointerException() throws IOException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        save(new Config(), null);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String configFilePath \u003d testFolder.getRoot() + File.separator + \"TempConfig.json\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        original.setAppTitle(\"Updated Title\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                                  ? TEST_DATA_FOLDER + configFileInTestDataFolder"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                                  : null;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":129}},{"path":"src/test/java/seedu/address/commons/util/CollectionUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"public class CollectionUtilTest extends CollectionUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no arguments"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // any non-empty argument list"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // null reference"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // null reference"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // empty list"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // list with all non-null elements"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", new Integer(1)));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void elementsAreUnique() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // empty list"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertAreUnique();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // only one object"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertAreUnique((Object) null);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertAreUnique(1);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertAreUnique(\"\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertAreUnique(\"abc\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // all objects unique"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertAreUnique(\"abc\", \"ab\", \"a\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertAreUnique(1, 2);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // some identical objects"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertNotUnique(\"abc\", \"abc\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertNotUnique(\"abc\", \"\", \"abc\", \"ABC\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertNotUnique(\"\", \"abc\", \"a\", \"abc\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertNotUnique(1, new Integer(1));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertNotUnique(null, 1, new Integer(1));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertNotUnique(null, null);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertNotUnique(null, \"a\", \"b\", null);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            requireAllNonNull(objects);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"The expected NullPointerException was not thrown\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            // expected behavior"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            requireAllNonNull(collection);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"The expected NullPointerException was not thrown\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            // expected behavior"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertAreUnique(Object... objects) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.elementsAreUnique(Arrays.asList(objects)));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void assertNotUnique(Object... objects) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.elementsAreUnique(Arrays.asList(objects)));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":150}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.storage.XmlAdaptedPairHash;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"public class XmlUtilTest extends XmlUtil {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_SUBJECT \u003d \"English\";"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_LEVEL \u003d \"lower Sec\";"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_STATUS \u003d \"not Matched\";"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_ROLE \u003d \"student\";"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_PRICE \u003d \"77\";"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_REMARK \u003d \"Fast learner\";"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_RATE \u003d \"4.0\";"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_RATECOUNT \u003d \"3\";"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList("},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"            new XmlAdaptedTag(\"friends\", \"DEFAULT\"));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    private static final List\u003cXmlAdaptedPairHash\u003e VALID_PAIRHASH \u003d Collections.singletonList("},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"            new XmlAdaptedPairHash(PairHash.DEFAULT_PAIR_HASH));"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":99,"author":{"gitID":"Aussiroth"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_SUBJECT,"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"                VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS, VALID_REMARK,"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":108,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_SUBJECT,"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":"                VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS, VALID_REMARK,"},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":121,"author":{"gitID":"Aussiroth"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_PRICE, VALID_SUBJECT,"},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"                VALID_LEVEL, VALID_STATUS,  VALID_ROLE, VALID_TAGS, VALID_REMARK,"},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"                builder.withPerson(new PersonBuilder().build()).build());"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":168,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":11,"Aussiroth":8,"sherlynng":9,"-":140}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.KeywordPredicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":11,"author":{"gitID":"dannyngmx94"},"content":"public class FilterCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":13,"author":{"gitID":"dannyngmx94"},"content":"    private FilterCommandParser parser \u003d new FilterCommandParser();"},{"lineNumber":14,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":15,"author":{"gitID":"dannyngmx94"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"dannyngmx94"},"content":"    public void parse_validArg_returnsFindCommand() {"},{"lineNumber":17,"author":{"gitID":"dannyngmx94"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":18,"author":{"gitID":"dannyngmx94"},"content":"        FilterCommand expectedFilterCommand \u003d"},{"lineNumber":19,"author":{"gitID":"dannyngmx94"},"content":"                new FilterCommand(new KeywordPredicate(\"Alice\"));"},{"lineNumber":20,"author":{"gitID":"dannyngmx94"},"content":"        assertParseSuccess(parser, \"Alice\", expectedFilterCommand);"},{"lineNumber":21,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":22,"author":{"gitID":"dannyngmx94"},"content":"        // multiple whitespaces before and after keyword"},{"lineNumber":23,"author":{"gitID":"dannyngmx94"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \", expectedFilterCommand);"},{"lineNumber":24,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":26,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":17,"-":9}},{"path":"src/test/java/seedu/address/ui/DetailsPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertPanelDisplaysDetails;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"import guitests.guihandles.DetailsPanelHandle;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"public class DetailsPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStubStudent;"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStubTutor;"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"    private DetailsPanel detailsPanel;"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"    private DetailsPanelHandle detailsPanelHandle;"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"        selectionChangedEventStubStudent \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"        selectionChangedEventStubTutor \u003d new PersonPanelSelectionChangedEvent(new PersonCard(BENSON, 0));"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"        guiRobot.interact(() -\u003e detailsPanel \u003d new DetailsPanel());"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        uiPartRule.setUiPart(detailsPanel);"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"        detailsPanelHandle \u003d new DetailsPanelHandle(detailsPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    public void display() {"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"        // student"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"        Person student \u003d ALICE;"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"        postNow(selectionChangedEventStubStudent);"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        assertDetailsDisplay(student);"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"        // tutor"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"        Person tutor \u003d BENSON;"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"        postNow(selectionChangedEventStubTutor);"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"        assertDetailsDisplay(tutor);"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"     * Asserts that {@code detailsPanel} displays the details of {@code expectedPerson} correctly."},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    private void assertDetailsDisplay(Person expectedPerson) {"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"        // verify person details are displayed correctly"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        assertPanelDisplaysDetails(expectedPerson, detailsPanelHandle);"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":52,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public void parse_validArgs_returnsSelectCommand() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public void parse_invalidArgs_throwsParseException() throws CommandException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"-":28}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"public class ArgumentTokenizerTest extends ArgumentTokenizer {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /** Also covers: testing for prefixes not specified as a prefix **/"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":149}},{"path":"src/test/java/seedu/address/logic/parser/FindMissingCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.FindMissingCommand;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.predicates.FindMissingPredicate;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"public class FindMissingCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    private FindMissingCommandParser parser \u003d new FindMissingCommandParser();"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"    public void parse_validArgs_returnsFindMissingCommand() {"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"        //setup predicate correctly"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        String[] keywords \u003d {\"email\", \"address\"};"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        Predicate\u003cPerson\u003e finalPredicate \u003d new FindMissingPredicate(Arrays.asList(keywords));"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand expectedFindMissingCommand \u003d new FindMissingCommand(finalPredicate);"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        //single whitespace"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, \"email address\", expectedFindMissingCommand);"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, \"email \\t  address \\t\", expectedFindMissingCommand);"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        //check case insensitive"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, \"eMAIl aDdReSS\", expectedFindMissingCommand);"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        //check parse if empty user input"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        keywords \u003d Arrays.copyOf(FindMissingCommand.ATTRIBUTE_VALUES, FindMissingCommand.ATTRIBUTE_VALUES.length);"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        finalPredicate \u003d new FindMissingPredicate(Arrays.asList(keywords));"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        expectedFindMissingCommand \u003d new FindMissingCommand(finalPredicate);"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, \"\", expectedFindMissingCommand);"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        String expectedParseFailureMessage \u003d FindMissingCommand.MESSAGE_INVALID_ATTRIBUTE;"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"abcdefg\", String.format(expectedParseFailureMessage, \"abcdefg\"));"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"addres phon\", String.format(expectedParseFailureMessage, \"addres\"));"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":44,"-":3}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_AMY;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATE_AMY;"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATE;"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NINTH_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"import java.util.function.Predicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.FindMissingCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.UnmatchCommand;"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.ViewStatsCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.predicates.FindMissingPredicate;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.KeywordPredicate;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":79,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"                + INDEX_NINTH_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetailsWithoutStatus(person));"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(new EditCommand(INDEX_NINTH_PERSON, descriptor), command);"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void parseCommand_filter() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String keyword \u003d \"foo\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        FilterCommand command \u003d (FilterCommand) parser.parseCommand("},{"lineNumber":103,"author":{"gitID":"-"},"content":"                FilterCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(new FilterCommand(new KeywordPredicate(keyword)), command);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":111,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":116,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_findMissing() throws Exception {"},{"lineNumber":118,"author":{"gitID":"Aussiroth"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"address\");"},{"lineNumber":119,"author":{"gitID":"Aussiroth"},"content":"        FindMissingPredicate targetP \u003d new FindMissingPredicate(keywords);"},{"lineNumber":120,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand command \u003d (FindMissingCommand) parser.parseCommand("},{"lineNumber":121,"author":{"gitID":"Aussiroth"},"content":"                FindMissingCommand.COMMAND_WORD + \" \""},{"lineNumber":122,"author":{"gitID":"Aussiroth"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":123,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new FindMissingCommand(targetP), command);"},{"lineNumber":124,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":155,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":172,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_addAliased() throws Exception {"},{"lineNumber":174,"author":{"gitID":"Aussiroth"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":175,"author":{"gitID":"Aussiroth"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAliased(person));"},{"lineNumber":176,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":177,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":179,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_clearAliased() throws Exception {"},{"lineNumber":181,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"},{"lineNumber":182,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":183,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_deleteAliased() throws Exception {"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":"                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_editAliased() throws Exception {"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"                + INDEX_NINTH_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetailsWithoutStatus(person));"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new EditCommand(INDEX_NINTH_PERSON, descriptor), command);"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_findMissingAliased() throws Exception {"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"address\");"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"        Predicate\u003cPerson\u003e targetP \u003d new FindMissingPredicate(keywords);"},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand command \u003d (FindMissingCommand) parser.parseCommand("},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":"                FindMissingCommand.COMMAND_WORD_ALIAS + \" \""},{"lineNumber":207,"author":{"gitID":"Aussiroth"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new FindMissingCommand(targetP), command);"},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":211,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_historyAliased() throws Exception {"},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"},{"lineNumber":214,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":216,"author":{"gitID":"Aussiroth"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"Aussiroth"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":219,"author":{"gitID":"Aussiroth"},"content":"        } catch (ParseException pe) {"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":221,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":224,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_listAliased() throws Exception {"},{"lineNumber":226,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS) instanceof ListCommand);"},{"lineNumber":227,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":228,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_selectAliased() throws Exception {"},{"lineNumber":232,"author":{"gitID":"Aussiroth"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":233,"author":{"gitID":"Aussiroth"},"content":"                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":234,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":237,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_redoCommandWordAliased_returnsRedoCommand() throws Exception {"},{"lineNumber":239,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"},{"lineNumber":240,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"},{"lineNumber":241,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":243,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_undoCommandWordAliased_returnsUndoCommand() throws Exception {"},{"lineNumber":245,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"},{"lineNumber":246,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"},{"lineNumber":247,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":249,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_viewStats() throws Exception {"},{"lineNumber":251,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(parser.parseCommand(ViewStatsCommand.COMMAND_WORD) instanceof ViewStatsCommand);"},{"lineNumber":252,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":254,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"Aussiroth"},"content":"    public void parseCommand_match() throws Exception {"},{"lineNumber":256,"author":{"gitID":"Aussiroth"},"content":"        String matchCommandString \u003d MatchCommand.COMMAND_WORD + \" 1 2\";"},{"lineNumber":257,"author":{"gitID":"Aussiroth"},"content":"        MatchCommand targetCommand \u003d new MatchCommand(Index.fromOneBased(1), Index.fromOneBased(2));"},{"lineNumber":258,"author":{"gitID":"Aussiroth"},"content":"        MatchCommand parsedCommand \u003d (MatchCommand) parser.parseCommand(matchCommandString);"},{"lineNumber":259,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(targetCommand, parsedCommand);"},{"lineNumber":260,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":262,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":263,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"alexawangzi"},"content":"    public void parseCommand_unmatch() throws Exception {"},{"lineNumber":265,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand targetCommand \u003d new UnmatchCommand(Index.fromOneBased(1));"},{"lineNumber":266,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand parsedCommand \u003d (UnmatchCommand) parser.parseCommand(UnmatchCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":267,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(targetCommand, parsedCommand);"},{"lineNumber":268,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":270,"author":{"gitID":"sherlynng"},"content":"    //@@author sherlynng"},{"lineNumber":271,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"sherlynng"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":273,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""},{"lineNumber":274,"author":{"gitID":"sherlynng"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + REMARK_AMY);"},{"lineNumber":275,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_AMY);"},{"lineNumber":276,"author":{"gitID":"sherlynng"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":277,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":279,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"sherlynng"},"content":"    public void parseCommand_remarkAliased() throws Exception {"},{"lineNumber":281,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD_ALIAS + \" \""},{"lineNumber":282,"author":{"gitID":"sherlynng"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + REMARK_AMY);"},{"lineNumber":283,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_AMY);"},{"lineNumber":284,"author":{"gitID":"sherlynng"},"content":"        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"},{"lineNumber":285,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":287,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":288,"author":{"gitID":"sherlynng"},"content":"    public void parseCommand_rate() throws Exception {"},{"lineNumber":289,"author":{"gitID":"sherlynng"},"content":"        RateCommand command \u003d (RateCommand) parser.parseCommand(RateCommand.COMMAND_WORD + \" \""},{"lineNumber":290,"author":{"gitID":"sherlynng"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_RATE + VALID_RATE_AMY);"},{"lineNumber":291,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_AMY), false);"},{"lineNumber":292,"author":{"gitID":"sherlynng"},"content":"        assertEquals(new RateCommand(INDEX_FIRST_PERSON, rate), command);"},{"lineNumber":293,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":295,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":296,"author":{"gitID":"sherlynng"},"content":"    public void parseCommand_rateAliased() throws Exception {"},{"lineNumber":297,"author":{"gitID":"sherlynng"},"content":"        RateCommand command \u003d (RateCommand) parser.parseCommand(RateCommand.COMMAND_WORD_ALIAS + \" \""},{"lineNumber":298,"author":{"gitID":"sherlynng"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_RATE + VALID_RATE_AMY);"},{"lineNumber":299,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_AMY), false);"},{"lineNumber":300,"author":{"gitID":"sherlynng"},"content":"        assertEquals(new RateCommand(INDEX_FIRST_PERSON, rate), command);"},{"lineNumber":301,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"sherlynng"},"content":"    //@@author"},{"lineNumber":303,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":12,"sherlynng":42,"Aussiroth":112,"-":151}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public void parse_emptyArg_throwsParseException() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    public void parse_validArgs_returnsFindCommand() throws CommandException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NINTH_PERSON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"1\" + INVALID_SUBJECT_DESC, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LEVEL_DESC, Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        Index targetIndex \u003d INDEX_NINTH_PERSON;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"        Index targetIndex \u003d INDEX_NINTH_PERSON;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"        Index targetIndex \u003d INDEX_NINTH_PERSON;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"        Index targetIndex \u003d INDEX_NINTH_PERSON;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"        Index targetIndex \u003d INDEX_NINTH_PERSON;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":210,"author":{"gitID":"alexawangzi"},"content":"        Index targetIndex \u003d INDEX_NINTH_PERSON;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":9,"Aussiroth":10,"-":199}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssertPair.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.ui.PairCard.TAG_COLOR_STYLES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import guitests.guihandles.PairCardHandle;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import guitests.guihandles.PairListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.ui.PairCard;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"public class GuiTestAssertPair {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    public static void assertCardEquals(PairCardHandle expectedCard, PairCardHandle actualCard) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPair}."},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    public static void assertCardDisplaysPair(Pair expectedPair, PairCardHandle actualCard) {"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(expectedPair.getPairName(), actualCard.getName());"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        assertTagsEqual(expectedPair, actualCard);"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"     * in {@code PairCard#TAG_COLOR_STYLES}, using an index generated by the has code of the tag\u0027s content."},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"     * @see PairCard#getTagColorStyleFor(String)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPair} with the correct"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"     * color."},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    private static void assertTagsEqual(Pair expectedPair, PairCardHandle actualCard) {"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPair.getTags().stream()"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        /*expectedTags.forEach(tag -\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"                    actualCard.getTagStyleClasses(tag)));*/"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"     * Asserts that the list in {@code pairListPanelHandle} displays the details of {@code pairs} correctly and"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"     * in the correct order."},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    public static void assertListMatching(PairListPanelHandle pairListPanelHandle, Pair... pairs) {"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        for (int i \u003d 0; i \u003c pairs.length; i++) {"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"            assertCardDisplaysPair(pairs[i], pairListPanelHandle.getPairCardHandle(i));"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"     * Asserts that the list in {@code pairListPanelHandle} displays the details of {@code pairs} correctly and"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"     * in the correct order."},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    public static void assertListMatching(PairListPanelHandle pairListPanelHandle, List\u003cPair\u003e pairs) {"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        assertListMatching(pairListPanelHandle, pairs.toArray(new Pair[0]));"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"     * Asserts the size of the list in {@code pairListPanelHandle} equals to {@code size}."},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"    public static void assertListSize(PairListPanelHandle pairListPanelHandle, int size) {"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        int numberOfPeople \u003d pairListPanelHandle.getListSize();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":43,"sherlynng":2,"Aussiroth":2,"-":50}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"public class ParserUtilTest extends ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    private static final String INVALID_RATE \u003d \"6.6\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_TAG_1 \u003d \"Friend\";"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_TAG_2 \u003d \"Neighbour\";"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_REMARK \u003d \"Fast learner.\";"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_RATE \u003d \"4.5\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":246,"author":{"gitID":"sherlynng"},"content":"    //@@author sherlynng"},{"lineNumber":247,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":248,"author":{"gitID":"sherlynng"},"content":"    public void parseRemark_null_throwsNullPointerException() {"},{"lineNumber":249,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((String) null));"},{"lineNumber":250,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((Optional\u003cString\u003e) null));"},{"lineNumber":251,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":253,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"sherlynng"},"content":"    public void parseRemark_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":255,"author":{"gitID":"sherlynng"},"content":"        assertFalse(ParserUtil.parseRemark(Optional.empty()).isPresent());"},{"lineNumber":256,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":258,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"sherlynng"},"content":"    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"},{"lineNumber":260,"author":{"gitID":"sherlynng"},"content":"        Remark expectedRemark \u003d new Remark(VALID_REMARK);"},{"lineNumber":261,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_REMARK));"},{"lineNumber":262,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Optional.of(expectedRemark), ParserUtil.parseRemark(Optional.of(VALID_REMARK)));"},{"lineNumber":263,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":265,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"sherlynng"},"content":"    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"},{"lineNumber":267,"author":{"gitID":"sherlynng"},"content":"        String remarkWithWhitespace \u003d WHITESPACE + VALID_REMARK + WHITESPACE;"},{"lineNumber":268,"author":{"gitID":"sherlynng"},"content":"        Remark expectedRemark \u003d new Remark(VALID_REMARK);"},{"lineNumber":269,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"},{"lineNumber":270,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Optional.of(expectedRemark), ParserUtil.parseRemark(Optional.of(remarkWithWhitespace)));"},{"lineNumber":271,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":273,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":274,"author":{"gitID":"sherlynng"},"content":"    public void parseRate_null_throwsNullPointerException() {"},{"lineNumber":275,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRate((String) null));"},{"lineNumber":276,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRate((Optional\u003cString\u003e) null));"},{"lineNumber":277,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":279,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"sherlynng"},"content":"    public void parseRate_invalidValue_throwsIllegalValueException() {"},{"lineNumber":281,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseRate(\"\"));"},{"lineNumber":282,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseRate(INVALID_RATE));"},{"lineNumber":283,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseRate(Optional.of(INVALID_RATE)));"},{"lineNumber":284,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":286,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":287,"author":{"gitID":"sherlynng"},"content":"    public void parseRate_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":288,"author":{"gitID":"sherlynng"},"content":"        assertFalse(ParserUtil.parseRate(Optional.empty()).isPresent());"},{"lineNumber":289,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":291,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"sherlynng"},"content":"    public void parseRate_validValueWithoutWhitespace_returnsRate() throws Exception {"},{"lineNumber":293,"author":{"gitID":"sherlynng"},"content":"        // cumulative rate"},{"lineNumber":294,"author":{"gitID":"sherlynng"},"content":"        Rate expectedRate \u003d new Rate(Double.parseDouble(VALID_RATE), false);"},{"lineNumber":295,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedRate, ParserUtil.parseRate(VALID_RATE));"},{"lineNumber":296,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Optional.of(expectedRate), ParserUtil.parseRate(Optional.of(VALID_RATE)));"},{"lineNumber":297,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":298,"author":{"gitID":"sherlynng"},"content":"        // absolute rate"},{"lineNumber":299,"author":{"gitID":"sherlynng"},"content":"        expectedRate \u003d new Rate(Double.parseDouble(VALID_RATE), true);"},{"lineNumber":300,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedRate, ParserUtil.parseRate(VALID_RATE + \"-\"));"},{"lineNumber":301,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Optional.of(expectedRate), ParserUtil.parseRate(Optional.of(VALID_RATE + \"-\")));"},{"lineNumber":302,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":304,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":305,"author":{"gitID":"sherlynng"},"content":"    public void parseRate_validValueWithWhitespace_returnsTrimmedRate() throws Exception {"},{"lineNumber":306,"author":{"gitID":"sherlynng"},"content":"        // cumulative rate"},{"lineNumber":307,"author":{"gitID":"sherlynng"},"content":"        String rateWithWhitespace \u003d WHITESPACE + VALID_RATE + WHITESPACE;"},{"lineNumber":308,"author":{"gitID":"sherlynng"},"content":"        Rate expectedRate \u003d new Rate(Double.parseDouble(VALID_RATE), false);"},{"lineNumber":309,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedRate, ParserUtil.parseRate(rateWithWhitespace));"},{"lineNumber":310,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Optional.of(expectedRate), ParserUtil.parseRate(Optional.of(rateWithWhitespace)));"},{"lineNumber":311,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":312,"author":{"gitID":"sherlynng"},"content":"        // absolute rate"},{"lineNumber":313,"author":{"gitID":"sherlynng"},"content":"        rateWithWhitespace \u003d WHITESPACE + VALID_RATE + \"-\" + WHITESPACE;"},{"lineNumber":314,"author":{"gitID":"sherlynng"},"content":"        expectedRate \u003d new Rate(Double.parseDouble(VALID_RATE), true);"},{"lineNumber":315,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedRate, ParserUtil.parseRate(rateWithWhitespace));"},{"lineNumber":316,"author":{"gitID":"sherlynng"},"content":"        assertEquals(Optional.of(expectedRate), ParserUtil.parseRate(Optional.of(rateWithWhitespace)));"},{"lineNumber":317,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":319,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":320,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":321,"author":{"gitID":"Aussiroth"},"content":"    public void parsePairHash_validValue_returnsPairHash() throws Exception {"},{"lineNumber":322,"author":{"gitID":"Aussiroth"},"content":"        String pairHash \u003d \"123412341\";"},{"lineNumber":323,"author":{"gitID":"Aussiroth"},"content":"        PairHash expectedPairHash \u003d new PairHash(\"123412341\");"},{"lineNumber":324,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedPairHash, ParserUtil.parsePairHash(pairHash));"},{"lineNumber":325,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":327,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":328,"author":{"gitID":"Aussiroth"},"content":"    public void parsePairHash_invalidValue_throwsIllegalValueException() {"},{"lineNumber":329,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePairHash(\"abcdefgh\"));"},{"lineNumber":330,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":332,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":333,"author":{"gitID":"Aussiroth"},"content":"    public void parsePairHashes_invalidValues_throwsIllegalValueException() throws Exception {"},{"lineNumber":334,"author":{"gitID":"Aussiroth"},"content":"        ArrayList\u003cString\u003e pairHashes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":335,"author":{"gitID":"Aussiroth"},"content":"        pairHashes.add(\"1234\");"},{"lineNumber":336,"author":{"gitID":"Aussiroth"},"content":"        pairHashes.add(\"abcd\");"},{"lineNumber":337,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePairHashes(pairHashes));"},{"lineNumber":338,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"Aussiroth":24,"sherlynng":79,"-":234}},{"path":"src/test/java/seedu/address/logic/parser/UnmatchCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.UnmatchCommand;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"public class UnmatchCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    private UnmatchCommandParser parser \u003d new UnmatchCommandParser();"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public void parse_validArgs_returnsUnmatchCommand() {"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, \"1\", new UnmatchCommand(INDEX_FIRST_PERSON));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmatchCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":11,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_USAGE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_LEVEL_BOB;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_LEVEL_SHORTCUT_UPPER_SEC;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_NAME_BOB;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_ROLE_BOB;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_ROLE_SHORTCUT_TUTOR;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_SUBJECT_BOB;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CASE_INSENSITIVE_SUBJECT_SHORTCUT_ENGLISH;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_LEVEL_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_LOWER_SEC;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_DESC_UPPER_SEC;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_LOWER_PRI;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_LOWER_SEC;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_LOWER_PRI;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_LOWER_SEC;"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_UPPER_PRI;"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_SHORTCUT_UPPER_SEC;"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_UPPER_PRI;"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LEVEL_UPPER_SEC;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_AMY;"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOB;"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_SHORTCUT_STUDENT;"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_SHORTCUT_TUTOR;"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_STUDENT;"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_TUTOR;"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_UNMATCHED;"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_UNMATCHED;"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_CHEMISTRY;"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_CHINESE;"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_CHINESE;"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_ENGLISH;"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_ENGLISH;"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_PHYSICS;"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_CHEMISTRY;"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_CHINESE;"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_ENGLISH;"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_SHORTCUT_PHYSICS;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_BOB;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":88,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":129,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_CHINESE)"},{"lineNumber":136,"author":{"gitID":"Aussiroth"},"content":"                .withPrice(VALID_PRICE_BOB).withLevel(LEVEL_UPPER_SEC).withRole(ROLE_TUTOR).withStatus(STATUS_UNMATCHED)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"                + SUBJECT_DESC_CHINESE + PRICE_DESC_BOB + LEVEL_DESC_UPPER_SEC + ROLE_DESC_BOB"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsMissing_failure() {"},{"lineNumber":146,"author":{"gitID":"Aussiroth"},"content":"        //no name"},{"lineNumber":147,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"                        + PRICE_DESC_AMY + SUBJECT_DESC_AMY + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED,"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"                MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":153,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"Aussiroth"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":155,"author":{"gitID":"Aussiroth"},"content":"        //Only name is compulsory now"},{"lineNumber":156,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE, MESSAGE_USAGE);"},{"lineNumber":157,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":158,"author":{"gitID":"Aussiroth"},"content":"        // missing name prefix"},{"lineNumber":159,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_ENGLISH + LEVEL_DESC_LOWER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB,"},{"lineNumber":161,"author":{"gitID":"Aussiroth"},"content":"                expectedMessage);"},{"lineNumber":162,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":164,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"Aussiroth"},"content":"    public void parse_optionalFieldMissing_success() {"},{"lineNumber":166,"author":{"gitID":"Aussiroth"},"content":"        //All non-name fields are optional"},{"lineNumber":167,"author":{"gitID":"Aussiroth"},"content":"        //phone"},{"lineNumber":168,"author":{"gitID":"Aussiroth"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(\"\")"},{"lineNumber":169,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":170,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":171,"author":{"gitID":"Aussiroth"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":172,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":175,"author":{"gitID":"Aussiroth"},"content":"        //email"},{"lineNumber":176,"author":{"gitID":"Aussiroth"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":177,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(\"\").withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":178,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":179,"author":{"gitID":"Aussiroth"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":181,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":183,"author":{"gitID":"Aussiroth"},"content":"        //address"},{"lineNumber":184,"author":{"gitID":"Aussiroth"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(\"\").withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"        //subject"},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":193,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(\"\")"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"        //level"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(\"\").withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB"},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":207,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":"        //price"},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":211,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(VALID_LEVEL_BOB).withPrice(\"\")"},{"lineNumber":212,"author":{"gitID":"Aussiroth"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":214,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":216,"author":{"gitID":"Aussiroth"},"content":"        //role"},{"lineNumber":217,"author":{"gitID":"Aussiroth"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":219,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"                .withRole(\"\").withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":221,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":223,"author":{"gitID":"Aussiroth"},"content":"                + PRICE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":224,"author":{"gitID":"Aussiroth"},"content":"        //all missing but name"},{"lineNumber":225,"author":{"gitID":"Aussiroth"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(\"\")"},{"lineNumber":226,"author":{"gitID":"Aussiroth"},"content":"                .withEmail(\"\").withAddress(\"\").withSubject(\"\")"},{"lineNumber":227,"author":{"gitID":"Aussiroth"},"content":"                .withLevel(\"\").withPrice(\"\")"},{"lineNumber":228,"author":{"gitID":"Aussiroth"},"content":"                .withRole(\"\").build();"},{"lineNumber":229,"author":{"gitID":"Aussiroth"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":233,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"Aussiroth"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"        // invalid name"},{"lineNumber":236,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":237,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":238,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":240,"author":{"gitID":"Aussiroth"},"content":"        // invalid phone"},{"lineNumber":241,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":242,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":243,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":245,"author":{"gitID":"Aussiroth"},"content":"        // invalid email"},{"lineNumber":246,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":247,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":248,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":250,"author":{"gitID":"Aussiroth"},"content":"        // invalid price"},{"lineNumber":251,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":252,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + INVALID_PRICE_DESC"},{"lineNumber":253,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":255,"author":{"gitID":"Aussiroth"},"content":"        // invalid subject"},{"lineNumber":256,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":257,"author":{"gitID":"Aussiroth"},"content":"                + INVALID_SUBJECT_DESC + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":258,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":259,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":260,"author":{"gitID":"Aussiroth"},"content":"        // invalid level"},{"lineNumber":261,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":262,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_BOB + INVALID_LEVEL_DESC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB"},{"lineNumber":263,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + TAG_DESC_FRIEND, Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":265,"author":{"gitID":"Aussiroth"},"content":"        // invalid tag"},{"lineNumber":266,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":267,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + PRICE_DESC_BOB"},{"lineNumber":268,"author":{"gitID":"Aussiroth"},"content":"                + ROLE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":269,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":270,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":271,"author":{"gitID":"Aussiroth"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":272,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":273,"author":{"gitID":"Aussiroth"},"content":"                + SUBJECT_DESC_CHINESE + INVALID_LEVEL_DESC + STATUS_DESC_UNMATCHED + PRICE_DESC_BOB + ROLE_DESC_BOB,"},{"lineNumber":274,"author":{"gitID":"Aussiroth"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":275,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":276,"author":{"gitID":"Aussiroth"},"content":"        // non-empty preamble"},{"lineNumber":277,"author":{"gitID":"Aussiroth"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":278,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_CHINESE + LEVEL_DESC_UPPER_SEC + STATUS_DESC_UNMATCHED"},{"lineNumber":279,"author":{"gitID":"Aussiroth"},"content":"                        + ROLE_DESC_BOB + PRICE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":280,"author":{"gitID":"Aussiroth"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE, MESSAGE_USAGE));"},{"lineNumber":281,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":283,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":284,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":285,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsCaseInsensitive_success() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":287,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":288,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":289,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":290,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":291,"author":{"gitID":"alexawangzi"},"content":"        Person expectedPersonWithMixedCaseName \u003d new PersonBuilder().withName(\"bOb cHoO\")"},{"lineNumber":292,"author":{"gitID":"alexawangzi"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":293,"author":{"gitID":"alexawangzi"},"content":"                .withSubject(VALID_SUBJECT_BOB).withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB)"},{"lineNumber":294,"author":{"gitID":"alexawangzi"},"content":"                .withPrice(VALID_PRICE_BOB).withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":295,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":296,"author":{"gitID":"alexawangzi"},"content":"        Person expectedPersonWithMixedCaseEmail \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":297,"author":{"gitID":"alexawangzi"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(\"bOb@eXaMpLe.CoM\").withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":298,"author":{"gitID":"alexawangzi"},"content":"                .withSubject(VALID_SUBJECT_BOB).withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB)"},{"lineNumber":299,"author":{"gitID":"alexawangzi"},"content":"                .withPrice(VALID_PRICE_BOB).withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":300,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":301,"author":{"gitID":"alexawangzi"},"content":"        // name case insensitive - accepted"},{"lineNumber":302,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, CASE_INSENSITIVE_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":303,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":304,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPersonWithMixedCaseName));"},{"lineNumber":305,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":306,"author":{"gitID":"alexawangzi"},"content":"        // email case insensitive - accepted"},{"lineNumber":307,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + CASE_INSENSITIVE_EMAIL_BOB"},{"lineNumber":308,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":309,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPersonWithMixedCaseEmail));"},{"lineNumber":310,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":311,"author":{"gitID":"alexawangzi"},"content":"        // address case insensitive - accepted"},{"lineNumber":312,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":313,"author":{"gitID":"Aussiroth"},"content":"                + CASE_INSENSITIVE_ADDRESS_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_BOB"},{"lineNumber":314,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":315,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":316,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":317,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":318,"author":{"gitID":"alexawangzi"},"content":"        // subject case insensitive - accepted"},{"lineNumber":319,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":320,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + CASE_INSENSITIVE_SUBJECT_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":321,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":322,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":323,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":324,"author":{"gitID":"alexawangzi"},"content":"        // level case insensitive - accepted"},{"lineNumber":325,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":326,"author":{"gitID":"Aussiroth"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + CASE_INSENSITIVE_LEVEL_BOB"},{"lineNumber":327,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":328,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":329,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":330,"author":{"gitID":"alexawangzi"},"content":"        // role case insensitive - accepted"},{"lineNumber":331,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":332,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":333,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + CASE_INSENSITIVE_ROLE_BOB"},{"lineNumber":334,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":335,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":337,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":338,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsShortcut_success() {"},{"lineNumber":339,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":340,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (eng) accepted"},{"lineNumber":341,"author":{"gitID":"alexawangzi"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":342,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_ENGLISH)"},{"lineNumber":343,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":344,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":345,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":346,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":347,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_ENGLISH + LEVEL_DESC_UPPER_SEC"},{"lineNumber":348,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":349,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":350,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":351,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":352,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (chi) accepted"},{"lineNumber":353,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":354,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_CHINESE)"},{"lineNumber":355,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":356,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":357,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":358,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":359,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_CHINESE + LEVEL_DESC_UPPER_SEC"},{"lineNumber":360,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":361,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":362,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":363,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (chem) accepted"},{"lineNumber":364,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":365,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_CHEMISTRY)"},{"lineNumber":366,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":367,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":368,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":369,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":370,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_CHEMISTRY + LEVEL_DESC_UPPER_SEC"},{"lineNumber":371,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":372,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":373,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":374,"author":{"gitID":"alexawangzi"},"content":"        // subject short cut (phy) accepted"},{"lineNumber":375,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":376,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_PHYSICS)"},{"lineNumber":377,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":378,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":379,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":380,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":381,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_SHORTCUT_PHYSICS + LEVEL_DESC_UPPER_SEC"},{"lineNumber":382,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":383,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":384,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":385,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (us) accepted"},{"lineNumber":386,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":387,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":388,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":389,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":390,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":391,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":392,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_UPPER_SEC"},{"lineNumber":393,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":394,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":395,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":396,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (ls) accepted"},{"lineNumber":397,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":398,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":399,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(LEVEL_LOWER_SEC).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":400,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":401,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":402,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":403,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_LOWER_SEC"},{"lineNumber":404,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":405,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":406,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":407,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (up) accepted"},{"lineNumber":408,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":409,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":410,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(LEVEL_UPPER_PRI).withPrice(VALID_PRICE_BOB)"},{"lineNumber":411,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":412,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":413,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":414,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_UPPER_PRI"},{"lineNumber":415,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":416,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":417,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":418,"author":{"gitID":"alexawangzi"},"content":"        // level short cut (lp) accepted"},{"lineNumber":419,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":420,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":421,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(LEVEL_LOWER_PRI).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":422,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":423,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":424,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":425,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_SHORTCUT_LOWER_PRI"},{"lineNumber":426,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":427,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":428,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":429,"author":{"gitID":"alexawangzi"},"content":"        // role short cut (t) accepted"},{"lineNumber":430,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":431,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":432,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withPrice(VALID_PRICE_BOB).withRole(ROLE_TUTOR)"},{"lineNumber":433,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":434,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":435,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":436,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":437,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_SHORTCUT_TUTOR"},{"lineNumber":438,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":439,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":440,"author":{"gitID":"alexawangzi"},"content":"        // role short cut (s) accepted"},{"lineNumber":441,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":442,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":443,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":444,"author":{"gitID":"alexawangzi"},"content":"                .withRole(ROLE_STUDENT).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":445,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":446,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":447,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":448,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_SHORTCUT_STUDENT"},{"lineNumber":449,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":450,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":451,"author":{"gitID":"alexawangzi"},"content":"        // status short cut (um) accepted"},{"lineNumber":452,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":453,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":454,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":455,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":456,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":457,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":458,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":459,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":460,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":461,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":462,"author":{"gitID":"alexawangzi"},"content":"        // status short cut (m) accepted"},{"lineNumber":463,"author":{"gitID":"alexawangzi"},"content":"        expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":464,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":465,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":466,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB)"},{"lineNumber":467,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":468,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":469,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":470,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + LEVEL_DESC_UPPER_SEC"},{"lineNumber":471,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + ROLE_DESC_BOB"},{"lineNumber":472,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":473,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":474,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":475,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":476,"author":{"gitID":"alexawangzi"},"content":"    public void parse_fieldsShortcutAndCaseInsensitive_success() {"},{"lineNumber":477,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":478,"author":{"gitID":"alexawangzi"},"content":"        // using shortcuts in cae insenstive fashion - accepted"},{"lineNumber":479,"author":{"gitID":"alexawangzi"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":480,"author":{"gitID":"alexawangzi"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(SUBJECT_ENGLISH)"},{"lineNumber":481,"author":{"gitID":"alexawangzi"},"content":"                .withLevel(VALID_LEVEL_BOB).withStatus(VALID_STATUS_BOB).withPrice(VALID_PRICE_BOB)"},{"lineNumber":482,"author":{"gitID":"alexawangzi"},"content":"                .withRole(VALID_ROLE_BOB)"},{"lineNumber":483,"author":{"gitID":"alexawangzi"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":484,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":485,"author":{"gitID":"alexawangzi"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB  + EMAIL_DESC_BOB"},{"lineNumber":486,"author":{"gitID":"alexawangzi"},"content":"                + ADDRESS_DESC_BOB + CASE_INSENSITIVE_SUBJECT_SHORTCUT_ENGLISH"},{"lineNumber":487,"author":{"gitID":"alexawangzi"},"content":"                + CASE_INSENSITIVE_LEVEL_SHORTCUT_UPPER_SEC"},{"lineNumber":488,"author":{"gitID":"alexawangzi"},"content":"                + PRICE_DESC_BOB + CASE_INSENSITIVE_ROLE_SHORTCUT_TUTOR"},{"lineNumber":489,"author":{"gitID":"alexawangzi"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":490,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":491,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":492,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":262,"Aussiroth":160,"-":71}},{"path":"src/test/java/seedu/address/logic/parser/MatchCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"public class MatchCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE);"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    private MatchCommandParser parser \u003d new MatchCommandParser();"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"        // no index specified"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"        // missing one index"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        // negative index in first"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"-5 1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        // zero index in first"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"0 1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        //second index is negative, first positive"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"1 -1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":38,"Aussiroth":3,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_MATCHED_CANNOT_EDIT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NINTH_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        descriptor.setStatus(null);"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_NINTH_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(8), editedPerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"                .build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"                .withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        showPersonAtIndex(model, INDEX_NINTH_PERSON);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_NINTH_PERSON, descriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        showPersonAtIndex(model, INDEX_NINTH_PERSON);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":121,"author":{"gitID":"Aussiroth"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_NINTH_PERSON.getZeroBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_NINTH_PERSON, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":"    public void execute_validIndexUnfilteredList_throwsPersonMatchedCannotEditException() throws Exception {"},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"        //create a new pair for the test"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":"        Person student \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"        Person tutor \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"        model.addPair(student, tutor);"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPrice(\"100\").build();"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"        assertCommandFailure(editCommand, model, MESSAGE_MATCHED_CANNOT_EDIT);"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"alexawangzi"},"content":"        showPersonAtIndex(model, INDEX_NINTH_PERSON);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":226,"author":{"gitID":"alexawangzi"},"content":"        // edit -\u003e edits eighth person in unfiltered person list / first person in filtered person list"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":11,"Aussiroth":17,"-":248}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_FAILURE_MATCHED;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":"    public void execute_validIndexUnfilteredList_throwsPersonMatchedCannotDeleteException() throws Exception {"},{"lineNumber":88,"author":{"gitID":"Aussiroth"},"content":"        //create a new pair for the test"},{"lineNumber":89,"author":{"gitID":"Aussiroth"},"content":"        Person student \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"        Person tutor \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"        model.addPair(student, tutor);"},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(deleteCommand, model, MESSAGE_DELETE_PERSON_FAILURE_MATCHED, model);"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":96,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":13,"-":194}},{"path":"src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_AMY;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.RemarkCommand.MESSAGE_USAGE;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"public class RemarkCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE;"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"        // no index specified"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, REMARK_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        // no index and no field specified"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"        // negative index"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, \"-5 \" + PREFIX_REMARK + REMARK_AMY, MESSAGE_INVALID_INDEX);"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"        // zero index"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, \"0 \" + PREFIX_REMARK + REMARK_AMY, MESSAGE_INVALID_INDEX);"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"        // no index stated for editing remark"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, \"edit\", MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    public void parse_validPreamble_success() {"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" edit\";"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(\"\");"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(targetIndex, remark, true);"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"        // edit remark"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + REMARK_AMY;"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_AMY);"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(targetIndex, remark);"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"    public void parse_indexFieldSpecifiedNoRemark_success() {"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(\"\");"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand expectedCommand \u003d new RemarkCommand(targetIndex, remark);"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":72,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.NameContainsKeywordsPredicatePair;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotDeleteException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"Husband\";"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"Friend\";"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"Unused\";"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_ENGLISH \u003d \"english\";"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_CHINESE \u003d \"chinese\";"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_CHEMISTRY \u003d \"chemistry\";"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_PHYSICS \u003d \"physics\";"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_SUBJECT_AMY \u003d \"math\";"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_SUBJECT_BOB \u003d \"english\";"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_LEVEL_AMY \u003d \"lower Sec\";"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_LEVEL_BOB \u003d \"upper Sec\";"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_STATUS_BOB \u003d \"not matched\";"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"    public static final String VALID_PRICE_AMY \u003d \"98\";"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_PRICE_BOB \u003d \"113\";"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    public static final String VALID_ROLE_BOB \u003d \"tutor\";"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_LOWER_SEC \u003d \"lower Sec\";"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_UPPER_SEC \u003d \"upper Sec\";"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_LOWER_PRI \u003d \"lower Pri\";"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_UPPER_PRI \u003d \"upper Pri\";"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_TUTOR \u003d \"tutor\";"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_STUDENT \u003d \"student\";"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"    public static final String STATUS_UNMATCHED \u003d \"not matched\";"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_MATCHED \u003d \"matched\";"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"    public static final String REMARK_AMY \u003d \"Hardworking student.\";"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"    public static final String REMARK_BOB \u003d \"Patient tutor.\";"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"    public static final String VALID_RATE_AMY \u003d \"4.0\";"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"    public static final String VALID_RATE_BOB \u003d \"4.2\";"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"    public static final String RATECOUNT_AMY \u003d \"4\";"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"    public static final String RATECOUNT_BOB \u003d \"1\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"-1\"; //negative number"},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT + \"fake news\"; //not a listed subject"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_LEVEL_DESC \u003d \" \" + PREFIX_LEVEL + \"kindergarden\"; //not a listed level"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"teacher\"; // \u0027teacher\u0027 not allowed in tags"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":97,"author":{"gitID":"Aussiroth"},"content":"    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + \"veryverymatched\"; //not a listed status"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"    public static final String INVALID_RATE_EXCEEDRANGE \u003d \"6.0\";"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"    public static final String INVALID_RATE_NEGATIVE \u003d \"-0.1\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_DESC_ENGLISH \u003d \" \" + PREFIX_SUBJECT + \"english\";"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_DESC_CHINESE \u003d \" \" + PREFIX_SUBJECT + \"chinese\";"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_DESC_LOWER_SEC \u003d \" \" + PREFIX_LEVEL + \"lower Sec\";"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_DESC_UPPER_SEC \u003d \" \" + PREFIX_LEVEL + \"upper Sec\";"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_AMY;"},{"lineNumber":106,"author":{"gitID":"Aussiroth"},"content":"    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BOB;"},{"lineNumber":107,"author":{"gitID":"Aussiroth"},"content":"    public static final String LEVEL_DESC_AMY \u003d \" \" + PREFIX_LEVEL + VALID_LEVEL_AMY;"},{"lineNumber":108,"author":{"gitID":"Aussiroth"},"content":"    public static final String LEVEL_DESC_BOB \u003d \" \" + PREFIX_LEVEL + VALID_LEVEL_BOB;"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"    public static final String PRICE_DESC_AMY \u003d \" \" + PREFIX_PRICE + VALID_PRICE_AMY;"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"    public static final String PRICE_DESC_BOB \u003d \" \" + PREFIX_PRICE + VALID_PRICE_BOB;"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + ROLE_STUDENT;"},{"lineNumber":112,"author":{"gitID":"Aussiroth"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_DESC_STUDENT \u003d \" \" + PREFIX_ROLE + \"student\";"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_DESC_TUTOR \u003d \" \" + PREFIX_ROLE + \"tutor\";"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_DESC_UNMATCHED \u003d \" \" + PREFIX_STATUS + \"not matched\";"},{"lineNumber":116,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_NAME_BOB \u003d \" \" + PREFIX_NAME + \"bOb cHoO\";"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_EMAIL_BOB \u003d \" \" + PREFIX_EMAIL + \"bOb@eXaMpLe.CoM\";"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_ADDRESS_BOB  \u003d \" \" + PREFIX_ADDRESS + \"bLOck 123, BoBBy StReEt 3\";"},{"lineNumber":123,"author":{"gitID":"Aussiroth"},"content":"    public static final String CASE_INSENSITIVE_SUBJECT_BOB \u003d \" \" + PREFIX_SUBJECT + \"EngLIsH\";"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_LEVEL_BOB \u003d \" \" + PREFIX_LEVEL + \"uPPeR seC\";"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_STATUS_BOB \u003d \" \" + PREFIX_STATUS + \"nOt MAtCHEd\";"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_ROLE_BOB \u003d \" \" + PREFIX_ROLE + \"TutOR\";"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_CHINESE \u003d \" \" + PREFIX_SUBJECT + \"chi\";"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_PHYSICS \u003d \" \" + PREFIX_SUBJECT + \"phy\";"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_CHEMISTRY \u003d \" \" + PREFIX_SUBJECT + \"chem\";"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"    public static final String SUBJECT_SHORTCUT_ENGLISH \u003d \" \" + PREFIX_SUBJECT + \"eng\";"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_UPPER_SEC \u003d \" \" + PREFIX_LEVEL + \"us\";"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_LOWER_SEC \u003d \" \" + PREFIX_LEVEL + \"ls\";"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_UPPER_PRI \u003d \" \" + PREFIX_LEVEL + \"up\";"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"    public static final String LEVEL_SHORTCUT_LOWER_PRI \u003d \" \" + PREFIX_LEVEL + \"lp\";"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_SHORTCUT_UNMATCHED \u003d \" \" + PREFIX_STATUS + \"nm\";"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"    public static final String STATUS_SHORTCUT_MATCHED \u003d \" \" + PREFIX_STATUS + \"m\";"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_SHORTCUT_TUTOR \u003d \" \" + PREFIX_ROLE + \"t\";"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"    public static final String ROLE_SHORTCUT_STUDENT \u003d \" \" + PREFIX_ROLE + \"s\";"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_SUBJECT_SHORTCUT_ENGLISH \u003d \" \" + PREFIX_SUBJECT + \"eNg\";"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_LEVEL_SHORTCUT_UPPER_SEC \u003d \" \" + PREFIX_LEVEL + \"Us\";"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_STATUS_SHORTCUT_UNMATCHED \u003d \" \" + PREFIX_STATUS + \"nM\";"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"    public static final String CASE_INSENSITIVE_ROLE_SHORTCUT_TUTOR \u003d \" \" + PREFIX_ROLE + \"T\";"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":183,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"alexawangzi"},"content":"     * Updates {@code model}\u0027s filtered list to show only the pair at the given {@code targetIndex} in the"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"alexawangzi"},"content":"    public static void showPairAtIndex(Model model, Index targetIndex) {"},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPairList().size());"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"        Pair pair \u003d model.getFilteredPairList().get(targetIndex.getZeroBased());"},{"lineNumber":218,"author":{"gitID":"alexawangzi"},"content":"        final String[] splitName \u003d pair.getPairName().split(\"\\\\s+\");"},{"lineNumber":219,"author":{"gitID":"alexawangzi"},"content":"        model.updateFilteredPairList(new NameContainsKeywordsPredicatePair(Arrays.asList(splitName[0])));"},{"lineNumber":220,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":221,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(1, model.getFilteredPairList().size());"},{"lineNumber":222,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":233,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonMatchedCannotDeleteException e) {"},{"lineNumber":234,"author":{"gitID":"alexawangzi"},"content":"            e.printStackTrace();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":73,"Aussiroth":20,"sherlynng":8,"-":154}},{"path":"src/test/java/seedu/address/logic/parser/RateCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATE_EXCEEDRANGE;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATE_NEGATIVE;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATE_AMY;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATE_BOB;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.model.person.Rate.MESSAGE_RATE_CONSTRAINTS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"public class RateCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d MESSAGE_INVALID_COMMAND_FORMAT + RateCommand.MESSAGE_USAGE;"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    private RateCommandParser parser \u003d new RateCommandParser();"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        // no index specified"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d PREFIX_RATE + INVALID_RATE_EXCEEDRANGE;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"        // no index and no field specified"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        // negative index"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d \"-5\" + \" \" + PREFIX_RATE + VALID_RATE_AMY;"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"        // zero index"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"        userInput \u003d \"0\" + \" \" + PREFIX_RATE + VALID_RATE_AMY;"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"    public void parse_invalidRate_failure() {"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"        // exceed rate range"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_RATE + INVALID_RATE_EXCEEDRANGE;"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, userInput, MESSAGE_RATE_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        // negative rate"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        userInput \u003d INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_RATE + INVALID_RATE_NEGATIVE;"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"        assertParseFailure(parser, userInput, MESSAGE_RATE_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"    public void parse_allFieldsSpecifiedAbsoluteRate_success() {"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_RATE + VALID_RATE_AMY + \"-\";"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_AMY), true);"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        RateCommand expectedCommand \u003d new RateCommand(targetIndex, rate);"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"    public void parse_allFieldsSpecifiedAccumulatedRate_success() {"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_RATE + VALID_RATE_BOB;"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), false);"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"        RateCommand expectedCommand \u003d new RateCommand(targetIndex, rate);"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":73,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/FindMissingCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.JAMES;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.KEN;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.LENNY;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.MISTER;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.getMissingAttributesAddressBook;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.predicates.FindMissingPredicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":" * Contains integration tests (interaction with the Model) for {@code FindMissingCommand}."},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":" */"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"public class FindMissingCommandTest {"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    private Model missingAttributesModel \u003d new ModelManager(getMissingAttributesAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    public void equalsTest() {"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        FindMissingPredicate firstPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"                new FindMissingPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        FindMissingPredicate secondPredicate \u003d"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"                new FindMissingPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand firstCommand \u003d new FindMissingCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand secondCommand \u003d new FindMissingCommand(secondPredicate);"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand firstCommandCopy \u003d new FindMissingCommand(firstPredicate);"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(firstCommand.equals(\"A String\"));"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        // different input list -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"    public void execute_noMissingFields_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"        //special prepare command/assert command success using the typical persons model"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand command \u003d new FindMissingCommand("},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"                new FindMissingPredicate(Arrays.asList(\"phone\")));"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"    public void execute_oneField_onePersonFound() {"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand command \u003d prepareCommand(\"phone\");"},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(JAMES));"},{"lineNumber":79,"author":{"gitID":"Aussiroth"},"content":"        command \u003d prepareCommand(\"email\");"},{"lineNumber":80,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(JAMES));"},{"lineNumber":81,"author":{"gitID":"Aussiroth"},"content":"        command \u003d prepareCommand(\"address\");"},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(KEN));"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"        command \u003d prepareCommand(\"subject\");"},{"lineNumber":84,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(KEN));"},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"        command \u003d prepareCommand(\"level\");"},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(LENNY));"},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":"        command \u003d prepareCommand(\"price\");"},{"lineNumber":88,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(LENNY));"},{"lineNumber":89,"author":{"gitID":"Aussiroth"},"content":"        command \u003d prepareCommand(\"status\");"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(MISTER));"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"        command \u003d prepareCommand(\"role\");"},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(MISTER));"},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Aussiroth"},"content":"    public void execute_multipleField_multiplePersonFound() {"},{"lineNumber":97,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":98,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand command \u003d prepareCommand(\"email address\");"},{"lineNumber":99,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(JAMES, KEN));"},{"lineNumber":100,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":102,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"Aussiroth"},"content":"     * Parses {@code userInput} into a {@code FindMissingCommand}."},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"    private FindMissingCommand prepareCommand(String userInput) {"},{"lineNumber":106,"author":{"gitID":"Aussiroth"},"content":"        FindMissingCommand command \u003d new FindMissingCommand("},{"lineNumber":107,"author":{"gitID":"Aussiroth"},"content":"                new FindMissingPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":108,"author":{"gitID":"Aussiroth"},"content":"        command.setData(missingAttributesModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"        return command;"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":112,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"Aussiroth"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"Aussiroth"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"Aussiroth"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"Aussiroth"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":117,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Aussiroth"},"content":"    private void assertCommandSuccess(FindMissingCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":119,"author":{"gitID":"Aussiroth"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(missingAttributesModel.getAddressBook());"},{"lineNumber":120,"author":{"gitID":"Aussiroth"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":121,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":122,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":123,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedList, missingAttributesModel.getFilteredPersonList());"},{"lineNumber":124,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedAddressBook, missingAttributesModel.getAddressBook());"},{"lineNumber":125,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":107,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/ViewStatsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.ViewStatsCommand.MESSAGE_VIEW_STATS_SUCCESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"public class ViewStatsCommandTest {"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"    public void executeViewStatsCommand_success() {"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        ViewStatsCommand command \u003d new ViewStatsCommand();"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        assertCommandSuccess(command, model, MESSAGE_VIEW_STATS_SUCCESS, expectedModel);"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":15,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotDeleteException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"            } catch (PersonMatchedCannotDeleteException e) {"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"                e.printStackTrace();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.TutorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        Student validStudent \u003d new StudentBuilder().build();"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validStudent, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validStudent), commandResult.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(Arrays.asList(validStudent), modelStub.personsAdded);"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(modelStub.personsAdded.get(modelStub.personsAdded.size() - 1) instanceof Student);"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    public void execute_tutorAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        Tutor validTutor \u003d new TutorBuilder().build();"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validTutor, modelStub).execute();"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTutor), commandResult.feedbackToUser);"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(Arrays.asList(validTutor), modelStub.personsAdded);"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(modelStub.personsAdded.get(modelStub.personsAdded.size() - 1) instanceof Tutor);"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"    public void equals() {"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"        // same object -\u003e returns true"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"        // same values -\u003e returns true"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"        // different types -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"        // null -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        // different person -\u003e returns false"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"        return command;"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"    private class ModelStub implements Model {"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"            return null;"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"                throws DuplicatePersonException {"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"        public void rateRemarkPerson(Person target, Person editedPerson)"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"                throws DuplicatePersonException {"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"            return null;"},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"        public void addPair(Person student, Person tutor) {"},{"lineNumber":180,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":183,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"        public void deletePair(Pair target) throws PairNotFoundException {"},{"lineNumber":185,"author":{"gitID":"alexawangzi"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":188,"author":{"gitID":"alexawangzi"},"content":"        //dummy method"},{"lineNumber":189,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"alexawangzi"},"content":"        public ObservableList\u003cPair\u003e getFilteredPairList() {"},{"lineNumber":191,"author":{"gitID":"alexawangzi"},"content":"            return null;"},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":194,"author":{"gitID":"alexawangzi"},"content":"        //dummy method"},{"lineNumber":195,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"alexawangzi"},"content":"        public void updateFilteredPairList(Predicate\u003cPair\u003e predicate) {"},{"lineNumber":197,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":198,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":200,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":202,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"alexawangzi"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":204,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"alexawangzi"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":206,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"alexawangzi"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":208,"author":{"gitID":"alexawangzi"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":209,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":211,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":212,"author":{"gitID":"alexawangzi"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":213,"author":{"gitID":"alexawangzi"},"content":"            return new AddressBook();"},{"lineNumber":214,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"alexawangzi"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":219,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"alexawangzi"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":221,"author":{"gitID":"alexawangzi"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":222,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":223,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"alexawangzi"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":225,"author":{"gitID":"alexawangzi"},"content":"            requireNonNull(person);"},{"lineNumber":226,"author":{"gitID":"alexawangzi"},"content":"            personsAdded.add(person);"},{"lineNumber":227,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":229,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"alexawangzi"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":231,"author":{"gitID":"alexawangzi"},"content":"            return new AddressBook();"},{"lineNumber":232,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":235,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":185,"-":50}},{"path":"src/test/java/seedu/address/logic/commands/MatchCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.MatchCommand.MESSAGE_MATCH_FAILED;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.MatchCommand.MESSAGE_MISMATCH_ALREADY_MATCHED;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.MatchCommand.MESSAGE_MISMATCH_WRONG_LEVEL;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.MatchCommand.MESSAGE_MISMATCH_WRONG_PRICE;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.MatchCommand.MESSAGE_MISMATCH_WRONG_ROLE;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.MatchCommand.MESSAGE_MISMATCH_WRONG_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.LISA;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.MARY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"public class MatchCommandTest {"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    public void execute_invalidIndexForPairAUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d prepareCommand(indexA, indexB);"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(matchCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    public void execute_invalidIndexforPairBUnfilteredList_throwsCommandException() {"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d prepareCommand(indexA, indexB);"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(matchCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"    public void execute_incompatibleSameRole_throwsCommandException() {"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(7);"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(8);"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d prepareCommand(indexA, indexB);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(matchCommand, model, String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_ROLE));"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"    public void execute_incompatibleAlreadyMatched_throwsCommandException() {"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(5);"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(6);"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d prepareCommand(indexA, indexB);"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(matchCommand, model, MESSAGE_MISMATCH_ALREADY_MATCHED);"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    public void execute_incompatibleDifferentSubject_throwsCommandException() {"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(8);"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(9);"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d prepareCommand(indexA, indexB);"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(matchCommand, model, String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_SUBJECT));"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"    public void execute_incompatibleDifferentLevel_throwsCommandException() {"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(9);"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(10);"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d prepareCommand(indexA, indexB);"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(matchCommand, model, String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_LEVEL));"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    public void execute_incompatibleDifferentPrice_throwsCommandException() {"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(10);"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(11);"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d prepareCommand(indexA, indexB);"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(matchCommand, model, String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_PRICE));"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"    public void execute_pairAcceptedByModel_matchSuccessful() throws Exception {"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d Index.fromOneBased(12);"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d Index.fromOneBased(13);"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"        CommandResult commandResult \u003d getMatchCommand(indexA, indexB, model).execute();"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(String.format(MatchCommand.MESSAGE_MATCH_SUCCESS,"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"                LISA.getName().fullName + \" and \" + MARY.getName().fullName),"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"    * Returns a {@code MatchCommand} with the parameter {@code indexA}, {@code indexB}."},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"    */"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"    private MatchCommand prepareCommand(Index indexA, Index indexB) {"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand matchCommand \u003d new MatchCommand(indexA, indexB);"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        matchCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"        return matchCommand;"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"    private MatchCommand getMatchCommand(Index indexA, Index indexB, Model model) {"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        MatchCommand command \u003d new MatchCommand(indexA, indexB);"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"        return command;"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":108,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HENRY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.KeywordPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":29,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":30,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"dannyngmx94"},"content":" * Contains integration tests (interaction with the Model) for {@code FilterCommand}."},{"lineNumber":32,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":33,"author":{"gitID":"dannyngmx94"},"content":"public class FilterCommandTest {"},{"lineNumber":34,"author":{"gitID":"dannyngmx94"},"content":"    //private Model missingAttributesModel \u003d new ModelManager(getMissingAttributesAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"dannyngmx94"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":37,"author":{"gitID":"dannyngmx94"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"dannyngmx94"},"content":"    public void equalsTest() {"},{"lineNumber":39,"author":{"gitID":"dannyngmx94"},"content":"        KeywordPredicate firstPredicate \u003d new KeywordPredicate(\"first\");"},{"lineNumber":40,"author":{"gitID":"dannyngmx94"},"content":"        KeywordPredicate secondPredicate \u003d new KeywordPredicate(\"second\");"},{"lineNumber":41,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":42,"author":{"gitID":"dannyngmx94"},"content":"        FilterCommand firstCommand \u003d new FilterCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"dannyngmx94"},"content":"        FilterCommand secondCommand \u003d new FilterCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":45,"author":{"gitID":"dannyngmx94"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"dannyngmx94"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":47,"author":{"gitID":"dannyngmx94"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"dannyngmx94"},"content":"        FilterCommand firstCommandCopy \u003d new FilterCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"dannyngmx94"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"dannyngmx94"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"dannyngmx94"},"content":"        assertFalse(firstCommand.equals(\"A String\"));"},{"lineNumber":52,"author":{"gitID":"dannyngmx94"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"dannyngmx94"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":54,"author":{"gitID":"dannyngmx94"},"content":"        // different input list -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"dannyngmx94"},"content":"        assertFalse(firstCommand.equals(secondCommand));"},{"lineNumber":56,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":58,"author":{"gitID":"dannyngmx94"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"dannyngmx94"},"content":"    public void execute_noMissingFields_noPersonFound() {"},{"lineNumber":60,"author":{"gitID":"dannyngmx94"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitID":"dannyngmx94"},"content":"        //special prepare command/assert command success using the typical persons model"},{"lineNumber":62,"author":{"gitID":"dannyngmx94"},"content":"        FilterCommand command \u003d new FilterCommand(new KeywordPredicate(\"biology\"));"},{"lineNumber":63,"author":{"gitID":"dannyngmx94"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":64,"author":{"gitID":"dannyngmx94"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":65,"author":{"gitID":"dannyngmx94"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":66,"author":{"gitID":"dannyngmx94"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"dannyngmx94"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":68,"author":{"gitID":"dannyngmx94"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":69,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":71,"author":{"gitID":"dannyngmx94"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"dannyngmx94"},"content":"    public void execute_oneField_twoPersonFound() {"},{"lineNumber":73,"author":{"gitID":"dannyngmx94"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":74,"author":{"gitID":"dannyngmx94"},"content":"        FilterCommand command \u003d prepareCommand(\"chinese\");"},{"lineNumber":75,"author":{"gitID":"dannyngmx94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(GEORGE, HENRY));"},{"lineNumber":76,"author":{"gitID":"dannyngmx94"},"content":"        command \u003d prepareCommand(\"chemistry\");"},{"lineNumber":77,"author":{"gitID":"dannyngmx94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL));"},{"lineNumber":78,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":80,"author":{"gitID":"dannyngmx94"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"dannyngmx94"},"content":"     * Parses {@code userInput} into a {@code FilterCommand}."},{"lineNumber":82,"author":{"gitID":"dannyngmx94"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"dannyngmx94"},"content":"    private FilterCommand prepareCommand(String userInput) {"},{"lineNumber":84,"author":{"gitID":"dannyngmx94"},"content":"        FilterCommand command \u003d new FilterCommand(new KeywordPredicate(userInput));"},{"lineNumber":85,"author":{"gitID":"dannyngmx94"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":86,"author":{"gitID":"dannyngmx94"},"content":"        return command;"},{"lineNumber":87,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":89,"author":{"gitID":"dannyngmx94"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"dannyngmx94"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"dannyngmx94"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"dannyngmx94"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"dannyngmx94"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":94,"author":{"gitID":"dannyngmx94"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"dannyngmx94"},"content":"    private void assertCommandSuccess(FilterCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":96,"author":{"gitID":"dannyngmx94"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"dannyngmx94"},"content":"        CommandResult result \u003d command.execute();"},{"lineNumber":98,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":99,"author":{"gitID":"dannyngmx94"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":100,"author":{"gitID":"dannyngmx94"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":101,"author":{"gitID":"dannyngmx94"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":102,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":76,"-":27}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_AMY;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.RemarkCommand.MESSAGE_EDIT_REMARK_SUCCESS;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.RemarkCommand.MESSAGE_REMARK_PERSON_SUCCESS;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":" * and unit tests for RemarkCommand."},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"public class RemarkCommandTest {"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"        new RemarkCommand(null, remark);"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"    public void constructor_nullRemark_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        new RemarkCommand(INDEX_FIRST_PERSON, null);"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"    public void execute_editRemark_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(\"\");"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, remark, true);"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"        remarkCommand.preprocessUndoableCommand();"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EDIT_REMARK_SUCCESS, personInFilteredList.getName());"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withRemark(REMARK_BOB).build();"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, remark);"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"        remarkCommand.preprocessUndoableCommand();"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"                                 editedPerson.getName(), editedPerson.getRemark());"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, remark);"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"     * Adds remark in filtered list where index is larger than size of filtered list,"},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":"     * but smaller than size of address book"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, remark);"},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"85355255\")"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"                .withPrice(\"50\").withSubject(\"math\").withStatus(\"Not Matched\").withLevel(\"lower Sec\")"},{"lineNumber":130,"author":{"gitID":"sherlynng"},"content":"                .withRole(\"Tutor\").withRemark(REMARK_BOB).build();"},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, remark);"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"        // add remark -\u003e adds remark to first person"},{"lineNumber":137,"author":{"gitID":"sherlynng"},"content":"        remarkCommand.execute();"},{"lineNumber":138,"author":{"gitID":"sherlynng"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":139,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":140,"author":{"gitID":"sherlynng"},"content":"        // undo -\u003e reverts STUtor back to previous state and filtered person list to show all persons"},{"lineNumber":141,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":142,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":143,"author":{"gitID":"sherlynng"},"content":"        // redo -\u003e same first person with remark added again"},{"lineNumber":144,"author":{"gitID":"sherlynng"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":145,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":146,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":148,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"sherlynng"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":150,"author":{"gitID":"sherlynng"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":151,"author":{"gitID":"sherlynng"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":152,"author":{"gitID":"sherlynng"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":153,"author":{"gitID":"sherlynng"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":154,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":155,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, remark);"},{"lineNumber":156,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":157,"author":{"gitID":"sherlynng"},"content":"        // execution failed -\u003e remarkCommand not pushed into undoRedoStack"},{"lineNumber":158,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":159,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":160,"author":{"gitID":"sherlynng"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":161,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":162,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":163,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"     * 1. Adds a remark to a {@code Person} from a filtered list."},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":"     * 2. Undo the adding of remark."},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":169,"author":{"gitID":"sherlynng"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":170,"author":{"gitID":"sherlynng"},"content":"     * 4. Redo the adding of remark. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":171,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":174,"author":{"gitID":"sherlynng"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":175,"author":{"gitID":"sherlynng"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":176,"author":{"gitID":"sherlynng"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":177,"author":{"gitID":"sherlynng"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":"                .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":179,"author":{"gitID":"sherlynng"},"content":"                .withPrice(\"50\").withSubject(\"math\").withStatus(\"Matched\").withLevel(\"lower Sec\")"},{"lineNumber":180,"author":{"gitID":"sherlynng"},"content":"                .withRole(\"Student\").withRemark(REMARK_BOB).withRate(\"2.1\", \"2\").build();"},{"lineNumber":181,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":182,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, remark);"},{"lineNumber":183,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":184,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":185,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":186,"author":{"gitID":"sherlynng"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":187,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":188,"author":{"gitID":"sherlynng"},"content":"        // add remark -\u003e adds remark to second person in unfiltered person list / first person in filtered person list"},{"lineNumber":189,"author":{"gitID":"sherlynng"},"content":"        remarkCommand.execute();"},{"lineNumber":190,"author":{"gitID":"sherlynng"},"content":"        undoRedoStack.push(remarkCommand);"},{"lineNumber":191,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":192,"author":{"gitID":"sherlynng"},"content":"        // undo -\u003e reverts STUtor back to previous state and filtered person list to show all persons"},{"lineNumber":193,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":194,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":195,"author":{"gitID":"sherlynng"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":196,"author":{"gitID":"sherlynng"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":197,"author":{"gitID":"sherlynng"},"content":"        // redo -\u003e adds remark to same second person in unfiltered person list"},{"lineNumber":198,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":199,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":201,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"sherlynng"},"content":"    public void equals() throws Exception {"},{"lineNumber":203,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(REMARK_BOB);"},{"lineNumber":204,"author":{"gitID":"sherlynng"},"content":"        final RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, remark);"},{"lineNumber":205,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":206,"author":{"gitID":"sherlynng"},"content":"        // same values -\u003e returns true"},{"lineNumber":207,"author":{"gitID":"sherlynng"},"content":"        Person bob \u003d new PersonBuilder().withRemark(REMARK_BOB).build();"},{"lineNumber":208,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, bob.getRemark());"},{"lineNumber":209,"author":{"gitID":"sherlynng"},"content":"        assertTrue(remarkCommand.equals(commandWithSameValues));"},{"lineNumber":210,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":211,"author":{"gitID":"sherlynng"},"content":"        // same object -\u003e returns true"},{"lineNumber":212,"author":{"gitID":"sherlynng"},"content":"        assertTrue(remarkCommand.equals(remarkCommand));"},{"lineNumber":213,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":214,"author":{"gitID":"sherlynng"},"content":"        // null -\u003e returns false"},{"lineNumber":215,"author":{"gitID":"sherlynng"},"content":"        assertFalse(remarkCommand.equals(null));"},{"lineNumber":216,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":217,"author":{"gitID":"sherlynng"},"content":"        // different types -\u003e returns false"},{"lineNumber":218,"author":{"gitID":"sherlynng"},"content":"        assertFalse(remarkCommand.equals(new ClearCommand()));"},{"lineNumber":219,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":220,"author":{"gitID":"sherlynng"},"content":"        // different index -\u003e returns false"},{"lineNumber":221,"author":{"gitID":"sherlynng"},"content":"        bob \u003d new PersonBuilder().withRemark(REMARK_BOB).build();"},{"lineNumber":222,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand commandWithDifferentIndex \u003d prepareCommand(INDEX_SECOND_PERSON, bob.getRemark());"},{"lineNumber":223,"author":{"gitID":"sherlynng"},"content":"        assertFalse(remarkCommand.equals(commandWithDifferentIndex));"},{"lineNumber":224,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":225,"author":{"gitID":"sherlynng"},"content":"        // different remark -\u003e returns false"},{"lineNumber":226,"author":{"gitID":"sherlynng"},"content":"        Person amy \u003d new PersonBuilder().withRemark(REMARK_AMY).build();"},{"lineNumber":227,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand commandWithDifferentPerson \u003d prepareCommand(INDEX_FIRST_PERSON, amy.getRemark());"},{"lineNumber":228,"author":{"gitID":"sherlynng"},"content":"        assertFalse(remarkCommand.equals(commandWithDifferentPerson));"},{"lineNumber":229,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":231,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"sherlynng"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}"},{"lineNumber":233,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"sherlynng"},"content":"    private RemarkCommand prepareCommand(Index index, Remark remark) {"},{"lineNumber":235,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, remark);"},{"lineNumber":236,"author":{"gitID":"sherlynng"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":237,"author":{"gitID":"sherlynng"},"content":"        return remarkCommand;"},{"lineNumber":238,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":240,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"sherlynng"},"content":"     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code remark}"},{"lineNumber":242,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"sherlynng"},"content":"    private RemarkCommand prepareCommand(Index index, Remark remark, boolean isEditRemark) {"},{"lineNumber":244,"author":{"gitID":"sherlynng"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, remark, isEditRemark);"},{"lineNumber":245,"author":{"gitID":"sherlynng"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":246,"author":{"gitID":"sherlynng"},"content":"        return remarkCommand;"},{"lineNumber":247,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":223,"-":25}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_PRICE \u003d \"-50\";"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_LEVEL \u003d \"kindergarden\";"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_SUBJECT \u003d \"fake news\";"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_ROLE \u003d \"nottutor\";"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    private static final String INVALID_STATUS \u003d \"very matched\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_SUBJECT \u003d BENSON.getSubject().toString();"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_LEVEL \u003d BENSON.getLevel().toString();"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_STATUS \u003d BENSON.getStatus().toString();"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"    private static final String VALID_PRICE \u003d BENSON.getPrice().toString();"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    private static final List\u003cXmlAdaptedPairHash\u003e VALID_PAIRHASH \u003d Collections.singletonList("},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"            new XmlAdaptedPairHash(PairHash.DEFAULT_PAIR_HASH));"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_RATE \u003d BENSON.getRate().toString();"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"    private static final String VALID_RATECOUNT \u003d Integer.toString(BENSON.getRate().getCount());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        Person targetPerson \u003d new PersonBuilder().withPairhash(new PairHash(1234)).build();"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(targetPerson);"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(targetPerson, person.toModelType());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS,"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"                VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS,"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"                VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":114,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":123,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS,"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"                VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":133,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":142,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":143,"author":{"gitID":"sherlynng"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS,"},{"lineNumber":144,"author":{"gitID":"sherlynng"},"content":"                VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":154,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":155,"author":{"gitID":"sherlynng"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":156,"author":{"gitID":"sherlynng"},"content":"                        invalidTags, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":161,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidLevel_throwsIllegalValueException() {"},{"lineNumber":163,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":164,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":165,"author":{"gitID":"Aussiroth"},"content":"                        VALID_PRICE, VALID_SUBJECT, INVALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":166,"author":{"gitID":"Aussiroth"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":167,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Level.MESSAGE_LEVEL_CONSTRAINTS;"},{"lineNumber":168,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":169,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":171,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullLevel_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":174,"author":{"gitID":"Aussiroth"},"content":"                VALID_PRICE, VALID_SUBJECT, null, VALID_STATUS, VALID_ROLE, VALID_TAGS, VALID_REMARK,"},{"lineNumber":175,"author":{"gitID":"Aussiroth"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":176,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Level.class.getSimpleName());"},{"lineNumber":177,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":178,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidSubject_throwsIllegalValueException() {"},{"lineNumber":182,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":183,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":184,"author":{"gitID":"Aussiroth"},"content":"                        VALID_PRICE, INVALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullSubject_throwsIllegalValueException() {"},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":193,"author":{"gitID":"Aussiroth"},"content":"                VALID_PRICE, null, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS, VALID_REMARK,"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName());"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidPrice_throwsIllegalValueException() {"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"                        INVALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE,"},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":205,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"},{"lineNumber":206,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":207,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":209,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullPrice_throwsIllegalValueException() {"},{"lineNumber":211,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":212,"author":{"gitID":"Aussiroth"},"content":"                null, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS, VALID_REMARK,"},{"lineNumber":213,"author":{"gitID":"Aussiroth"},"content":"                        VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":214,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"},{"lineNumber":215,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":216,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":218,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {"},{"lineNumber":220,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":221,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":222,"author":{"gitID":"Aussiroth"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, INVALID_STATUS, VALID_ROLE,"},{"lineNumber":223,"author":{"gitID":"Aussiroth"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":224,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Status.MESSAGE_STATUS_CONSTRAINTS;"},{"lineNumber":225,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":226,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":228,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullRole_throwsIllegalValueException() {"},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, null, VALID_TAGS, VALID_REMARK,"},{"lineNumber":232,"author":{"gitID":"Aussiroth"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":233,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());"},{"lineNumber":234,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":237,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidRole_throwsIllegalValueException() {"},{"lineNumber":239,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":240,"author":{"gitID":"Aussiroth"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":241,"author":{"gitID":"Aussiroth"},"content":"                        VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, INVALID_ROLE,"},{"lineNumber":242,"author":{"gitID":"Aussiroth"},"content":"                        VALID_TAGS, VALID_REMARK, VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":243,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d Role.MESSAGE_ROLE_CONSTRAINTS;"},{"lineNumber":244,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":245,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":247,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":248,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":249,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":250,"author":{"gitID":"Aussiroth"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, null, VALID_ROLE, VALID_TAGS, VALID_REMARK,"},{"lineNumber":251,"author":{"gitID":"Aussiroth"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":252,"author":{"gitID":"Aussiroth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"},{"lineNumber":253,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":254,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":256,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":257,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"sherlynng"},"content":"    public void toModelType_nullRemark_throwsIllegalValueException() {"},{"lineNumber":259,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":260,"author":{"gitID":"alexawangzi"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS, null,"},{"lineNumber":261,"author":{"gitID":"sherlynng"},"content":"                VALID_RATE, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":262,"author":{"gitID":"sherlynng"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":264,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":266,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"sherlynng"},"content":"    public void toModelType_nullRate_throwsIllegalValueException() {"},{"lineNumber":268,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":269,"author":{"gitID":"sherlynng"},"content":"                VALID_PRICE, VALID_SUBJECT, VALID_LEVEL, VALID_STATUS, VALID_ROLE, VALID_TAGS,"},{"lineNumber":270,"author":{"gitID":"sherlynng"},"content":"                VALID_REMARK, null, VALID_RATECOUNT, VALID_PAIRHASH);"},{"lineNumber":271,"author":{"gitID":"sherlynng"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rate.class.getSimpleName());"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"Aussiroth"},"content":"    public void testXmlAdaptedPersonEquality() {"},{"lineNumber":277,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson alice \u003d new XmlAdaptedPerson(ALICE);"},{"lineNumber":278,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPerson copy \u003d new XmlAdaptedPerson(ALICE);"},{"lineNumber":279,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(alice.equals(alice));"},{"lineNumber":280,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(alice.equals(copy)); //check equality if values are equal"},{"lineNumber":281,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(alice.equals(ALICE)); //check not equal if type is different"},{"lineNumber":282,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":11,"Aussiroth":139,"sherlynng":31,"-":103}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"public class XmlAdaptedTagTest {"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_validTagDetails_returnsTag() throws Exception {"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"        Tag expectedTag \u003d new Tag(\"math\", Tag.AllTagTypes.SUBJECT);"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedTag xmlExpectedTag \u003d new XmlAdaptedTag(expectedTag);"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedTag, xmlExpectedTag.toModelType());"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_noTagType_returnsWithDefaultType() throws Exception {"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        Tag expectedTag \u003d new Tag(\"math\");"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedTag xmlTag \u003d new XmlAdaptedTag(\"math\");"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedTag, xmlTag.toModelType());"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_unknownTagType_returnsWithDefaultType() throws Exception {"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        Tag expectedTag \u003d new Tag(\"math\");"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedTag xmlTag \u003d new XmlAdaptedTag(\"math\", \"nonexistenttype\");"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedTag, xmlTag.toModelType());"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    public void testXmlAdaptedTagEquality() {"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedTag tagMath \u003d new XmlAdaptedTag(\"math\", \"SUBJECT\");"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedTag copy \u003d new XmlAdaptedTag(\"math\", \"SUBJECT\");"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(tagMath.equals(tagMath));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        //check equality if values are equal"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(tagMath.equals(copy));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        //check not equal if type is different"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(tagMath.equals(new Tag(\"math\", Tag.AllTagTypes.SUBJECT)));"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":42,"-":3}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPairHashTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"public class XmlAdaptedPairHashTest {"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_validPairHash_returnsPairHash() throws Exception {"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"        PairHash expectedPairHash \u003d new PairHash(12341);"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPairHash xmlExpectedPairHash \u003d new XmlAdaptedPairHash(expectedPairHash);"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(expectedPairHash, xmlExpectedPairHash.toModelType());"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"    public void toModelType_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPairHash invalidValueHash \u003d new XmlAdaptedPairHash(\"abcde\");"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(IllegalValueException.class, () -\u003e invalidValueHash.toModelType());"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"    public void testXmlAdaptedTagEquality() {"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPairHash targetPairHash \u003d new XmlAdaptedPairHash(\"12345\");"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        XmlAdaptedPairHash copy \u003d new XmlAdaptedPairHash(\"12345\");"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(targetPairHash.equals(targetPairHash));"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        //check equality if values are equal"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(targetPairHash.equals(copy));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        //check not equal if type is different"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(targetPairHash.equals(new PairHash(\"12345\")));"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"alexawangzi":1,"Aussiroth":31,"-":7}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"    public void addressBookBackupSave() throws Exception {"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"        //Note: This test is essentially similar to addressBookReadSave above, but uses backup method instead."},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"        storageManager.backupAddressBook(original);"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook(getTempFilePath(\"ab.backup\")).get();"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":80,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":11,"-":101}},{"path":"src/test/java/seedu/address/logic/commands/RateCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATECOUNT_AMY;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATECOUNT_BOB;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATE_AMY;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.RateCommand.MESSAGE_RATE_PERSON_SUCCESS;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NINTH_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":" * and unit tests for RateCommand."},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"public class RateCommandTest {"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"        new RateCommand(null, rate);"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"    public void constructor_nullRate_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        new RateCommand(INDEX_FIRST_PERSON, null);"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"    public void execute_filteredListAbsoluteRate_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_NINTH_PERSON);"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withRate(VALID_RATE_BOB, RATECOUNT_BOB).build();"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(RATECOUNT_BOB));"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, rate);"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        rateCommand.preprocessUndoableCommand();"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RATE_PERSON_SUCCESS,"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"                                 editedPerson.getName(), VALID_RATE_BOB);"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(rateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"    public void execute_filteredListAccumulatedRate_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_NINTH_PERSON);"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_AMY), false);"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"        Rate accumulatedRate \u003d personInFilteredList.getRate().accumulatedValue(personInFilteredList.getRate(), rate);"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList)"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"                .withRate(Double.toString(accumulatedRate.getDisplayedValue()),"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"                        Integer.toString(accumulatedRate.getCount())).build();"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, rate);"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"        rateCommand.preprocessUndoableCommand();"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RATE_PERSON_SUCCESS,"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"                editedPerson.getName(), VALID_RATE_AMY);"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(rateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(RATECOUNT_BOB));"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d prepareCommand(outOfBoundIndex, rate);"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(rateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"     * Adds rate in filtered list where index is larger than size of filtered list,"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"     * but smaller than size of address book"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(RATECOUNT_BOB));"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d prepareCommand(outOfBoundIndex, rate);"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(rateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":137,"author":{"gitID":"sherlynng"},"content":"                .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"85355255\")"},{"lineNumber":138,"author":{"gitID":"sherlynng"},"content":"                .withPrice(\"50\").withSubject(\"math\").withStatus(\"Not Matched\").withLevel(\"lower Sec\")"},{"lineNumber":139,"author":{"gitID":"sherlynng"},"content":"                .withRole(\"Tutor\").withRemark(\"Hardworking but slow learner.\")"},{"lineNumber":140,"author":{"gitID":"sherlynng"},"content":"                .withRate(VALID_RATE_BOB, RATECOUNT_BOB).build();"},{"lineNumber":141,"author":{"gitID":"sherlynng"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":142,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":143,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(RATECOUNT_BOB));"},{"lineNumber":144,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, rate);"},{"lineNumber":145,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":146,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":147,"author":{"gitID":"sherlynng"},"content":"        // add rate -\u003e adds rate to first person"},{"lineNumber":148,"author":{"gitID":"sherlynng"},"content":"        rateCommand.execute();"},{"lineNumber":149,"author":{"gitID":"sherlynng"},"content":"        undoRedoStack.push(rateCommand);"},{"lineNumber":150,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":151,"author":{"gitID":"sherlynng"},"content":"        // undo -\u003e reverts STUtor back to previous state and filtered person list to show all persons"},{"lineNumber":152,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":153,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":154,"author":{"gitID":"sherlynng"},"content":"        // redo -\u003e same first person with rate added again"},{"lineNumber":155,"author":{"gitID":"sherlynng"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":156,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":157,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":159,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"sherlynng"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":161,"author":{"gitID":"sherlynng"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":162,"author":{"gitID":"sherlynng"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"sherlynng"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"sherlynng"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(RATECOUNT_BOB));"},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d prepareCommand(outOfBoundIndex, rate);"},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":169,"author":{"gitID":"sherlynng"},"content":"        // execution failed -\u003e rateCommand not pushed into undoRedoStack"},{"lineNumber":170,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(rateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":171,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":172,"author":{"gitID":"sherlynng"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":174,"author":{"gitID":"sherlynng"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":175,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":177,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":"     * 1. Adds a rate to a {@code Person} from a filtered list."},{"lineNumber":179,"author":{"gitID":"sherlynng"},"content":"     * 2. Undo the adding of rate."},{"lineNumber":180,"author":{"gitID":"sherlynng"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":181,"author":{"gitID":"sherlynng"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":182,"author":{"gitID":"sherlynng"},"content":"     * 4. Redo the adding of rate. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":183,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"sherlynng"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":186,"author":{"gitID":"sherlynng"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":187,"author":{"gitID":"sherlynng"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"sherlynng"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":189,"author":{"gitID":"sherlynng"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":190,"author":{"gitID":"sherlynng"},"content":"                .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":191,"author":{"gitID":"sherlynng"},"content":"                .withPrice(\"50\").withSubject(\"math\").withStatus(\"Matched\").withLevel(\"lower Sec\")"},{"lineNumber":192,"author":{"gitID":"sherlynng"},"content":"                .withRole(\"Student\").withRemark(\"Not self motivated.\")"},{"lineNumber":193,"author":{"gitID":"sherlynng"},"content":"                .withRate(VALID_RATE_BOB, RATECOUNT_BOB).build();"},{"lineNumber":194,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":195,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(RATECOUNT_BOB));"},{"lineNumber":196,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, rate);"},{"lineNumber":197,"author":{"gitID":"sherlynng"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":198,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":199,"author":{"gitID":"sherlynng"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":200,"author":{"gitID":"sherlynng"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":201,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":202,"author":{"gitID":"sherlynng"},"content":"        // add rate -\u003e adds rate to second person in unfiltered person list / first person in filtered person list"},{"lineNumber":203,"author":{"gitID":"sherlynng"},"content":"        rateCommand.execute();"},{"lineNumber":204,"author":{"gitID":"sherlynng"},"content":"        undoRedoStack.push(rateCommand);"},{"lineNumber":205,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":206,"author":{"gitID":"sherlynng"},"content":"        // undo -\u003e reverts STUtor back to previous state and filtered person list to show all persons"},{"lineNumber":207,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":208,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":209,"author":{"gitID":"sherlynng"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":210,"author":{"gitID":"sherlynng"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":211,"author":{"gitID":"sherlynng"},"content":"        // redo -\u003e adds rate to same second person in unfiltered person list"},{"lineNumber":212,"author":{"gitID":"sherlynng"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":213,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":215,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"sherlynng"},"content":"    public void equals() throws Exception {"},{"lineNumber":217,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(Double.parseDouble(VALID_RATE_BOB), true);"},{"lineNumber":218,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(RATECOUNT_BOB));"},{"lineNumber":219,"author":{"gitID":"sherlynng"},"content":"        final RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, rate);"},{"lineNumber":220,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":221,"author":{"gitID":"sherlynng"},"content":"        // same values -\u003e returns true"},{"lineNumber":222,"author":{"gitID":"sherlynng"},"content":"        Person bob \u003d new PersonBuilder().withRate(VALID_RATE_BOB, RATECOUNT_BOB).build();"},{"lineNumber":223,"author":{"gitID":"sherlynng"},"content":"        RateCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, bob.getRate());"},{"lineNumber":224,"author":{"gitID":"sherlynng"},"content":"        assertTrue(rateCommand.equals(commandWithSameValues));"},{"lineNumber":225,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":226,"author":{"gitID":"sherlynng"},"content":"        // same object -\u003e returns true"},{"lineNumber":227,"author":{"gitID":"sherlynng"},"content":"        assertTrue(rateCommand.equals(rateCommand));"},{"lineNumber":228,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":229,"author":{"gitID":"sherlynng"},"content":"        // null -\u003e returns false"},{"lineNumber":230,"author":{"gitID":"sherlynng"},"content":"        assertFalse(rateCommand.equals(null));"},{"lineNumber":231,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":232,"author":{"gitID":"sherlynng"},"content":"        // different types -\u003e returns false"},{"lineNumber":233,"author":{"gitID":"sherlynng"},"content":"        assertFalse(rateCommand.equals(new ClearCommand()));"},{"lineNumber":234,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":235,"author":{"gitID":"sherlynng"},"content":"        // different index -\u003e returns false"},{"lineNumber":236,"author":{"gitID":"sherlynng"},"content":"        bob \u003d new PersonBuilder().withRate(VALID_RATE_BOB, RATECOUNT_BOB).build();"},{"lineNumber":237,"author":{"gitID":"sherlynng"},"content":"        RateCommand commandWithDifferentIndex \u003d prepareCommand(INDEX_SECOND_PERSON, bob.getRate());"},{"lineNumber":238,"author":{"gitID":"sherlynng"},"content":"        assertFalse(rateCommand.equals(commandWithDifferentIndex));"},{"lineNumber":239,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":240,"author":{"gitID":"sherlynng"},"content":"        // different rate -\u003e returns false"},{"lineNumber":241,"author":{"gitID":"sherlynng"},"content":"        Person amy \u003d new PersonBuilder().withRate(VALID_RATE_AMY, RATECOUNT_AMY).build();"},{"lineNumber":242,"author":{"gitID":"sherlynng"},"content":"        RateCommand commandWithDifferentPerson \u003d prepareCommand(INDEX_FIRST_PERSON, amy.getRate());"},{"lineNumber":243,"author":{"gitID":"sherlynng"},"content":"        assertFalse(rateCommand.equals(commandWithDifferentPerson));"},{"lineNumber":244,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":246,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"sherlynng"},"content":"     * Returns an {@code RateCommand} with parameters {@code index} and {@code rate}"},{"lineNumber":248,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"sherlynng"},"content":"    private RateCommand prepareCommand(Index index, Rate rate) {"},{"lineNumber":250,"author":{"gitID":"sherlynng"},"content":"        RateCommand rateCommand \u003d new RateCommand(index, rate);"},{"lineNumber":251,"author":{"gitID":"sherlynng"},"content":"        rateCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":252,"author":{"gitID":"sherlynng"},"content":"        return rateCommand;"},{"lineNumber":253,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"alexawangzi":1,"sherlynng":228,"-":25}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"    public void backupAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":"        String backupfilePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\" + \".backup\";"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"        //Save in backup file and read back"},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"        xmlAddressBookStorage.backupAddressBook(original);"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":"        ReadOnlyAddressBook backup \u003d xmlAddressBookStorage.readAddressBook(backupfilePath).get();"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"        assertEquals(original, new AddressBook(backup));"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":8,"-":129}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    public void checkNameEquality() {"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        //test name against non-name type"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Name(\"Stutor\").equals(null));"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Name(\"Stutor\").equals(new Address(\"Stutor\")));"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if name string is the same"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Name(\"Stutor\").equals(new Name(\"Stutor\")));"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"    public void checkNameHashCode() {"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"        Name name \u003d new Name(\"peter jack\");"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(name.hashCode() \u003d\u003d name.fullName.hashCode());"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        name \u003d new Name(\"12345\");"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(name.hashCode() \u003d\u003d name.fullName.hashCode());"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"        name \u003d new Name(\"Capital Tan\");"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(name.hashCode() \u003d\u003d name.fullName.hashCode());"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":21,"-":40}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    public void checkPhoneEquality() {"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        //test phone against non-phone type"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Phone(\"91009222\").equals(null));"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Phone(\"91009222\").equals(new Address(\"91009222\")));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if phone string is the same"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Phone(\"91009222\").equals(new Phone(\"91009222\")));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"    public void checkPhoneHashCode() {"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        Phone phone \u003d new Phone(\"911\");"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(phone.hashCode() \u003d\u003d phone.value.hashCode());"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        phone \u003d new Phone(\"93121534\");"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(phone.hashCode() \u003d\u003d phone.value.hashCode());"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        phone \u003d new Phone(\"124293842033123\");"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(phone.hashCode() \u003d\u003d phone.value.hashCode());"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":19,"-":34}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"    public void testSerializableAddressBookEquality() throws Exception {"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        XmlSerializableAddressBook copy \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(dataFromFile.equals(dataFromFile));"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(dataFromFile.equals(copy)); //assert equality is true if values are equal"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(dataFromFile.equals(addressBookFromFile)); //assert equality is false if class is different"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":16,"-":50}},{"path":"src/test/java/seedu/address/model/person/SubjectTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"public class SubjectTest {"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Subject(null));"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    public void isValidPrice() {"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"        // null subject"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubject(null));"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        // invalid subject"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Subject.isValidSubject(\"computer science\")); //subjects not in list"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Subject.isValidSubject(\"malay\"));"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        // valid subjects"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Subject.isValidSubject(\"math\"));"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Subject.isValidSubject(\"English\")); // check that case doesn\u0027t matter"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Subject.isValidSubject(\"chemistrY\"));"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    public void checkSubjectEquality() {"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        //test name against non-name type"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Subject(\"math\").equals(null));"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Subject(\"math\").equals(new Address(\"math\")));"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if name string is the same"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Subject(\"math\").equals(new Subject(\"math\")));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    public void checkSubjectHashCode() {"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        Subject subject \u003d new Subject(\"math\");"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(subject.hashCode() \u003d\u003d subject.value.hashCode());"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        subject \u003d new Subject(\"english\");"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(subject.hashCode() \u003d\u003d subject.value.hashCode());"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        subject \u003d new Subject(\"chemistry\");"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(subject.hashCode() \u003d\u003d subject.value.hashCode());"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":42,"-":9}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.NameContainsKeywordsPredicatePair;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.PairBuilder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        //pair checks"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        NameContainsKeywordsPredicatePair firstPairPredicate \u003d new"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"            NameContainsKeywordsPredicatePair(firstPredicateKeywordList);"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        NameContainsKeywordsPredicatePair secondPairPredicate \u003d new"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"            NameContainsKeywordsPredicatePair(secondPredicateKeywordList);"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(firstPairPredicate.equals(firstPairPredicate));"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(firstPairPredicate.equals(null));"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(firstPairPredicate.equals(secondPairPredicate));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        // person operation"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        //pair operation"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        // One keyword"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        NameContainsKeywordsPredicatePair predicatePair \u003d"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"                new NameContainsKeywordsPredicatePair(Collections.singletonList(\"Elle\"));"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(predicatePair.test(new PairBuilder().build()));"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        // Multiple keywords"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        predicatePair \u003d new NameContainsKeywordsPredicatePair(Arrays.asList(\"Elle\", \"Fiona\"));"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(predicatePair.test(new PairBuilder().build()));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"        predicatePair \u003d new NameContainsKeywordsPredicatePair(Arrays.asList(\"Bob\", \"Elle\"));"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(predicatePair.test(new PairBuilder().build()));"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"        // Mixed-case keywords"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        predicatePair \u003d new NameContainsKeywordsPredicatePair(Arrays.asList(\"eLlE\", \"FioNa\"));"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(predicatePair.test(new PairBuilder().build()));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":20,"Aussiroth":9,"-":77}},{"path":"src/test/java/seedu/address/model/UniquePairListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPairs.RANDOM_PAIR_A;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPairs.RANDOM_PAIR_B;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.UniquePairList;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"public class UniquePairListTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList uniquePairList \u003d new UniquePairList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"        uniquePairList.asObservableList().remove(0);"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public void checkContainPair() throws DuplicatePairException {"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList uniquePairList \u003d new UniquePairList();"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        uniquePairList.add(RANDOM_PAIR_A);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(uniquePairList.contains(RANDOM_PAIR_A));"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(uniquePairList.contains(RANDOM_PAIR_B));"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    public void addPair() throws DuplicatePairException {"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList uniquePairList \u003d new UniquePairList();"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        uniquePairList.add(RANDOM_PAIR_A);"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(uniquePairList.contains(RANDOM_PAIR_A));"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    public void setPair() throws DuplicatePairException, PairNotFoundException {"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList listA \u003d new UniquePairList();"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        listA.add(RANDOM_PAIR_A);"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList listB \u003d new UniquePairList();"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        listB.add(RANDOM_PAIR_B);"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        listA.setPair(RANDOM_PAIR_A, RANDOM_PAIR_B);"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(listA, listB);"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    public void setPairs() throws DuplicatePairException, PairNotFoundException {"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList listA \u003d new UniquePairList();"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        listA.add(RANDOM_PAIR_A);"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList listB \u003d new UniquePairList();"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        listB.add(RANDOM_PAIR_B);"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        listA.setPairs(listB);"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(listA, listB);"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    public void removePair() throws DuplicatePairException, PairNotFoundException {"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList listA \u003d new UniquePairList();"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        UniquePairList listB \u003d new UniquePairList();"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"        listA.add(RANDOM_PAIR_A);"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        listA.add(RANDOM_PAIR_B);"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"        listB.add(RANDOM_PAIR_B);"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        listA.remove(RANDOM_PAIR_A);"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(listA, listB);"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"    public void deletePair_noMatchingPair_throwsPairNotFoundException() {"},{"lineNumber":84,"author":{"gitID":"Aussiroth"},"content":"        UniquePairList uniquePairList \u003d new UniquePairList();"},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(PairNotFoundException.class, () -\u003e uniquePairList.remove(RANDOM_PAIR_A));"},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":88,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"Aussiroth"},"content":"    public void checkHashCodeMethod() throws Exception {"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"        UniquePairList uniquePairListA \u003d new UniquePairList();"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"        UniquePairList uniquePairListB \u003d new UniquePairList();"},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"        uniquePairListA.add(RANDOM_PAIR_A);"},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"        uniquePairListB.add(RANDOM_PAIR_A);"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(uniquePairListA.hashCode() \u003d\u003d uniquePairListB.hashCode());"},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":97,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"Aussiroth"},"content":"    public void editPair_targetNotFound_throwsPairNotFoundException() throws Exception {"},{"lineNumber":99,"author":{"gitID":"Aussiroth"},"content":"        UniquePairList uniquePairList \u003d new UniquePairList();"},{"lineNumber":100,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(PairNotFoundException.class, () -\u003e uniquePairList.setPair(RANDOM_PAIR_A, RANDOM_PAIR_B));"},{"lineNumber":101,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":103,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"    public void editPair_pairInList_throwsDuplicatePairException() throws Exception {"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"        UniquePairList uniquePairList \u003d new UniquePairList();"},{"lineNumber":106,"author":{"gitID":"Aussiroth"},"content":"        uniquePairList.add(RANDOM_PAIR_B);"},{"lineNumber":107,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(PairNotFoundException.class, () -\u003e uniquePairList.setPair(RANDOM_PAIR_A, RANDOM_PAIR_B));"},{"lineNumber":108,"author":{"gitID":"Aussiroth"},"content":"        uniquePairList.add(RANDOM_PAIR_A);"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(DuplicatePairException.class, () -\u003e uniquePairList.setPair(RANDOM_PAIR_A, RANDOM_PAIR_B));"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"alexawangzi":70,"Aussiroth":32,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/UnmatchCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPairAtIndex;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PAIR;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PAIR;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"public class UnmatchCommandTest {"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        Pair pairToDelete \u003d model.getFilteredPairList().get(INDEX_FIRST_PAIR.getZeroBased());"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        //update persons in model to have the correct pairhash to test deletion"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        Person alice \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        Person benson \u003d model.getFilteredPersonList().get(1);"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        Person newAlice \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        Person newBenson \u003d model.getFilteredPersonList().get(1);"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        newAlice.addPairHash(pairToDelete.getPairHash());"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        newBenson.addPairHash(pairToDelete.getPairHash());"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        newBenson.addPairHash(new PairHash(1234)); //ensure benson status stays matched after unmatch"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        model.updatePerson(newAlice, alice);"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        model.updatePerson(newBenson, benson);"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand unmatchCommand \u003d prepareCommand(INDEX_FIRST_PAIR);"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(UnmatchCommand.MESSAGE_UNMATCH_PAIR_SUCCESS, pairToDelete);"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.deletePair(pairToDelete);"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(unmatchCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPairList().size() + 1);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand unmatchCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(unmatchCommand, model, Messages.MESSAGE_INVALID_PAIR_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        showPairAtIndex(model, INDEX_FIRST_PAIR);"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        Pair pairToDelete \u003d model.getFilteredPairList().get(INDEX_FIRST_PAIR.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand unmatchCommand \u003d prepareCommand(INDEX_FIRST_PAIR);"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(UnmatchCommand.MESSAGE_UNMATCH_PAIR_SUCCESS, pairToDelete);"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.deletePair(pairToDelete);"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        showNoPair(expectedModel);"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(unmatchCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        showPairAtIndex(model, INDEX_FIRST_PAIR);"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PAIR;"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPairList().size());"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand unmatchCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(unmatchCommand, model, Messages.MESSAGE_INVALID_PAIR_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"        Pair pairToDelete \u003d model.getFilteredPairList().get(INDEX_FIRST_PAIR.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand unmatchCommand \u003d prepareCommand(INDEX_FIRST_PAIR);"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"        // delete -\u003e first pair deleted"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"        unmatchCommand.execute();"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"        undoRedoStack.push(unmatchCommand);"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered pair list to show all pairs"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"        // redo -\u003e same first pair deleted again"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"        expectedModel.deletePair(pairToDelete);"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPairList().size() + 1);"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand unmatchCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"        // execution failed -\u003e unmatchCommand not pushed into undoRedoStack"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(unmatchCommand, model, Messages.MESSAGE_INVALID_PAIR_DISPLAYED_INDEX);"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"    public void equals() throws Exception {"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PAIR);"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PAIR);"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"        // same object -\u003e returns true"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"        // same values -\u003e returns true"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PAIR);"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"        // different types -\u003e returns false"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"        // null -\u003e returns false"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"        // different pair -\u003e returns false"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"     * Returns a {@code UnmatchCommand} with the parameter {@code index}."},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"    private UnmatchCommand prepareCommand(Index index) {"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"        UnmatchCommand unmatchCommand \u003d new UnmatchCommand(index);"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"        unmatchCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"        return unmatchCommand;"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":"    private void showNoPair(Model model) {"},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"        model.updateFilteredPairList(p -\u003e false);"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(model.getFilteredPairList().isEmpty());"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":150,"Aussiroth":2,"-":19}},{"path":"src/test/java/seedu/address/model/person/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"    public void checkEmailEquality() {"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        //test email against non-email type"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Email(\"test@abc.com\").equals(null));"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Email(\"test@abc.com\").equals(new Address(\"test@abc.com\")));"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if email string is the same"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Email(\"test@abc.com\").equals(new Email(\"test@abc.com\")));"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"    public void checkEmailHashCode() {"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        Email email \u003d new Email(\"PeterJack_1190@example.com\");"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(email.hashCode() \u003d\u003d email.value.hashCode());"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"        email \u003d new Email(\"test@localhost\");"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(email.hashCode() \u003d\u003d email.value.hashCode());"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"        email \u003d new Email(\"peter_jack@very-very-very-long-example.com\");"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(email.hashCode() \u003d\u003d email.value.hashCode());"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":21,"-":54}},{"path":"src/test/java/seedu/address/model/person/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Address.isValidAddress(\" \")); //empty space is now valid address"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"    //@@aussiroth"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    public void checkAddressEquality() {"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        //test address against non-address type"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Address(\"Computing Drive\").equals(null));"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Address(\"Computing Drive\").equals(new Name(\"Computing Drive\")));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if address string is the same"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Address(\"Blk 456, Den Road, #01-355\").equals(new Address(\"Blk 456, Den Road, #01-355\")));"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    public void checkAddressHashCode() {"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        Address address \u003d new Address(\"Blk 456, Den Road, #01-355\");"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(address.hashCode() \u003d\u003d address.value.hashCode());"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        address \u003d new Address(\"-\");"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(address.hashCode() \u003d\u003d address.value.hashCode());"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        address \u003d new Address(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\");"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(address.hashCode() \u003d\u003d address.value.hashCode());"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":22,"-":28}},{"path":"src/test/java/seedu/address/model/person/RateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"sherlynng"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":3,"author":{"gitID":"sherlynng"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"public class RateTest {"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Rate((Double) null, true));"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"    public void checkRateAccumulatedValue_success() {"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"        Rate oldRate \u003d new Rate(8, true);"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"        oldRate.setCount(2);"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"        Rate newRate \u003d new Rate(3, true);"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"        Rate expectedRate \u003d new Rate(11, true);"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"        expectedRate.setCount(3);"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"        Rate actualRate \u003d Rate.accumulatedValue(oldRate, newRate);"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"        assertTrue(expectedRate.equals(actualRate));"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"    public void getDisplayedValue_success() {"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(13, true);"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(4);"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"        double expectedValue \u003d 3.3;"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"        double actualValue \u003d rate.getDisplayedValue();"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"        assertEquals(expectedValue, actualValue, 0.001);"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"    public void checkRateToString() {"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"        assertTrue(new Rate(3, true).toString().equals(\"3.0\")); // Integer rating"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"        assertTrue(new Rate(2.1, true).toString().equals(\"2.1\")); // Rating with decimal value"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    public void isValidRate() {"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        // invalid rate"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        assertFalse(Rate.isValidRate(\"-1.0\")); // negative numbers"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"        assertFalse(Rate.isValidRate(\"6.0\")); // exceed 5"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        // valid rate"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"        assertTrue(Rate.isValidRate(\"3.3\"));"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"        assertTrue(Rate.isValidRate(\"1\")); // single digit"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"    public void checkRateEquality() {"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"        //test rate against non-rate type"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"        assertFalse(new Rate(1, true).equals(null));"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        assertFalse(new Rate(1, true).equals(new Tag(\"100\")));"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        //test cumulative against absolute rate"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        assertFalse(new Rate(1, true).equals(new Rate(1, false)));"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        //test different rate values"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        assertFalse(new Rate(2, true).equals(new Rate(2.2, true)));"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"        //test correctly returns equal if rate string is the same"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        assertTrue(new Rate(1, true).equals(new Rate(1, true)));"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"    public void checkRateHashCode() {"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d new Rate(3, true);"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"        assertTrue(rate.hashCode() \u003d\u003d rate.hashCode());"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"        rate \u003d new Rate(2.1, true);"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"        assertTrue(rate.hashCode() \u003d\u003d rate.hashCode());"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"        rate \u003d new Rate(4.5, false);"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"        assertTrue(rate.hashCode() \u003d\u003d rate.hashCode());"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":75,"Aussiroth":3,"-":5}},{"path":"src/test/java/seedu/address/model/person/PriceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"public class PriceTest {"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    public void isValidPrice() {"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"        // invalid prices"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Price.isValidPrice(\"-5\")); // negative numbers"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Price.isValidPrice(\"-100\"));"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"        // valid prices"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Price.isValidPrice(\"25\"));"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Price.isValidPrice(\"5\")); // single digit"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Price.isValidPrice(\"123456\")); // large number"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    public void checkPriceEquality() {"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        //test price against non-price type"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Price(\"100\").equals(null));"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Price(\"100\").equals(new Tag(\"100\")));"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if price string is the same"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Price(\"100\").equals(new Price(\"100\")));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    public void checkPriceHashCode() {"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        Price price \u003d new Price(\"25\");"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(price.hashCode() \u003d\u003d price.value.hashCode());"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        price \u003d new Price(\"5\");"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(price.hashCode() \u003d\u003d price.value.hashCode());"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        price \u003d new Price(\"123456\");"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(price.hashCode() \u003d\u003d price.value.hashCode());"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":44,"-":7}},{"path":"src/test/java/seedu/address/model/person/LevelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"public class LevelTest {"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Level(null));"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    public void isValidLevel() {"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"        // null level"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Level.isValidLevel(null));"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        // invalid levels"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Level.isValidLevel(\"JC\")); // not accepted levels"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Level.isValidLevel(\"middle Sec\"));"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        // valid levels"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"upper Sec\"));"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"lower Pri\"));"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"Upper pri\")); //check case insensitive"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Level.isValidLevel(\"Lower sec\"));"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    public void checkLevelEquality() {"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        //test level against non-level type"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Level(\"upper Sec\").equals(null));"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Level(\"upper Sec\").equals(new Tag(\"upper Sec\")));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if level string is the same"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Level(\"upper Sec\").equals(new Level(\"upper Sec\")));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"    public void checkLevelHashCode() {"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        Level level \u003d new Level(\"upper sec\");"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(level.hashCode() \u003d\u003d level.value.hashCode());"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        level \u003d new Level(\"lower sec\");"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(level.hashCode() \u003d\u003d level.value.hashCode());"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        level \u003d new Level(\"lower pri\");"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(level.hashCode() \u003d\u003d level.value.hashCode());"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":46,"-":7}},{"path":"src/test/java/seedu/address/model/person/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"public class RemarkTest {"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"    public void checkRemarkToString() {"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"        assertTrue(new Remark(\"Friendly and patient.\").toString() \u003d\u003d \"Friendly and patient.\");"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    public void checkRemarkEquality() {"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"        //test remark against non-remark type"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"        assertFalse(new Remark(\"Friendly and patient.\").equals(null));"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"        assertFalse(new Remark(\"Friendly and patient.\").equals(new Address(\"Friendly and patient.\")));"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"        //test correctly returns equal if remark string is the same"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        assertTrue(new Remark(\"Friendly and patient.\").equals(new Remark(\"Friendly and patient.\")));"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"    public void checkRemarkHashCode() {"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d new Remark(\"\");"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"        assertTrue(remark.hashCode() \u003d\u003d remark.value.hashCode());"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"        remark \u003d new Remark(\"Friendly and patient.\");"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"        assertTrue(remark.hashCode() \u003d\u003d remark.value.hashCode());"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"        remark \u003d new Remark(\"Late and impatient tutor.\");"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        assertTrue(remark.hashCode() \u003d\u003d remark.value.hashCode());"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":33,"-":9}},{"path":"src/test/java/seedu/address/model/person/StatusTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"public class StatusTest {"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Status(null));"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    public void isValidStatus() {"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"        // invalid statuses"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Status.isValidStatus(\"notastatus\")); // not listed statuses"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Status.isValidStatus(\"somewhatmatched\"));"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"        // valid status"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Status.isValidStatus(\"not Matched\"));"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Status.isValidStatus(\"matched\"));"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    public void checkStatusEquality() {"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        //test status against non-status type"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Status(\"matched\").equals(null));"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(new Status(\"matched\").equals(new Tag(\"matched\")));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        //test correctly returns equal if status string is the same"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Status(\"matched\").equals(new Status(\"m\")));"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(new Status(\"not matched\").equals(new Status(\"nm\")));"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    public void checkStatusHashCode() {"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        Status status \u003d new Status(\"not Matched\");"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(status.hashCode() \u003d\u003d status.value.hashCode());"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        status \u003d new Status(\"matched\");"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(status.hashCode() \u003d\u003d status.value.hashCode());"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":42,"-":7}},{"path":"src/test/java/seedu/address/model/UniquePersonListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"    public void editAndDelete_noMatchingPerson_throwsPersonNotFoundException() {"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        Person person \u003d TypicalPersons.ALICE;"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(person));"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(person, person));"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    public void checkHashCodeMethod() throws Exception {"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        UniquePersonList uniquePersonListA \u003d new UniquePersonList();"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        UniquePersonList uniquePersonListB \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        uniquePersonListA.add(TypicalPersons.ALICE);"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        uniquePersonListB.add(TypicalPersons.ALICE);"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(uniquePersonListA.hashCode() \u003d\u003d uniquePersonListB.hashCode());"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":25,"-":18}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PAIRS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPairs.RANDOM_PAIR_A;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.NameContainsKeywordsPredicatePair;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public void getFilteredPairList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        modelManager.getFilteredPairList().remove(0);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        keywords \u003d RANDOM_PAIR_A.getPairName().split(\"\\\\s+\");"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"        modelManager.updateFilteredPairList(new NameContainsKeywordsPredicatePair(Arrays.asList(keywords)));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        modelManager.updateFilteredPairList(PREDICATE_SHOW_ALL_PAIRS);"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":12,"-":69}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class TagTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null tag name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"    public void isValidTagType() {"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        //incorrect string"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        assertFalse(Tag.isValidTagType(\"NOTATYPE\"));"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        //correct type"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Tag.isValidTagType(\"SUBJECT\"));"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(Tag.isValidTagType(\"STATUS\"));"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"    public void toStringMethod() {"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        Tag target \u003d new Tag(\"Math\", Tag.AllTagTypes.SUBJECT);"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(\"[Math]\".equals(target.toString()));"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":19,"-":25}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.testutil.TypicalPairs;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    private final AddressBook addressBookWithAmyandBob \u003d"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"            new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"    public void resetData_withDuplicatePairs_throwsAssertionError() {"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"        // Repeat RANDOM_PAIR_A twice"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"        List\u003cPair\u003e newPairs \u003d Arrays.asList(TypicalPairs.RANDOM_PAIR_A, TypicalPairs.RANDOM_PAIR_A);"},{"lineNumber":79,"author":{"gitID":"Aussiroth"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newPairs);"},{"lineNumber":80,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":81,"author":{"gitID":"Aussiroth"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"        addressBook.resetData(newData);"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":99,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"Aussiroth"},"content":"    public void removePersonOrPair_doesNotExist_throwsNotFoundException() throws Exception {"},{"lineNumber":101,"author":{"gitID":"Aussiroth"},"content":"        addressBook.addPerson(AMY);"},{"lineNumber":102,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e addressBook.removePerson(BOB));"},{"lineNumber":103,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(PairNotFoundException.class, () -\u003e addressBook.removePair(TypicalPairs.RANDOM_PAIR_A));"},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":106,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"Aussiroth"},"content":"    public void checkHashCodeMethod() {"},{"lineNumber":108,"author":{"gitID":"Aussiroth"},"content":"        AddressBook first \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"        AddressBook copy \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(first.hashCode() \u003d\u003d copy.hashCode());"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":113,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":120,"author":{"gitID":"Aussiroth"},"content":"        private final ObservableList\u003cPair\u003e pairs \u003d FXCollections.observableArrayList();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Aussiroth"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cPair\u003e pairs) {"},{"lineNumber":128,"author":{"gitID":"Aussiroth"},"content":"            this(persons, tags);"},{"lineNumber":129,"author":{"gitID":"Aussiroth"},"content":"            this.pairs.setAll(pairs);"},{"lineNumber":130,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"        //A dummy method, needs to be completed"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"        public ObservableList\u003cPair\u003e getPairList() {"},{"lineNumber":140,"author":{"gitID":"Aussiroth"},"content":"            return pairs;"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":15,"Aussiroth":41,"-":93}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setPrice(person.getPrice());"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setSubject(person.getSubject());"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setLevel(person.getLevel());"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setStatus(null);"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        descriptor.setRole(person.getRole());"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        HashSet\u003cTag\u003e correctTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        for (Tag tag : person.getTags()) {"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"            if (tag.tagType \u003d\u003d Tag.AllTagTypes.DEFAULT) {"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"                correctTags.add(tag);"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        if (correctTags.size() \u003d\u003d 0) {"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"            descriptor.setTags(null);"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        } else {"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"            descriptor.setTags(new HashSet\u003c\u003e(correctTags));"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"     * Sets the {@code Price} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":"    public EditPersonDescriptorBuilder withPrice(String price) {"},{"lineNumber":96,"author":{"gitID":"Aussiroth"},"content":"        descriptor.setPrice(new Price(price));"},{"lineNumber":97,"author":{"gitID":"Aussiroth"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Status} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    public EditPersonDescriptorBuilder withStatus(String status) {"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"        descriptor.setStatus(new Status(status));"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":10,"Aussiroth":25,"-":86}},{"path":"src/test/java/seedu/address/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    public void checkEquality() throws UniqueTagList.DuplicateTagException {"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"        UniqueTagList uniqueTagListA \u003d new UniqueTagList();"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        UniqueTagList uniqueTagListB \u003d new UniqueTagList();"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"        uniqueTagListA.add(new Tag(\"Not Matched\"));"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(uniqueTagListA.equals(uniqueTagListB));"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        uniqueTagListB.add(new Tag(\"Not Matched\"));"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(uniqueTagListA.equals(uniqueTagListB));"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"    public void addTag_duplicateTag_throwsDuplicateTagException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        uniqueTagList.add(new Tag(\"Not Matched\"));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(UniqueTagList.DuplicateTagException.class, () -\u003e uniqueTagList.add(new Tag(\"Not Matched\")));"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    public void checkHashCodeMethod() throws Exception {"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        UniqueTagList uniqueTagListA \u003d new UniqueTagList();"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        UniqueTagList uniqueTagListB \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        uniqueTagListA.add(new Tag(\"Not Matched\"));"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        uniqueTagListB.add(new Tag(\"Not Matched\"));"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(uniqueTagListA.hashCode() \u003d\u003d uniqueTagListB.hashCode());"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":19,"Aussiroth":12,"-":20}},{"path":"src/test/java/seedu/address/testutil/TypicalPairs.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":" * A utility class containing a list of {@code Pair} objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"public class TypicalPairs {"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public static final Pair RANDOM_PAIR_A \u003d new PairBuilder().withStudent(BENSON).withTutor(ALICE)"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            .build();"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    public static final Pair RANDOM_PAIR_B \u003d new PairBuilder().withStudent(DANIEL).withTutor(CARL)"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"            .build();"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final Pair RANDOM_PAIR_C \u003d new PairBuilder().withStudent(FIONA).withTutor(ELLE)"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"            .build();"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    private TypicalPairs() {} // prevents instantiation"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    public static List\u003cPair\u003e getTypicalPairs() {"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(RANDOM_PAIR_A, RANDOM_PAIR_B, RANDOM_PAIR_C));"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":31,"Aussiroth":1,"-":7}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"    public static final Index INDEX_NINTH_PERSON \u003d Index.fromOneBased(9);"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"    public static final Index INDEX_FIRST_PAIR \u003d Index.fromOneBased(1);"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final Index INDEX_SECOND_PAIR \u003d Index.fromOneBased(2);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"     * Adds a new {@code Pair} to the {@code AddressBook} that we are building."},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public AddressBookBuilder withPair(Pair pair) {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"            addressBook.addPair(pair);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        } catch (DuplicatePairException dpe) {"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalArgumentException(\"pair is expected to be unique.\");"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":14,"-":53}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetailsWithoutStatus(person);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"     * Returns an add command string, using the add command alias, for adding the (@code person)."},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"    public static String getAddCommandAliased(Person person) {"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetailsWithoutStatus(person);"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_PRICE + person.getPrice().value + \" \");"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_SUBJECT + person.getSubject().value + \" \");"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_LEVEL + person.getLevel().value + \" \");"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_STATUS + person.getStatus().value + \" \");"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        sb.append(PREFIX_ROLE + person.getRole().value + \" \");"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"            s -\u003e {"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"                if (s.tagType \u003d\u003d Tag.AllTagTypes.DEFAULT) {"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"                    sb.append(PREFIX_TAG + s.tagName + \" \");"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"                }"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"            });"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"    public static String getPersonDetailsWithoutStatus(Person person) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_PRICE + person.getPrice().value + \" \");"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_SUBJECT + person.getSubject().value + \" \");"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        sb.append(PREFIX_LEVEL + person.getLevel().value + \" \");"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        sb.append(PREFIX_ROLE + person.getRole().value + \" \");"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"            s -\u003e {"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"                if (s.tagType \u003d\u003d Tag.AllTagTypes.DEFAULT) {"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"                    sb.append(PREFIX_TAG + s.tagName + \" \");"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"                }"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"            });"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":9,"Aussiroth":28,"-":43}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_STUDENT;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_UNMATCHED;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_AMY;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LEVEL_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_AMY;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOB;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"85355255\")"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"            .withPrice(\"50\").withSubject(\"math\").withStatus(\"Not Matched\").withLevel(\"lower Sec\")"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withRemark(\"Hardworking but slow learner.\").withRate(\"3.0\", \"1\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"50\").withSubject(\"math\").withStatus(\"Matched\").withLevel(\"lower Sec\")"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Student\").withRemark(\"Not self motivated.\").withRate(\"2.1\", \"2\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"            .withPrice(\"20\").withSubject(\"chemistry\").withStatus(\"Not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withRemark(\"Patient and clear in explanation.\").withRate(\"4.2\", \"3\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"20\").withSubject(\"chemistry\").withStatus(\"Matched\").withLevel(\"upper Sec\")"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Student\").withRemark(\"Fast learner.\").withRate(\"4.0\", \"2\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"99\").withSubject(\"english\").withStatus(\"Matched\").withLevel(\"upper Sec\")"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withRemark(\"Inspirational tutor.\").withRate(\"4.5\", \"4\").build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"99\").withSubject(\"english\").withStatus(\"Matched\").withLevel(\"upper Sec\")"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Student\").withRemark(\"Impatient and poor in explanation.\")"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"            .withRate(\"1.1\", \"1\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"320\").withSubject(\"chinese\").withStatus(\"not Matched\").withLevel(\"lower Sec\")"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withRemark(\"Friendly and approachable.\").withRate(\"4.3\", \"1\").build();"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    public static final Person HENRY \u003d new PersonBuilder().withName(\"Henry Meier\").withPhone(\"8482424\")"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withSubject(\"chinese\")"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"upper Sec\").withPrice(\"1234\").withStatus(\"not Matched\")"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withRemark(\"Very passionate tutor.\").withRate(\"4.3\", \"1\").build();"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    public static final Person IRENE \u003d new PersonBuilder().withName(\"Irene Mueller\").withPhone(\"8482131\")"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\")"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"upper Sec\").withPrice(\"4321\").withStatus(\"not Matched\")"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Student\").withRemark(\"Constantly postponing lessons.\").withRate(\"2.1\", \"3\").build();"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    public static final Person JENNY \u003d new PersonBuilder().withName(\"Jenny Yim\").withPhone(\"8482131\")"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\")"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"lower Sec\").withPrice(\"4321\").withStatus(\"not Matched\")"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withRemark(\"Constantly postponing lessons.\").withRate(\"2.0\", \"1\").build();"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"    public static final Person KEITH \u003d new PersonBuilder().withName(\"Keith Chang\").withPhone(\"8482131\")"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\")"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"lower Sec\").withPrice(\"120\").withStatus(\"not Matched\")"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Student\").withRemark(\"Constantly postponing lessons.\").withRate(\"2.4\", \"1\").build();"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    public static final Person LISA \u003d new PersonBuilder().withName(\"Lisa Ong\").withPhone(\"8482131\")"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\")"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"lower Sec\").withPrice(\"120\").withStatus(\"not Matched\")"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Student\").withRemark(\"Hardworking.\").withRate(\"4.3\", \"1\").build();"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"    public static final Person MARY \u003d new PersonBuilder().withName(\"Mary Lou\").withPhone(\"8482131\")"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\")"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"lower Sec\").withPrice(\"100\").withStatus(\"not Matched\")"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withRemark(\"Hardworking.\").withRate(\"4.3\", \"1\").build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withSubject(\"chinese\")"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"upper Sec\").withPrice(\"1234\").withStatus(\"not Matched\")"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withTags(\"Friend\").withRemark(\"Very passionate tutor.\")"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"            .withRate(\"4.3\", \"1\").build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\")"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"            .withLevel(\"upper Sec\").withPrice(\"4321\").withStatus(\"not Matched\")"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"            .withRole(\"Tutor\").withTags(\"Friend\").withRemark(\"Constantly postponing lessons.\")"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"            .withRate(\"2.0\", \"2\").build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"            .withPrice(VALID_PRICE_AMY).withSubject(VALID_SUBJECT_AMY).withLevel(VALID_LEVEL_AMY)"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"            .withStatus(STATUS_UNMATCHED).withRole(ROLE_STUDENT)"},{"lineNumber":106,"author":{"gitID":"Aussiroth"},"content":"            .build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"            .withPrice(VALID_PRICE_BOB).withLevel(VALID_LEVEL_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"            .withStatus(STATUS_UNMATCHED).withRole(VALID_ROLE_BOB)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"Aussiroth"},"content":"    //Persons with some missing fields"},{"lineNumber":114,"author":{"gitID":"Aussiroth"},"content":"    public static final Person JAMES \u003d new PersonBuilder().withName(\"James Bond\").withPhone(\"\")"},{"lineNumber":115,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"\").withAddress(\"jurong west\").withSubject(\"math\")"},{"lineNumber":116,"author":{"gitID":"Aussiroth"},"content":"            .withLevel(\"upper Sec\").withPrice(\"2234\").withStatus(\"not Matched\")"},{"lineNumber":117,"author":{"gitID":"Aussiroth"},"content":"            .withRole(\"Tutor\").withTags(\"Friend\").withRemark(\"\").build();"},{"lineNumber":118,"author":{"gitID":"Aussiroth"},"content":"    public static final Person KEN \u003d new PersonBuilder().withName(\"Ken Wong\").withPhone(\"12344321\")"},{"lineNumber":119,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"ken@example.com\").withAddress(\"\").withSubject(\"\")"},{"lineNumber":120,"author":{"gitID":"Aussiroth"},"content":"            .withLevel(\"upper sec\").withPrice(\"2234\").withStatus(\"not Matched\")"},{"lineNumber":121,"author":{"gitID":"Aussiroth"},"content":"            .withRole(\"Tutor\").withTags(\"Friend\").withRemark(\"\").build();"},{"lineNumber":122,"author":{"gitID":"Aussiroth"},"content":"    public static final Person LENNY \u003d new PersonBuilder().withName(\"Lenny Face\").withPhone(\"43211234\")"},{"lineNumber":123,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"lennyfaces@example.com\").withAddress(\"lim chu kang\").withSubject(\"english\")"},{"lineNumber":124,"author":{"gitID":"Aussiroth"},"content":"            .withLevel(\"\").withPrice(\"\").withStatus(\"not Matched\")"},{"lineNumber":125,"author":{"gitID":"Aussiroth"},"content":"            .withRole(\"Tutor\").withTags(\"Friend\").withRemark(\"\").build();"},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":"    public static final Person MISTER \u003d new PersonBuilder().withName(\"Mister Rogers\").withPhone(\"44122331\")"},{"lineNumber":127,"author":{"gitID":"Aussiroth"},"content":"            .withEmail(\"mrogers@example.com\").withAddress(\"Mountbatten\").withSubject(\"english\")"},{"lineNumber":128,"author":{"gitID":"Aussiroth"},"content":"            .withLevel(\"lower sec\").withPrice(\"2123\").withStatus(\"\")"},{"lineNumber":129,"author":{"gitID":"Aussiroth"},"content":"            .withRole(\"\").withTags(\"Friend\").withRemark(\"\").build();"},{"lineNumber":130,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"        for (Pair pair : TypicalPairs.getTypicalPairs()) {"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"            try {"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"                ab.addPair(pair);"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"            } catch (DuplicatePairException e) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"Aussiroth"},"content":"     * Returns an {@code AddressBook} with all the persons with unentered attributes."},{"lineNumber":159,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":"    public static AddressBook getMissingAttributesAddressBook() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":162,"author":{"gitID":"Aussiroth"},"content":"        for (Person person : getMissingAttributesPersons()) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"Aussiroth"},"content":"    public static List\u003cPerson\u003e getMissingAttributesPersons() {"},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(JAMES, KEN, LENNY, MISTER));"},{"lineNumber":174,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE,"},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"                HENRY, IRENE, JENNY, KEITH, LISA, MARY));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":181,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":40,"Aussiroth":49,"sherlynng":18,"-":75}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_PRICE \u003d \"1234\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"English\";"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_LEVEL \u003d \"Lower Sec\";"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_STATUS \u003d \"Not Matched\";"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_ROLE \u003d \"Student\";"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_REMARK \u003d \"Hardworking but slow learner.\";"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_RATE \u003d \"3.0\";"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    public static final int DEFAULT_RATECOUNT \u003d 1;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    public static final Set\u003cPairHash\u003e DEFAULT_PAIRHASH \u003d PairHash.getDefaultPairHashSet();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    private Price price;"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    private Subject subject;"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    private Level level;"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    private Role role;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    private Remark remark;"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"    private Rate rate;"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"    private Set\u003cPairHash\u003e pairHashes;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        level \u003d new Level(DEFAULT_LEVEL);"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        tags \u003d SampleDataUtil.getTagSet();"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        rate \u003d new Rate(Double.parseDouble(DEFAULT_RATE), true);"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(DEFAULT_RATECOUNT);"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        pairHashes \u003d DEFAULT_PAIRHASH;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        price \u003d personToCopy.getPrice();"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d personToCopy.getSubject();"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"        level \u003d personToCopy.getLevel();"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"        status \u003d personToCopy.getStatus();"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"        role \u003d personToCopy.getRole();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"        remark \u003d personToCopy.getRemark();"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"        rate \u003d personToCopy.getRate();"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"        pairHashes \u003d personToCopy.getPairHashes();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":103,"author":{"gitID":"Aussiroth"},"content":"        HashSet\u003cTag\u003e setTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"Aussiroth"},"content":"        for (String tagString : tags) {"},{"lineNumber":105,"author":{"gitID":"Aussiroth"},"content":"            setTags.add(new Tag(tagString));"},{"lineNumber":106,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"Aussiroth"},"content":"        this.tags \u003d setTags;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Level} of the {@code Person} that we are building."},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withLevel(String level) {"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d new Level(level);"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Subject} of the {@code Person} that we are building."},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withSubject(String subject) {"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Status} of the {@code Person} that we are building."},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withStatus(String status) {"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withPrice(String price) {"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building."},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withRole(String role) {"},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":175,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"Aussiroth"},"content":"     * Sets the required attribute tags for the person"},{"lineNumber":177,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"Aussiroth"},"content":"    private void setTags() {"},{"lineNumber":179,"author":{"gitID":"Aussiroth"},"content":"        if (!price.toString().equals(\"\")) {"},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":"            tags.add(new Tag(price.toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":181,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"Aussiroth"},"content":"        if (!subject.toString().equals(\"\")) {"},{"lineNumber":183,"author":{"gitID":"Aussiroth"},"content":"            tags.add(new Tag(subject.toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":184,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"        if (!level.toString().equals(\"\")) {"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"            tags.add(new Tag(level.toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":"        if (!status.toString().equals(\"\")) {"},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"            tags.add(new Tag(status.toString(), Tag.AllTagTypes.STATUS));"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"        if (!role.toString().equals(\"\")) {"},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"            tags.add(new Tag(role.toString(), Tag.AllTagTypes.ROLE));"},{"lineNumber":193,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":196,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":198,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"sherlynng"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":200,"author":{"gitID":"sherlynng"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":201,"author":{"gitID":"sherlynng"},"content":"        return this;"},{"lineNumber":202,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":204,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Rate} of the {@code Person} that we are building."},{"lineNumber":206,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"sherlynng"},"content":"    public PersonBuilder withRate(String rate, String rateCount) {"},{"lineNumber":208,"author":{"gitID":"sherlynng"},"content":"        this.rate \u003d new Rate(Double.parseDouble(rate), true);"},{"lineNumber":209,"author":{"gitID":"sherlynng"},"content":"        this.rate.setCount(Integer.parseInt(rateCount));"},{"lineNumber":210,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":211,"author":{"gitID":"sherlynng"},"content":"        return this;"},{"lineNumber":212,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":214,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code pairHash} of the {@code Person} that we are building."},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withPairhash(PairHash pairHash) {"},{"lineNumber":219,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cPairHash\u003e pairHashesSet \u003d new HashSet\u003cPairHash\u003e();"},{"lineNumber":220,"author":{"gitID":"alexawangzi"},"content":"        pairHashesSet.add(pairHash);"},{"lineNumber":221,"author":{"gitID":"alexawangzi"},"content":"        this.pairHashes \u003d pairHashesSet;"},{"lineNumber":222,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":223,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":225,"author":{"gitID":"alexawangzi"},"content":"    public PersonBuilder withPairhash(int value) {"},{"lineNumber":226,"author":{"gitID":"alexawangzi"},"content":"        return this.withPairhash(new PairHash(value));"},{"lineNumber":227,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":229,"author":{"gitID":"alexawangzi"},"content":"    //@@author"},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":"     * Builds a person based off the attributes in this class"},{"lineNumber":232,"author":{"gitID":"Aussiroth"},"content":"     * @return Person with set attributes"},{"lineNumber":233,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":235,"author":{"gitID":"Aussiroth"},"content":"        setTags();"},{"lineNumber":236,"author":{"gitID":"sherlynng"},"content":"        return new Person(name, phone, email, address, price, subject, level, status, role, tags,"},{"lineNumber":237,"author":{"gitID":"alexawangzi"},"content":"                          remark, rate, pairHashes);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":86,"sherlynng":34,"Aussiroth":30,"-":90}},{"path":"src/test/java/seedu/address/model/UniquePairHashListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.UniquePairHashList;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"public class UniquePairHashListTest {"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"        UniquePairHashList uniquePairHashList \u003d new UniquePairHashList();"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"        uniquePairHashList.asObservableList().remove(0);"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public void checkEquality() throws UniquePairHashList.DuplicatePairHashException {"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        UniquePairHashList uniquePairHashListA \u003d new UniquePairHashList();"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"        UniquePairHashList uniquePairHashListB \u003d new UniquePairHashList();"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        uniquePairHashListA.add(new PairHash(1234567));"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(uniquePairHashListA.equals(uniquePairHashListB));"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        uniquePairHashListB.add(new PairHash(1234567));"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(uniquePairHashListA.equals(uniquePairHashListB));"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    public void addDuplicatePairHash_throwsDuplicatePairHashException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        UniquePairHashList uniquePairHashList \u003d new UniquePairHashList();"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        uniquePairHashList.add(new PairHash(1234));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"        assertThrows(UniquePairHashList.DuplicatePairHashException.class, () -\u003e"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"                uniquePairHashList.add(new PairHash(1234)));"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    public void checkHashCodeMethod() throws Exception {"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        UniquePairHashList uniquePairHashListA \u003d new UniquePairHashList();"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        UniquePairHashList uniquePairHashListB \u003d new UniquePairHashList();"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        uniquePairHashListA.add(new PairHash(1234567));"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"        uniquePairHashListB.add(new PairHash(1234567));"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"        assertTrue(uniquePairHashListA.hashCode() \u003d\u003d uniquePairHashListB.hashCode());"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"}"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":""}],"authorContributionMap":{"alexawangzi":28,"Aussiroth":21,"-":7}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPairTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.storage.XmlAdaptedPair.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.testutil.TypicalPairs.RANDOM_PAIR_A;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"public class XmlAdaptedPairTest {"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    private static final String INVALID_STUDENT_NAME \u003d \"R@chel\";"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    private static final String INVALID_TUTOR_NAME \u003d \"Bens[]n\";"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    private static final String INVALID_PRICE \u003d \"-50\";"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    private static final String INVALID_LEVEL \u003d \"kindergarden\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    private static final String INVALID_SUBJECT \u003d \"fake news\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_STUDENT_NAME \u003d RANDOM_PAIR_A.getStudentName().toString();"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_TUTOR_NAME \u003d RANDOM_PAIR_A.getTutorName().toString();"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_SUBJECT \u003d RANDOM_PAIR_A.getSubject().toString();"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_LEVEL \u003d RANDOM_PAIR_A.getLevel().toString();"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_PRICE \u003d RANDOM_PAIR_A.getPrice().toString();"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    private static final String VALID_PAIRHASH \u003d RANDOM_PAIR_A.getPairHash().toString();"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d RANDOM_PAIR_A.getTags().stream()"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_validPairDetails_returnsPair() throws Exception {"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(RANDOM_PAIR_A);"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        assertEquals(RANDOM_PAIR_A, pair.toModelType());"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_invalidStudentName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(INVALID_STUDENT_NAME, INVALID_TUTOR_NAME,"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_nullStudentName_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(null, VALID_TUTOR_NAME,"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_invalidTutorName_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, INVALID_TUTOR_NAME,"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_nullTutorName_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, null,"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, VALID_PRICE, invalidTags, VALID_PAIRHASH);"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, pair::toModelType);"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_invalidLevel_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, INVALID_LEVEL, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d Level.MESSAGE_LEVEL_CONSTRAINTS;"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_nullLevel_throwsIllegalValueException() {"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, null, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Level.class.getSimpleName());"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_invalidSubject_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"                INVALID_SUBJECT, VALID_LEVEL, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_nullSubject_throwsIllegalValueException() {"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"                null, VALID_LEVEL, VALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName());"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_invalidPrice_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, INVALID_PRICE, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_nullPrice_throwsIllegalValueException() {"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, null, VALID_TAGS, VALID_PAIRHASH);"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"    public void toModelType_nullPairHash_throwsIllegalValueException() {"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair pair \u003d new XmlAdaptedPair(VALID_STUDENT_NAME, VALID_TUTOR_NAME,"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"                VALID_SUBJECT, VALID_LEVEL, VALID_PRICE, VALID_TAGS, null);"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PairHash.class.getSimpleName());"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, pair::toModelType);"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"    public void testXmlAdaptedPairEquality() {"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair alice \u003d new XmlAdaptedPair(RANDOM_PAIR_A);"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair copy \u003d new XmlAdaptedPair(RANDOM_PAIR_A);"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(alice.equals(alice));"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        assertTrue(alice.equals(copy)); //check equality if values are equal"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"        assertFalse(alice.equals(RANDOM_PAIR_A)); //check not equal if type is different"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":137,"Aussiroth":6,"-":12}},{"path":"src/test/java/seedu/address/testutil/PairBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":" * A utility class to help with building Pair objects."},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"public class PairBuilder {"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public static final Person DEFAULT_STUDENT \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"50\").withSubject(\"math\").withStatus(\"not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Student\").build();"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    public static final Person DEFAULT_TUTOR \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"            .withPrice(\"50\").withSubject(\"math\").withStatus(\"not Matched\").withLevel(\"upper Sec\")"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"            .withRole(\"Tutor\").withRemark(\"Impatient and poor in explanation.\").build();"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public static final Subject DEFAULT_SUBJECT \u003d new Subject(\"Math\");"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final Level DEFAULT_LEVEL \u003d new Level(\"Upper Sec\");"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public static final Price DEFAULT_PRICE \u003d new Price(\"50\");"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAG_SUBJECT \u003d \"Math\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAG_LEVEL \u003d \"Upper Sec\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAG_PRICE \u003d \"50\";"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    private Person student;"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    private Person tutor;"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    private String subject;"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    private String level;"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    private String price;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    public PairBuilder() {"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        student \u003d DEFAULT_STUDENT;"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        tutor \u003d  DEFAULT_TUTOR;"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d DEFAULT_SUBJECT.toString();"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        level \u003d DEFAULT_LEVEL.toString();"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        price \u003d DEFAULT_PRICE.toString();"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAG_SUBJECT, DEFAULT_TAG_LEVEL, DEFAULT_TAG_PRICE);"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code studentName} of the {@code Pair} that we are building."},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    public PairBuilder withStudent(Person student) {"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        this.student \u003d student;"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Name} of the {@code Pair} that we are building."},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    public PairBuilder withTutor(Person tutor) {"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        this.tutor \u003d tutor;"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Pair} that we are building."},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    public PairBuilder withTags(String ... tags) {"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Pair} that we are building."},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    public PairBuilder withLevel(String level) {"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d level;"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Pair} that we are building."},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"    public PairBuilder withSubject(String subject) {"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d subject;"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Pair} that we are building."},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    public PairBuilder withPrice(String price) {"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d price;"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"     * Sets the required attribute tags for the pair"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"    private void setTags() {"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"        tags.add(new Tag(subject.toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"        tags.add(new Tag(level.toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        tags.add(new Tag(price.toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"     * Builds a pair based off the attributes in this class"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"     * @return Pair with set attributes"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"    public Pair build() {"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        setTags();"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        return new Pair(student, tutor, student.getSubject(), student.getLevel(), student.getPrice());"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":117,"Aussiroth":2,"-":2}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"     * Inputs text in the command box."},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    public void setInput(String input) {"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        click();"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(input));"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"     * Inserts text in the command box at current caret position."},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    public void insertInput (String input) {"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"        guiRobot.interact(() -\u003e getRootNode().insertText(getRootNode().getCaretPosition(), input));"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":15,"-":46}},{"path":"src/test/java/seedu/address/testutil/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"public class StudentBuilder {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@example.com\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_PRICE \u003d \"100\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"english\";"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_LEVEL \u003d \"lower Sec\";"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_STATUS \u003d \"not Matched\";"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_ROLE \u003d \"student\";"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAGS \u003d \"friend\";"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_REMARK \u003d \"Hardworking but slow learner.\";"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_RATE \u003d \"3.0\";"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"    public static final int DEFAULT_RATECOUNT \u003d 1;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    private Price price;"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    private Subject subject;"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    private Level level;"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    private Role role;"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    private Remark remark;"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"    private Rate rate;"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        level \u003d new Level(DEFAULT_LEVEL);"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        rate \u003d new Rate(Double.parseDouble(DEFAULT_RATE), true);"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(DEFAULT_RATECOUNT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder(Person personToCopy) {"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"       super();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Level} of the {@code Person} that we are building."},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withLevel(String level) {"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d new Level(level);"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Subject} of the {@code Person} that we are building."},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withSubject(String subject) {"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Status} of the {@code Person} that we are building."},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withStatus(String status) {"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withPrice(String price) {"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building."},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"    public StudentBuilder withRole(String role) {"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":157,"author":{"gitID":"Aussiroth"},"content":"    public void setTags() {"},{"lineNumber":158,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(price.toString()));"},{"lineNumber":159,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(subject.toString()));"},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(level.toString()));"},{"lineNumber":161,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(status.toString()));"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"        tags.add(new Tag(role.toString()));"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":"    public StudentBuilder withRemark(String remark) {"},{"lineNumber":169,"author":{"gitID":"sherlynng"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":170,"author":{"gitID":"sherlynng"},"content":"        return this;"},{"lineNumber":171,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Rate} of the {@code Person} that we are building."},{"lineNumber":175,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"sherlynng"},"content":"    public StudentBuilder withRate(String rate, String rateCount) {"},{"lineNumber":177,"author":{"gitID":"sherlynng"},"content":"        this.rate \u003d new Rate(Double.parseDouble(rate), true);"},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":"        this.rate.setCount(Integer.parseInt(rateCount));"},{"lineNumber":179,"author":{"gitID":"sherlynng"},"content":"        return this;"},{"lineNumber":180,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"alexawangzi"},"content":"     * Builds a student based off the attributes in this class"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"     * @return Student with set attributes"},{"lineNumber":185,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"alexawangzi"},"content":"    public Student build() {"},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":"        setTags();"},{"lineNumber":188,"author":{"gitID":"alexawangzi"},"content":"        return new Student(name, phone, email, address, price, subject, level, status, tags,"},{"lineNumber":189,"author":{"gitID":"alexawangzi"},"content":"                           remark, rate, PairHash.getDefaultPairHashSet());"},{"lineNumber":190,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":94,"sherlynng":31,"Aussiroth":5,"-":62}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"dannyngmx94"},"content":"    //@@author dannyngmx94"},{"lineNumber":52,"author":{"gitID":"dannyngmx94"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":53,"author":{"gitID":"dannyngmx94"},"content":"        return tagLabels"},{"lineNumber":54,"author":{"gitID":"dannyngmx94"},"content":"                .stream()"},{"lineNumber":55,"author":{"gitID":"dannyngmx94"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":56,"author":{"gitID":"dannyngmx94"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":57,"author":{"gitID":"dannyngmx94"},"content":"                .findFirst()"},{"lineNumber":58,"author":{"gitID":"dannyngmx94"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":59,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":10,"-":50}},{"path":"src/test/java/guitests/guihandles/DetailsPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":" * A handler for the {@code DetailsPanel} of the UI."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"public class DetailsPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"    private static final String ROLE_FIELD_ID \u003d \"#role\";"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"    private static final String STATUS_FIELD_ID \u003d \"#status\";"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"    private static final String SUBJECT_FIELD_ID \u003d \"#subject\";"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    private static final String LEVEL_FIELD_ID \u003d \"#level\";"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"    private static final String PRICE_FIELD_ID \u003d \"#price\";"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"    private static final String RATE_FIELD_ID \u003d \"#rating\";"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"    private static final String RATECOUNT_FIELD_ID \u003d \"#rateCount\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    private final Label nameLabel;"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"    private final Label addressLabel;"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    private final Label phoneLabel;"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"    private final Label emailLabel;"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"    private final Label roleLabel;"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    private final Label statusLabel;"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"    private final Label subjectLabel;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"    private final Label levelLabel;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    private final Label priceLabel;"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"    private final Label remarkLabel;"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"    private final Label rateLabel;"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"    private final Label rateCountLabel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    public DetailsPanelHandle(Node detailsPanelNode) {"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"        super(detailsPanelNode);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"        this.roleLabel \u003d getChildNode(ROLE_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"        this.statusLabel \u003d getChildNode(STATUS_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"        this.subjectLabel \u003d getChildNode(SUBJECT_FIELD_ID);"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"        this.levelLabel \u003d getChildNode(LEVEL_FIELD_ID);"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"        this.priceLabel \u003d getChildNode(PRICE_FIELD_ID);"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"        this.rateLabel \u003d getChildNode(RATE_FIELD_ID);"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        this.rateCountLabel \u003d getChildNode(RATECOUNT_FIELD_ID);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"    public String getName() {"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        return nameLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"    public String getAddress() {"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        return addressLabel.getText();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"    public String getPhone() {"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"        return phoneLabel.getText();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"    public String getEmail() {"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        return emailLabel.getText();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"    public String getRole() {"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        return roleLabel.getText();"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"    public String getStatus() {"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"        return statusLabel.getText();"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"    public String getSubject() {"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"        return subjectLabel.getText();"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"    public String getLevel() {"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"        return levelLabel.getText();"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"    public String getPrice() {"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"        return priceLabel.getText();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"    public String getRemark() {"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"        return remarkLabel.getText();"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"    public String getRate() {"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"        return rateLabel.getText();"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"    public String getRateCount() {"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"        return rateCountLabel.getText();"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":80,"-":21}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATE;"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"import seedu.address.commons.events.logic.EditRemarkEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.UnmatchCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    private boolean isFindNextField \u003d false;"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"    private boolean isMatchCommand \u003d false;"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"    private boolean isEditRemarkCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":62,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        isEditRemarkCommand \u003d false;"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"        //@@author sherlynng"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"        case TAB:"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"            keyEvent.consume();"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"            autofill();"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"        case DELETE:"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"            keyEvent.consume();"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"            deletePreviousPrefix();"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"        default:"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"     * Sets {@code CommandBox}\u0027s text field with command format and"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"     * if next field is present, caret is positioned to the next field."},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"    private void autofill() {"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":"        String input \u003d commandTextField.getText();"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"        int nextCaretPosition \u003d -1;"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"        boolean isFirstTime \u003d false; // check for commands that have different behaviors between first and other tabs"},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"        isFirstTime \u003d autofillCommand(input, isFirstTime);"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":"        autofillBehavior(isFirstTime);"},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"     * Autofills the command depending on user input."},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"     * @param input"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"     * @param isFirstTime"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"     * @return true if it is the first time tab is pressed. Else false."},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"    private boolean autofillCommand(String input, boolean isFirstTime) {"},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"        switch (input) {"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":"        case AddCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(AddCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + PREFIX_PHONE + \" \""},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_PRICE + \" \" + PREFIX_SUBJECT + \" \""},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_LEVEL + \" \" + PREFIX_ROLE);"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d true;"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"            isMatchCommand \u003d false;"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"        case EditCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":130,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(EditCommand.COMMAND_WORD + \" 1 \" + PREFIX_NAME + \" \" + PREFIX_PHONE + \" \""},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_EMAIL + \" \" + PREFIX_ADDRESS + \" \" + PREFIX_PRICE + \" \" + PREFIX_SUBJECT + \" \""},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"                    + PREFIX_LEVEL + \" \" + PREFIX_ROLE);"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d false;"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"            isFirstTime \u003d true;"},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"            isMatchCommand \u003d false;"},{"lineNumber":137,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":138,"author":{"gitID":"sherlynng"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"sherlynng"},"content":"        case RemarkCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":140,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(RemarkCommand.COMMAND_WORD + \" 1 \" + PREFIX_REMARK);"},{"lineNumber":141,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":142,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d false;"},{"lineNumber":143,"author":{"gitID":"sherlynng"},"content":"            isFirstTime \u003d true;"},{"lineNumber":144,"author":{"gitID":"sherlynng"},"content":"            isMatchCommand \u003d false;"},{"lineNumber":145,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":146,"author":{"gitID":"sherlynng"},"content":"        case RateCommand.COMMAND_WORD:"},{"lineNumber":147,"author":{"gitID":"sherlynng"},"content":"        case RateCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":148,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(RateCommand.COMMAND_WORD + \" 1 \" + PREFIX_RATE);"},{"lineNumber":149,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":150,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d false;"},{"lineNumber":151,"author":{"gitID":"sherlynng"},"content":"            isFirstTime \u003d true;"},{"lineNumber":152,"author":{"gitID":"sherlynng"},"content":"            isMatchCommand \u003d false;"},{"lineNumber":153,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":154,"author":{"gitID":"sherlynng"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":155,"author":{"gitID":"sherlynng"},"content":"        case SelectCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":156,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(SelectCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":157,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":158,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d false;"},{"lineNumber":159,"author":{"gitID":"sherlynng"},"content":"            isMatchCommand \u003d false;"},{"lineNumber":160,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":161,"author":{"gitID":"sherlynng"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"sherlynng"},"content":"        case DeleteCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":163,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":164,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d false;"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"            isMatchCommand \u003d false;"},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":"        case UnmatchCommand.COMMAND_WORD:"},{"lineNumber":169,"author":{"gitID":"sherlynng"},"content":"        case UnmatchCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":170,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(UnmatchCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":171,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":172,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d false;"},{"lineNumber":173,"author":{"gitID":"sherlynng"},"content":"            isMatchCommand \u003d false;"},{"lineNumber":174,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":175,"author":{"gitID":"sherlynng"},"content":"        case MatchCommand.COMMAND_WORD:"},{"lineNumber":176,"author":{"gitID":"sherlynng"},"content":"        case MatchCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":177,"author":{"gitID":"sherlynng"},"content":"            commandTextField.setText(MatchCommand.COMMAND_WORD + \" 1 2\");"},{"lineNumber":178,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":179,"author":{"gitID":"sherlynng"},"content":"            isFindNextField \u003d false;"},{"lineNumber":180,"author":{"gitID":"sherlynng"},"content":"            isFirstTime \u003d true;"},{"lineNumber":181,"author":{"gitID":"sherlynng"},"content":"            break;"},{"lineNumber":182,"author":{"gitID":"sherlynng"},"content":"        default:"},{"lineNumber":183,"author":{"gitID":"sherlynng"},"content":"            // no autofill"},{"lineNumber":184,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"sherlynng"},"content":"        return isFirstTime;"},{"lineNumber":186,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":188,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"sherlynng"},"content":"     * Positions the caret according to command type."},{"lineNumber":190,"author":{"gitID":"sherlynng"},"content":"     * @param isFirstTime is used to differentiate commands that have different behaviors for different tabs."},{"lineNumber":191,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"sherlynng"},"content":"    private void autofillBehavior(boolean isFirstTime) {"},{"lineNumber":193,"author":{"gitID":"sherlynng"},"content":"        int nextCaretPosition;"},{"lineNumber":194,"author":{"gitID":"sherlynng"},"content":"        if (isFindNextField) {"},{"lineNumber":195,"author":{"gitID":"sherlynng"},"content":"            nextCaretPosition \u003d findNextField();"},{"lineNumber":196,"author":{"gitID":"sherlynng"},"content":"            if (nextCaretPosition !\u003d -1) {"},{"lineNumber":197,"author":{"gitID":"sherlynng"},"content":"                commandTextField.positionCaret(nextCaretPosition);"},{"lineNumber":198,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":199,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":201,"author":{"gitID":"sherlynng"},"content":"        if (isMatchCommand) {"},{"lineNumber":202,"author":{"gitID":"sherlynng"},"content":"            selectIndexToEdit();"},{"lineNumber":203,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":205,"author":{"gitID":"sherlynng"},"content":"        if (isFirstTime) {"},{"lineNumber":206,"author":{"gitID":"sherlynng"},"content":"            if (commandTextField.getText().length() \u003e\u003d MatchCommand.COMMAND_WORD.length()"},{"lineNumber":207,"author":{"gitID":"sherlynng"},"content":"                    \u0026\u0026 commandTextField.getText().substring(0, 5).equals(MatchCommand.COMMAND_WORD)) { // match command"},{"lineNumber":208,"author":{"gitID":"sherlynng"},"content":"                isMatchCommand \u003d true;"},{"lineNumber":209,"author":{"gitID":"sherlynng"},"content":"            } else { // all other commands that has finding next field as its subsequent behavior"},{"lineNumber":210,"author":{"gitID":"sherlynng"},"content":"                isFindNextField \u003d true;"},{"lineNumber":211,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":212,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":215,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"sherlynng"},"content":"     * Deletes the previous prefix from current caret position and"},{"lineNumber":217,"author":{"gitID":"sherlynng"},"content":"     * if next field is present, caret is positioned to the next field."},{"lineNumber":218,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"sherlynng"},"content":"    private void deletePreviousPrefix() {"},{"lineNumber":220,"author":{"gitID":"sherlynng"},"content":"        String text \u003d commandTextField.getText();"},{"lineNumber":221,"author":{"gitID":"sherlynng"},"content":"        int caretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":222,"author":{"gitID":"sherlynng"},"content":"        int deleteStart \u003d text.lastIndexOf(\" \", caretPosition - 1);"},{"lineNumber":223,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":224,"author":{"gitID":"sherlynng"},"content":"        if (deleteStart !\u003d -1) {"},{"lineNumber":225,"author":{"gitID":"sherlynng"},"content":"            commandTextField.deleteText(deleteStart, caretPosition);"},{"lineNumber":226,"author":{"gitID":"sherlynng"},"content":"            commandTextField.positionCaret(findNextField());"},{"lineNumber":227,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":230,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"sherlynng"},"content":"     * Finds the next input field from current caret position and"},{"lineNumber":232,"author":{"gitID":"sherlynng"},"content":"     * if next field is present, caret is positioned to the next field."},{"lineNumber":233,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"sherlynng"},"content":"    private int findNextField() {"},{"lineNumber":235,"author":{"gitID":"sherlynng"},"content":"        String text \u003d commandTextField.getText();"},{"lineNumber":236,"author":{"gitID":"sherlynng"},"content":"        int caretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":237,"author":{"gitID":"sherlynng"},"content":"        int nextFieldPosition \u003d text.indexOf(\"/\", caretPosition);"},{"lineNumber":238,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":239,"author":{"gitID":"sherlynng"},"content":"        return nextFieldPosition + 1;"},{"lineNumber":240,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":242,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"sherlynng"},"content":"     * Positions the caret to index position and selects the index to be edited."},{"lineNumber":244,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"sherlynng"},"content":"    private void selectIndexToEdit() {"},{"lineNumber":246,"author":{"gitID":"sherlynng"},"content":"        String text \u003d commandTextField.getText();"},{"lineNumber":247,"author":{"gitID":"sherlynng"},"content":"        int caretPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":248,"author":{"gitID":"sherlynng"},"content":"        int indexPosition \u003d -1;"},{"lineNumber":249,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":250,"author":{"gitID":"sherlynng"},"content":"        for (int i \u003d caretPosition; i \u003c text.length(); i++) {"},{"lineNumber":251,"author":{"gitID":"sherlynng"},"content":"            Character character \u003d text.charAt(i);"},{"lineNumber":252,"author":{"gitID":"sherlynng"},"content":"            if (Character.isDigit(character)) {"},{"lineNumber":253,"author":{"gitID":"sherlynng"},"content":"                indexPosition \u003d i;"},{"lineNumber":254,"author":{"gitID":"sherlynng"},"content":"                break;"},{"lineNumber":255,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":256,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":258,"author":{"gitID":"sherlynng"},"content":"        commandTextField.positionCaret(indexPosition);"},{"lineNumber":259,"author":{"gitID":"sherlynng"},"content":"        if (indexPosition !\u003d -1) {"},{"lineNumber":260,"author":{"gitID":"sherlynng"},"content":"            commandTextField.selectForward();"},{"lineNumber":261,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"sherlynng"},"content":"    //@@author"},{"lineNumber":264,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":293,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":308,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":309,"author":{"gitID":"sherlynng"},"content":"            if (!isEditRemarkCommand) {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"                commandTextField.setText(\"\");"},{"lineNumber":311,"author":{"gitID":"sherlynng"},"content":"            } else {"},{"lineNumber":312,"author":{"gitID":"sherlynng"},"content":"                // do not replace text"},{"lineNumber":313,"author":{"gitID":"sherlynng"},"content":"                isEditRemarkCommand \u003d false; // reset it back to default"},{"lineNumber":314,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":321,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":323,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":329,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":334,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":339,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":345,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":346,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":347,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"sherlynng"},"content":"    //@@author sherlynng"},{"lineNumber":358,"author":{"gitID":"sherlynng"},"content":"    @Subscribe"},{"lineNumber":359,"author":{"gitID":"sherlynng"},"content":"    private void handleEditRemarkEvent(EditRemarkEvent event) {"},{"lineNumber":360,"author":{"gitID":"sherlynng"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":361,"author":{"gitID":"sherlynng"},"content":"        replaceText(event.getPersonRemark());"},{"lineNumber":362,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":363,"author":{"gitID":"sherlynng"},"content":"        isEditRemarkCommand \u003d true;"},{"lineNumber":364,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"sherlynng"},"content":"    //@@author"},{"lineNumber":366,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":222,"-":144}},{"path":"src/test/java/seedu/address/testutil/TutorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Tutor;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"public class TutorBuilder {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@example.com\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_PRICE \u003d \"100\";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"english\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_LEVEL \u003d \"lower Sec\";"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_STATUS \u003d \"not Matched\";"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    public static final String DEFAULT_TAGS \u003d \"tutor\";"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_REMARK \u003d \"Patient and approachable.\";"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    public static final String DEFAULT_RATE \u003d \"3.0\";"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    public static final int DEFAULT_RATECOUNT \u003d 1;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    private Price price;"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    private Subject subject;"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    private Level level;"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"    private Remark remark;"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    private Rate rate;"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        level \u003d new Level(DEFAULT_LEVEL);"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        status \u003d new Status(DEFAULT_STATUS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"        rate \u003d new Rate(Double.parseDouble(DEFAULT_RATE), true);"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(DEFAULT_RATECOUNT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder(Person personToCopy) {"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        super();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withName(String name) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withTags(String ... tags) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withAddress(String address) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withPhone(String phone) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withEmail(String email) {"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Level} of the {@code Person} that we are building."},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withLevel(String level) {"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d new Level(level);"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Subject} of the {@code Person} that we are building."},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withSubject(String subject) {"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Status} of the {@code Person} that we are building."},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withStatus(String status) {"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"     * Sets the {@code Price} of the {@code Person} that we are building."},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"    public TutorBuilder withPrice(String price) {"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        return this;"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":145,"author":{"gitID":"Aussiroth"},"content":"    public void setTags() {"},{"lineNumber":146,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(price.toString()));"},{"lineNumber":147,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(subject.toString()));"},{"lineNumber":148,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(level.toString()));"},{"lineNumber":149,"author":{"gitID":"Aussiroth"},"content":"        tags.add(new Tag(status.toString()));"},{"lineNumber":150,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":152,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":154,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"sherlynng"},"content":"    public TutorBuilder withRemark(String remark) {"},{"lineNumber":156,"author":{"gitID":"sherlynng"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":157,"author":{"gitID":"sherlynng"},"content":"        return this;"},{"lineNumber":158,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":160,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"sherlynng"},"content":"     * Sets the {@code Rate} of the {@code Person} that we are building."},{"lineNumber":162,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"sherlynng"},"content":"    public TutorBuilder withRate(String rate, String rateCount) {"},{"lineNumber":164,"author":{"gitID":"sherlynng"},"content":"        this.rate \u003d new Rate(Double.parseDouble(rate), true);"},{"lineNumber":165,"author":{"gitID":"sherlynng"},"content":"        this.rate.setCount(Integer.parseInt(rateCount));"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"        return this;"},{"lineNumber":167,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"     * Builds a stutor based off the attributes in this class"},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"     * @return Tutor with set attributes"},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"    public Tutor build() {"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":"        setTags();"},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"        return new Tutor(name, phone, email, address, price, subject, level, status, tags,"},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"                         remark, rate, PairHash.getDefaultPairHashSet());"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":77,"sherlynng":31,"Aussiroth":7,"-":64}},{"path":"src/test/java/guitests/guihandles/PairCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Provides a handle to a pair card in the pair list panel."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class PairCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public PairCardHandle(Node cardNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .findFirst()"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":4,"-":55}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private InfoPanel infoPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    private PairListPanel pairListPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane infoPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    private StackPane pairListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":100,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        infoPanel \u003d new InfoPanel(logic.getFilteredPersonList());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        infoPlaceholder.getChildren().add(infoPanel.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"        pairListPanel \u003d new PairListPanel(logic.getFilteredPairList());"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"        pairListPanelPlaceholder.getChildren().add(pairListPanel.getRoot());"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":7,"-":193}},{"path":"src/test/java/guitests/guihandles/PairListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.ui.PairCard;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Provides a handle for {@code PairListPanel} containing the list of {@code PairCard}."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class PairListPanelHandle extends NodeHandle\u003cListView\u003cPairCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#pairListView\";"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    private Optional\u003cPairCard\u003e lastRememberedSelectedPairCard;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"    public PairListPanelHandle(ListView\u003cPairCard\u003e pairListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"        super(pairListPanelNode);"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"     * Returns a handle to the selected {@code PairCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public PairCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPairCard\u003e pairList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        if (pairList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Pair list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        return new PairCardHandle(pairList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPairCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"     * Navigates the listview to display and select the pair."},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    public void navigateToCard(Pair pair) {"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPairCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        Optional\u003cPairCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.pair.equals(pair)).findFirst();"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalArgumentException(\"Pair does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"     * Returns the pair card handle of a pair associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"    public PairCardHandle getPairCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        return getPairCardHandle(getRootNode().getItems().get(index).pair);"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"     * Returns the {@code PairCardHandle} of the specified {@code pair} in the list."},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    public PairCardHandle getPairCardHandle(Pair pair) {"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        Optional\u003cPairCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"                .filter(card -\u003e card.pair.equals(pair))"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"                .map(card -\u003e new PairCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Pair does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"     * Selects the {@code PairCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"     * Remembers the selected {@code PairCard} in the list."},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    public void rememberSelectedPairCard() {"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPairCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"            lastRememberedSelectedPairCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"            lastRememberedSelectedPairCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"     * Returns true if the selected {@code PairCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"     * {@code rememberSelectedPairCard()} call."},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"    public boolean isSelectedPairCardChanged() {"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPairCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"            return lastRememberedSelectedPairCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"            return !lastRememberedSelectedPairCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"                    || !lastRememberedSelectedPairCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":77,"-":57}},{"path":"src/main/java/seedu/address/ui/ChartsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.chart.BarChart;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.chart.PieChart;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.chart.XYChart;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowChartsEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":21,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"dannyngmx94"},"content":" * The Chart Panel of the App."},{"lineNumber":23,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":24,"author":{"gitID":"dannyngmx94"},"content":"public class ChartsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":26,"author":{"gitID":"dannyngmx94"},"content":"    private static final String FXML \u003d \"ChartsPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":28,"author":{"gitID":"dannyngmx94"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":29,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":30,"author":{"gitID":"dannyngmx94"},"content":"    private ObservableList\u003cPerson\u003e personList;"},{"lineNumber":31,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":32,"author":{"gitID":"dannyngmx94"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"dannyngmx94"},"content":"    private PieChart roleDistribution;"},{"lineNumber":34,"author":{"gitID":"dannyngmx94"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"dannyngmx94"},"content":"    private BarChart\u003c?, ?\u003e tutorSubject;"},{"lineNumber":36,"author":{"gitID":"dannyngmx94"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"dannyngmx94"},"content":"    private BarChart\u003c?, ?\u003e studentSubject;"},{"lineNumber":38,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":39,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":40,"author":{"gitID":"dannyngmx94"},"content":"    public ChartsPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":41,"author":{"gitID":"dannyngmx94"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"dannyngmx94"},"content":"        this.personList \u003d personList;"},{"lineNumber":43,"author":{"gitID":"dannyngmx94"},"content":"        loadChartsDetails();"},{"lineNumber":44,"author":{"gitID":"dannyngmx94"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":45,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":47,"author":{"gitID":"dannyngmx94"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"dannyngmx94"},"content":"     * Loads chart details into the chart panel."},{"lineNumber":49,"author":{"gitID":"dannyngmx94"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"dannyngmx94"},"content":"    public void loadChartsDetails() {"},{"lineNumber":51,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e tutorList \u003d personList.filtered(person -\u003e person.getRole().equals(new Role(\"Tutor\")));"},{"lineNumber":52,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e studentList \u003d"},{"lineNumber":53,"author":{"gitID":"dannyngmx94"},"content":"                personList.filtered(person -\u003e person.getRole().equals(new Role(\"Student\")));"},{"lineNumber":54,"author":{"gitID":"dannyngmx94"},"content":"        int numTutor \u003d tutorList.size();"},{"lineNumber":55,"author":{"gitID":"dannyngmx94"},"content":"        int numStudent \u003d studentList.size();"},{"lineNumber":56,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":57,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d"},{"lineNumber":58,"author":{"gitID":"dannyngmx94"},"content":"                FXCollections.observableArrayList("},{"lineNumber":59,"author":{"gitID":"dannyngmx94"},"content":"                new PieChart.Data(\"Tutor: \" + numTutor, numTutor),"},{"lineNumber":60,"author":{"gitID":"dannyngmx94"},"content":"                new PieChart.Data(\"Student: \" + numStudent, numStudent));"},{"lineNumber":61,"author":{"gitID":"dannyngmx94"},"content":"        roleDistribution.setData(pieChartData);"},{"lineNumber":62,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":63,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e tutorEngList \u003d"},{"lineNumber":64,"author":{"gitID":"dannyngmx94"},"content":"                tutorList.filtered(person -\u003e person.getSubject().equals(new Subject(\"English\")));"},{"lineNumber":65,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e tutorChiList \u003d"},{"lineNumber":66,"author":{"gitID":"dannyngmx94"},"content":"                tutorList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Chinese\")));"},{"lineNumber":67,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e tutorMathList \u003d"},{"lineNumber":68,"author":{"gitID":"dannyngmx94"},"content":"                tutorList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Math\")));"},{"lineNumber":69,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e tutorPhyList \u003d"},{"lineNumber":70,"author":{"gitID":"dannyngmx94"},"content":"                tutorList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Physics\")));"},{"lineNumber":71,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e tutorChemList \u003d"},{"lineNumber":72,"author":{"gitID":"dannyngmx94"},"content":"                tutorList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Chemistry\")));"},{"lineNumber":73,"author":{"gitID":"dannyngmx94"},"content":"        int numEngTutor \u003d tutorEngList.size();"},{"lineNumber":74,"author":{"gitID":"dannyngmx94"},"content":"        int numChiTutor \u003d tutorChiList.size();"},{"lineNumber":75,"author":{"gitID":"dannyngmx94"},"content":"        int numMathTutor \u003d tutorMathList.size();"},{"lineNumber":76,"author":{"gitID":"dannyngmx94"},"content":"        int numPhyTutor \u003d tutorPhyList.size();"},{"lineNumber":77,"author":{"gitID":"dannyngmx94"},"content":"        int numChemTutor \u003d tutorChemList.size();"},{"lineNumber":78,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":79,"author":{"gitID":"dannyngmx94"},"content":"        XYChart.Series set1 \u003d new XYChart.Series\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"dannyngmx94"},"content":"        set1.getData().add(new XYChart.Data(\"English\", numEngTutor));"},{"lineNumber":81,"author":{"gitID":"dannyngmx94"},"content":"        set1.getData().add(new XYChart.Data(\"Chinese\", numChiTutor));"},{"lineNumber":82,"author":{"gitID":"dannyngmx94"},"content":"        set1.getData().add(new XYChart.Data(\"Math\", numMathTutor));"},{"lineNumber":83,"author":{"gitID":"dannyngmx94"},"content":"        set1.getData().add(new XYChart.Data(\"Physics\", numPhyTutor));"},{"lineNumber":84,"author":{"gitID":"dannyngmx94"},"content":"        set1.getData().add(new XYChart.Data(\"Chemistry\", numChemTutor));"},{"lineNumber":85,"author":{"gitID":"dannyngmx94"},"content":"        tutorSubject.getData().clear();"},{"lineNumber":86,"author":{"gitID":"dannyngmx94"},"content":"        tutorSubject.layout();"},{"lineNumber":87,"author":{"gitID":"dannyngmx94"},"content":"        tutorSubject.getData().addAll(set1);"},{"lineNumber":88,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":89,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e studentEngList \u003d"},{"lineNumber":90,"author":{"gitID":"dannyngmx94"},"content":"                studentList.filtered(person -\u003e person.getSubject().equals(new Subject(\"English\")));"},{"lineNumber":91,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e studentChiList \u003d"},{"lineNumber":92,"author":{"gitID":"dannyngmx94"},"content":"                studentList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Chinese\")));"},{"lineNumber":93,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e studentMathList \u003d"},{"lineNumber":94,"author":{"gitID":"dannyngmx94"},"content":"                studentList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Math\")));"},{"lineNumber":95,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e studentPhyList \u003d"},{"lineNumber":96,"author":{"gitID":"dannyngmx94"},"content":"                studentList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Physics\")));"},{"lineNumber":97,"author":{"gitID":"dannyngmx94"},"content":"        ObservableList\u003cPerson\u003e studentChemList \u003d"},{"lineNumber":98,"author":{"gitID":"dannyngmx94"},"content":"                studentList.filtered(person -\u003e person.getSubject().equals(new Subject(\"Chemistry\")));"},{"lineNumber":99,"author":{"gitID":"dannyngmx94"},"content":"        int numEngStudent \u003d studentEngList.size();"},{"lineNumber":100,"author":{"gitID":"dannyngmx94"},"content":"        int numChiStudent \u003d studentChiList.size();"},{"lineNumber":101,"author":{"gitID":"dannyngmx94"},"content":"        int numMathStudent \u003d studentMathList.size();"},{"lineNumber":102,"author":{"gitID":"dannyngmx94"},"content":"        int numPhyStudent \u003d studentPhyList.size();"},{"lineNumber":103,"author":{"gitID":"dannyngmx94"},"content":"        int numChemStudent \u003d studentChemList.size();"},{"lineNumber":104,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":105,"author":{"gitID":"dannyngmx94"},"content":"        XYChart.Series set2 \u003d new XYChart.Series\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"dannyngmx94"},"content":"        set2.getData().add(new XYChart.Data(\"English\", numEngStudent));"},{"lineNumber":107,"author":{"gitID":"dannyngmx94"},"content":"        set2.getData().add(new XYChart.Data(\"Chinese\", numChiStudent));"},{"lineNumber":108,"author":{"gitID":"dannyngmx94"},"content":"        set2.getData().add(new XYChart.Data(\"Math\", numMathStudent));"},{"lineNumber":109,"author":{"gitID":"dannyngmx94"},"content":"        set2.getData().add(new XYChart.Data(\"Physics\", numPhyStudent));"},{"lineNumber":110,"author":{"gitID":"dannyngmx94"},"content":"        set2.getData().add(new XYChart.Data(\"Chemistry\", numChemStudent));"},{"lineNumber":111,"author":{"gitID":"dannyngmx94"},"content":"        studentSubject.getData().clear();"},{"lineNumber":112,"author":{"gitID":"dannyngmx94"},"content":"        studentSubject.layout();"},{"lineNumber":113,"author":{"gitID":"dannyngmx94"},"content":"        studentSubject.getData().addAll(set2);"},{"lineNumber":114,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":115,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":117,"author":{"gitID":"dannyngmx94"},"content":"    @Subscribe"},{"lineNumber":118,"author":{"gitID":"dannyngmx94"},"content":"    private void handleShowChartsEvent(ShowChartsEvent event) {"},{"lineNumber":119,"author":{"gitID":"dannyngmx94"},"content":"        System.out.println(this);"},{"lineNumber":120,"author":{"gitID":"dannyngmx94"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":121,"author":{"gitID":"dannyngmx94"},"content":"        loadChartsDetails();"},{"lineNumber":122,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":104,"-":19}},{"path":"src/main/java/seedu/address/ui/DetailsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":" * The Details Panel of STUtor that shows a person\u0027s details."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"public class DetailsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    private static final String FXML \u003d \"DetailsPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    private GridPane grid;"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"    private HBox ratingBox;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"    private Label role;"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"    private Label status;"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"    private Label subject;"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    private Label level;"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    private Label price;"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"    private Label remark;"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"    private Label rating;"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"    private Label rateCount;"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"    public DetailsPanel() {"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"        super(FXML);"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"        name.setText(\"\");"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"        grid.setVisible(false);"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        ratingBox.setVisible(false);"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"     * Loads a {@code person}\u0027s details into the details panel."},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"    public void loadPersonDetails(Person person) {"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"        grid.setVisible(true);"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"        ratingBox.setVisible(true);"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"        status.setText(person.getStatus().value);"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"        subject.setText(person.getSubject().value);"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        level.setText(person.getLevel().value);"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"        price.setText(\"$\" + person.getPrice().value + \" / hr\");"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"        role.setText(person.getRole().value);"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"        remark.setText(person.getRemark().value);"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"        if (person.getRate().getCount() \u003d\u003d 0) {"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"            rating.setText(\"-\");"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"            rating.setText(Double.toString(person.getRate().getDisplayedValue()));"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"        rateCount.setText(Integer.toString(person.getRate().getCount()));"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"    @Subscribe"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"        loadPersonDetails(event.getNewSelection().person);"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":86,"-":14}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"        {\"orange\", \"red\", \"yellow\", \"blue\", \"grey\", \"brown\", \"green\", \"pink\", \"black\", \"purple\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        initTags(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"     * Returns the color style for {@code tag}."},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"     * Uses the tagType value inside the Tag to determine the colour."},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"    private String getTagColorStyleFor(Tag tag) {"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        switch (tag.tagType) {"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        case SUBJECT:"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[0]; //subject is teal"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"        case LEVEL:"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[1]; //level is red"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        case STATUS:"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[2]; //status is yellow"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"        case PRICE:"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[3]; //price is blue"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        //fall through to default"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"        default:"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[8]; //all non-attribute are black"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":70,"author":{"gitID":"dannyngmx94"},"content":"    //@@author dannyngmx94"},{"lineNumber":71,"author":{"gitID":"dannyngmx94"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"dannyngmx94"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":73,"author":{"gitID":"dannyngmx94"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"dannyngmx94"},"content":"    private void initTags(Person person) {"},{"lineNumber":75,"author":{"gitID":"dannyngmx94"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":76,"author":{"gitID":"dannyngmx94"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":77,"author":{"gitID":"dannyngmx94"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag));"},{"lineNumber":78,"author":{"gitID":"dannyngmx94"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":79,"author":{"gitID":"dannyngmx94"},"content":"        });"},{"lineNumber":80,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":82,"author":{"gitID":"dannyngmx94"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"dannyngmx94":13,"Aussiroth":25,"sherlynng":1,"-":61}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_INVALID_PAIR_DISPLAYED_INDEX \u003d \"The pair index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_PAIRS_LISTED_OVERVIEW \u003d \"%1$d pairss listed!\";"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d \"The tag provided is invalid\";"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"-":11}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    private String appTitle \u003d \"STUtor\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":71}},{"path":"src/main/java/seedu/address/ui/PairCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":" * An UI component that displays information of a {@code Pair}."},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"public class PairCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"        {\"orange\", \"red\", \"yellow\", \"blue\", \"grey\", \"brown\", \"green\", \"pink\", \"black\", \"purple\"};"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    private static final String FXML \u003d \"PairListCard.fxml\";"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public final Pair pair;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    public PairCard(Pair pair, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        this.pair \u003d pair;"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        name.setText(pair.getPairName());"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        initTags(pair);"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"     * Returns the color style for {@code tag}."},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"     * Uses the tagType value inside the Tag to determine the colour."},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"    private String getTagColorStyleFor(Tag tag) {"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        switch (tag.tagType) {"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        case SUBJECT:"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[0]; //subject is teal"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"        case LEVEL:"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[1]; //level is red"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        case PRICE:"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[3]; //price is blue"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"        default:"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"            return TAG_COLOR_STYLES[8]; //all non-attribute are black"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"     * Creates the tag labels for {@code pair}."},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    private void initTags(Pair pair) {"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        pair.getTags().forEach(tag -\u003e {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        if (!(other instanceof PairCard)) {"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"            return false;"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"        // state check"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        PairCard card \u003d (PairCard) other;"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 pair.equals(card.pair);"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":35,"sherlynng":1,"Aussiroth":20,"-":39}},{"path":"src/main/java/seedu/address/ui/PairListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":" * Panel containing the list of pairs."},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"public class PairListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    private static final String FXML \u003d \"PairListPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PairListPanel.class);"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    private ListView\u003cPairCard\u003e pairListView;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public PairListPanel(ObservableList\u003cPair\u003e pairList) {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        setConnections(pairList);"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    private void setConnections(ObservableList\u003cPair\u003e pairList) {"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        ObservableList\u003cPairCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"                pairList, (pair) -\u003e new PairCard(pair, pairList.indexOf(pair) + 1));"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        pairListView.setItems(mappedList);"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        pairListView.setCellFactory(listView -\u003e new PairListViewCell());"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"     * Scrolls to the {@code PairCard} at the {@code index} and selects it."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"            pairListView.scrollTo(index);"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"            pairListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PairCard}."},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"    class PairListViewCell extends ListCell\u003cPairCard\u003e {"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        @Override"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        protected void updateItem(PairCard pair, boolean empty) {"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"            super.updateItem(pair, empty);"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"            if (empty || pair \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"                setGraphic(null);"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"                setText(null);"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"            } else {"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"                setGraphic(pair.getRoot());"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":47,"-":29}},{"path":"src/main/java/seedu/address/ui/InfoPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowChartsEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":17,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"dannyngmx94"},"content":" * Container for both details panel and charts panel"},{"lineNumber":19,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":20,"author":{"gitID":"dannyngmx94"},"content":"public class InfoPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":22,"author":{"gitID":"dannyngmx94"},"content":"    private static final String FXML \u003d \"InfoPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":24,"author":{"gitID":"dannyngmx94"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":25,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":26,"author":{"gitID":"dannyngmx94"},"content":"    private DetailsPanel detailsPanel;"},{"lineNumber":27,"author":{"gitID":"dannyngmx94"},"content":"    private ChartsPanel pieChart;"},{"lineNumber":28,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":29,"author":{"gitID":"dannyngmx94"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"dannyngmx94"},"content":"    private StackPane infoPlaceHolder;"},{"lineNumber":31,"author":{"gitID":"dannyngmx94"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"dannyngmx94"},"content":"    private StackPane detailsPlaceholder;"},{"lineNumber":33,"author":{"gitID":"dannyngmx94"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"dannyngmx94"},"content":"    private StackPane chartPlaceholder;"},{"lineNumber":35,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":36,"author":{"gitID":"dannyngmx94"},"content":"    public InfoPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":37,"author":{"gitID":"dannyngmx94"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":39,"author":{"gitID":"dannyngmx94"},"content":"        fillInnerParts(personList);"},{"lineNumber":40,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":41,"author":{"gitID":"dannyngmx94"},"content":"        detailsPlaceholder.toFront();"},{"lineNumber":42,"author":{"gitID":"dannyngmx94"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":45,"author":{"gitID":"dannyngmx94"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"dannyngmx94"},"content":"     * Helper method to fill UI placeholders"},{"lineNumber":47,"author":{"gitID":"dannyngmx94"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"dannyngmx94"},"content":"    public void fillInnerParts(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":49,"author":{"gitID":"dannyngmx94"},"content":"        detailsPanel \u003d new DetailsPanel();"},{"lineNumber":50,"author":{"gitID":"dannyngmx94"},"content":"        detailsPlaceholder.getChildren().add(detailsPanel.getRoot());"},{"lineNumber":51,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":52,"author":{"gitID":"dannyngmx94"},"content":"        pieChart \u003d new ChartsPanel(personList);"},{"lineNumber":53,"author":{"gitID":"dannyngmx94"},"content":"        chartPlaceholder.getChildren().add(pieChart.getRoot());"},{"lineNumber":54,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":56,"author":{"gitID":"dannyngmx94"},"content":"    @Subscribe"},{"lineNumber":57,"author":{"gitID":"dannyngmx94"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":58,"author":{"gitID":"dannyngmx94"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":59,"author":{"gitID":"dannyngmx94"},"content":"        detailsPanel.loadPersonDetails(event.getNewSelection().person);"},{"lineNumber":60,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":61,"author":{"gitID":"dannyngmx94"},"content":"        detailsPlaceholder.toFront();"},{"lineNumber":62,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":64,"author":{"gitID":"dannyngmx94"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"dannyngmx94"},"content":"    private void handleShowChartsEvent(ShowChartsEvent event) {"},{"lineNumber":66,"author":{"gitID":"dannyngmx94"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":68,"author":{"gitID":"dannyngmx94"},"content":"        chartPlaceholder.toFront();"},{"lineNumber":69,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":55,"-":15}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    ObservableList\u003cPair\u003e getFilteredPairList();"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"-":28}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowChartsEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"//import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"//import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":8,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"dannyngmx94"},"content":" * An event requesting to view charts in person panel."},{"lineNumber":10,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":11,"author":{"gitID":"dannyngmx94"},"content":"public class ShowChartsEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":13,"author":{"gitID":"dannyngmx94"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"dannyngmx94"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"dannyngmx94"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":18,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":12,"-":6}},{"path":"src/main/java/seedu/address/logic/predicates/FindMissingPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"package seedu.address.logic.predicates;"},{"lineNumber":2,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"//**@@author aussiroth"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":" * Tests that a {@code Person}\u0027s specified {@code Attribute} as given in {@code keyword} is an empty string."},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"public class FindMissingPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"     * Constructs a new FindMissingPredicate based off given list."},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"     * @param keywords A non-empty ArrayList of keywords containing attributes."},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    public FindMissingPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"        assert(keywords.size() \u003e\u003d 1);"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"        //sort to ensure equality check passes"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        Collections.sort(keywords);"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"    public boolean test(Person person) {"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"        for (String keyword : keywords) {"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"            if (keyword.equals(\"email\") \u0026\u0026 person.getEmail().value.equals(\"\")) {"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"            } else if (keyword.equals(\"phone\") \u0026\u0026 person.getPhone().value.equals(\"\")) {"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"            } else if (keyword.equals(\"address\") \u0026\u0026 person.getAddress().value.equals(\"\")) {"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"            } else if (keyword.equals(\"price\") \u0026\u0026 person.getPrice().value.equals(\"\")) {"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"            } else if (keyword.equals(\"level\") \u0026\u0026 person.getLevel().value.equals(\"\")) {"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"            } else if (keyword.equals(\"subject\") \u0026\u0026 person.getSubject().value.equals(\"\")) {"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"            } else if (keyword.equals(\"role\") \u0026\u0026 person.getRole().value.equals(\"\")) {"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"            } else if (keyword.equals(\"status\") \u0026\u0026 person.getStatus().value.equals(\"\")) {"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        return false;"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"                || (other instanceof FindMissingPredicate // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"                \u0026\u0026 this.keywords.equals(((FindMissingPredicate) other).keywords)); // state check"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":57}},{"path":"src/main/java/seedu/address/commons/events/logic/EditRemarkEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"sherlynng"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":2,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":" * Represents edit remark command is called."},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"public class EditRemarkEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"    private final String personRemark;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"    public EditRemarkEvent(String personRemark) {"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"        this.personRemark \u003d personRemark;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"    public String getPersonRemark() {"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"        return personRemark;"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":18,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_USAGE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.AttributeTagSetter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"                        PREFIX_PRICE, PREFIX_SUBJECT, PREFIX_LEVEL,"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"                        PREFIX_ROLE, PREFIX_TAG);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE, MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"        //@@author aussiroth"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        //Change here from original code is that I create a class with empty string if user did not enter a value."},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).orElse(new Phone(\"\"));"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).orElse(new Email(\"\"));"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).orElse(new Address(\"\"));"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"            Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).orElse(new Price(\"\"));"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"            Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).orElse(new Subject(\"\"));"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"            Level level \u003d ParserUtil.parseLevel(argMultimap.getValue(PREFIX_LEVEL)).orElse(new Level(\"\"));"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"            Status status \u003d Status.DEFAULT_STATUS;"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"            Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE)).orElse(new Role(\"\"));"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"            //make sure name is never set to empty string as it is the only compulsory field."},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"            assert(!name.equals(\"\"));"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"            //Add required attributes to the tag list as in documentation"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"            //make tags only if the attribute has been entered by user"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"            tagList \u003d AttributeTagSetter.addNewAttributeTags(tagList, price, subject, level, status, role);"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"            Remark remark \u003d new Remark(\"\");  // default remark is empty string for newly added Person"},{"lineNumber":79,"author":{"gitID":"Aussiroth"},"content":"            Rate rate \u003d Rate.initializeRate(); // default rate has 0 people rating the person"},{"lineNumber":80,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":81,"author":{"gitID":"Aussiroth"},"content":"            Person person \u003d new Person(name, phone, email, address, price, subject, level,"},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"                                       status, role, tagList, remark, rate, PairHash.getDefaultPairHashSet());"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"            return new AddCommand(person);"},{"lineNumber":84,"author":{"gitID":"Aussiroth"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":89,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":91,"author":{"gitID":"Aussiroth"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":92,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":97,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"alexawangzi":15,"Aussiroth":42,"sherlynng":2,"-":38}},{"path":"src/main/java/seedu/address/logic/AttributeTagSetter.java","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":" * This class contains static methods for use when performing attribute tag related tasks."},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"public class AttributeTagSetter {"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"     * This function takes in a person and a set of tags."},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"     * If present, each of the attribute tags for that person will be removed from the set of tags."},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"     * The resulting set of tags is then returned."},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"     * @param person A person to remove the attribute tags from."},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"     * @param updatedTags The current set of tags of that person."},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"     * @return A copy of attributeTags representing the Tags for that person, with all attribute tags removed."},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"    public static Set\u003cTag\u003e removePresentAttributeTags(Person person, Set\u003cTag\u003e updatedTags) {"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        //create a new modifiable set of tags"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        Set\u003cTag\u003e attributeTags \u003d new HashSet\u003c\u003e(updatedTags);"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        //ignore if attribute is empty (not entered yet by user)"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        if (!person.getPrice().toString().equals(\"\")) {"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.remove(new Tag(person.getPrice().toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        if (!person.getLevel().toString().equals(\"\")) {"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.remove(new Tag(person.getLevel().toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        if (!person.getSubject().toString().equals(\"\")) {"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.remove(new Tag(person.getSubject().toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"        if (!person.getStatus().toString().equals(\"\")) {"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.remove(new Tag(person.getStatus().toString(), Tag.AllTagTypes.STATUS));"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        if (!person.getRole().toString().equals(\"\")) {"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.remove(new Tag(person.getRole().toString(), Tag.AllTagTypes.ROLE));"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"        return new HashSet\u003c\u003e(attributeTags);"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"     * @param attributeTags The set of tags to update"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"     * @param price The new price entered"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"     * @param subject The new subject entered"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"     * @param level The new level entered"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"     * @param status The new status entered"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"     * @param role The new role entered"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"     * @return A copy of attributeTags representing the Tags for that person, with all the 5 attribute tags entered."},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"    public static Set\u003cTag\u003e addNewAttributeTags(Set\u003cTag\u003e attributeTags, Price price, Subject subject,"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        Level level, Status status, Role role) {"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"        requireAllNonNull(price, subject, level, status, role);"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"        //ignore empty strings i.e. user did not enter that field"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        if (!price.toString().equals(\"\")) {"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.add(new Tag(price.toString(), Tag.AllTagTypes.PRICE));"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"        if (!subject.toString().equals(\"\")) {"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.add(new Tag(subject.toString(), Tag.AllTagTypes.SUBJECT));"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"        if (!level.toString().equals(\"\")) {"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.add(new Tag(level.toString(), Tag.AllTagTypes.LEVEL));"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Aussiroth"},"content":"        if (!status.toString().equals(\"\")) {"},{"lineNumber":77,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.add(new Tag(status.toString(), Tag.AllTagTypes.STATUS));"},{"lineNumber":78,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"Aussiroth"},"content":"        if (!role.toString().equals(\"\")) {"},{"lineNumber":80,"author":{"gitID":"Aussiroth"},"content":"            attributeTags.add(new Tag(role.toString(), Tag.AllTagTypes.ROLE));"},{"lineNumber":81,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"        return new HashSet\u003c\u003e(attributeTags);"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"Aussiroth":81}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.FindMissingCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.UnmatchCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewStatsCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"     * @throws ParseException if the user input does not conform the expected format\\"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        case AddCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"        case EditCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        case SelectCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"        case DeleteCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"        case ClearCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"        case FindCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"        case FindMissingCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"Aussiroth"},"content":"        case FindMissingCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":87,"author":{"gitID":"Aussiroth"},"content":"            return new FindMissingCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"Aussiroth"},"content":"        case ListCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"        case HistoryCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case ViewStatsCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new ViewStatsCommand();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"Aussiroth"},"content":"        case UndoCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"        case RedoCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"        case RemarkCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"        case RateCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"        case RateCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"            return new RateCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"        case UnmatchCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"        case UnmatchCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"            return new UnmatchCommandParser().parse(arguments);"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"        case MatchCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"        case MatchCommand.COMMAND_WORD_ALIAS:"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"            return new MatchCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":11,"Aussiroth":15,"sherlynng":10,"-":99}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"$/\");"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"sub/\");"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_LEVEL \u003d new Prefix(\"lvl/\");"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"stat/\");"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"    public static final Prefix PREFIX_RATE \u003d new Prefix(\"r/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"sherlynng":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/FindMissingCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.commands.FindMissingCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.predicates.FindMissingPredicate;"},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"//**@@author aussiroth"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":" * Parses input arguments and creates a new FilterCommand object"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"public class FindMissingCommandParser implements Parser\u003cFindMissingCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"     * Parses the given {@code String} of arguments in the context of the FindMissingCommand"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"     * and returns an FindMissingCommand object for execution."},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"     * @throws ParseException if the user input contains non-attribute values"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    public FindMissingCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"        String[] fieldKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        //validate user input, and set all input to lowercase."},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"        for (int i \u003d 0; i \u003c fieldKeywords.length; i++) {"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"            fieldKeywords[i] \u003d fieldKeywords[i].toLowerCase();"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"            if (!(fieldKeywords[i].equals(\"\") || FindMissingCommand.SET_ATTRIBUTE_VALUES.contains(fieldKeywords[i]))) {"},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"                throw new ParseException(String.format(FindMissingCommand.MESSAGE_INVALID_ATTRIBUTE, fieldKeywords[i]));"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"            }"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"        //If user enters no parameters, the command is equivalent to entering ALL parameters."},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        if (fieldKeywords[0].equals(\"\")) {"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"            fieldKeywords \u003d Arrays.copyOf(FindMissingCommand.ATTRIBUTE_VALUES,"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"                    FindMissingCommand.ATTRIBUTE_VALUES.length);"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"        Predicate\u003cPerson\u003e finalPredicate \u003d new FindMissingPredicate(Arrays.asList(fieldKeywords));"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"        return new FindMissingCommand(finalPredicate);"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":39,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"        //Since any string of characters is accepted for address, and empty string indicates user did not enter"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"        //a value, there is currently no invalid address. So just trim and return."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String price} into a {@code Price}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"    public static Price parsePrice(String price) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(price);"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        String trimmedPrice \u003d price.trim();"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"        if (!Price.isValidPrice(trimmedPrice)) {"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"        return new Price(trimmedPrice);"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e} if {@code price} is present."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cPrice\u003e parsePrice(Optional\u003cString\u003e price) throws IllegalValueException {"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(price);"},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"        return price.isPresent() ? Optional.of(parsePrice(price.get())) : Optional.empty();"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String subject} into a {@code Subject}."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"    public static Subject parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(subject);"},{"lineNumber":180,"author":{"gitID":"alexawangzi"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"        if (!Subject.isValidSubject(trimmedSubject)) {"},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":185,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e subject} into an {@code Optional\u003cSubject\u003e} if {@code subject} is present."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cSubject\u003e parseSubject(Optional\u003cString\u003e subject) throws IllegalValueException {"},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(subject);"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":194,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":196,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String level} into a {@code Level}."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":200,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code level} is invalid."},{"lineNumber":201,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"alexawangzi"},"content":"    public static Level parseLevel(String level) throws IllegalValueException {"},{"lineNumber":203,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(level);"},{"lineNumber":204,"author":{"gitID":"alexawangzi"},"content":"        String trimmedLevel \u003d level.trim();"},{"lineNumber":205,"author":{"gitID":"alexawangzi"},"content":"        if (!Level.isValidLevel(trimmedLevel)) {"},{"lineNumber":206,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":207,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"alexawangzi"},"content":"        return new Level(trimmedLevel);"},{"lineNumber":209,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":211,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e level} into an {@code Optional\u003cLevel\u003e} if {@code level} is present."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cLevel\u003e parseLevel(Optional\u003cString\u003e level) throws IllegalValueException {"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(level);"},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"        return level.isPresent() ? Optional.of(parseLevel(level.get())) : Optional.empty();"},{"lineNumber":218,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":220,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String status} into a {@code Status}."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":224,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code status} is invalid."},{"lineNumber":225,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"alexawangzi"},"content":"    public static Status parseStatus(String status) throws IllegalValueException {"},{"lineNumber":227,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(status);"},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":"        String trimmedStatus \u003d status.trim();"},{"lineNumber":229,"author":{"gitID":"alexawangzi"},"content":"        if (!Status.isValidStatus(status)) {"},{"lineNumber":230,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":231,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"alexawangzi"},"content":"        return new Status(trimmedStatus);"},{"lineNumber":233,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":235,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String role} into a {@code Role}."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":238,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":239,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code role} is invalid."},{"lineNumber":240,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"alexawangzi"},"content":"    public static Role parseRole(String role) throws IllegalValueException {"},{"lineNumber":242,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(role);"},{"lineNumber":243,"author":{"gitID":"alexawangzi"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":244,"author":{"gitID":"alexawangzi"},"content":"        if (!Role.isValidRole(role)) {"},{"lineNumber":245,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":246,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"alexawangzi"},"content":"        return new Role(trimmedRole);"},{"lineNumber":248,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":250,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code Optional\u003cString\u003e role} into an {@code Optional\u003cRole\u003e} if {@code role} is present."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"alexawangzi"},"content":"    public static Optional\u003cRole\u003e parseRole(Optional\u003cString\u003e role) throws IllegalValueException {"},{"lineNumber":255,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(role);"},{"lineNumber":256,"author":{"gitID":"alexawangzi"},"content":"        return role.isPresent() ? Optional.of(parseRole(role.get())) : Optional.empty();"},{"lineNumber":257,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":276,"author":{"gitID":"Aussiroth"},"content":"     * Each tag will have the {@code Tags.allTagType} value set to DEFAULT."},{"lineNumber":277,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":287,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":288,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"alexawangzi"},"content":"     * Parses a {@code String pariHash} into a {@code PairHash}."},{"lineNumber":290,"author":{"gitID":"alexawangzi"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":291,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":292,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if the given {@code  pairHash} is invalid."},{"lineNumber":293,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":294,"author":{"gitID":"alexawangzi"},"content":"    public static PairHash parsePairHash(String pairHash) throws IllegalValueException {"},{"lineNumber":295,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(pairHash);"},{"lineNumber":296,"author":{"gitID":"alexawangzi"},"content":"        String trimmedPairHash \u003d pairHash.trim();"},{"lineNumber":297,"author":{"gitID":"alexawangzi"},"content":"        if (!PairHash.isValidPairHashValue(trimmedPairHash)) {"},{"lineNumber":298,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(PairHash.MESSAGE_PAIRHASH_CONSTRAINTS);"},{"lineNumber":299,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":300,"author":{"gitID":"alexawangzi"},"content":"        return new PairHash(trimmedPairHash);"},{"lineNumber":301,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":303,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":304,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":305,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"alexawangzi"},"content":"     * Parses {@code Collection\u003cString\u003e pairHashes} into a {@code Set\u003cPairHash\u003e}."},{"lineNumber":307,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"alexawangzi"},"content":"    public static Set\u003cPairHash\u003e parsePairHashes(Collection\u003cString\u003e pairHashes) throws IllegalValueException {"},{"lineNumber":309,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(pairHashes);"},{"lineNumber":310,"author":{"gitID":"alexawangzi"},"content":"        final Set\u003cPairHash\u003e pairHashSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":311,"author":{"gitID":"alexawangzi"},"content":"        for (String pairHashValue : pairHashes) {"},{"lineNumber":312,"author":{"gitID":"alexawangzi"},"content":"            pairHashSet.add(parsePairHash(pairHashValue));"},{"lineNumber":313,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"alexawangzi"},"content":"        return pairHashSet;"},{"lineNumber":315,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":317,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":318,"author":{"gitID":"sherlynng"},"content":"    //@@author sherlynng"},{"lineNumber":319,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":320,"author":{"gitID":"sherlynng"},"content":"     * Parses a {@code String remark} into a {@code Remark}."},{"lineNumber":321,"author":{"gitID":"sherlynng"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":322,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"sherlynng"},"content":"    public static Remark parseRemark(String remark) {"},{"lineNumber":324,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(remark);"},{"lineNumber":325,"author":{"gitID":"sherlynng"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":326,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":327,"author":{"gitID":"sherlynng"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":328,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":330,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"sherlynng"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":332,"author":{"gitID":"sherlynng"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":333,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":334,"author":{"gitID":"sherlynng"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) {"},{"lineNumber":335,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(remark);"},{"lineNumber":336,"author":{"gitID":"sherlynng"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":337,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":339,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":340,"author":{"gitID":"sherlynng"},"content":"     * Parses a {@code String rate} into a {@code Rate}."},{"lineNumber":341,"author":{"gitID":"sherlynng"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":342,"author":{"gitID":"sherlynng"},"content":"     * Checks if user wants absolute or cumulative rating."},{"lineNumber":343,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":344,"author":{"gitID":"sherlynng"},"content":"    public static Rate parseRate(String rate) throws IllegalValueException {"},{"lineNumber":345,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(rate);"},{"lineNumber":346,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":347,"author":{"gitID":"sherlynng"},"content":"        if (rate.equals(\"\")) {"},{"lineNumber":348,"author":{"gitID":"sherlynng"},"content":"            throw new IllegalValueException(Rate.MESSAGE_RATE_CONSTRAINTS);"},{"lineNumber":349,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":351,"author":{"gitID":"sherlynng"},"content":"        String trimmedRate \u003d rate.trim();"},{"lineNumber":352,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":353,"author":{"gitID":"sherlynng"},"content":"        boolean isAbsolute \u003d checkRateIsAbsolute(trimmedRate);"},{"lineNumber":354,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":355,"author":{"gitID":"sherlynng"},"content":"        if (isAbsolute) {"},{"lineNumber":356,"author":{"gitID":"sherlynng"},"content":"            trimmedRate \u003d trimmedRate.substring(0, trimmedRate.length() - 1);"},{"lineNumber":357,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":358,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":359,"author":{"gitID":"sherlynng"},"content":"        if (!Rate.isValidRate(trimmedRate)) {"},{"lineNumber":360,"author":{"gitID":"sherlynng"},"content":"            throw new IllegalValueException(Rate.MESSAGE_RATE_CONSTRAINTS);"},{"lineNumber":361,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":362,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":363,"author":{"gitID":"sherlynng"},"content":"        return new Rate(Double.parseDouble(trimmedRate), isAbsolute);"},{"lineNumber":364,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":366,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":367,"author":{"gitID":"sherlynng"},"content":"     * Parses a {@code Optional\u003cString\u003e rate} into an {@code Optional\u003cRate\u003e} if {@code rate} is present."},{"lineNumber":368,"author":{"gitID":"sherlynng"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":369,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":370,"author":{"gitID":"sherlynng"},"content":"    public static Optional\u003cRate\u003e parseRate(Optional\u003cString\u003e rate) throws IllegalValueException {"},{"lineNumber":371,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(rate);"},{"lineNumber":372,"author":{"gitID":"sherlynng"},"content":"        return rate.isPresent() ? Optional.of(parseRate(rate.get())) : Optional.empty();"},{"lineNumber":373,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":375,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":376,"author":{"gitID":"sherlynng"},"content":"     * Checks if new rate is of absolute type"},{"lineNumber":377,"author":{"gitID":"sherlynng"},"content":"     * @param rate"},{"lineNumber":378,"author":{"gitID":"sherlynng"},"content":"     * @return true if rate is of absolute type"},{"lineNumber":379,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":380,"author":{"gitID":"sherlynng"},"content":"    private static boolean checkRateIsAbsolute(String rate) {"},{"lineNumber":381,"author":{"gitID":"sherlynng"},"content":"        Character lastChar \u003d rate.charAt(rate.length() - 1);"},{"lineNumber":382,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":383,"author":{"gitID":"sherlynng"},"content":"        // user wants absolute rate value"},{"lineNumber":384,"author":{"gitID":"sherlynng"},"content":"        if (lastChar.equals(\u0027-\u0027)) {"},{"lineNumber":385,"author":{"gitID":"sherlynng"},"content":"            return true;"},{"lineNumber":386,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":387,"author":{"gitID":"sherlynng"},"content":"        return false;"},{"lineNumber":388,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"alexawangzi":131,"sherlynng":75,"Aussiroth":3,"-":180}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.KeywordPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":13,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"dannyngmx94"},"content":" * Parses input arguments and creates a new FilterCommand object"},{"lineNumber":15,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":16,"author":{"gitID":"dannyngmx94"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":18,"author":{"gitID":"dannyngmx94"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"dannyngmx94"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterCommand"},{"lineNumber":20,"author":{"gitID":"dannyngmx94"},"content":"     * and returns an FilterCommand object for execution."},{"lineNumber":21,"author":{"gitID":"dannyngmx94"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"dannyngmx94"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"dannyngmx94"},"content":"    public FilterCommand parse(String args) {"},{"lineNumber":24,"author":{"gitID":"dannyngmx94"},"content":"        List\u003cPredicate\u003cPerson\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"dannyngmx94"},"content":"        predicateList.add(new KeywordPredicate(args.trim()));"},{"lineNumber":26,"author":{"gitID":"dannyngmx94"},"content":"        Predicate\u003cPerson\u003e allPredicates \u003d combineAllPredicates(predicateList);"},{"lineNumber":27,"author":{"gitID":"dannyngmx94"},"content":"        return new FilterCommand(allPredicates);"},{"lineNumber":28,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":30,"author":{"gitID":"dannyngmx94"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"dannyngmx94"},"content":"     * Combines all the predicates in the predicateList into a single Predicate"},{"lineNumber":32,"author":{"gitID":"dannyngmx94"},"content":"     * @param predicateList a list of non-empty predicates"},{"lineNumber":33,"author":{"gitID":"dannyngmx94"},"content":"     * @return a single Predicate combining all the predicates in the predicateList"},{"lineNumber":34,"author":{"gitID":"dannyngmx94"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"dannyngmx94"},"content":"    private Predicate\u003cPerson\u003e combineAllPredicates(List\u003cPredicate\u003cPerson\u003e\u003e predicateList) {"},{"lineNumber":36,"author":{"gitID":"dannyngmx94"},"content":"        assert(predicateList.size() \u003e\u003d 1);"},{"lineNumber":37,"author":{"gitID":"dannyngmx94"},"content":"        Predicate\u003cPerson\u003e allPredicates \u003d predicateList.get(0);"},{"lineNumber":38,"author":{"gitID":"dannyngmx94"},"content":"        for (int i \u003d 1; i \u003c predicateList.size(); i++) {"},{"lineNumber":39,"author":{"gitID":"dannyngmx94"},"content":"            allPredicates.and(predicateList.get(i));"},{"lineNumber":40,"author":{"gitID":"dannyngmx94"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"dannyngmx94"},"content":"        return allPredicates;"},{"lineNumber":42,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":32,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.RemarkCommand.MESSAGE_USAGE;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":" * Parses input arguments and creates a new RemarkCommand object"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"     * Parses the given {@code String} with remark in the context of the RemarkCommand"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"     * and returns a RemarkCommand object for execution."},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"        boolean isEditRemark;"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"        isEditRemark \u003d argMultimap.getPreamble().contains(\"edit\");"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"        if (!isEditRemark \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_REMARK)) {"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE);"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"            if (isEditRemark) {"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"                String replacedPreamble \u003d argMultimap.getPreamble().replace(\"edit\", \"\");"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"                index \u003d ParserUtil.parseIndex(replacedPreamble);"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"            } else {"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"            throw new ParseException(ive.getMessage());"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        Remark remark;"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        if (isEditRemark) {"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"            remark \u003d ParserUtil.parseRemark(\"\");"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"            return new RemarkCommand(index, remark, isEditRemark);"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"            remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).orElse(new Remark(\"\"));"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        return new RemarkCommand(index, remark);"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":63,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/RateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.commands.RateCommand.MESSAGE_USAGE;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATE;"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":" * Parses input arguments and creates a new RateCommand object"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"public class RateCommandParser implements Parser\u003cRateCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"     * Parses the given {@code String} with rate in the context of the RateCommand"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"     * and returns a RateCommand object for execution."},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"    public RateCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_RATE);"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_RATE)) {"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE);"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"            throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT + MESSAGE_USAGE);"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"        Rate rate;"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"            rate \u003d ParserUtil.parseRate(argMultimap.getValue(PREFIX_RATE)).get();"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"        return new RateCommand(index, rate);"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":55,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotDeleteException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"d\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_DELETE_PERSON_FAILURE_MATCHED \u003d \"The person cannot be deleted \""},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"            + \"because he/she is currently matched.\\n Unmatch the pair first before deletion.\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonMatchedCannotDeleteException pmcde) {"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"            return new CommandResult(MESSAGE_DELETE_PERSON_FAILURE_MATCHED);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"                        PREFIX_PRICE, PREFIX_SUBJECT, PREFIX_LEVEL, PREFIX_ROLE, PREFIX_TAG);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"            ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).ifPresent(editPersonDescriptor::setPrice);"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"            ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubject);"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"            ParserUtil.parseLevel(argMultimap.getValue(PREFIX_LEVEL)).ifPresent(editPersonDescriptor::setLevel);"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"            ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE)).ifPresent(editPersonDescriptor::setRole);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":3,"Aussiroth":7,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/UnmatchCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.UnmatchCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" * Parses input arguments and creates a new UnmatchCommand object"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"public class UnmatchCommandParser implements Parser\u003cUnmatchCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     * Parses the given {@code String} of arguments in the context of the UnmatchCommand"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"     * and returns an UnmatchCommand object for execution."},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"    public UnmatchCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            return new UnmatchCommand(index);"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmatchCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":23,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":8,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"dannyngmx94"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":10,"author":{"gitID":"dannyngmx94"},"content":" * Keyword matching is case sensitive."},{"lineNumber":11,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":12,"author":{"gitID":"dannyngmx94"},"content":"public class FilterCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":14,"author":{"gitID":"dannyngmx94"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":15,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":16,"author":{"gitID":"dannyngmx94"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filter all persons whose tag contain any of \""},{"lineNumber":17,"author":{"gitID":"dannyngmx94"},"content":"            + \"the specified predicate and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"dannyngmx94"},"content":"            + \"Parameters: TAG\\n\""},{"lineNumber":19,"author":{"gitID":"dannyngmx94"},"content":"            + \"Example: \" + COMMAND_WORD + \" math\";"},{"lineNumber":20,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":21,"author":{"gitID":"dannyngmx94"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":22,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":23,"author":{"gitID":"dannyngmx94"},"content":"    public FilterCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":24,"author":{"gitID":"dannyngmx94"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":27,"author":{"gitID":"dannyngmx94"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"dannyngmx94"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"dannyngmx94"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"dannyngmx94"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":33,"author":{"gitID":"dannyngmx94"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"dannyngmx94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"dannyngmx94"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"dannyngmx94"},"content":"                || (other instanceof FilterCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"dannyngmx94"},"content":"                \u0026\u0026 this.predicate.equals(((FilterCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":33,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LEVEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_PRICE + \"BUDGET \""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_SUBJECT + \"SUBJECT \""},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_LEVEL + \"LEVEL \""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_ROLE + \"ROLE\""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_PRICE + \"50 \""},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_SUBJECT + \"Math \""},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_LEVEL + \"Lower Sec \""},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"            + PREFIX_ROLE + \"Student\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":12,"Aussiroth":2,"-":64}},{"path":"src/main/java/seedu/address/logic/parser/MatchCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.logic.commands.MatchCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" * Parses input arguments and creates a new MatchCommand object"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"public class MatchCommandParser implements Parser\u003cMatchCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     * Parses the given {@code String} of arguments in the context of the MatchCommand"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"     * and returns an MatchCommand object for execution."},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"    public MatchCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"        String[] indices \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"        if (indices.length !\u003d 2) {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        Index indexA \u003d null; // index of the first person"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        Index indexB \u003d null; // index of the second person"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"            indexA \u003d ParserUtil.parseIndex(indices[0]);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException("},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"            indexB \u003d ParserUtil.parseIndex(indices[1]);"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"            throw new ParseException("},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MatchCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        return new MatchCommand(indexA, indexB);"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":43,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/FindMissingCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Aussiroth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aussiroth"},"content":"//@@author aussiroth"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":" * Keyword matching is case sensitive."},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"public class FindMissingCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD \u003d \"findmissing\";"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"fm\";"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    public static final String[] ATTRIBUTE_VALUES \u003d"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"            new String[] {\"phone\", \"email\", \"address\", \"price\", \"level\", \"role\", \"status\", \"subject\"};"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"    public static final HashSet\u003cString\u003e SET_ATTRIBUTE_VALUES \u003d new HashSet\u003c\u003e(Arrays.asList(ATTRIBUTE_VALUES));"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"Aussiroth"},"content":"            + \": Filter all persons whose fields have unentered values.\\n\""},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"            + \"With parameters, only those with specified fields with unentered values will be shown.\""},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"            + \"With no parameters, all persons with at least one field with unentered values will be shown\""},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"            + \"Parameters: [ATTRIBUTE_NAME]\\n\""},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"            + \"Example: \" + COMMAND_WORD + \" email phone\";"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":29,"author":{"gitID":"Aussiroth"},"content":"    public static final String MESSAGE_INVALID_ATTRIBUTE \u003d \"The attribute %s is invalid.\\n\""},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"            + \"The valid attributes are: phone, email, address, price, level, role, status, subject.\";"},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    public FindMissingCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"    public CommandResult execute() {"},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"                || (other instanceof FindMissingCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"                \u0026\u0026 this.predicate.equals(((FindMissingCommand) other).predicate)); // state check"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"}"}],"authorContributionMap":{"Aussiroth":46,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/UnmatchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":" * Unmatch a pair listed in STUtor"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"public class UnmatchCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD \u003d \"unmatch\";"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"um\";"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unmatch an existing pair.\\n \""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_UNMATCH_PAIR_SUCCESS \u003d \"Unmatched Pair: %1$s\";"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_NOT_UNMATCHED \u003d \"At least one field to unmatch must be provided.\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    private Pair pairToUnmatch;"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"     * @param targetIndex of the pair in the filtered pair list to unmatch"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    public UnmatchCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(pairToUnmatch);"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"            model.deletePair(pairToUnmatch);"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        } catch (PairNotFoundException pnfe) {"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"The target pair cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        return new CommandResult(String.format(MESSAGE_UNMATCH_PAIR_SUCCESS, pairToUnmatch));"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPair\u003e lastShownList \u003d model.getFilteredPairList();"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PAIR_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        pairToUnmatch \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof UnmatchCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.targetIndex.equals(((UnmatchCommand) other).targetIndex) // state check"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 Objects.equals(this.pairToUnmatch, ((UnmatchCommand) other).pairToUnmatch));"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":61,"-":10}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.AttributeTagSetter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotEditException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"e\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MATCHED_CANNOT_EDIT \u003d"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"            \"This person is currently matched. Unmatch before editing.\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonMatchedCannotEditException e) {"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(MESSAGE_MATCHED_CANNOT_EDIT);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"Aussiroth"},"content":"    private static Person createEditedPerson("},{"lineNumber":116,"author":{"gitID":"Aussiroth"},"content":"            Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"Aussiroth"},"content":"        Name updatedName \u003d getUpdatedName(personToEdit, editPersonDescriptor);"},{"lineNumber":120,"author":{"gitID":"Aussiroth"},"content":"        Phone updatedPhone \u003d getUpdatedPhone(personToEdit, editPersonDescriptor);"},{"lineNumber":121,"author":{"gitID":"Aussiroth"},"content":"        Email updatedEmail \u003d getUpdatedEmail(personToEdit, editPersonDescriptor);"},{"lineNumber":122,"author":{"gitID":"Aussiroth"},"content":"        Address updatedAddress \u003d getUpdatedAddress(personToEdit, editPersonDescriptor);"},{"lineNumber":123,"author":{"gitID":"Aussiroth"},"content":"        Price updatedPrice \u003d getUpdatedPrice(personToEdit, editPersonDescriptor);"},{"lineNumber":124,"author":{"gitID":"Aussiroth"},"content":"        Subject updatedSubject \u003d getUpdatedSubject(personToEdit, editPersonDescriptor);"},{"lineNumber":125,"author":{"gitID":"Aussiroth"},"content":"        Level updatedLevel \u003d getUpdatedLevel(personToEdit, editPersonDescriptor);"},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":"        Status updatedStatus \u003d getUpdatedStatus(personToEdit, editPersonDescriptor);"},{"lineNumber":127,"author":{"gitID":"Aussiroth"},"content":"        Role updatedRole \u003d getUpdatedRole(personToEdit, editPersonDescriptor);"},{"lineNumber":128,"author":{"gitID":"Aussiroth"},"content":"        Remark remark \u003d getRemark(personToEdit);"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d getRate(personToEdit);"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cPairHash\u003e pairHashes \u003d getPairHashes(personToEdit);"},{"lineNumber":131,"author":{"gitID":"Aussiroth"},"content":"        Set\u003cTag\u003e updatedTags \u003d getUpdatedTags(personToEdit, editPersonDescriptor);"},{"lineNumber":132,"author":{"gitID":"Aussiroth"},"content":"        Set\u003cTag\u003e attributeTags \u003d getAttributeTags(personToEdit, updatedPrice, updatedSubject, updatedLevel,"},{"lineNumber":133,"author":{"gitID":"Aussiroth"},"content":"                updatedStatus, updatedRole, updatedTags);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"                updatedPrice, updatedSubject, updatedLevel, updatedStatus, updatedRole, attributeTags,"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"                remark, rate, pairHashes);"},{"lineNumber":138,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"    private static Set\u003cPairHash\u003e getPairHashes(Person personToEdit) {"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"        return personToEdit.getPairHashes();"},{"lineNumber":142,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":144,"author":{"gitID":"Aussiroth"},"content":"    private static Remark getRemark(Person personToEdit) {"},{"lineNumber":145,"author":{"gitID":"Aussiroth"},"content":"        return personToEdit.getRemark();"},{"lineNumber":146,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":148,"author":{"gitID":"sherlynng"},"content":"    private static Rate getRate(Person personToEdit) {"},{"lineNumber":149,"author":{"gitID":"sherlynng"},"content":"        return personToEdit.getRate();"},{"lineNumber":150,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":152,"author":{"gitID":"Aussiroth"},"content":"    private static Set\u003cTag\u003e getUpdatedTags(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":153,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getTags().orElse(new HashSet\u003c\u003e(personToEdit.getTags()));"},{"lineNumber":154,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":156,"author":{"gitID":"Aussiroth"},"content":"    private static Address getUpdatedAddress(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":157,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":158,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":160,"author":{"gitID":"Aussiroth"},"content":"    private static Email getUpdatedEmail(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":161,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":162,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":164,"author":{"gitID":"Aussiroth"},"content":"    private static Phone getUpdatedPhone(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":165,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":166,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":168,"author":{"gitID":"Aussiroth"},"content":"    private static Name getUpdatedName(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":169,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":170,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":172,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":173,"author":{"gitID":"Aussiroth"},"content":"    private static Role getUpdatedRole(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":174,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getRole().orElse(personToEdit.getRole());"},{"lineNumber":175,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":177,"author":{"gitID":"Aussiroth"},"content":"    private static Status getUpdatedStatus(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":178,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getStatus().orElse(personToEdit.getStatus());"},{"lineNumber":179,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":181,"author":{"gitID":"Aussiroth"},"content":"    private static Level getUpdatedLevel(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":182,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getLevel().orElse(personToEdit.getLevel());"},{"lineNumber":183,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"    private static Subject getUpdatedSubject(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":186,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getSubject().orElse(personToEdit.getSubject());"},{"lineNumber":187,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":189,"author":{"gitID":"Aussiroth"},"content":"    private static Price getUpdatedPrice(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":190,"author":{"gitID":"Aussiroth"},"content":"        return editPersonDescriptor.getPrice().orElse(personToEdit.getPrice());"},{"lineNumber":191,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":193,"author":{"gitID":"Aussiroth"},"content":"    private static Set\u003cTag\u003e getAttributeTags(Person personToEdit, Price updatedPrice,"},{"lineNumber":194,"author":{"gitID":"Aussiroth"},"content":"        Subject updatedSubject, Level updatedLevel, Status updatedStatus, Role updatedRole, Set\u003cTag\u003e updatedTags) {"},{"lineNumber":195,"author":{"gitID":"Aussiroth"},"content":"        //create a new modifiable set of tags"},{"lineNumber":196,"author":{"gitID":"Aussiroth"},"content":"        Set\u003cTag\u003e attributeTags \u003d new HashSet\u003c\u003e(updatedTags);"},{"lineNumber":197,"author":{"gitID":"Aussiroth"},"content":"        //clean out old person\u0027s attribute tags, then add the new ones"},{"lineNumber":198,"author":{"gitID":"Aussiroth"},"content":"        attributeTags \u003d AttributeTagSetter.removePresentAttributeTags(personToEdit, attributeTags);"},{"lineNumber":199,"author":{"gitID":"Aussiroth"},"content":"        attributeTags \u003d AttributeTagSetter.addNewAttributeTags(attributeTags, updatedPrice, updatedSubject,"},{"lineNumber":200,"author":{"gitID":"Aussiroth"},"content":"                updatedLevel, updatedStatus, updatedRole);"},{"lineNumber":201,"author":{"gitID":"Aussiroth"},"content":"        return attributeTags;"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":204,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":233,"author":{"gitID":"alexawangzi"},"content":"        private Price price;"},{"lineNumber":234,"author":{"gitID":"alexawangzi"},"content":"        private Subject subject;"},{"lineNumber":235,"author":{"gitID":"alexawangzi"},"content":"        private Level level;"},{"lineNumber":236,"author":{"gitID":"alexawangzi"},"content":"        private Status status;"},{"lineNumber":237,"author":{"gitID":"alexawangzi"},"content":"        private Role role;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":244,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":245,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":251,"author":{"gitID":"Aussiroth"},"content":"            setPrice(toCopy.price);"},{"lineNumber":252,"author":{"gitID":"Aussiroth"},"content":"            setSubject(toCopy.subject);"},{"lineNumber":253,"author":{"gitID":"Aussiroth"},"content":"            setLevel(toCopy.level);"},{"lineNumber":254,"author":{"gitID":"Aussiroth"},"content":"            setStatus(toCopy.status);"},{"lineNumber":255,"author":{"gitID":"alexawangzi"},"content":"            setRole(toCopy.role);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":261,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":263,"author":{"gitID":"Aussiroth"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address,"},{"lineNumber":264,"author":{"gitID":"alexawangzi"},"content":"                    this.price, this.subject, this.level, this.status, this.role, this.tags);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"alexawangzi"},"content":"        public void setPrice(Price price) {"},{"lineNumber":300,"author":{"gitID":"alexawangzi"},"content":"            this.price \u003d price;"},{"lineNumber":301,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":303,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cPrice\u003e getPrice() {"},{"lineNumber":304,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(price);"},{"lineNumber":305,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":307,"author":{"gitID":"alexawangzi"},"content":"        public void setSubject(Subject subject) {"},{"lineNumber":308,"author":{"gitID":"alexawangzi"},"content":"            this.subject \u003d subject;"},{"lineNumber":309,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":310,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":311,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cSubject\u003e getSubject() {"},{"lineNumber":312,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(subject);"},{"lineNumber":313,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":315,"author":{"gitID":"alexawangzi"},"content":"        public void setLevel(Level level) {"},{"lineNumber":316,"author":{"gitID":"alexawangzi"},"content":"            this.level \u003d level;"},{"lineNumber":317,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":319,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cLevel\u003e getLevel() {"},{"lineNumber":320,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(level);"},{"lineNumber":321,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":323,"author":{"gitID":"alexawangzi"},"content":"        public void setStatus(Status status) {"},{"lineNumber":324,"author":{"gitID":"alexawangzi"},"content":"            this.status \u003d status;"},{"lineNumber":325,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":326,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":327,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cStatus\u003e getStatus() {"},{"lineNumber":328,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(status);"},{"lineNumber":329,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":331,"author":{"gitID":"alexawangzi"},"content":"        public void setRole(Role role) {"},{"lineNumber":332,"author":{"gitID":"alexawangzi"},"content":"            this.role \u003d role;"},{"lineNumber":333,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":335,"author":{"gitID":"alexawangzi"},"content":"        public Optional\u003cRole\u003e getRole() {"},{"lineNumber":336,"author":{"gitID":"alexawangzi"},"content":"            return Optional.ofNullable(role);"},{"lineNumber":337,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":339,"author":{"gitID":"alexawangzi"},"content":"        /*"},{"lineNumber":340,"author":{"gitID":"-"},"content":"         *  Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":341,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":342,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":344,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":348,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":349,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":350,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":351,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":353,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":358,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":359,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":360,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":361,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":364,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":365,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":366,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":369,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":372,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":373,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":374,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":375,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getPrice().equals(e.getPrice())"},{"lineNumber":376,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())"},{"lineNumber":377,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getLevel().equals(e.getLevel())"},{"lineNumber":378,"author":{"gitID":"alexawangzi"},"content":"                    \u0026\u0026 getStatus().equals(e.getStatus())"},{"lineNumber":379,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":381,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":68,"Aussiroth":83,"sherlynng":8,"-":223}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public ObservableList\u003cPair\u003e getFilteredPairList() {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        return model.getFilteredPairList();"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":6,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/ViewStatsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowChartsEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":7,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"dannyngmx94"},"content":" * Show statistical data from the address book."},{"lineNumber":9,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":10,"author":{"gitID":"dannyngmx94"},"content":"public class ViewStatsCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":12,"author":{"gitID":"dannyngmx94"},"content":"    public static final String COMMAND_WORD \u003d \"viewStats\";"},{"lineNumber":13,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":14,"author":{"gitID":"dannyngmx94"},"content":"    public static final String MESSAGE_VIEW_STATS_SUCCESS \u003d \"Show chart\";"},{"lineNumber":15,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":16,"author":{"gitID":"dannyngmx94"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"dannyngmx94"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"dannyngmx94"},"content":"        EventsCenter.getInstance().post(new ShowChartsEvent());"},{"lineNumber":19,"author":{"gitID":"dannyngmx94"},"content":"        return new CommandResult(MESSAGE_VIEW_STATS_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":21,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":17,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/MatchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":" * Match a tutor and a student in STUtor"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"public class MatchCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD \u003d \"match\";"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"m\";"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Match a student and a tutor for lesson.\\n\""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            + \"Parameters: INDEX_A, INDEX_B (must be non-zero positive integers, one student and one tutor.) \""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            + \"Example: \" + COMMAND_WORD + \" 4 7 \";"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MATCH_SUCCESS \u003d \"Created new match %1$s\\n\";"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MATCH_FAILED \u003d \"Matching failed.\\n %1$s\";"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MISMATCH_WRONG_ROLE \u003d \"Incompatible role.\";"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MISMATCH_WRONG_SUBJECT \u003d \"Incompatible subject. \";"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MISMATCH_WRONG_LEVEL \u003d \"Incompatible level. \";"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MISMATCH_WRONG_PRICE \u003d \"Incompatible price.\";"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MISMATCH_ALREADY_MATCHED \u003d \"The two persons are already matched. \";"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_MISSING_FIELDS \u003d \"The person has missing fields. \";"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    private final Index indexA;"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    private final Index indexB;"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    private Person student;"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    private Person tutor;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"     * @param indexA,of the person in the filtered person list to match"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    public MatchCommand(Index indexA, Index indexB) {"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        requireAllNonNull(indexA, indexB);"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        this.indexA \u003d indexA;"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        this.indexB \u003d indexB;"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"            model.addPair(student, tutor);"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        } catch (DuplicatePairException dpe) {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(MESSAGE_MISMATCH_ALREADY_MATCHED);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        return new CommandResult(String.format(MESSAGE_MATCH_SUCCESS, student.getName().fullName"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"                + \" and \" + tutor.getName().fullName));"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        if (indexA.getZeroBased() \u003e\u003d lastShownList.size() || indexB.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"        student \u003d lastShownList.get(indexA.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        tutor \u003d lastShownList.get(indexB.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        if (student.hasMissingFieldForMatch() || tutor.hasMissingFieldForMatch()) {"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISSING_FIELDS));"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"        //filter invalid matchings"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"        if (student.getRole().equals(tutor.getRole())) {"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_ROLE));"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        //standardize input order : person A is student, person B is tutor"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        if (!student.getRole().value.equals(\"Student\")) {"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"            Person temp \u003d student;"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"            student \u003d tutor;"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"            tutor \u003d temp;"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        if (!student.getSubject().equals(tutor.getSubject())) {"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_SUBJECT));"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"        if (!student.getLevel().equals(tutor.getLevel())) {"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_LEVEL));"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        if (Integer.parseInt(student.getPrice().value) \u003c Integer.parseInt(tutor.getPrice().value)) {"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"            throw new CommandException(String.format(MESSAGE_MATCH_FAILED, MESSAGE_MISMATCH_WRONG_PRICE));"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"        return this \u003d\u003d other //short circuit for same object"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"            || (other instanceof MatchCommand"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"            \u0026\u0026 indexA.equals(((MatchCommand) other).indexA) \u0026\u0026 indexB.equals(((MatchCommand) other).indexB));    }"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":97,"-":8}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to a fixed temporary storage."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":4,"-":47}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        logger.fine(\"Attempting to write to backup file\");"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":6,"-":92}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName} and no tag type."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":30,"author":{"gitID":"Aussiroth"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        tagName \u003d source.tagName + \",\" + source.tagType.toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName} and {@code tagType}."},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"    public XmlAdaptedTag(String tagName, String tagType) {"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        this.tagName \u003d tagName + \",\" + tagType;"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"        String[] checkTagNameType \u003d tagName.split(\",\");"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":"        if (!Tag.isValidTagName(checkTagNameType[0])) {"},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"        //additional check if the comma exists"},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"        if (checkTagNameType.length \u003d\u003d 1) {"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"            logger.warning(\"Could not find tag type in file. Initialising it as DEFAULT type.\");"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"            return new Tag(checkTagNameType[0]);"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"        if (!Tag.isValidTagType(checkTagNameType[1])) {"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"            logger.warning(\"Tag Type in file is not recognised. Initialising it as DEFAULT type.\");"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"            checkTagNameType[1] \u003d Tag.AllTagTypes.DEFAULT.toString();"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"        return new Tag(checkTagNameType[0], Tag.AllTagTypes.valueOf(checkTagNameType[1]));"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":38,"-":47}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"    private String backupFilePath;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"        this.backupFilePath \u003d filePath + \".backup\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"     * @param addressBook cannot be null"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"        saveAddressBook(addressBook, backupFilePath);"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":4,"sherlynng":10,"-":84}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    private String price;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    private String subject;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    private String level;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    private String status;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    private String role;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"    private String remark;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"    private String rate;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"    private String count;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"    @XmlElement"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    private List\u003cXmlAdaptedPairHash\u003e paired \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"                            String price, String subject, String level, String status, String role,"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged, String remark, String rate, String count,"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"                            List\u003cXmlAdaptedPairHash\u003e paired) {"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":82,"author":{"gitID":"Aussiroth"},"content":"        this.price \u003d price;"},{"lineNumber":83,"author":{"gitID":"Aussiroth"},"content":"        this.status \u003d status;"},{"lineNumber":84,"author":{"gitID":"Aussiroth"},"content":"        this.subject \u003d subject;"},{"lineNumber":85,"author":{"gitID":"Aussiroth"},"content":"        this.level \u003d level;"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d role;"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"        this.remark \u003d remark;"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"        this.rate \u003d rate;"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"        this.count \u003d count;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        if (paired !\u003d null) {"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"            this.paired \u003d new ArrayList\u003c\u003e(paired);"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":108,"author":{"gitID":"Aussiroth"},"content":"        level \u003d source.getLevel().value;"},{"lineNumber":109,"author":{"gitID":"Aussiroth"},"content":"        subject \u003d source.getSubject().value;"},{"lineNumber":110,"author":{"gitID":"Aussiroth"},"content":"        status \u003d source.getStatus().value;"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"        price \u003d source.getPrice().value;"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"        role \u003d source.getRole().value;"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"        rate \u003d Double.toString(source.getRate().getValue());"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"        count \u003d Integer.toString(source.getRate().getCount());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"        paired \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"        for (PairHash ph : source.getPairHashes()) {"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"            paired.add(new XmlAdaptedPairHash(ph));"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"        final List\u003cPairHash\u003e personPairHashes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"        for (XmlAdaptedPairHash ph : paired) {"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"            personPairHashes.add(ph.toModelType());"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":"        if (this.price \u003d\u003d null) {"},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":"        if (!Price.isValidPrice(this.price)) {"},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"alexawangzi"},"content":"        final Price price \u003d new Price(this.price);"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":"        if (this.subject \u003d\u003d null) {"},{"lineNumber":183,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"alexawangzi"},"content":"        if (!Subject.isValidSubject(this.subject)) {"},{"lineNumber":186,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"alexawangzi"},"content":"        final Subject subject \u003d new Subject(this.subject);"},{"lineNumber":189,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":190,"author":{"gitID":"alexawangzi"},"content":"        if (this.level \u003d\u003d null) {"},{"lineNumber":191,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Level.class.getSimpleName()));"},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"        if (!Level.isValidLevel(this.level)) {"},{"lineNumber":194,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"alexawangzi"},"content":"        final Level level \u003d new Level(this.level);"},{"lineNumber":197,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":198,"author":{"gitID":"alexawangzi"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":199,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"},{"lineNumber":200,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"alexawangzi"},"content":"        if (!Status.isValidStatus(this.status)) {"},{"lineNumber":202,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"alexawangzi"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":205,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":206,"author":{"gitID":"alexawangzi"},"content":"        if (this.role \u003d\u003d null) {"},{"lineNumber":207,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"},{"lineNumber":208,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"alexawangzi"},"content":"        if (!Role.isValidRole(this.role)) {"},{"lineNumber":210,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"alexawangzi"},"content":"        final Role role \u003d new Role(this.role);"},{"lineNumber":213,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":214,"author":{"gitID":"sherlynng"},"content":"        if (this.remark \u003d\u003d null) {"},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":"                    Remark.class.getSimpleName()));"},{"lineNumber":217,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"sherlynng"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":219,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":220,"author":{"gitID":"sherlynng"},"content":"        if (this.rate \u003d\u003d null) {"},{"lineNumber":221,"author":{"gitID":"sherlynng"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rate.class.getSimpleName()));"},{"lineNumber":222,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"sherlynng"},"content":"        final Rate rate \u003d new Rate(Double.parseDouble(this.rate), true);"},{"lineNumber":224,"author":{"gitID":"sherlynng"},"content":"        rate.setCount(Integer.parseInt(count));"},{"lineNumber":225,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":227,"author":{"gitID":"alexawangzi"},"content":"        final Set\u003cPairHash\u003e pairHashes \u003d new HashSet\u003c\u003e(personPairHashes);"},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":229,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":230,"author":{"gitID":"sherlynng"},"content":"        return new Person(name, phone, email, address, price, subject, level, status, role,"},{"lineNumber":231,"author":{"gitID":"alexawangzi"},"content":"                          tags, remark, rate, pairHashes);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":76,"sherlynng":23,"Aussiroth":9,"-":143}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    private List\u003cXmlAdaptedPair\u003e pairs;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        pairs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        pairs.addAll(src.getPairList().stream().map(XmlAdaptedPair::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        for (XmlAdaptedPair pa : pairs) {"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"            addressBook.addPair(pa.toModelType());"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 pairs.equals(otherAb.pairs)"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":9,"-":72}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, false);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing STUtor ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"                logger.info(\"Data file not found. Will be starting with a sample STUtor\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty STUtor\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty STUtor\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"sherlynng"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty STUtor\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"sherlynng"},"content":"        logger.info(\"Starting STUtor \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"sherlynng"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping STUtor ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":1,"sherlynng":7,"-":204}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"100\"),"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"math\"),"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"                new Role(\"Student\"),"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"                getTagSet(\"100\", \"Math\", \"Upper Sec\", \"Not Matched\", \"Student\"),"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"                new Remark(\"Hardworking student.\"),"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"                Rate.initializeRate(),"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"                PairHash.getDefaultPairHashSet()),"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"50\"),"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"English\"),"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"                new Role(\"Student\"),"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"                getTagSet(\"50\", \"English\", \"Upper Sec\", \"Not Matched\", \"Student\"),"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"                new Remark(\"Very active, requires more attention.\"),"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"                Rate.initializeRate(),"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"                PairHash.getDefaultPairHashSet()),"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"150\"),"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"chinese\"),"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"                new Role(\"Student\"),"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"                getTagSet(\"150\", \"Chinese\", \"Upper Sec\", \"Not Matched\", \"Student\"),"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"                new Remark(\"Hardworking but very weak in Chinese.\"),"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"                Rate.initializeRate(),"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"                PairHash.getDefaultPairHashSet()),"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"70\"),"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"chinese\"),"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"                new Role(\"Tutor\"),"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"                getTagSet(\"70\", \"Chinese\", \"Upper Sec\", \"Not Matched\", \"Tutor\"),"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"                new Remark(\"Friendly and approachable.\"),"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"                Rate.initializeRate(),"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"                PairHash.getDefaultPairHashSet()),"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"20\"),"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"English\"),"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Lower Sec\"),"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"                new Role(\"Tutor\"),"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"                getTagSet(\"20\", \"English\", \"Lower Sec\", \"Not Matched\", \"Tutor\"),"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"                new Remark(\"Bad tutor, very impatient.\"),"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"                Rate.initializeRate(),"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"                PairHash.getDefaultPairHashSet()),"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"                new Price(\"40\"),"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"                new Subject(\"English\"),"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"                new Level(\"Upper Sec\"),"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"                new Status(\"Not Matched\"),"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"                new Role(\"Tutor\"),"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"                getTagSet(\"40\", \"English\", \"Upper Sec\", \"Not Matched\", \"Tutor\"),"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"                new Remark(\"Generally friendly, but not detailed in teaching.\"),"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"                Rate.initializeRate(),"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"                PairHash.getDefaultPairHashSet()),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":"        for (int i \u003d 0; i \u003c strings.length; i++) {"},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"            switch (i) {"},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":"            case 0:"},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"                tags.add(new Tag(strings[i], Tag.AllTagTypes.PRICE));"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"                break;"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"            case 1:"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":"                tags.add(new Tag(strings[i], Tag.AllTagTypes.SUBJECT));"},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"                break;"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"            case 2:"},{"lineNumber":130,"author":{"gitID":"sherlynng"},"content":"                tags.add(new Tag(strings[i], Tag.AllTagTypes.LEVEL));"},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"                break;"},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"            case 3:"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":"                tags.add(new Tag(strings[i], Tag.AllTagTypes.STATUS));"},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"                break;"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"            case 4:"},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"                tags.add(new Tag(strings[i], Tag.AllTagTypes.ROLE));"},{"lineNumber":137,"author":{"gitID":"sherlynng"},"content":"                break;"},{"lineNumber":138,"author":{"gitID":"sherlynng"},"content":"            default:"},{"lineNumber":139,"author":{"gitID":"sherlynng"},"content":"                break;"},{"lineNumber":140,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":42,"sherlynng":45,"-":59}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"import seedu.address.commons.events.logic.EditRemarkEvent;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.AttributeTagSetter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":" * Adds a remark to person in STutor."},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"rk\";"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"            + \": Adds a remark to person identified by the index number used in the last person listing. \""},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_REMARK + \"Hardworking student\""},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"            + \"\\t\\t OR \\t\\t\" + COMMAND_WORD + \" 1 edit\" + \"\\t\\t OR \\t\\t\" + COMMAND_WORD + \" edit 1\";"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_REMARK_PERSON_SUCCESS \u003d \"Added Remark to %1$s: \" + \"%2$s\";"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_EDIT_REMARK_SUCCESS \u003d \"Editing Remark of %1$s...\";"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in STUtor.\";"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"    private final Index targetIndex;"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"    private Remark newRemark;"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"    private boolean isEditRemark;"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"    private Person personToEdit;"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"    private Person editedPerson;"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"    public RemarkCommand(Index targetIndex, Remark newRemark) {"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(newRemark);"},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"        this.newRemark \u003d newRemark;"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"        this.isEditRemark \u003d false;"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"    public RemarkCommand(Index targetIndex, Remark newRemark, boolean isEditRemark) {"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(newRemark);"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"        this.newRemark \u003d newRemark;"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"        this.isEditRemark \u003d isEditRemark;"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"        if (!isEditRemark) {"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"            try {"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"                model.rateRemarkPerson(personToEdit, editedPerson);"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"            return new CommandResult(String.format(MESSAGE_REMARK_PERSON_SUCCESS,"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"                    editedPerson.getName(), editedPerson.getRemark()));"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_REMARK_SUCCESS, personToEdit.getName()));"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"        personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":"        if (isEditRemark) {"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"            String formattedRemark \u003d COMMAND_WORD + \" \" + targetIndex.getOneBased() + \" \" + PREFIX_REMARK"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":"                                     + personToEdit.getRemark().toString();"},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"            EventsCenter.getInstance().post(new EditRemarkEvent(formattedRemark));"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"            editedPerson \u003d createPersonWithNewRemark(personToEdit, newRemark);"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}."},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"    private static Person createPersonWithNewRemark(Person personToEdit, Remark newRemark) {"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"        Name name \u003d personToEdit.getName();"},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":"        Phone phone \u003d personToEdit.getPhone();"},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"        Email email \u003d personToEdit.getEmail();"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"        Address address \u003d personToEdit.getAddress();"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"        Price price \u003d personToEdit.getPrice();"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":"        Subject subject \u003d personToEdit.getSubject();"},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"        Level level \u003d personToEdit.getLevel();"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"        Status status \u003d personToEdit.getStatus();"},{"lineNumber":130,"author":{"gitID":"sherlynng"},"content":"        Role role \u003d personToEdit.getRole();"},{"lineNumber":131,"author":{"gitID":"sherlynng"},"content":"        Rate rate \u003d personToEdit.getRate();"},{"lineNumber":132,"author":{"gitID":"sherlynng"},"content":"        Set\u003cPairHash\u003e pairHashes \u003d personToEdit.getPairHashes();"},{"lineNumber":133,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":134,"author":{"gitID":"sherlynng"},"content":"        //create a new modifiable set of tags"},{"lineNumber":135,"author":{"gitID":"sherlynng"},"content":"        Set\u003cTag\u003e attributeTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"},{"lineNumber":136,"author":{"gitID":"sherlynng"},"content":"        attributeTags \u003d AttributeTagSetter.addNewAttributeTags(attributeTags, price, subject, level, status, role);"},{"lineNumber":137,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":138,"author":{"gitID":"sherlynng"},"content":"        return new Person(name, phone, email, address, price, subject, level, status, role,"},{"lineNumber":139,"author":{"gitID":"sherlynng"},"content":"                          attributeTags, newRemark, rate, pairHashes);"},{"lineNumber":140,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":142,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":143,"author":{"gitID":"sherlynng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":144,"author":{"gitID":"sherlynng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":145,"author":{"gitID":"sherlynng"},"content":"                || (other instanceof RemarkCommand // instanceof handles nulls"},{"lineNumber":146,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.targetIndex.equals(((RemarkCommand) other).targetIndex)"},{"lineNumber":147,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.newRemark.equals(((RemarkCommand) other).newRemark)"},{"lineNumber":148,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.isEditRemark \u003d\u003d ((RemarkCommand) other).isEditRemark);"},{"lineNumber":149,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":150,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"alexawangzi":4,"sherlynng":129,"Aussiroth":3,"-":15}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"Aussiroth"},"content":"        if (!phone.equals(\"\")) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"        return test.equals(\"\") || test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":3,"-":52}},{"path":"src/main/java/seedu/address/model/person/Status.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s status in the address book."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidStatus(String)}"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"public class Status {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] STATUS_VALUES \u003d new String[] { \"matched\", \"m\", \"not matched\", \"nm\", \"\"};"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_STATUS \u003d new HashSet\u003c\u003e(Arrays.asList(STATUS_VALUES));"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_STATUS_CONSTRAINTS \u003d \"Status should be one of: \\n\""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            + SET_ALL_STATUS.toString()"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            + \"\\n\";"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public static final Status DEFAULT_STATUS \u003d new Status (\"Not Matched\");"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Status}."},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     * @param status A valid statust description."},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public Status(String status) {"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(status);"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        status \u003d validateStatus(status);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d formatStatus(status);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"     * format the input into proper case"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"     * @param status"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"     * @return"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    private String formatStatus(String status) {"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        return pc.convertToProperCase(status);"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"     * check validity of the status string supplied"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"     * @param status"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"     * @return string representing a valid status"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    private String validateStatus(String status) {"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        status.toLowerCase();"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidStatus(status), MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        status \u003d convertToFullStatus(status);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        return status;"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full status name"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullStatus(String original) {"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        if (cur.equals(\"nm\")) {"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"not matched\";"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"m\")) {"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"matched\";"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid status description."},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        return SET_ALL_STATUS.contains(test);"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    public String toString() {"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        return value;"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Status) other).value)); // state check"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"        return value.hashCode();"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":96,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPairHash.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * JAXB-friendly adapted version of the PairHash."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class XmlAdaptedPairHash {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"    private String pairHashValue;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an XmlAdaptedPairHash."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    public XmlAdaptedPairHash() {}"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     * Constructs a {@code XmlAdaptedPairHash} with the given {@code pairHashValue}."},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public XmlAdaptedPairHash(String pairHashValue) {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        this.pairHashValue \u003d pairHashValue;"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"     * Converts a given PairHash into this class for JAXB use."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    public XmlAdaptedPairHash(PairHash source) {"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        pairHashValue \u003d Integer.toString(source.getValue());"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"     * Converts this jaxb-friendly adapted pairHash object into the model\u0027s PairHash object."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    public PairHash toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        if (!PairHash.isValidPairHashValue(pairHashValue)) {"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(PairHash.MESSAGE_PAIRHASH_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        return new PairHash(Integer.parseInt(pairHashValue));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        if (!(other instanceof XmlAdaptedPairHash)) {"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        return pairHashValue.equals(((XmlAdaptedPairHash) other).pairHashValue);"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"null":1,"alexawangzi":39,"Aussiroth":4,"-":23}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        return test.equals(\"\") || test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":1,"Aussiroth":1,"-":65}},{"path":"src/main/java/seedu/address/model/person/KeywordPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"dannyngmx94"},"content":"//@@author dannyngmx94"},{"lineNumber":6,"author":{"gitID":"dannyngmx94"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"dannyngmx94"},"content":" * Tests that a {@code Person}\u0027s {@code Attribute} matches any of the keywords given."},{"lineNumber":8,"author":{"gitID":"dannyngmx94"},"content":" */"},{"lineNumber":9,"author":{"gitID":"dannyngmx94"},"content":"public class KeywordPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"dannyngmx94"},"content":"    private final String keyword;"},{"lineNumber":11,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":12,"author":{"gitID":"dannyngmx94"},"content":"    public KeywordPredicate(String keyword) {"},{"lineNumber":13,"author":{"gitID":"dannyngmx94"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":16,"author":{"gitID":"dannyngmx94"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"dannyngmx94"},"content":"    public boolean test(Person person) {"},{"lineNumber":18,"author":{"gitID":"dannyngmx94"},"content":"        return (person.getSubject().toString().equalsIgnoreCase(keyword)"},{"lineNumber":19,"author":{"gitID":"dannyngmx94"},"content":"                || person.getLevel().toString().equalsIgnoreCase(keyword)"},{"lineNumber":20,"author":{"gitID":"dannyngmx94"},"content":"                || person.getStatus().toString().equalsIgnoreCase(keyword)"},{"lineNumber":21,"author":{"gitID":"dannyngmx94"},"content":"                || person.getRole().toString().equalsIgnoreCase(keyword));"},{"lineNumber":22,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":24,"author":{"gitID":"dannyngmx94"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"dannyngmx94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"dannyngmx94"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"dannyngmx94"},"content":"                || (other instanceof KeywordPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"dannyngmx94"},"content":"                \u0026\u0026 this.keyword.equals(((KeywordPredicate) other).keyword)); // state check"},{"lineNumber":29,"author":{"gitID":"dannyngmx94"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"dannyngmx94"},"content":""},{"lineNumber":31,"author":{"gitID":"dannyngmx94"},"content":"}"}],"authorContributionMap":{"dannyngmx94":27,"-":4}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"-":119}},{"path":"src/main/java/seedu/address/model/person/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"Aussiroth"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Aussiroth"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s price in the address book."},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"public class Price {"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d \"Price should be a positive integer\\n\";"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    public Price(String price) {"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"        requireNonNull(price);"},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"        if (!price.equals(\"\")) {"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"            checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":20,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":21,"author":{"gitID":"Aussiroth"},"content":"        this.value \u003d price;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid status description."},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidPrice(String test) {"},{"lineNumber":28,"author":{"gitID":"Aussiroth"},"content":"        return test.equals(\"\") || (Integer.parseInt(test) \u003e 0);"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"Aussiroth"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitID":"Aussiroth"},"content":"        return this.value;"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Price) other).value)); // state check"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"    public int hashCode() {"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        return value.hashCode();"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":27,"Aussiroth":19,"-":3}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d pc.convertToProperCase(address);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"        return test.equals(\"\") || test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"Aussiroth":1,"-":56}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPair.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":" * JAXB-friendly version of the Pair."},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"public class XmlAdaptedPair {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pair\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    private String studentName;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    private String tutorName;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    private String subject;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    private String level;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    private String price;"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    private String pairHash;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an XmlAdaptedPair."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    public XmlAdaptedPair() {}"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code XmlAdaptedPair} with the given pair details."},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    public XmlAdaptedPair(String studentName, String tutorName, String subject, String level,"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"                            String price,  List\u003cXmlAdaptedTag\u003e tagged, String pairHash) {"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        this.studentName \u003d studentName;"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        this.tutorName \u003d tutorName;"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d subject;"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d level;"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d price;"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        this.pairHash \u003d pairHash;"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"     * Converts a given Pair into this class for JAXB use."},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPair"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    public XmlAdaptedPair(Pair source) {"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        studentName \u003d source.getStudentName();"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        tutorName \u003d source.getTutorName();"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d source.getSubject();"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        level \u003d source.getLevel();"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"        price \u003d source.getPrice();"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        pairHash \u003d source.getPairHash().toString();"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"     * Converts this jaxb-friendly adapted pair object into the model\u0027s Pair object."},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted pair"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    public Pair toModelType() throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"        final List\u003cTag\u003e pairTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"            pairTags.add(tag.toModelType());"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"        if (this.studentName \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"        if (!Name.isValidName(this.studentName)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"        final String studentName \u003d this.studentName;"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"        if (this.tutorName \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"        if (!Name.isValidName(this.tutorName)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        final String tutorName \u003d this.tutorName;"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"        if (this.subject \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"        if (!Subject.isValidSubject(this.subject)) {"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        final String subject \u003d this.subject;"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"        if (this.level \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Level.class.getSimpleName()));"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"        if (!Level.isValidLevel(this.level)) {"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Level.MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"        final String level \u003d this.level;"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"        if (this.price \u003d\u003d null) {"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"        if (!Price.isValidPrice(this.price)) {"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"        final String price \u003d this.price;"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"        if (this.pairHash \u003d\u003d null) {"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"                    PairHash.class.getSimpleName()));"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"        final PairHash pairHash \u003d  new PairHash(Integer.parseInt(this.pairHash));"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        return new Pair(studentName, tutorName, subject, level, price, pairHash);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        if (!(other instanceof XmlAdaptedPair)) {"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"            return false;"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"        XmlAdaptedPair otherPair \u003d (XmlAdaptedPair) other;"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        return Objects.equals(studentName, otherPair.studentName)"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 Objects.equals(tutorName, otherPair.tutorName)"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 Objects.equals(subject, otherPair.subject)"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 Objects.equals(level, otherPair.level)"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 Objects.equals(price, otherPair.price)"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 tagged.equals(otherPair.tagged);"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":119,"Aussiroth":3,"-":41}},{"path":"src/main/java/seedu/address/model/person/exceptions/PersonMatchedCannotDeleteException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":" * Signals that the operation is invalid as the person is matched and cannot be deleted"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"public class PersonMatchedCannotDeleteException extends Exception {"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":6,"-":2}},{"path":"src/main/java/seedu/address/model/person/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s subject in the address book."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"public class Subject {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] SUBJECT_VALUES \u003d"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"            new String[]{\"english\", \"eng\", \"chinese\", \"chi\", \"math\", \"physics\", \"phy\", \"chemistry\", \"chem\", \"\"};"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_SUBJECT \u003d new HashSet\u003c\u003e(Arrays.asList(SUBJECT_VALUES));"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d \"Subject should be one of: \\n\""},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            + SET_ALL_SUBJECT.toString()"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"            + \"\\n\";"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Subject}."},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     * @param subject A valid subject description."},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public Subject(String subject) {"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(subject);"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d validateSubject(subject);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d formatsubject(subject);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    private String formatsubject(String subject) {"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        return pc.convertToProperCase(subject);"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"     * check validity of the subject string supplied"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"     * @param subject"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"     * @return string representing a valid subject"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    private String validateSubject(String subject) {"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        subject.toLowerCase();"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        subject \u003d convertToFullSubject(subject);"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        return subject;"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full subject name"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullSubject(String original) {"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        if (cur.equals(\"eng\")) {"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"english\";"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"chi\")) {"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"chinese\";"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"phy\")) {"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"physics\";"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"chem\")) {"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"chemistry\";"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid subject description."},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidSubject(String test) {"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        return SET_ALL_SUBJECT.contains(test);"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"        return value;"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Subject // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Subject) other).value)); // state check"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"        return value.hashCode();"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":93,"-":5}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Aussiroth"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"Aussiroth"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.UniquePairHashList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    private final Price price;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    private final Subject subject;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    private final Level level;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    private final Role role;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    private Status status;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"    private final Remark remark;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    private final Rate rate;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    private final UniquePairHashList pairHashes;"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Price price, Subject subject,"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"                  Level level, Status status, Role role, Set\u003cTag\u003e tags, Remark remark, Rate rate,"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"                  Set\u003cPairHash\u003e pairHashes) {"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        requireAllNonNull(name, phone, email, address, price, subject, level, status, tags);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d price;"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d subject;"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d level;"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        this.role \u003d role;"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        this.status \u003d status;"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"        this.remark \u003d remark;"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        this.rate \u003d rate;"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"        this.pairHashes \u003d new UniquePairHashList(pairHashes);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"    public Price getPrice() {"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        return price;"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    public Subject getSubject() {"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"        return subject;"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"    public Level getLevel() {"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        return level;"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    public Role getRole() {"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        return role;"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    public Status getStatus() {"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"        return status;"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":"    public Remark getRemark() {"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"        return remark;"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"    public Rate getRate() {"},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":"        return rate;"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"Aussiroth"},"content":"     * Returns an immutable tag list, which throws {@code UnsupportedOperationException}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":113,"author":{"gitID":"Aussiroth"},"content":"     * The tag list is sorted according to their tag type, and order is as defined in the enum."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"Aussiroth"},"content":"    public List\u003cTag\u003e getTags() {"},{"lineNumber":116,"author":{"gitID":"Aussiroth"},"content":"        Set\u003cTag\u003e setTags \u003d tags.toSet();"},{"lineNumber":117,"author":{"gitID":"Aussiroth"},"content":"        List\u003cTag\u003e tagsAsList \u003d new ArrayList\u003c\u003e(setTags);"},{"lineNumber":118,"author":{"gitID":"Aussiroth"},"content":"        Collections.sort(tagsAsList);"},{"lineNumber":119,"author":{"gitID":"Aussiroth"},"content":"        return Collections.unmodifiableList(tagsAsList);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    public Set\u003cPairHash\u003e getPairHashes() {"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"        return Collections.unmodifiableSet(pairHashes.toSet());"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":126,"author":{"gitID":"Aussiroth"},"content":"    public void addPairHash(PairHash pairHash) throws UniquePairHashList.DuplicatePairHashException {"},{"lineNumber":127,"author":{"gitID":"Aussiroth"},"content":"        pairHashes.add(pairHash);"},{"lineNumber":128,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"            return true;"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPerson.getLevel().equals(this.getLevel())"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPerson.getSubject().equals(this.getSubject())"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPerson.getPrice().equals(this.getPrice())"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPerson.getRole().equals(this.getRole());"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        return Objects.hash(name, phone, email, address, price, subject, level, status, role, tags,"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"                            remark, rate, pairHashes);"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"    public String toString() {"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"        builder.append(getName())"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"                .append(\" Phone: \")"},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":"                .append(getPhone())"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":"                .append(\" Email: \")"},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"                .append(getEmail())"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":"                .append(\" Address: \")"},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"                .append(getAddress());"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"        return builder.toString();"},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":"    public boolean isMatched() {"},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"        return (getStatus().value.equals(\"Matched\"));"},{"lineNumber":176,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":178,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":179,"author":{"gitID":"alexawangzi"},"content":"    public boolean containsPairHash(PairHash pairHash) {"},{"lineNumber":180,"author":{"gitID":"alexawangzi"},"content":"        return (pairHashes.contains(pairHash));"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":183,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":184,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"alexawangzi"},"content":"     * Check if a person has missing fields"},{"lineNumber":186,"author":{"gitID":"alexawangzi"},"content":"     * @return"},{"lineNumber":187,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"alexawangzi"},"content":"    public boolean hasMissingFieldForMatch() {"},{"lineNumber":189,"author":{"gitID":"alexawangzi"},"content":"        return this.getSubject().value.equals(\"\")"},{"lineNumber":190,"author":{"gitID":"alexawangzi"},"content":"                || this.getLevel().value.equals(\"\")"},{"lineNumber":191,"author":{"gitID":"alexawangzi"},"content":"                || this.getRole().value.equals(\"\")"},{"lineNumber":192,"author":{"gitID":"alexawangzi"},"content":"                || this.getPrice().value.equals(\"\");"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":111,"Aussiroth":14,"sherlynng":13,"-":56}},{"path":"src/main/java/seedu/address/model/person/exceptions/PersonMatchedCannotEditException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":" * Signals that the operation is invalid as the person is matched and"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":" * his status, subject, level and role cannot be changed"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"public class PersonMatchedCannotEditException extends Exception {"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":7,"-":2}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":2,"-":58}},{"path":"src/main/java/seedu/address/model/person/Student.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" * Represents a Student in the address book."},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"public class Student extends Person {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     * Every field must be present and not null."},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"     * @param name"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     * @param phone"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"     * @param email"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"     * @param address"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"     * @param price"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"     * @param subject"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"     * @param level"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     * @param status"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     * @param remark"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     * @param rate"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     * @param tags"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"     * @param pairhashes"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public Student(Name name, Phone phone, Email email, Address address,"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"                   Price price, Subject subject, Level level, Status status,"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"                   Set\u003cTag\u003e tags, Remark remark, Rate rate,  Set\u003cPairHash\u003e pairhashes) {"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        super(name, phone, email, address, price, subject, level, status, new Role(\"student\"),"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"              tags, remark, rate, pairhashes);"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":38}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"sherlynng"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":" * Represents a Person\u0027s remark in STUtor."},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"public class Remark {"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"     *"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"     * @param remark A valid remark."},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    public Remark(String remark) {"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(remark);"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"        this.value \u003d remark;"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"        return value.hashCode();"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":39,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/RateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.logic.AttributeTagSetter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Rate;"},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Role;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":" * Adds a rate to person in STUtor."},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"public class RateCommand extends UndoableCommand {"},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    public static final String COMMAND_WORD \u003d \"rate\";"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"rt\";"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"            + \": Adds rating to person identified by the index number used in the last person listing. \""},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"            + \"Parameters: INDEX (must be a positive integer), RATE (must be an integer between 0 and 5 (inclusive)\\n\""},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_RATE + \"4.5\";"},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_RATE_PERSON_SUCCESS \u003d \"Added Rating to %1$s: \" + \"%2$s\";"},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in STUtor.\";"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"    private final Index targetIndex;"},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"    private Rate newRate;"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"    private Person personToEdit;"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":"    private Person editedPerson;"},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"    public RateCommand(Index targetIndex, Rate newRate) {"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(newRate);"},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":"        this.newRate \u003d newRate;"},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"            model.rateRemarkPerson(personToEdit, editedPerson);"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"        return new CommandResult(String.format(MESSAGE_RATE_PERSON_SUCCESS, editedPerson.getName(), newRate));"},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":"        personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"        editedPerson \u003d createPersonWithNewRate(personToEdit, newRate);"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}."},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"    private static Person createPersonWithNewRate(Person personToEdit, Rate newRate) {"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"        Name name \u003d personToEdit.getName();"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"        Phone phone \u003d personToEdit.getPhone();"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":"        Email email \u003d personToEdit.getEmail();"},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"        Address address \u003d personToEdit.getAddress();"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"        Price price \u003d personToEdit.getPrice();"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"        Subject subject \u003d personToEdit.getSubject();"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"        Level level \u003d personToEdit.getLevel();"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"        Status status \u003d personToEdit.getStatus();"},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":"        Role role \u003d personToEdit.getRole();"},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"        Remark remark \u003d personToEdit.getRemark();"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":"        Set\u003cPairHash\u003e pairHashes \u003d personToEdit.getPairHashes();"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"        Rate oldRate \u003d personToEdit.getRate();"},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"        if (newRate.getIsAbsolute()) {"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":"            newRate.setCount(1); // reset count when set absolute"},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"        } else {"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":"            newRate \u003d Rate.accumulatedValue(oldRate, newRate);"},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"        //create a new modifiable set of tags"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"        Set\u003cTag\u003e attributeTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":"        attributeTags \u003d AttributeTagSetter.addNewAttributeTags(attributeTags, price, subject, level, status, role);"},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":118,"author":{"gitID":"sherlynng"},"content":"        return new Person(name, phone, email, address, price, subject, level, status, role,"},{"lineNumber":119,"author":{"gitID":"sherlynng"},"content":"                          attributeTags, remark, newRate, pairHashes);"},{"lineNumber":120,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":122,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"sherlynng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"sherlynng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"sherlynng"},"content":"                || (other instanceof RateCommand // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.targetIndex.equals(((RateCommand) other).targetIndex)"},{"lineNumber":127,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.newRate.equals(((RateCommand) other).newRate));"},{"lineNumber":128,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"alexawangzi":5,"sherlynng":108,"Aussiroth":1,"-":15}},{"path":"src/main/java/seedu/address/model/person/ProperCaseConverter.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":" * Helper class to change a String to proper class (\"This Is An Example Of Proper Case.\")"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"class ProperCaseConverter {"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"     * convert the value string to proper case"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"    public String convertToProperCase(String original) {"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"        StringBuilder properCase \u003d new StringBuilder();"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"        boolean nextProperCase \u003d true;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"        original \u003d original.toLowerCase();"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"        for (char c : original.toCharArray()) {"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"            if (Character.isSpaceChar(c)) {"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"                nextProperCase \u003d true;"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            } else if (nextProperCase) {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"                c \u003d Character.toUpperCase(c);"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"                nextProperCase \u003d false;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            }"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"            properCase.append(c);"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"        return properCase.toString();"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":29}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     * Returns an unmodifiable view of the pairs list."},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"     * This list will not contain any duplicate pairs."},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    ObservableList\u003cPair\u003e getPairList();"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":8,"-":24}},{"path":"src/main/java/seedu/address/model/person/Rate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":5,"author":{"gitID":"sherlynng"},"content":"import java.text.DecimalFormat;"},{"lineNumber":6,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":7,"author":{"gitID":"sherlynng"},"content":"//@@author sherlynng"},{"lineNumber":8,"author":{"gitID":"sherlynng"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"sherlynng"},"content":" * Represents a Person\u0027s rating in STUtor."},{"lineNumber":10,"author":{"gitID":"sherlynng"},"content":" */"},{"lineNumber":11,"author":{"gitID":"sherlynng"},"content":"public class Rate {"},{"lineNumber":12,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"    public static final String RATE_VALIDATION_REGEX \u003d \"^(?:5(?:\\\\.0)?|[0-4](?:\\\\.[0-9])?|0?\\\\.[0-9])$\";"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"    public static final String RATE_VALIDATION_REGEX_ABSOLUTE \u003d \"^(?:5(?:\\\\.0)?|[0-4](?:\\\\.[0-9])?|0?\\\\.[0-9])\" + \"-\";"},{"lineNumber":15,"author":{"gitID":"sherlynng"},"content":"    public static final String MESSAGE_RATE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"sherlynng"},"content":"            \"Rate must be a number between 0 and 5 (inclusive) with at most 1 decimal place\";"},{"lineNumber":17,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":18,"author":{"gitID":"sherlynng"},"content":"    private double value;"},{"lineNumber":19,"author":{"gitID":"sherlynng"},"content":"    private int count;"},{"lineNumber":20,"author":{"gitID":"sherlynng"},"content":"    private boolean isAbsolute;"},{"lineNumber":21,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":22,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"sherlynng"},"content":"     * Constructs an {@code Rating}."},{"lineNumber":24,"author":{"gitID":"sherlynng"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"sherlynng"},"content":"     * @param rating A valid rating."},{"lineNumber":26,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"sherlynng"},"content":"    public Rate (double rating, boolean isAbsolute) {"},{"lineNumber":28,"author":{"gitID":"sherlynng"},"content":"        requireNonNull(rating);"},{"lineNumber":29,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":30,"author":{"gitID":"sherlynng"},"content":"        this.value \u003d rating;"},{"lineNumber":31,"author":{"gitID":"sherlynng"},"content":"        this.isAbsolute \u003d isAbsolute;"},{"lineNumber":32,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":34,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"sherlynng"},"content":"     * Initializes a person\u0027s rating."},{"lineNumber":36,"author":{"gitID":"sherlynng"},"content":"     * @return {@code Rate} with value of 0.0 and count 0."},{"lineNumber":37,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"sherlynng"},"content":"    public static Rate initializeRate() {"},{"lineNumber":39,"author":{"gitID":"sherlynng"},"content":"        Rate initializedRate \u003d new Rate(0.0, true);"},{"lineNumber":40,"author":{"gitID":"sherlynng"},"content":"        initializedRate.setCount(0);"},{"lineNumber":41,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":42,"author":{"gitID":"sherlynng"},"content":"        return initializedRate;"},{"lineNumber":43,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":45,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"sherlynng"},"content":"     * Accumulates a person\u0027s rating value."},{"lineNumber":47,"author":{"gitID":"sherlynng"},"content":"     * @param oldRate"},{"lineNumber":48,"author":{"gitID":"sherlynng"},"content":"     * @param newRate"},{"lineNumber":49,"author":{"gitID":"sherlynng"},"content":"     * @return {@code Rate} that contains updated value and count."},{"lineNumber":50,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"sherlynng"},"content":"    public static Rate accumulatedValue (Rate oldRate, Rate newRate) {"},{"lineNumber":52,"author":{"gitID":"sherlynng"},"content":"        double newValue;"},{"lineNumber":53,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":54,"author":{"gitID":"sherlynng"},"content":"        newValue \u003d oldRate.getValue() + newRate.getValue();"},{"lineNumber":55,"author":{"gitID":"sherlynng"},"content":"        newRate \u003d new Rate(newValue, true);"},{"lineNumber":56,"author":{"gitID":"sherlynng"},"content":"        newRate.setCount(oldRate.getCount() + 1);"},{"lineNumber":57,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":58,"author":{"gitID":"sherlynng"},"content":"        return newRate;"},{"lineNumber":59,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":61,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"sherlynng"},"content":"     * Returns true if a given string is a valid person rate."},{"lineNumber":63,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"sherlynng"},"content":"    public static boolean isValidRate(String test) {"},{"lineNumber":65,"author":{"gitID":"sherlynng"},"content":"        return test.matches(RATE_VALIDATION_REGEX) || test.matches(RATE_VALIDATION_REGEX_ABSOLUTE);"},{"lineNumber":66,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":68,"author":{"gitID":"sherlynng"},"content":"    public double getValue() {"},{"lineNumber":69,"author":{"gitID":"sherlynng"},"content":"        return this.value;"},{"lineNumber":70,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":72,"author":{"gitID":"sherlynng"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"sherlynng"},"content":"     * Gets rate value to be displayed."},{"lineNumber":74,"author":{"gitID":"sherlynng"},"content":"     * @return {@code double} rate value rounded off to nearest 1 decimal place."},{"lineNumber":75,"author":{"gitID":"sherlynng"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"sherlynng"},"content":"    public double getDisplayedValue() {"},{"lineNumber":77,"author":{"gitID":"sherlynng"},"content":"        double displayedValue \u003d 0;"},{"lineNumber":78,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":79,"author":{"gitID":"sherlynng"},"content":"        if (count !\u003d 0) {"},{"lineNumber":80,"author":{"gitID":"sherlynng"},"content":"            displayedValue \u003d (double) Math.round(((value / count) * 10)) / 10;"},{"lineNumber":81,"author":{"gitID":"sherlynng"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"sherlynng"},"content":"        return displayedValue;"},{"lineNumber":83,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":85,"author":{"gitID":"sherlynng"},"content":"    public int getCount() {"},{"lineNumber":86,"author":{"gitID":"sherlynng"},"content":"        return count;"},{"lineNumber":87,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":89,"author":{"gitID":"sherlynng"},"content":"    public void setCount(int count) {"},{"lineNumber":90,"author":{"gitID":"sherlynng"},"content":"        this.count \u003d count;"},{"lineNumber":91,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":93,"author":{"gitID":"sherlynng"},"content":"    public boolean getIsAbsolute() {"},{"lineNumber":94,"author":{"gitID":"sherlynng"},"content":"        return isAbsolute;"},{"lineNumber":95,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":97,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"sherlynng"},"content":"    public String toString() {"},{"lineNumber":99,"author":{"gitID":"sherlynng"},"content":"        DecimalFormat df \u003d new DecimalFormat(\"0.0\");"},{"lineNumber":100,"author":{"gitID":"sherlynng"},"content":"        return df.format(value);"},{"lineNumber":101,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":103,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"sherlynng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"sherlynng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":106,"author":{"gitID":"sherlynng"},"content":"                || (other instanceof Rate // instanceof handles nulls"},{"lineNumber":107,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Rate) other).value"},{"lineNumber":108,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.count \u003d\u003d ((Rate) other).count"},{"lineNumber":109,"author":{"gitID":"sherlynng"},"content":"                \u0026\u0026 this.isAbsolute \u003d\u003d ((Rate) other).isAbsolute); // state check"},{"lineNumber":110,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":112,"author":{"gitID":"sherlynng"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"sherlynng"},"content":"    public int hashCode() {"},{"lineNumber":114,"author":{"gitID":"sherlynng"},"content":"        return Double.valueOf(value).hashCode();"},{"lineNumber":115,"author":{"gitID":"sherlynng"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"sherlynng"},"content":""},{"lineNumber":117,"author":{"gitID":"sherlynng"},"content":"}"}],"authorContributionMap":{"sherlynng":114,"-":3}},{"path":"src/main/java/seedu/address/model/person/Tutor.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" * Represents a Tutor in the address book."},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class Tutor extends Person {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"     * Every field must be present and not null."},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"     * @param name"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"     * @param phone"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"     * @param email"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"     * @param address"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"     * @param price"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"     * @param subject"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"     * @param level"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"     * @param status"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     * @param remark"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     * @param rate"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     * @param tags"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     * @param pairhashes"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public Tutor(Name name, Phone phone, Email email, Address address, Price price,"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"                 Subject subject, Level level, Status status, Set\u003cTag\u003e tags, Remark remark,"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"                 Rate rate, Set\u003cPairHash\u003e pairhashes) {"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        super(name, phone, email, address, price, subject, level, status, new Role(\"student\"),"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"              tags, remark, rate, pairhashes);"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":37}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"sherlynng"},"content":"    private String addressBookFilePath \u003d \"data/STUtor.xml\";"},{"lineNumber":14,"author":{"gitID":"sherlynng"},"content":"    private String addressBookName \u003d \"MySTUtor\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"sherlynng":2,"-":76}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Aussiroth"},"content":"public class Tag implements Comparable\u003cTag\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should contain only \""},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"            + \"alphanumeric characters and spaces\";"},{"lineNumber":14,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":15,"author":{"gitID":"Aussiroth"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":16,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Aussiroth"},"content":"     * This represents all the tag types."},{"lineNumber":18,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Aussiroth"},"content":"    public enum AllTagTypes { ROLE, SUBJECT, LEVEL, PRICE, STATUS, DEFAULT }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":22,"author":{"gitID":"Aussiroth"},"content":"    public final AllTagTypes tagType;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":26,"author":{"gitID":"Aussiroth"},"content":"     * tagType will be initialised with the AllTagTypes.DEFAULT value."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":34,"author":{"gitID":"Aussiroth"},"content":"        this.tagType \u003d AllTagTypes.DEFAULT;"},{"lineNumber":35,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":37,"author":{"gitID":"Aussiroth"},"content":"    //@@author aussiroth"},{"lineNumber":38,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Aussiroth"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":40,"author":{"gitID":"Aussiroth"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":"     * @param tagName A valid tag name."},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":"     * @param tagType A valid tag type."},{"lineNumber":43,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Aussiroth"},"content":"    public Tag(String tagName, AllTagTypes tagType) {"},{"lineNumber":45,"author":{"gitID":"Aussiroth"},"content":"        this.tagType \u003d tagType;"},{"lineNumber":46,"author":{"gitID":"Aussiroth"},"content":"        requireNonNull(tagName);"},{"lineNumber":47,"author":{"gitID":"Aussiroth"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"Aussiroth"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":49,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":51,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Aussiroth"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":55,"author":{"gitID":"Aussiroth"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":56,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":58,"author":{"gitID":"Aussiroth"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Aussiroth"},"content":"     * returns true if given string is a valid tag type."},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"     * @param test A string to test."},{"lineNumber":61,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"Aussiroth"},"content":"    public static boolean isValidTagType(String test) {"},{"lineNumber":63,"author":{"gitID":"Aussiroth"},"content":"        for (AllTagTypes tType : AllTagTypes.values()) {"},{"lineNumber":64,"author":{"gitID":"Aussiroth"},"content":"            if (tType.toString().equals(test)) {"},{"lineNumber":65,"author":{"gitID":"Aussiroth"},"content":"                return true;"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Aussiroth"},"content":"        return false;"},{"lineNumber":69,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":71,"author":{"gitID":"Aussiroth"},"content":"    public int compareTo(Tag other) {"},{"lineNumber":72,"author":{"gitID":"Aussiroth"},"content":"        return this.tagType.compareTo(other.tagType);"},{"lineNumber":73,"author":{"gitID":"Aussiroth"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":75,"author":{"gitID":"Aussiroth"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":53,"-":42}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":42,"author":{"gitID":"Aussiroth"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aussiroth":2,"-":141}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.PairHash;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.UniquePairList;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Status;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotDeleteException;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotEditException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    private final UniquePairList pairs;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        pairs \u003d new UniquePairList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    public void setPairs(List\u003cPair\u003e pairs) throws DuplicatePairException {"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"        this.pairs.setPairs(pairs);"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        List\u003cPair\u003e syncedPairList \u003d newData.getPairList().stream()"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"                // .map(this::syncWithMasterTagList)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"            setPairs(syncedPairList);"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"        } catch (DuplicatePairException e) {"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate pairs\");"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"    //I added an extra checking to prevent updating of person details is the person is matched"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"     * Only applicable for Add and Edit"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"     *      another existing person in the list."},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"    public void updatePersonForAddAndEdit(Person target, Person editedPerson)"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"            throws DuplicatePersonException, PersonNotFoundException, PersonMatchedCannotEditException {"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"        boolean isChanged \u003d !target.getName().equals(editedPerson.getName())"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"                || !target.getRole().equals(editedPerson.getRole())"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"                || !target.getSubject().equals(editedPerson.getSubject())"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"                || !target.getPrice().equals(editedPerson.getPrice())"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"                || !target.getLevel().equals(editedPerson.getLevel())"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"                || !target.getStatus().equals(editedPerson.getStatus());"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"        if (target.isMatched() \u0026\u0026 isChanged) {"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"            throw new PersonMatchedCannotEditException();"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"        // in the person list."},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":"        removeUnusedTags();"},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":"     * Only applicable for Add and Edit"},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":"     * @param target"},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":"     * @param editedPerson"},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":"     * @throws PersonNotFoundException"},{"lineNumber":163,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"alexawangzi"},"content":"    public void updatePersonForMatchUnmatch(Person target, Person editedPerson)"},{"lineNumber":165,"author":{"gitID":"alexawangzi"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":166,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":167,"author":{"gitID":"alexawangzi"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":168,"author":{"gitID":"alexawangzi"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":169,"author":{"gitID":"alexawangzi"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":170,"author":{"gitID":"alexawangzi"},"content":"        // in the person list."},{"lineNumber":171,"author":{"gitID":"alexawangzi"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":172,"author":{"gitID":"alexawangzi"},"content":"        removeUnusedTags();"},{"lineNumber":173,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":175,"author":{"gitID":"alexawangzi"},"content":"    //@@author"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":179,"author":{"gitID":"Aussiroth"},"content":"     * This is meant to be used only for rating and remark changes for a person."},{"lineNumber":180,"author":{"gitID":"alexawangzi"},"content":"     * @param target"},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":"     * @param editedPerson"},{"lineNumber":182,"author":{"gitID":"alexawangzi"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":183,"author":{"gitID":"Aussiroth"},"content":"     * @throws PersonNotFoundExceptiong"},{"lineNumber":184,"author":{"gitID":"Aussiroth"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"Aussiroth"},"content":"    public void updatePersonForRateAndRemark(Person target, Person editedPerson)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":192,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":193,"author":{"gitID":"alexawangzi"},"content":"        removeUnusedTags();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":202,"author":{"gitID":"Aussiroth"},"content":"        Set\u003cTag\u003e personTagsAsSet \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":203,"author":{"gitID":"Aussiroth"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(personTagsAsSet);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":212,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":215,"author":{"gitID":"alexawangzi"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":216,"author":{"gitID":"alexawangzi"},"content":"                person.getPrice(), person.getSubject(), person.getLevel(), person.getStatus(), person.getRole(),"},{"lineNumber":217,"author":{"gitID":"alexawangzi"},"content":"                correctTagReferences, person.getRemark(), person.getRate(), person.getPairHashes());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":221,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"alexawangzi"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException, PersonMatchedCannotDeleteException {"},{"lineNumber":227,"author":{"gitID":"alexawangzi"},"content":"        if (!key.getPairHashes().isEmpty()) {"},{"lineNumber":228,"author":{"gitID":"alexawangzi"},"content":"            throw new PersonMatchedCannotDeleteException();"},{"lineNumber":229,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"Aussiroth"},"content":"        try {"},{"lineNumber":231,"author":{"gitID":"Aussiroth"},"content":"            persons.remove(key);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":233,"author":{"gitID":"Aussiroth"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":239,"author":{"gitID":"alexawangzi"},"content":"    //// pair-level operations"},{"lineNumber":240,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":241,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":242,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"alexawangzi"},"content":"     * Adds a pair to the address book."},{"lineNumber":244,"author":{"gitID":"alexawangzi"},"content":"     * @param key"},{"lineNumber":245,"author":{"gitID":"alexawangzi"},"content":"     * @throws seedu.address.model.pair.exceptions.DuplicatePairException if an equivalent pair already exists."},{"lineNumber":246,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"alexawangzi"},"content":"    public void addPair(Pair key) throws DuplicatePairException {"},{"lineNumber":248,"author":{"gitID":"alexawangzi"},"content":"        pairs.add(key);"},{"lineNumber":249,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":251,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":252,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"alexawangzi"},"content":"     * Adds a pair to the address book, and store pairHash to the Student and Tutor involved"},{"lineNumber":254,"author":{"gitID":"alexawangzi"},"content":"     * @param student"},{"lineNumber":255,"author":{"gitID":"alexawangzi"},"content":"     * @param tutor"},{"lineNumber":256,"author":{"gitID":"alexawangzi"},"content":"     * @throws seedu.address.model.pair.exceptions.DuplicatePairException if an equivalent pair already exists."},{"lineNumber":257,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"alexawangzi"},"content":"    public void addPair(Person student, Person tutor) throws DuplicatePairException {"},{"lineNumber":259,"author":{"gitID":"alexawangzi"},"content":"        Pair key \u003d new Pair(student, tutor, student.getSubject(), student.getLevel(), student.getPrice());"},{"lineNumber":260,"author":{"gitID":"alexawangzi"},"content":"        pairs.add(key);"},{"lineNumber":261,"author":{"gitID":"alexawangzi"},"content":"        PairHash pairHash \u003d key.getPairHash();"},{"lineNumber":262,"author":{"gitID":"alexawangzi"},"content":"        addPairHash(student, pairHash);"},{"lineNumber":263,"author":{"gitID":"alexawangzi"},"content":"        addPairHash(tutor, pairHash);"},{"lineNumber":264,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":266,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":267,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"alexawangzi"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":269,"author":{"gitID":"alexawangzi"},"content":"     * @throws seedu.address.model.pair.exceptions.PairNotFoundException if the {@code key} is not in this"},{"lineNumber":270,"author":{"gitID":"alexawangzi"},"content":"     * {@code AddressBook}.gr"},{"lineNumber":271,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"alexawangzi"},"content":"    public boolean removePair(Pair key) throws PairNotFoundException {"},{"lineNumber":273,"author":{"gitID":"alexawangzi"},"content":"        if (pairs.remove(key)) {"},{"lineNumber":274,"author":{"gitID":"alexawangzi"},"content":"            PairHash pairHash \u003d key.getPairHash();"},{"lineNumber":275,"author":{"gitID":"alexawangzi"},"content":"            for (Person person : persons) {"},{"lineNumber":276,"author":{"gitID":"alexawangzi"},"content":"                if (person.containsPairHash(pairHash)) {"},{"lineNumber":277,"author":{"gitID":"alexawangzi"},"content":"                    removePairHash(person, pairHash);"},{"lineNumber":278,"author":{"gitID":"alexawangzi"},"content":"                }"},{"lineNumber":279,"author":{"gitID":"alexawangzi"},"content":"            }"},{"lineNumber":280,"author":{"gitID":"alexawangzi"},"content":"            return true;"},{"lineNumber":281,"author":{"gitID":"alexawangzi"},"content":"        } else {"},{"lineNumber":282,"author":{"gitID":"alexawangzi"},"content":"            throw new PairNotFoundException();"},{"lineNumber":283,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":286,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":287,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"alexawangzi"},"content":"     * add pairHash to be the person\u0027s list of pairHashes"},{"lineNumber":289,"author":{"gitID":"alexawangzi"},"content":"     * @param person"},{"lineNumber":290,"author":{"gitID":"alexawangzi"},"content":"     * @param pairHash"},{"lineNumber":291,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"alexawangzi"},"content":"    private void addPairHash(Person person, PairHash pairHash) {"},{"lineNumber":293,"author":{"gitID":"alexawangzi"},"content":"        Person editedPerson;"},{"lineNumber":294,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cPairHash\u003e pairHashSet \u003d new HashSet\u003cPairHash\u003e();"},{"lineNumber":295,"author":{"gitID":"alexawangzi"},"content":"        pairHashSet.addAll(person.getPairHashes());"},{"lineNumber":296,"author":{"gitID":"alexawangzi"},"content":"        if (!pairHashSet.contains(pairHash)) {"},{"lineNumber":297,"author":{"gitID":"alexawangzi"},"content":"            pairHashSet.add(pairHash);"},{"lineNumber":298,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":300,"author":{"gitID":"alexawangzi"},"content":"        //update status to Matched if the person\u0027s original pairHash List is empty"},{"lineNumber":301,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e attributeTags \u003d new HashSet\u003cTag\u003e();"},{"lineNumber":302,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getRole().value, Tag.AllTagTypes.ROLE));"},{"lineNumber":303,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getPrice().value, Tag.AllTagTypes.PRICE));"},{"lineNumber":304,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getSubject().value, Tag.AllTagTypes.SUBJECT));"},{"lineNumber":305,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getLevel().value, Tag.AllTagTypes.LEVEL));"},{"lineNumber":306,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":307,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(\"Matched\", Tag.AllTagTypes.STATUS));"},{"lineNumber":308,"author":{"gitID":"alexawangzi"},"content":"        editedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":309,"author":{"gitID":"alexawangzi"},"content":"                    person.getEmail(), person.getAddress(), person.getPrice(),"},{"lineNumber":310,"author":{"gitID":"alexawangzi"},"content":"                    person.getSubject(), person.getLevel(), new Status(\"Matched\"),"},{"lineNumber":311,"author":{"gitID":"alexawangzi"},"content":"                    person.getRole(), attributeTags, person.getRemark(), person.getRate(), pairHashSet);"},{"lineNumber":312,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":313,"author":{"gitID":"alexawangzi"},"content":"            updatePersonForAddAndEdit(person, editedPerson);"},{"lineNumber":314,"author":{"gitID":"alexawangzi"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":315,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Should not have duplicates\");"},{"lineNumber":316,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":317,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Match exits means person must be in database.\");"},{"lineNumber":318,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonMatchedCannotEditException e) {"},{"lineNumber":319,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Match should not result in edit exception\");"},{"lineNumber":320,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":321,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":322,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":324,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":325,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"alexawangzi"},"content":"     * remove pairHash from the person"},{"lineNumber":327,"author":{"gitID":"alexawangzi"},"content":"     * @param person"},{"lineNumber":328,"author":{"gitID":"alexawangzi"},"content":"     * @param pairHash"},{"lineNumber":329,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":330,"author":{"gitID":"alexawangzi"},"content":"    private void removePairHash(Person person, PairHash pairHash) {"},{"lineNumber":331,"author":{"gitID":"alexawangzi"},"content":"        Person editedPerson;"},{"lineNumber":332,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cPairHash\u003e pairHashSet \u003d new HashSet\u003cPairHash\u003e();"},{"lineNumber":333,"author":{"gitID":"alexawangzi"},"content":"        pairHashSet.addAll(person.getPairHashes());"},{"lineNumber":334,"author":{"gitID":"alexawangzi"},"content":"        if (pairHashSet.contains(pairHash)) {"},{"lineNumber":335,"author":{"gitID":"alexawangzi"},"content":"            pairHashSet.remove(pairHash);"},{"lineNumber":336,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":337,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":338,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e attributeTags \u003d new HashSet\u003cTag\u003e();"},{"lineNumber":339,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getRole().value, Tag.AllTagTypes.ROLE));"},{"lineNumber":340,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getPrice().value, Tag.AllTagTypes.PRICE));"},{"lineNumber":341,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getSubject().value, Tag.AllTagTypes.SUBJECT));"},{"lineNumber":342,"author":{"gitID":"alexawangzi"},"content":"        attributeTags.add(new Tag(person.getLevel().value, Tag.AllTagTypes.LEVEL));"},{"lineNumber":343,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":344,"author":{"gitID":"alexawangzi"},"content":"        //update status to not Matched if the person\u0027s pairHash List is empty after removal"},{"lineNumber":345,"author":{"gitID":"alexawangzi"},"content":"        if (pairHashSet.isEmpty()) {"},{"lineNumber":346,"author":{"gitID":"alexawangzi"},"content":"            attributeTags.add(new Tag(\"Not Matched\", Tag.AllTagTypes.STATUS));"},{"lineNumber":347,"author":{"gitID":"alexawangzi"},"content":"            editedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":348,"author":{"gitID":"alexawangzi"},"content":"                    person.getEmail(), person.getAddress(), person.getPrice(),"},{"lineNumber":349,"author":{"gitID":"alexawangzi"},"content":"                    person.getSubject(), person.getLevel(), new Status(\"Not Matched\"),"},{"lineNumber":350,"author":{"gitID":"alexawangzi"},"content":"                    person.getRole(), attributeTags, person.getRemark(), person.getRate(), pairHashSet);"},{"lineNumber":351,"author":{"gitID":"alexawangzi"},"content":"        } else {"},{"lineNumber":352,"author":{"gitID":"alexawangzi"},"content":"            attributeTags.add(new Tag(\"Matched\", Tag.AllTagTypes.STATUS));"},{"lineNumber":353,"author":{"gitID":"alexawangzi"},"content":"            editedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":354,"author":{"gitID":"alexawangzi"},"content":"                    person.getEmail(), person.getAddress(), person.getPrice(),"},{"lineNumber":355,"author":{"gitID":"alexawangzi"},"content":"                    person.getSubject(), person.getLevel(), new Status(\"Matched\"),"},{"lineNumber":356,"author":{"gitID":"alexawangzi"},"content":"                    person.getRole(), attributeTags, person.getRemark(), person.getRate(), pairHashSet);"},{"lineNumber":357,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":358,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":359,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":360,"author":{"gitID":"alexawangzi"},"content":"            updatePersonForMatchUnmatch(person, editedPerson);"},{"lineNumber":361,"author":{"gitID":"alexawangzi"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":362,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Should not have duplicates\");"},{"lineNumber":363,"author":{"gitID":"alexawangzi"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":364,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"Match exits means person must be in database.\");"},{"lineNumber":365,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":366,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":368,"author":{"gitID":"alexawangzi"},"content":"    //@@author"},{"lineNumber":369,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":373,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":379,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":380,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":381,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":389,"author":{"gitID":"alexawangzi"},"content":"    public ObservableList\u003cseedu.address.model.pair.Pair\u003e getPairList() {"},{"lineNumber":390,"author":{"gitID":"alexawangzi"},"content":"        return pairs.asObservableList();"},{"lineNumber":391,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":392,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":394,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":395,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":396,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":399,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":400,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":401,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":402,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":403,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":408,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":409,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":410,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":411,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":412,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":413,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":414,"author":{"gitID":"alexawangzi"},"content":"     * Removes unsed {@code tag} from this {@code AddressBook}."},{"lineNumber":415,"author":{"gitID":"alexawangzi"},"content":"     * Reused from https://github.com/se-edu/"},{"lineNumber":416,"author":{"gitID":"alexawangzi"},"content":"     * addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":417,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":418,"author":{"gitID":"alexawangzi"},"content":"    private void removeUnusedTags() {"},{"lineNumber":419,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":420,"author":{"gitID":"alexawangzi"},"content":"                           .map(Person::getTags)"},{"lineNumber":421,"author":{"gitID":"Aussiroth"},"content":"                .flatMap(List::stream)"},{"lineNumber":422,"author":{"gitID":"alexawangzi"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":423,"author":{"gitID":"alexawangzi"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":424,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":425,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":239,"Aussiroth":10,"-":176}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotDeleteException;"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotEditException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    private final FilteredList\u003cPair\u003e filteredPairs;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        filteredPairs \u003d new FilteredList\u003c\u003e(this.addressBook.getPairList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPerson operation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException,"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"            PersonMatchedCannotDeleteException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"            throws DuplicatePersonException, PersonNotFoundException, PersonMatchedCannotEditException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        addressBook.updatePersonForAddAndEdit(target, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Aussiroth"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"Aussiroth"},"content":"    public void rateRemarkPerson(Person target, Person editedPerson)"},{"lineNumber":95,"author":{"gitID":"Aussiroth"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":97,"author":{"gitID":"Aussiroth"},"content":"        addressBook.updatePersonForRateAndRemark(target, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPair operation\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"    public void deletePair(Pair target) throws PairNotFoundException {"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"        addressBook.removePair(target);"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"        indicateAddressBookChanged();"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"    //@@author alexawangzi"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"     * Add a pair to STUtor"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"     * @param student"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"     * @param tutor"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"    public synchronized void addPair(Person student, Person tutor) throws DuplicatePairException {"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"        addressBook.addPair(student, tutor);"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        updateFilteredPairList(PREDICATE_SHOW_ALL_PAIRS);"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"        indicateAddressBookChanged();"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pair List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"     * Returns an unmodifiable view of the list of {@code Pair} backed by the internal list of"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":"     * {@code addressBook}"},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":148,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"alexawangzi"},"content":"    public ObservableList\u003cPair\u003e getFilteredPairList() {"},{"lineNumber":150,"author":{"gitID":"alexawangzi"},"content":"        return FXCollections.unmodifiableObservableList(filteredPairs);"},{"lineNumber":151,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":153,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"alexawangzi"},"content":"    public void updateFilteredPairList(Predicate\u003cPair\u003e predicate) {"},{"lineNumber":155,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(predicate);"},{"lineNumber":156,"author":{"gitID":"alexawangzi"},"content":"        filteredPairs.setPredicate(predicate);"},{"lineNumber":157,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":159,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":160,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":161,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":162,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":61,"Aussiroth":4,"-":117}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.Pair;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotDeleteException;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.exceptions.PersonMatchedCannotEditException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    Predicate\u003cPair\u003e PREDICATE_SHOW_ALL_PAIRS \u003d unused -\u003e true;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that filter all person with student tag */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d person -\u003e person.getTags().contains(new Tag(\"student\"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that filter all person with student tag */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_TUTORS \u003d person -\u003e person.getTags().contains(new Tag(\"tutor\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPerson operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    void deletePerson(Person target) throws PersonNotFoundException, PersonMatchedCannotDeleteException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":52,"author":{"gitID":"Aussiroth"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"Aussiroth"},"content":"     * @throws PersonMatchedCannotEditException if {@code target} attributes cannot be edited due to being matched."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"            throws DuplicatePersonException, PersonNotFoundException, PersonMatchedCannotEditException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":60,"author":{"gitID":"Aussiroth"},"content":"     * This is for use with rating and remark operations."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Aussiroth"},"content":"    void rateRemarkPerson(Person target, Person editedPerson)"},{"lineNumber":67,"author":{"gitID":"Aussiroth"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dPair operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    /** Adds the given pair */"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    void addPair(Person student, Person tutor) throws DuplicatePairException;"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    /** Deletes the given pair. */"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    void deletePair(Pair target) throws PairNotFoundException;"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    /** Returns an unmodifiable view of the filtered pair list */"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    ObservableList\u003cPair\u003e getFilteredPairList();"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"     * Updates the filter of the filtered pair list to filter by the given {@code predicate}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    void updateFilteredPairList(Predicate\u003cseedu.address.model.pair.Pair\u003e predicate);"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"alexawangzi":30,"Aussiroth":5,"-":62}},{"path":"src/main/java/seedu/address/model/person/Level.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s level in the address book."},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLevel(String)}"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"public class Level {"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] LEVEL_VALUES \u003d"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"            new String[] { \"lower sec\", \"ls\", \"upper sec\", \"us\", \"lower pri\", \"lp\", \"upper pri\", \"up\", \"\"};"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_LEVEL \u003d new HashSet\u003c\u003e(Arrays.asList(LEVEL_VALUES));"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_LEVEL_CONSTRAINTS \u003d \"Person Level should be \""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            + \"of the format \u003cgrade\u003e\u003ceducation\u003e \""},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"            + \"1. The education should be one of the education system listed in.\\n\""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"            + \"2. This is followed by a whitespace and then a number to represent the grade. \""},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"            + \"The grade must be consistent with the specific education system indicated earlier.\\n\";"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Level}."},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"     * @param level A valid level description."},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public Level(String level) {"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(level);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        level \u003d validateLevel(level);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d formatLevel(level);"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"     * format level into proper case"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"     * @param level"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"     * @return String representing level in proper case"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"    private String formatLevel(String level) {"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        return pc.convertToProperCase(level);"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"     * check validity of the level string supplied"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"     * @param level"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"     * @return String representing a valid level"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    private String validateLevel(String level) {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        level.toLowerCase();"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidLevel(level), MESSAGE_LEVEL_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"        level \u003d convertToFullLevel(level);"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        return level;"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full level name"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"     * @param original"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"     * @return String representing the full level"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullLevel(String original) {"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        if (cur.equals(\"ls\")) {"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"lower sec\";"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"us\")) {"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"upper sec\";"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"lp\")) {"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"lower pri\";"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"up\")) {"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"upper pri\";"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid level description."},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidLevel(String test) {"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"        return SET_ALL_LEVEL.contains(test);"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        return value;"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Level // instanceof handles nulls"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Level) other).value)); // state check"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"        return value.hashCode();"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":103,"-":5}},{"path":"src/main/java/seedu/address/model/pair/exceptions/PairNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.pair.exceptions;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":" * Signals that the operation is unable to find the specified pair."},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"public class PairNotFoundException extends Exception {}"}],"authorContributionMap":{"alexawangzi":7}},{"path":"src/main/java/seedu/address/model/person/Role.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":" * Represents a Person\u0027s role in the address book."},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"public class Role {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    public static final String[] ROLES_VALUES \u003d new String[] { \"student\", \"s\", \"tutor\", \"t\", \"\"};"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"    public static final HashSet\u003cString\u003e SET_ALL_ROLES \u003d new HashSet\u003c\u003e(Arrays.asList(ROLES_VALUES));"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d \"Role should be one of: \\n\""},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"            + SET_ALL_ROLES.toString()"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"            + \"\\n\";"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"     * Constructs an {@code Role}."},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     * @param role A valid role description."},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public Role(String role) {"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(role);"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        role \u003d validateRole(role);"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d formatRole(role);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"     * Format the input into proper case"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"     * @param role"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"     * @return"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"    private String formatRole(String role) {"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        ProperCaseConverter pc \u003d new ProperCaseConverter();"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"        return pc.convertToProperCase(role);"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"     * check validity of the status string supplied"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"     * @param role"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"     * @return string representing a valid role"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"    private String validateRole(String role) {"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"        role.toLowerCase();"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"        checkArgument(isValidRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        role \u003d convertToFullRole(role);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        return role;"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"     * Convert a shortcut to full role name"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"    public String convertToFullRole(String original) {"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        String cur \u003d original.toLowerCase();"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        if (cur.equals(\"s\")) {"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"student\";"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        } else if (cur.equals(\"t\")) {"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"            cur \u003d \"tutor\";"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        return cur;"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"     * Returns if a given string is a valid role description."},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidRole(String test) {"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        test \u003d test.toLowerCase();"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        return SET_ALL_ROLES.contains(test);"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"        return value;"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof Role // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value.equals(((Role) other).value)); // state check"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"        return value.hashCode();"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":95,"-":5}},{"path":"src/main/java/seedu/address/model/pair/exceptions/DuplicatePairException.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.pair.exceptions;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":" * Signals that the operation will result in duplicate Pair objects."},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"public class DuplicatePairException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"    public DuplicatePairException() {"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"        super(\"Operation would result in duplicate pairs\");"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":12,"-":1}},{"path":"src/main/java/seedu/address/model/pair/NameContainsKeywordsPredicatePair.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.pair;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":" * Tests that a {@code Pair}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"public class NameContainsKeywordsPredicatePair implements Predicate\u003cPair\u003e {"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"    public NameContainsKeywordsPredicatePair(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"    public boolean test(Pair pair) {"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(pair.getPairName(), keyword));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof NameContainsKeywordsPredicatePair // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicatePair) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":20,"-":12}},{"path":"src/main/java/seedu/address/model/pair/Pair.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.pair;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":11,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":13,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":" * Represents a pair (one student and one tutor) in STUtor."},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":"public class Pair  {"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    private final String studentName;"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"    private final String tutorName;"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    private final String subject;"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    private final String level;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    private final String price;"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    private final PairHash pairHash;"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    private final UniqueTagList tags;"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    public Pair(String studentName, String tutorName, String subject, String level, String price,"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"                PairHash pairHash) {"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"        requireAllNonNull(studentName, tutorName, subject, level, price, pairHash);"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"        this.studentName \u003d studentName;"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"        this.tutorName \u003d tutorName;"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        this.subject \u003d subject;"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        this.level \u003d level;"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"        this.price \u003d price;"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        this.tags \u003d new UniqueTagList();"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"            tags.add(new Tag(price, Tag.AllTagTypes.PRICE));"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"            tags.add(new Tag(subject, Tag.AllTagTypes.SUBJECT));"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"            tags.add(new Tag(level, Tag.AllTagTypes.LEVEL));"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate tags from pair.\");"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        this.pairHash \u003d pairHash;"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"    public Pair(Person student, Person tutor, Subject subject, Level level, Price price) {"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"        this(student.getName().fullName, tutor.getName().fullName, subject.value,"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"                level.value, price.value, new PairHash(student, tutor, subject, level, price));"},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"    public String getStudentName() {"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        return studentName;"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    public String getTutorName() {"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        return tutorName;"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    public String getSubject() {"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"        return subject;"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    public String getLevel() {"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        return level;"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"    public String getPrice() {"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"        return price;"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    public String getPairName() {"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        return studentName + \" \u0026 \" + tutorName;"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"    public PairHash getPairHash() {"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"        return pairHash;"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"     * if modification is attempted."},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"    */"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    public List\u003cTag\u003e getTags() {"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cTag\u003e setTags \u003d tags.toSet();"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        List\u003cTag\u003e tagsAsList \u003d new ArrayList\u003c\u003e(setTags);"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        Collections.sort(tagsAsList);"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        return Collections.unmodifiableList(tagsAsList);"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"     * return a hashcode of the Pair object"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"     * @return"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"    /*  public Pair hashCode() {"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"        return pairHash;"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"    */"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"     * check if another object is equal to this pair"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"     * @param other"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"     * @return"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"    */"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"        if (!(other instanceof Pair)) {"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"            return false;"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"        Pair otherPair \u003d (Pair) other;"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"        return otherPair.getStudentName().equals(this.getStudentName())"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPair.getTutorName().equals(this.getTutorName())"},{"lineNumber":124,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPair.getSubject().equals(this.getSubject())"},{"lineNumber":125,"author":{"gitID":"alexawangzi"},"content":"                \u0026 otherPair.getLevel().equals(this.getLevel())"},{"lineNumber":126,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPair.getPrice().equals(this.getPrice())"},{"lineNumber":127,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 otherPair.getPairHash().equals(this.getPairHash());"},{"lineNumber":128,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":130,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"alexawangzi"},"content":"    public String toString() {"},{"lineNumber":132,"author":{"gitID":"alexawangzi"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":133,"author":{"gitID":"alexawangzi"},"content":"        builder.append(\" Student: \")"},{"lineNumber":134,"author":{"gitID":"alexawangzi"},"content":"                .append(getStudentName())"},{"lineNumber":135,"author":{"gitID":"alexawangzi"},"content":"                .append(\" Tutor: \")"},{"lineNumber":136,"author":{"gitID":"alexawangzi"},"content":"                .append(getTutorName())"},{"lineNumber":137,"author":{"gitID":"alexawangzi"},"content":"                .append(\" Subject: \")"},{"lineNumber":138,"author":{"gitID":"alexawangzi"},"content":"                .append(getSubject())"},{"lineNumber":139,"author":{"gitID":"alexawangzi"},"content":"                .append(\" Level: \")"},{"lineNumber":140,"author":{"gitID":"alexawangzi"},"content":"                .append(getLevel())"},{"lineNumber":141,"author":{"gitID":"alexawangzi"},"content":"                .append(\" Price: \")"},{"lineNumber":142,"author":{"gitID":"alexawangzi"},"content":"                .append(getPrice());"},{"lineNumber":143,"author":{"gitID":"alexawangzi"},"content":"        return builder.toString();"},{"lineNumber":144,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":146,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":147,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":140,"Aussiroth":2,"-":5}},{"path":"src/main/java/seedu/address/model/pair/PairHash.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.pair;"},{"lineNumber":2,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"alexawangzi"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"alexawangzi"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"alexawangzi"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":9,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Level;"},{"lineNumber":10,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Price;"},{"lineNumber":12,"author":{"gitID":"Aussiroth"},"content":"import seedu.address.model.person.Subject;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":" * Represents a PairHash in the address book."},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":" * The PairHash is attached to a pair, its student and its tutor to facilitate match/unmatch operations."},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":" * Guarantees: immutable;"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":"public class PairHash {"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":"    public static final String PAIRHASH_VALIDATION_REGEX \u003d \"-?[0-9]{0,10}\";"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"    public static final String MESSAGE_PAIRHASH_CONSTRAINTS \u003d \"PairHash should be a signed integer.\";"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    public static final PairHash DEFAULT_PAIR_HASH \u003d new PairHash(0);"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    public final int value;"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"    public PairHash (Person student, Person tutor, Subject subject, Level level, Price price) {"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"        this(student.toString(), tutor.toString(), subject, level, price);"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"    //toString() is used instead of the Person object itself to prevent duplicate pairs"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    //(Person stores a list of pairHashes, direct hashing with the person object will give different hashes but"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"    //essentially adding duplicates to the UniquePairList in model"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    public PairHash (String studentDescription, String tutorDescription, Subject subject, Level level, Price price) {"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        requireAllNonNull(studentDescription, tutorDescription, subject, level, price);"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d Objects.hash(studentDescription, tutorDescription, subject, level, price);"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    public PairHash(String input) {"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d Integer.parseInt(input);"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"    public PairHash(int input) {"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        this.value \u003d input;"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    public static Set\u003cPairHash\u003e getDefaultPairHashSet() {"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"        Set\u003cPairHash\u003e defaultPairHashSet \u003d new HashSet\u003cPairHash\u003e();"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"        return defaultPairHashSet;"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        return Integer.toString(this.value);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof PairHash // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.value \u003d\u003d (((PairHash) other).value)); // state check"},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"    public int getValue() {"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        return value;"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        return Integer.toString(value).hashCode();"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"     * Returns true if a given string is a valid pairHash"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    public static boolean isValidPairHashValue(String test) {"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        return test.matches(PAIRHASH_VALIDATION_REGEX);"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":78,"Aussiroth":2,"-":2}},{"path":"src/main/java/seedu/address/model/pair/UniquePairList.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.pair;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.DuplicatePairException;"},{"lineNumber":13,"author":{"gitID":"alexawangzi"},"content":"import seedu.address.model.pair.exceptions.PairNotFoundException;"},{"lineNumber":14,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":" * A list of pairs that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":" *"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":" *"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":" * @see Pair#equals(Object)"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":"public class UniquePairList implements Iterable\u003cPair\u003e {"},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":"    private final ObservableList\u003cPair\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     * Returns true if the list contains an equivalent pair as the given argument."},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":"    public boolean contains(Pair toCheck) {"},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"     * Adds a pair to the list."},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":"     * @throws DuplicatePairException if the pair to add is a duplicate of an existing pair in the list."},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    public void add(Pair toAdd) throws DuplicatePairException {"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"            throw new DuplicatePairException();"},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"     * Replaces the pair {@code target} in the list with {@code editedPair}."},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"     * @throws DuplicatePairException if the replacement is equivalent to another existing pair in the list."},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"     * @throws PairNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public void setPair(Pair target, Pair editedPair)"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"            throws DuplicatePairException, PairNotFoundException {"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(editedPair);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"            throw new PairNotFoundException();"},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"        if (!target.equals(editedPair) \u0026\u0026 internalList.contains(editedPair)) {"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"            throw new DuplicatePairException();"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"        internalList.set(index, editedPair);"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"     * Removes the equivalent pair from the list."},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":"     * @throws PairNotFoundException if no such pair could be found in the list."},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"    public boolean remove(Pair toRemove) throws PairNotFoundException {"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"        final boolean pairFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":"        if (!pairFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"            throw new PairNotFoundException();"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"        return pairFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"    public void setPairs(UniquePairList replacement) {"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"    public void setPairs(List\u003cPair\u003e pairs) throws DuplicatePairException {"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        requireAllNonNull(pairs);"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"        final UniquePairList replacement \u003d new UniquePairList();"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"        for (final Pair pair : pairs) {"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"            replacement.add(pair);"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"        setPairs(replacement);"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    public ObservableList\u003cPair\u003e asObservableList() {"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"    public Iterator\u003cPair\u003e iterator() {"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof UniquePairList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePairList) other).internalList));"},{"lineNumber":117,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":119,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitID":"alexawangzi"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":113,"-":10}},{"path":"src/main/java/seedu/address/model/pair/UniquePairHashList.java","lines":[{"lineNumber":1,"author":{"gitID":"alexawangzi"},"content":"package seedu.address.model.pair;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"alexawangzi"},"content":"//@@author alexawangzi"},{"lineNumber":16,"author":{"gitID":"alexawangzi"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"alexawangzi"},"content":" * A list of pairHashs that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"alexawangzi"},"content":" *"},{"lineNumber":19,"author":{"gitID":"alexawangzi"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"alexawangzi"},"content":" *"},{"lineNumber":21,"author":{"gitID":"alexawangzi"},"content":" * @see PairHash#equals(Object)"},{"lineNumber":22,"author":{"gitID":"alexawangzi"},"content":" */"},{"lineNumber":23,"author":{"gitID":"alexawangzi"},"content":"public class UniquePairHashList implements Iterable\u003cPairHash\u003e {"},{"lineNumber":24,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":25,"author":{"gitID":"alexawangzi"},"content":"    private final ObservableList\u003cPairHash\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":27,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"alexawangzi"},"content":"     * Constructs empty PairHashList."},{"lineNumber":29,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"alexawangzi"},"content":"    public UniquePairHashList() {}"},{"lineNumber":31,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":32,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"alexawangzi"},"content":"     * Creates a UniquePairHashList using given pairHashs."},{"lineNumber":34,"author":{"gitID":"alexawangzi"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"alexawangzi"},"content":"    public UniquePairHashList(Set\u003cPairHash\u003e pairHashs) {"},{"lineNumber":37,"author":{"gitID":"alexawangzi"},"content":"        requireAllNonNull(pairHashs);"},{"lineNumber":38,"author":{"gitID":"alexawangzi"},"content":"        internalList.addAll(pairHashs);"},{"lineNumber":39,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":40,"author":{"gitID":"alexawangzi"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":43,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"alexawangzi"},"content":"     * Returns all pairHashs in this list as a Set."},{"lineNumber":45,"author":{"gitID":"alexawangzi"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"alexawangzi"},"content":"    public Set\u003cPairHash\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"alexawangzi"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"alexawangzi"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":52,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"alexawangzi"},"content":"     * Returns true if the list contains an equivalent PairHash as the given argument."},{"lineNumber":54,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"alexawangzi"},"content":"    public boolean contains(PairHash toCheck) {"},{"lineNumber":56,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":57,"author":{"gitID":"alexawangzi"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":58,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":60,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"alexawangzi"},"content":"     * Adds a PairHash to the list."},{"lineNumber":62,"author":{"gitID":"alexawangzi"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"alexawangzi"},"content":"     * @throws DuplicatePairHashException if the PairHash to add is a duplicate of an existing PairHash in the list."},{"lineNumber":64,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"alexawangzi"},"content":"    public void add(PairHash toAdd) throws DuplicatePairHashException {"},{"lineNumber":66,"author":{"gitID":"alexawangzi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":67,"author":{"gitID":"alexawangzi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":68,"author":{"gitID":"alexawangzi"},"content":"            throw new DuplicatePairHashException();"},{"lineNumber":69,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"alexawangzi"},"content":"        internalList.add(toAdd);"},{"lineNumber":71,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":72,"author":{"gitID":"alexawangzi"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":73,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":75,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"alexawangzi"},"content":"    public Iterator\u003cPairHash\u003e iterator() {"},{"lineNumber":77,"author":{"gitID":"alexawangzi"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":78,"author":{"gitID":"alexawangzi"},"content":"        return internalList.iterator();"},{"lineNumber":79,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":81,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"alexawangzi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":83,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"alexawangzi"},"content":"    public ObservableList\u003cPairHash\u003e asObservableList() {"},{"lineNumber":85,"author":{"gitID":"alexawangzi"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":86,"author":{"gitID":"alexawangzi"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":87,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":89,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"alexawangzi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"alexawangzi"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":92,"author":{"gitID":"alexawangzi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":93,"author":{"gitID":"alexawangzi"},"content":"                || (other instanceof UniquePairHashList // instanceof handles nulls"},{"lineNumber":94,"author":{"gitID":"alexawangzi"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePairHashList) other).internalList));"},{"lineNumber":95,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":97,"author":{"gitID":"alexawangzi"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"alexawangzi"},"content":"    public int hashCode() {"},{"lineNumber":99,"author":{"gitID":"alexawangzi"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":100,"author":{"gitID":"alexawangzi"},"content":"        return internalList.hashCode();"},{"lineNumber":101,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":103,"author":{"gitID":"alexawangzi"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"alexawangzi"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":105,"author":{"gitID":"alexawangzi"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"alexawangzi"},"content":"    public static class DuplicatePairHashException extends DuplicateDataException {"},{"lineNumber":107,"author":{"gitID":"alexawangzi"},"content":"        protected DuplicatePairHashException() {"},{"lineNumber":108,"author":{"gitID":"alexawangzi"},"content":"            super(\"Operation would result in duplicate pairHashs\");"},{"lineNumber":109,"author":{"gitID":"alexawangzi"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"alexawangzi"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"alexawangzi"},"content":""},{"lineNumber":112,"author":{"gitID":"alexawangzi"},"content":"}"}],"authorContributionMap":{"alexawangzi":99,"-":13}}]
