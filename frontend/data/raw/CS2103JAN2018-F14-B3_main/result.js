var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F14-B3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"* *Email us* : You can also reach us at `quentinkhoo [at] u.nus.edu`"}],"authorContributionMap":{"-":4,"quentinkhoo":2}},{"path":"docs/UsingGradle.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Using Gradle"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":6,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"* Running tests"},{"lineNumber":13,"author":{"gitID":"-"},"content":"* Managing library dependencies"},{"lineNumber":14,"author":{"gitID":"-"},"content":"* Analyzing code for style compliance"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Running Gradle Commands"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."},{"lineNumber":27,"author":{"gitID":"-"},"content":"`./gradlew clean allTests`"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Cleaning the Project"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* *`clean`* +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*`clean` to force Gradle to execute a task*: +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Creating the JAR file"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`shadowJar`* +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"e.g. `./gradlew shadowJar`"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"****"},{"lineNumber":48,"author":{"gitID":"-"},"content":"To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"e.g. `./gradlew clean shadowJar`"},{"lineNumber":50,"author":{"gitID":"-"},"content":"****"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Rendering AsciiDoc files"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* **`asciidoctor`** +"},{"lineNumber":58,"author":{"gitID":"-"},"content":"Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* **`deployOfflineDocs`** +"},{"lineNumber":60,"author":{"gitID":"-"},"content":"Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Running the application"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* *`run`* +"},{"lineNumber":65,"author":{"gitID":"-"},"content":"Builds and runs the application."},{"lineNumber":66,"author":{"gitID":"-"},"content":"* *`runShadow`* +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Builds the application as a fat JAR, and then runs it."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Running code style checks"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"* **`checkstyleMain`** +"},{"lineNumber":72,"author":{"gitID":"-"},"content":"Runs the code style check for the main code base"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* **`checkstyleTest`** +"},{"lineNumber":74,"author":{"gitID":"-"},"content":"Runs the code style check for the test code base"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d Running Tests"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"* **`allTests`** +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Runs all tests."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* **`guiTests`** +"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"Runs all tests in the `seedu.investigapptor.ui` and `systemtests` package"},{"lineNumber":84,"author":{"gitID":"-"},"content":"* **`nonGuiTests`** +"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"Runs all non-GUI tests in the `seedu.investigapptor`"},{"lineNumber":86,"author":{"gitID":"-"},"content":"package"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* **`headless`** +"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Here are some examples:"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* `./gradlew headless allTests` -- Runs all tests in headless mode"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"},{"lineNumber":94,"author":{"gitID":"-"},"content":"tests"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d Updating Dependencies"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"* **`compileJava`** +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* **`compileTestJava`** +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."}],"authorContributionMap":{"-":104,"quentinkhoo":2}},{"path":"docs/team/pkaijun.adoc","lines":[{"lineNumber":1,"author":{"gitID":"pkaijun"},"content":"\u003d Poh Kai Jun - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"pkaijun"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"pkaijun"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":5,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d PROJECT: INVESTIGAPPTOR"},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"---"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"Investigapptor is a desktop application used for investigators to manage cases as simple, straightforward and efficient as possible."},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"* *Major enhancement*: Support to view cases efficiently"},{"lineNumber":17,"author":{"gitID":"-"},"content":"** *Features Implemented*:"},{"lineNumber":18,"author":{"gitID":"-"},"content":"*** Provide an overview of all the cases in a Calendar GUI (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/131[#131], https://github.com/CS2103JAN2018-F14-B3/main/pull/201[#201])"},{"lineNumber":19,"author":{"gitID":"-"},"content":"*** Command to display cases whose tags matches the keyword(s) provided by the user (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/100[#100])"},{"lineNumber":20,"author":{"gitID":"-"},"content":"*** Command to display cases whose status is close (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/223[#223])"},{"lineNumber":21,"author":{"gitID":"-"},"content":"*** Command to display cases whose status is open (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/223[#223])"},{"lineNumber":22,"author":{"gitID":"-"},"content":"*** Command to change the case\u0027s status from open to close (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/104[#104])"},{"lineNumber":23,"author":{"gitID":"-"},"content":"** What it does: This enhancement incorporates the abovementioned features to allow investigators to"},{"lineNumber":24,"author":{"gitID":"-"},"content":"view the cases they want in an efficient and user-friendly manner."},{"lineNumber":25,"author":{"gitID":"-"},"content":"** Justification: Its essential for investigators to solve the crime cases within the shortest amount of time possible."},{"lineNumber":26,"author":{"gitID":"-"},"content":"Hence, efficiency is key for the investigators. Bookkeeping is important as well"},{"lineNumber":27,"author":{"gitID":"-"},"content":"in order to manage and keep track of the cases - however, time spent on this area can be rather large"},{"lineNumber":28,"author":{"gitID":"-"},"content":"if there is no proper system to manage these information. +"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"By having this enhancement, it not only provides a better user experience for the investigators,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"but more importantly, it reduces the time spent on bookkeeping work. With this enhancement,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"investigators do not need to perform any manual work to display an overview of the cases in a nicely formatted"},{"lineNumber":33,"author":{"gitID":"-"},"content":"layout or having to search through a long list of data to find a particular set of cases."},{"lineNumber":34,"author":{"gitID":"-"},"content":"Thus, this will improve the efficiency of the investigators as time will be spent on"},{"lineNumber":35,"author":{"gitID":"-"},"content":"significant events such as investigative work instead of bookkeeping tasks."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Highlights: The Calendar GUI is not just a piece of static image on the interface. It interacts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"with the various components in Investigapptor and will instantly reflect newly added cases, remove any deleted"},{"lineNumber":39,"author":{"gitID":"-"},"content":"cases or display only a certain set of cases when commands related to the cases are executed."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Credits: The Calendar GUI was implemented with the external API, https://github.com/dlemmermann/CalendarFX[CalendarFX]."},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":"* *Minor enhancement*:"},{"lineNumber":44,"author":{"gitID":"-"},"content":"** Added functionality to provide different tag colours for different tag contents (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/137[#137])"},{"lineNumber":45,"author":{"gitID":"-"},"content":"** Added new command to display investigators whose tags matches the keyword(s) provided by the user (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/59[#59])"},{"lineNumber":46,"author":{"gitID":"-"},"content":"** Added new attribute `endDate` to CrimeCase class (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/104[#104])"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B3/main/blob/master/collated/functional/pkaijun.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B3/main/blob/master/collated/test/pkaijun.md[Test code]]"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":"* *Other contributions*:"},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"** Project management:"},{"lineNumber":53,"author":{"gitID":"-"},"content":"*** Managed release `v1.5` (1 release) on GitHub"},{"lineNumber":54,"author":{"gitID":"-"},"content":"*** Referencing between `type.epic` `type.story` `type.task` `type.testing` to break down"},{"lineNumber":55,"author":{"gitID":"-"},"content":"the major enhancement into smaller tasks (Epic Issue https://github.com/CS2103JAN2018-F14-B3/main/issues/212[#212])"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"** Enhancements:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"*** Implemented auto-update functionality for the Calendar to automatically reflect the current list of"},{"lineNumber":59,"author":{"gitID":"-"},"content":"cases shown on the panel (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/237[#237], https://github.com/CS2103JAN2018-F14-B3/main/pull/223[#223])"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"** Documentation:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"*** Added screenshots to the User Guide to illustrate examples:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"(PR https://github.com/CS2103JAN2018-F14-B3/main/pull/246[#246],"},{"lineNumber":64,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F14-B3/main/pull/225/[#225])"},{"lineNumber":65,"author":{"gitID":"-"},"content":"*** Updated User Guide to ensure consistency throughout the sections"},{"lineNumber":66,"author":{"gitID":"-"},"content":"(PR https://github.com/CS2103JAN2018-F14-B3/main/pull/246[#246])"},{"lineNumber":67,"author":{"gitID":"-"},"content":"*** Updated Developer Guide\u0027s diagrams according to the components of the Investigapptor:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"(PR https://github.com/CS2103JAN2018-F14-B3/main/pull/132/files[#132],"},{"lineNumber":69,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F14-B3/main/pull/232[#232],"},{"lineNumber":70,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F14-B3/main/pull/242[#242])"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"** Community:"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams (examples:  https://github.com/CS2103JAN2018-T11-B4/main/issues/137[1],"},{"lineNumber":75,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-T11-B4/main/issues/134[2],"},{"lineNumber":76,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-T11-B4/main/issues/128[3],"},{"lineNumber":77,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-T11-B4/main/issues/121[4],"},{"lineNumber":78,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-T11-B4/main/issues/118[5],"},{"lineNumber":79,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-T11-B4/main/issues/113[6],"},{"lineNumber":80,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-T11-B4/main/issues/104[7],"},{"lineNumber":81,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-T11-B4/main/issues/102[8])"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"** Tools:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"*** Integrated a third party library (CalendarFX) to the project"},{"lineNumber":85,"author":{"gitID":"-"},"content":"(PR https://github.com/CS2103JAN2018-F14-B3/main/pull/131[#131],"},{"lineNumber":86,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F14-B3/main/pull/224[#224])"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"** Troubleshooting:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"*** Fixed bugs from user testing (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/204[#204])"},{"lineNumber":90,"author":{"gitID":"-"},"content":"*** Fixed bug from test case caused by the auto-update functionality (PR https://github.com/CS2103JAN2018-F14-B3/main/pull/237[#237])"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"|\u003d\u003d\u003d"},{"lineNumber":95,"author":{"gitID":"-"},"content":"|_Here are all the sections that I have contributed: https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/UserGuide.adoc#FindInvTags[1],"},{"lineNumber":96,"author":{"gitID":"-"},"content":"  https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/UserGuide.adoc#FindCloseCases[2],"},{"lineNumber":97,"author":{"gitID":"-"},"content":"  https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/UserGuide.adoc#FindOpenCases[3],"},{"lineNumber":98,"author":{"gitID":"-"},"content":"  https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/UserGuide.adoc#CloseCase[4],"},{"lineNumber":99,"author":{"gitID":"-"},"content":"  https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/UserGuide.adoc#FindCaseTags[5]"},{"lineNumber":100,"author":{"gitID":"-"},"content":"  https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/UserGuide.adoc#CasesCalendar[6] +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"  Given below are some sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":102,"author":{"gitID":"pkaijun"},"content":"|\u003d\u003d\u003d"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dcalendarsection]"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dfindopencases]"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":109,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":110,"author":{"gitID":"pkaijun"},"content":"|\u003d\u003d\u003d"},{"lineNumber":111,"author":{"gitID":"-"},"content":"|_Here are all the sections that I have contributed: https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/DeveloperGuide.adoc#Find-Feature[1],"},{"lineNumber":112,"author":{"gitID":"-"},"content":"  https://github.com/CS2103JAN2018-F14-B3/main/blob/master/docs/DeveloperGuide.adoc#Calendar-Feature[2] +"},{"lineNumber":113,"author":{"gitID":"-"},"content":"  Given below are some sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":114,"author":{"gitID":"pkaijun"},"content":"|\u003d\u003d\u003d"},{"lineNumber":115,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dcalendar2]"}],"authorContributionMap":{"pkaijun":37,"-":79}},{"path":"docs/team/quentinkhoo.adoc","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"\u003d Quentin Khoo - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d PROJECT: Investigapptor"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"---"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor is a desktop application used for investigators to manage cases as simple, straightforward and efficient as possible."},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"* *Major enhancement*: added a *password* feature"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"** What it does: Allows the investigator to set a password for the Investigapptor application."},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"** Justification: As Investigapptor would very likely be installed on a shared computer,"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"                the password feature would prevent unauthorised users from accessing the"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"                Investigapptor application."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"** Highlights: This implementation takes into consideration the importance of security. A lot"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"                of consideration was put into designing the password feature to cater to the"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"                target audience. This implementation was challenging as it requires the"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"                input password to always be hidden from plain sight."},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"* *Minor enhancement*: implemented Ui support for automated swapping of tabs"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"** What it does: Allows the panel to automatically switch to the appropriate"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    display list depending on the command input."},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":" [https://github.com/CS2103JAN2018-F14-B3/main/pull/68/files[PR#68]]"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B3/main/tree/master/collated/functional/[Functional code]]"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":" [https://github.com/CS2103JAN2018-F14-B3/main/tree/master/collated/test[Test code]]"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"* *Other contributions*:"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"** Project management:"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"*** Managed releases `v1.3` and `v1.4` (2 releases) on GitHub"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"** Enhancements to existing features:"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"*** Added a shortcut key to reset the command box"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"     [https://github.com/CS2103JAN2018-F14-B3/main/pull/120/[PR#120]]"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"*** Added command aliases for existing commands"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"     [https://github.com/CS2103JAN2018-F14-B3/main/pull/3[PR#3]]"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"** Documentation:"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    [https://github.com/CS2103JAN2018-F14-B3/main/pull/203[PR#203]]"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"*** Designed formatting for User Guide Command Summary to ensure ease of usage"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"*** Did cosmetic tweaks to existing contents of the Developer Guide"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"*** Managed formatting for Developer Guide to ensure consistency in format"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"and language."},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"** Community:"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"*** Reported and documented bugs for other teams in procedural manner: +"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"   **** *Team CS2103JAN2018-T09-B2*:"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":" [https://github.com/CS2103JAN2018-T09-B2/main/issues/175[#175]],"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":" [https://github.com/CS2103JAN2018-T09-B2/main/issues/185[#185]],"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":" [https://github.com/CS2103JAN2018-T09-B2/main/issues/194[#194]]"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":" **** *Team CS2103JAN2018-F14-B1*:"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":" [https://github.com/CS2103JAN2018-F14-B1/main/issues/184[#184]]"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"** Tools:"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"*** Integrated TravisCI to the team repo."},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"*** Integrated AppVeyor to the team repo."},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"*** Integrated Netlify to the team repo."},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"*** Integrated Coveralls to the team repo."},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"*** Integrated Codacy to the team repo."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":74,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"include::../UserGuide.adoc[tag\u003dcommandintro]"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"include::../UserGuide.adoc[tag\u003dsetpassword]"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"include::../UserGuide.adoc[tag\u003dremovepassword]"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":86,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"include::../DeveloperGuide.adoc[tag\u003dpassword]"}],"authorContributionMap":{"quentinkhoo":73,"-":15}},{"path":"docs/team/Marcus-cxc.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Marcus Chen - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"pkaijun"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"pkaijun"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":5,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d PROJECT: INVESTIGAPPTOR"},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"---"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"Investigapptor is a desktop application used for investigators to manage cases as simple, straightforward and efficient as possible."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major enhancement*: Added the Investigator package, which is a subclass of the person class"},{"lineNumber":18,"author":{"gitID":"-"},"content":"** What it does: Allows Investigapptor to store a new type of person in the address book that is can handle and more methods and data for Investigator."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Justification: This enhancement is required as the person package is insufficient to perform the task required. As I wanted to accommodate future enhance of more types of people, the person class was used as a superclass to store the"},{"lineNumber":21,"author":{"gitID":"-"},"content":"basic information rather than just morphing the person class."},{"lineNumber":22,"author":{"gitID":"-"},"content":"** Highlights: This enhancement has includes much changes to all major changes to all components of the Invesitgapptor,"},{"lineNumber":23,"author":{"gitID":"-"},"content":"especially the model component to allow the Investigator to stores a live reference to all his cases that works with undo/redo feature by the usage of hashcode."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* *Minor enhancement*:"},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Implemented Backup command:"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Allows user to create and name a backup of the current state of the investigapptor."},{"lineNumber":30,"author":{"gitID":"-"},"content":"** Implemented ListInvestigatorCases command:"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Allows user to view all cases allocated to the selected investigator."},{"lineNumber":33,"author":{"gitID":"-"},"content":"** Implemented GUI for Investigator Details:"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Created a html file to display the investigator details in a clear and more presentable format."},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Refactor the following command in order for investigator to integrate properly into Invesstigapptor."},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** AddInvestigatorCommand"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** EditInvestigatorCommand"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** DeleteInvestigatorCommand"},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Implemented CrimeCaseBuilder class"},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"-"},"content":"CrimeCaseBuilder used in JUnit testing to help build CrimeCase"},{"lineNumber":44,"author":{"gitID":"-"},"content":"** Implemented InvestigatorBuilder class"},{"lineNumber":45,"author":{"gitID":"-"},"content":"+"},{"lineNumber":46,"author":{"gitID":"-"},"content":"InvestigatorBuilder used in JUnit testing to help build CrimeCase"},{"lineNumber":47,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B3/main/blob/master/collated/functional/Marcus-cxc.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B3/main/blob/master/collated/test/Marcus-cxc.md[Test code]]"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"*** Managed releases `v1.2` (1 releases) on GitHub"},{"lineNumber":53,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"*** Did screenshots for several commands in the User Guide: https://github.com/CS2103JAN2018-F14-B3/main/pull/255[#255] https://github.com/CS2103JAN2018-F14-B3/main/pull/260[#260]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*** Did the navigating the interface section for the User Guide: https://github.com/CS2103JAN2018-F14-B3/main/pull/231[#231]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"*** Filled in the future enhancement in the user doc: https://github.com/CS2103JAN2018-F14-B3/main/pull/244[#244]"},{"lineNumber":57,"author":{"gitID":"-"},"content":"*** Update the Design component for the Developer Guide https://github.com/CS2103JAN2018-F14-B3/main/pull/255[#255]"},{"lineNumber":58,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"*** Update the sample data to reflect the new data type, investigator and cases: https://github.com/CS2103JAN2018-F14-B3/main/pull/264[#264]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Community:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams (examples:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B4/main/issues/120[1],"},{"lineNumber":63,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B4/main/issues/132[2],"},{"lineNumber":64,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B4/main/issues/128[3],"},{"lineNumber":65,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B4/main/issues/104[4],"},{"lineNumber":66,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-F11-B4/main/issues/110[5])"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":71,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003daddinv]"},{"lineNumber":75,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dbackup]"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":81,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003daddinvestigator]"},{"lineNumber":84,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003deditinvestigator]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dlistinvestigatorcase]"},{"lineNumber":86,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dbackup]"}],"authorContributionMap":{"pkaijun":14,"-":72}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor was developed by the CS2103T AY17/18 https://github.com/CS2103JAN2018-F14-B3[F14-B3] Team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Khoo Yong Bao, Quentin"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"image::quentinkhoo.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"{empty}[https://github.com/quentinkhoo[github]] [\u003c\u003cquentinkhoo#, portfolio\u003e\u003e]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"Role: Developer +"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"Responsibilities: Documentation, Logic, Deliverables and Deadlines +"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Leow Wei Ching"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"image::leowweiching.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"{empty}[http://github.com/leowweiching[github]] [\u003c\u003cleowweiching#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"Responsibilities: Documentation, Storage, Deliverables and Deadlines +"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Marcus Chen Xian Chong"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"image::marcus-cxc.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"{empty}[http://github.com/marcus-cxc[github]] [\u003c\u003cMarcus-cxc#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"Responsibilities: Documentation, Model, Deliverables and Deadlines +"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Poh Kai Jun"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"image::pkaijun.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"{empty}[http://github.com/pkaijun[github]] [\u003c\u003cpkaijun#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"Responsibilities: Documentation, UI, Deliverables and Deadlines +"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"-":28,"quentinkhoo":17}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Investigapptor"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"https://travis-ci.org/CS2103JAN2018-F14-B3/main[image:https://travis-ci.org/CS2103JAN2018-F14-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"https://ci.appveyor.com/project/quentinkhoo/main/branch/master[image:https://ci.appveyor.com/api/projects/status/e3ayy1cn5eciu66n/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"https://coveralls.io/github/CS2103JAN2018-F14-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F14-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"image:https://api.codacy.com/project/badge/Grade/4da5f907a45940e1adc46a0086a52cb4[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/quentinkhoo/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-F14-B3/main\u0026utm_campaign\u003dBadge_Grade\"]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"Investigapptor is a one-stop solution for investigators to make managing cases as simple, straightforward, and efficient as possible."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":18,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Why use Investigapptor?"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"Our primary goals are:"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* Streamline the complex investigations process"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* Maximise workflow efficiency through use of electronic input"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* Eradicate risks associated with paper-based processing"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* Offer a fuss-free and seamless user experience"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d What can Investigapptor do?"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Overview of investigators and cases"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"* Assign investigators to cases"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Assess key information of a case"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"* Categorise cases and investigators with labels"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"Note that Investigapptor is a desktop application with a GUI,"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":43,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":44,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":50,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":51,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/dlemmermann/CalendarFX[CalendarFx]"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"* This code was modified from the https://github.com/se-edu/addressbook-level4[AddressBook-Level4 project], which was created by the https://github.com/se-edu/[SE-EDU] initiative"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"-":44,"quentinkhoo":10}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"public class SampleDataTest extends InvestigapptorSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    protected Investigapptor getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"    public void investigapptor_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":43,"quentinkhoo":8}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"public class ClearCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: clear non-empty investigapptor, command with leading spaces and trailing alphanumeric characters"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"         * and spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: undo clearing investigapptor book -\u003e original investigapptor book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: redo clearing investigapptor book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: selects first card in person list and clears investigapptor book -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original investigapptor book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: filters the person list before clearing -\u003e entire investigapptor book cleared */"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original investigapptor book"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: clear empty investigapptor book -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":79,"quentinkhoo":22}},{"path":"docs/team/leowweiching.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Leow Wei Ching - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d PROJECT: Investigapptor"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"---"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"Investigapptor is a desktop application used for investigators to manage cases as simple, straightforward and efficient as possible. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"* *Major enhancement*: added *support for managing investigation cases*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** What it does: allows the user to add, delete, edit, find, and view case details in Investigapptor using the Command Line Interface (CLI)"},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Justification: As Investigapptor is a tool for managing investigations, the ability to store, modify, and view case information is integral to the functionality of the application. This feature aims to eliminate the need for paper-based processing during investigations, and give investigators a platform to access the data that they need more easily and efficiently."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement touched on the logic, model, storage, and UI components. In the model component, a new package had to be introduced to store case information."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* *Minor enhancement*: updated the GUI with a new colour scheme and style https://github.com/CS2103JAN2018-F14-B3/main/pull/185[#185]"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B3/main/blob/master/collated/functional/leowweiching.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B3/main/blob/master/collated/test/leowweiching.md[Test code]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"-"},"content":"*** Managed release `v1.5rc` on GitHub"},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":29,"author":{"gitID":"-"},"content":"*** Wrote content for the README.md https://github.com/CS2103JAN2018-F14-B3/main/pull/23[#23]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Restructured the Developer Guide and changed language style of existing content to make it more reader-focused https://github.com/CS2103JAN2018-F14-B3/main/pull/252[#252]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks and modified language to existing contents of the User Guide https://github.com/CS2103JAN2018-F14-B3/main/pull/273[#273]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W15-B3/main/issues/127[1], https://github.com/CS2103JAN2018-W15-B3/main/issues/133[2])"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003daddcase]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dfindcasesname]"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dselectcase]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddeletecase]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dselectcase]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dui-enhancements]"}],"authorContributionMap":{"-":49,"quentinkhoo":9}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.TestApp;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyInvestigapptor\u003e investigapptor, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(investigapptor, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":69,"quentinkhoo":4}},{"path":"src/test/java/systemtests/DeleteInvestigatorCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"pkaijun"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":"import static seedu.investigapptor.logic.commands.DeleteInvestigatorCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.DeleteInvestigatorCommand;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"public class DeleteInvestigatorCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteInvestigatorCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"        String command \u003d \"     \" + DeleteInvestigatorCommand.COMMAND_WORD + \"      \""},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: filtered person list, delete index within bounds of investigapptor book and person list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: filtered person list, delete index within bounds of investigapptor but out of bounds of person list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"        int invalidIndex \u003d getModel().getInvestigapptor().getPersonList().size();"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        command \u003d DeleteInvestigatorCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        command \u003d DeleteInvestigatorCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"        command \u003d DeleteInvestigatorCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        command \u003d DeleteInvestigatorCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"                getModel().getInvestigapptor().getPersonList().size() + 1);"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":"        command \u003d DeleteInvestigatorCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":104,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(DeleteInvestigatorCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(DeleteInvestigatorCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s investigapptor book."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"pkaijun"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteInvestigatorCommand}"},{"lineNumber":132,"author":{"gitID":"pkaijun"},"content":"     * using {@code toDelete} and"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":134,"author":{"gitID":"pkaijun"},"content":"     * @see DeleteInvestigatorCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":"                DeleteInvestigatorCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(),"},{"lineNumber":143,"author":{"gitID":"pkaijun"},"content":"                expectedModel, expectedResultMessage);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":155,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":156,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":165,"author":{"gitID":"pkaijun"},"content":"     * @see DeleteInvestigatorCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":166,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":191,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":22,"-":158,"quentinkhoo":23}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.DeleteInvestigatorCommand;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.SelectInvestigatorCommand;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"public class HelpCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"        executeCommand(SelectInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"        executeCommand(DeleteInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":4,"-":84,"quentinkhoo":6}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Investigapptor - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toclevels: 3"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":":important-caption: :heavy_exclamation_mark:"},{"lineNumber":15,"author":{"gitID":"-"},"content":":caution-caption: :fire:"},{"lineNumber":16,"author":{"gitID":"-"},"content":":warning-caption: :warning:"},{"lineNumber":17,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B3/main"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":":javaURL: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"By: `Team F14-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Investigapptor is a desktop Graphical User Interface (GUI) application that is based on"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Command Line Interface (CLI) for a team of professional investigators to easily"},{"lineNumber":27,"author":{"gitID":"-"},"content":"manage crime cases that have been assigned to them."},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"To get started, go to \u003c\u003cQuick Start, Quick Start\u003e\u003e to start setting up Investigapptor."},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d About this User Guide"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"This user guide shows you how to get started with Investigapptor."},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"It will introduce you to the features Investigapptor provides and lead you through with the use of examples."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"Throughout this user guide, there will be various icons used as described below."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"TIP: This is a tip. Follow these suggested tips to make your life much"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    simpler when using Investigapptor!"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"NOTE: This is a note. These are things for you to take note of when using"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    Investigapptor."},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"WARNING: This is a rule. Ensure that you follow these rule to make your"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    life using Investigapptor a pleasant one."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"This section serves as a tutorial for you to familiarise yourself with the use of"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Installation"},{"lineNumber":53,"author":{"gitID":"-"},"content":"Follow these steps to ensure that you have properly set up Investigapptor."},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":".  Ensure that you have Java version `1.8.0_60` or later installed in your"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"Computer. If you do not already have it installed, you can download it from"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"link:{javaURL}[here]."},{"lineNumber":58,"author":{"gitID":"-"},"content":"+"},{"lineNumber":59,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":61,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":62,"author":{"gitID":"-"},"content":"+"},{"lineNumber":63,"author":{"gitID":"-"},"content":".  You can download the latest `investigapptor.jar` link:{repoURL}/releases[here]."},{"lineNumber":64,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Investigapptor."},{"lineNumber":65,"author":{"gitID":"-"},"content":"+"},{"lineNumber":66,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":67,"author":{"gitID":"-"},"content":"An example of a home folder will be `C:\\Users\\Investigator\\InvestigapptorFolder`. +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"It is highly recommended that your home folder be a folder of its own and not contain any"},{"lineNumber":69,"author":{"gitID":"-"},"content":"other files not related to Investigapptor."},{"lineNumber":70,"author":{"gitID":"-"},"content":"+"},{"lineNumber":71,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The Graphical User Interface (GUI) should appear in a few seconds"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":" as shown in _\u003c\u003cStartUp, Figure 1\u003e\u003e_ below."},{"lineNumber":73,"author":{"gitID":"-"},"content":"+"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"[[StartUp]]"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":".Successful start up"},{"lineNumber":76,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Navigating the interface"},{"lineNumber":79,"author":{"gitID":"-"},"content":"You can study the Investigapptor\u0027s interface as shown below in \u003c\u003cInterface, Figure 2\u003e\u003e to understand"},{"lineNumber":80,"author":{"gitID":"-"},"content":"the various components of the application. You can also refer to the \u003c\u003cReference, table\u003e\u003e below to understand"},{"lineNumber":81,"author":{"gitID":"-"},"content":"their respective usage and features."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"[[Interface]]"},{"lineNumber":84,"author":{"gitID":"-"},"content":".Interface"},{"lineNumber":85,"author":{"gitID":"-"},"content":"image::Interface.png[width\u003d\"790\"]"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[[Reference]]"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"[width\u003d100%, cols\u003d\"1,4,20\"]"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"| *Label* | *Name* | *Feature*"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"| 1 | Panel List | A panel that displays the list of investigators or crime"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"                    cases. You can toggle between the two by clicking on the tab."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"| 2 | Detail Panel | The detail panel will display the full information of the"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"                        selected investigator or crime case."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"| 3 | Calendar | The calendar will show when the cases were opened or closed."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"| 4 | Command Box | The command box is where you key in the commands to tell the Investigapptor"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"                    to perform actions."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"| 5 | Result Box | The result box will display the result to any command you input."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adjusting the panel width"},{"lineNumber":107,"author":{"gitID":"-"},"content":"This sub-section will teach you how to adjust the width of the panels according to your preferences."},{"lineNumber":108,"author":{"gitID":"-"},"content":"For example, in the interface shown in \u003c\u003cwidth-issue\u003e\u003e below, the Calendar view is not able to be"},{"lineNumber":109,"author":{"gitID":"-"},"content":"seen properly."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"[[width-issue]]"},{"lineNumber":112,"author":{"gitID":"-"},"content":".Before adjusting panel width"},{"lineNumber":113,"author":{"gitID":"-"},"content":"image::userguide-images/width-issue.png[width\u003d\"790\"]"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"As shown in the \u003c\u003cadjust-width ,figure\u003e\u003e below, you can move your cursor to the panel separator"},{"lineNumber":116,"author":{"gitID":"-"},"content":"and an adjust-width cursor will appear. You can use this cursor to adjust the width of the panel"},{"lineNumber":117,"author":{"gitID":"-"},"content":"according to your preferences."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"[[adjust-width]]"},{"lineNumber":120,"author":{"gitID":"-"},"content":".Before adjusting panel width"},{"lineNumber":121,"author":{"gitID":"-"},"content":"image::userguide-images/adjust-width.png[width\u003d\"400\"]"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"After you\u0027ve adjusted the width of the panel for visibility purposes, you should be able to see"},{"lineNumber":124,"author":{"gitID":"-"},"content":"the interface properly as shown in the \u003c\u003cadjust-width-after,figure\u003e\u003e below."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"[[adjust-width-after]]"},{"lineNumber":127,"author":{"gitID":"-"},"content":".After adjusting panel width"},{"lineNumber":128,"author":{"gitID":"-"},"content":"image::userguide-images/after-adjust-width.png[width\u003d\"600\"]"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":131,"author":{"gitID":"-"},"content":"When the cursor appears, hold on to your left mouse key and drag to the left/right of the screen"},{"lineNumber":132,"author":{"gitID":"-"},"content":"according to your prefrences."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Using commands"},{"lineNumber":135,"author":{"gitID":"quentinkhoo"},"content":"This sub-section will teach you how to key in the commands to interact with"},{"lineNumber":136,"author":{"gitID":"quentinkhoo"},"content":"the Investigapptor."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":".  You can type commands (case sensitive) in the command box and"},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":"press kbd:[Enter] to execute it. +"},{"lineNumber":140,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":141,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"* *`li`* : lists all investigators"},{"lineNumber":144,"author":{"gitID":"-"},"content":"* **`ai`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* **`di`**`3` : deletes the 3rd investigator shown in the current list"},{"lineNumber":146,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":147,"author":{"gitID":"quentinkhoo"},"content":".  You can refer to the \u003c\u003cCommands, Commands\u003e\u003e section for details of each command."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":150,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":151,"author":{"gitID":"quentinkhoo"},"content":"This section introduces to you the features that are available with Investigapptor."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"//tag::calendarsection[]"},{"lineNumber":154,"author":{"gitID":"-"},"content":"[[CasesCalendar]]"},{"lineNumber":155,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Calendar View for Cases [Since v1.4]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"By default, when you start up the application, all the cases that are in the application will be"},{"lineNumber":157,"author":{"gitID":"-"},"content":"shown on the calendar as shown in the figure _\u003c\u003ccalendar1, below\u003e\u003e_."},{"lineNumber":158,"author":{"gitID":"quentinkhoo"},"content":"[[calendar1]]"},{"lineNumber":159,"author":{"gitID":"-"},"content":".Calendar Interface"},{"lineNumber":160,"author":{"gitID":"-"},"content":"image::userguide-images/calendar-1.png[width\u003d\"900\"]"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Calendar Entries"},{"lineNumber":163,"author":{"gitID":"-"},"content":"The entries in the calendar are represented in two different colours as explained"},{"lineNumber":164,"author":{"gitID":"-"},"content":"in _\u003c\u003ccolour-table\u003e\u003e_ below."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[[colour-table]]"},{"lineNumber":167,"author":{"gitID":"-"},"content":".Entry Colours"},{"lineNumber":168,"author":{"gitID":"-"},"content":"[width\u003d\"50%\",cols\u003d\"5%,\u003c20%\",options\u003d\"header\",]"},{"lineNumber":169,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":170,"author":{"gitID":"-"},"content":"|Colour |Meaning"},{"lineNumber":171,"author":{"gitID":"-"},"content":"|Red |Case has the status of `open`"},{"lineNumber":172,"author":{"gitID":"-"},"content":"|Green |Case has the status of `close`"},{"lineNumber":173,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"[[closecaseentries]]"},{"lineNumber":176,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Close Case Entries (Green)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"When the case status is `close`, the calendar will indicate an entry that spans"},{"lineNumber":178,"author":{"gitID":"-"},"content":"from its start date to its end date. For example, as shown in _\u003c\u003cgreen-entry\u003e\u003e_"},{"lineNumber":179,"author":{"gitID":"-"},"content":"below, the closed case, Project Magic has a start date of \"01/04/2018\" and end date of"},{"lineNumber":180,"author":{"gitID":"-"},"content":"\"10/04/2018\"."},{"lineNumber":181,"author":{"gitID":"-"},"content":"[[green-entry]]"},{"lineNumber":182,"author":{"gitID":"-"},"content":".Green Entry"},{"lineNumber":183,"author":{"gitID":"-"},"content":"image::userguide-images/green-entry.png[width\u003d\"500\"]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":187,"author":{"gitID":"-"},"content":"Cases with the status `close` will span from its start date to end date"},{"lineNumber":188,"author":{"gitID":"-"},"content":"in the calendar unlike \u003c\u003copencaseentries, open case entries\u003e\u003e."},{"lineNumber":189,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"[[opencaseentries]]"},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Open Case Entries (Red)"},{"lineNumber":193,"author":{"gitID":"-"},"content":"When the case status is `open`, the calendar will indicate an entry on its start date."},{"lineNumber":194,"author":{"gitID":"-"},"content":"For example, as shown in _\u003c\u003cred-entry\u003e\u003e_ below,"},{"lineNumber":195,"author":{"gitID":"-"},"content":"the open case, Project Three has a start date of \"01/04/2018\". Similarly,"},{"lineNumber":196,"author":{"gitID":"-"},"content":"for Project Two, it has a status of `open` and a start date of \"03/04/2018\"."},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[red-entry]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":".Red Entry"},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::userguide-images/red-entry.png[width\u003d\"500\"]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":203,"author":{"gitID":"-"},"content":"Cases with the status `open` will not span and only indicated on its start date, unlike"},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003c\u003cclosecaseentries, close case entries\u003e\u003e."},{"lineNumber":205,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Commands associated to Cases Calendar"},{"lineNumber":208,"author":{"gitID":"-"},"content":"Here are the case commands that will change the cases displayed on the calendar. +"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* \u003c\u003cAddCase, `addcase`\u003e\u003e: The new case that you added will be displayed as an entry on the calendar."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* \u003c\u003cDeleteCase, `deletecase`\u003e\u003e The case that you deleted will be removed from the calendar."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* \u003c\u003cEditCase, `editcase`\u003e\u003e: The case that you edited (i.e. name of the case) will be reflected on its entry on the calendar."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* \u003c\u003cFindCases, `findcases`\u003e\u003e: Only the cases whose name matches the keywords you provided will be displayed on the calendar."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* \u003c\u003cFindCaseTags, `findcasetags`\u003e\u003e: Only the cases whose tags matches the keywords you provided will be displayed on the calendar."},{"lineNumber":215,"author":{"gitID":"-"},"content":"* \u003c\u003cFindCloseCases, `findclosecases`\u003e\u003e: Only the cases with the status `close` will be displayed on the calendar."},{"lineNumber":216,"author":{"gitID":"-"},"content":"* \u003c\u003cFindOpenCases, `findopencases`\u003e\u003e: Only the cases with the status `open` will be displayed on the calendar."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* \u003c\u003cCloseCase, `close`\u003e\u003e: The case that you close will change its entry from red to green, and its entry will span from"},{"lineNumber":218,"author":{"gitID":"-"},"content":"its start date to end date."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* \u003c\u003cListCases, `listcases`\u003e\u003e: All the cases in the application will be displayed on the calendar."},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":223,"author":{"gitID":"-"},"content":"Click on the command for further information of how it works. Picture illustrations are provided."},{"lineNumber":224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":225,"author":{"gitID":"-"},"content":"//end::calendarsection[]"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Tags [Since v1.0]"},{"lineNumber":228,"author":{"gitID":"quentinkhoo"},"content":"The tagging feature allows you to add labels to each investigator or crime case."},{"lineNumber":229,"author":{"gitID":"-"},"content":"This will allow you to easily filter for certain types of investigators or crime cases."},{"lineNumber":230,"author":{"gitID":"-"},"content":"An example is shown below in _\u003c\u003cTagExample, Figure 4\u003e\u003e_."},{"lineNumber":231,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":232,"author":{"gitID":"quentinkhoo"},"content":"[[TagExample]]"},{"lineNumber":233,"author":{"gitID":"quentinkhoo"},"content":".Investigator with a tag"},{"lineNumber":234,"author":{"gitID":"-"},"content":"image::userguide-images/tag-example.PNG[width\u003d\"450\"]"},{"lineNumber":235,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":236,"author":{"gitID":"quentinkhoo"},"content":"[TIP]"},{"lineNumber":237,"author":{"gitID":"quentinkhoo"},"content":"You can use the tags to label each investigator with their field of expertise"},{"lineNumber":238,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":239,"author":{"gitID":"quentinkhoo"},"content":"// tag::commandintro[]"},{"lineNumber":240,"author":{"gitID":"quentinkhoo"},"content":"[[Commands]]"},{"lineNumber":241,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d Commands"},{"lineNumber":242,"author":{"gitID":"quentinkhoo"},"content":"This section introduces to you the commands that are available with Investigapptor."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":246,"author":{"gitID":"-"},"content":"|Command Format |Meaning |Example |Remark"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"|Upper Case |Parameters supplied by User |`add n/NAME` |`NAME` is a parameter which can be used as `add n/John Doe`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"|Square Brackets |Optional inputs |`n/NAME [t/TAG]` |`[t/TAG]` is an optional field"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"|`…`​ |Can be used multiple times |`[t/TAG]...` |Can have multiple tags: `[t/TAG1] [t/TAG2] [t/TAG3]`"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":258,"author":{"gitID":"quentinkhoo"},"content":"//end::commandintro[]"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d General Commands"},{"lineNumber":261,"author":{"gitID":"-"},"content":"To get started, here are some commands you can use to help you get the most out of Investigapptor."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"[[Help]]"},{"lineNumber":264,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Viewing help: `help` [Since v1.0]"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"You can use the `help` command to access the User Guide from Investigapptor +"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"*Format:* `help`"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":271,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":272,"author":{"gitID":"-"},"content":"Alternatively, you can find the help option by pressing kbd:[F1]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"or from the menu bar, as shown in _\u003c\u003cf1-help\u003e\u003e_."},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"[[f1-help]]"},{"lineNumber":276,"author":{"gitID":"-"},"content":".Accessing help from menu bar"},{"lineNumber":277,"author":{"gitID":"-"},"content":"image::userguide-images/help-ui.png[width\u003d\"300\"]"},{"lineNumber":278,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"// tag::setpassword[]"},{"lineNumber":281,"author":{"gitID":"quentinkhoo"},"content":"[[SetPassword]]"},{"lineNumber":282,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting a password : `setpassword` [Since v1.3]"},{"lineNumber":283,"author":{"gitID":"quentinkhoo"},"content":"You can use this command to set a new password for the Investigapptor."},{"lineNumber":284,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":286,"author":{"gitID":"quentinkhoo"},"content":"Your password must be of minimal 8 characters and not contain any spaces. +"},{"lineNumber":287,"author":{"gitID":"quentinkhoo"},"content":"[NOTE]"},{"lineNumber":288,"author":{"gitID":"quentinkhoo"},"content":"Due to security reasons, this command is not an undoable command."},{"lineNumber":289,"author":{"gitID":"quentinkhoo"},"content":"[TIP]"},{"lineNumber":290,"author":{"gitID":"quentinkhoo"},"content":"If you have accidentally added a kbd:[Space] to the back of the"},{"lineNumber":291,"author":{"gitID":"quentinkhoo"},"content":" password, Investigapptor automatically removes it for you."},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"quentinkhoo"},"content":"Format: `setpassword pw/PASSWORD` +"},{"lineNumber":294,"author":{"gitID":"-"},"content":"Alias: `sp pw/PASSWORD` +"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"*Example:*"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"[[setpassword]]"},{"lineNumber":299,"author":{"gitID":"-"},"content":".Setting a password"},{"lineNumber":300,"author":{"gitID":"-"},"content":"image::userguide-images/sp-command.png[width\u003d\"450\"]"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"quentinkhoo"},"content":"The next time you start up Investigapptor, you will be prompted with a password"},{"lineNumber":303,"author":{"gitID":"quentinkhoo"},"content":"input as shown below in _\u003c\u003cinputpassword\u003e\u003e_."},{"lineNumber":304,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":305,"author":{"gitID":"quentinkhoo"},"content":"[[inputpassword]]"},{"lineNumber":306,"author":{"gitID":"quentinkhoo"},"content":".Inputting a password"},{"lineNumber":307,"author":{"gitID":"-"},"content":"image::userguide-images/inputpassword.png[width\u003d\"450\"]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"//end::setpassword[]"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"quentinkhoo"},"content":"//tag::removepassword[]"},{"lineNumber":311,"author":{"gitID":"quentinkhoo"},"content":"[[RemovePassword]]"},{"lineNumber":312,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Removing the password : `removepassword` [Since v1.4]"},{"lineNumber":313,"author":{"gitID":"quentinkhoo"},"content":"You can use this command to remove a set password from the Investigapptor."},{"lineNumber":314,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":315,"author":{"gitID":"quentinkhoo"},"content":"[NOTE]"},{"lineNumber":316,"author":{"gitID":"quentinkhoo"},"content":"Due to security reasons, this command is not an undoable command."},{"lineNumber":317,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":318,"author":{"gitID":"quentinkhoo"},"content":"Format: `removepassword` +"},{"lineNumber":319,"author":{"gitID":"quentinkhoo"},"content":"Alias: `rp` +"},{"lineNumber":320,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":321,"author":{"gitID":"quentinkhoo"},"content":"[[removepassword]]"},{"lineNumber":322,"author":{"gitID":"quentinkhoo"},"content":".Removing a password"},{"lineNumber":323,"author":{"gitID":"-"},"content":"image::userguide-images/rp-command.png[width\u003d\"450\"]"},{"lineNumber":324,"author":{"gitID":"-"},"content":"//end::removepassword[]"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"quentinkhoo"},"content":"[[History]]"},{"lineNumber":327,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history` [Since v1.0]"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":330,"author":{"gitID":"quentinkhoo"},"content":"Format: `history` +"},{"lineNumber":331,"author":{"gitID":"quentinkhoo"},"content":"Alias: `hist`"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":334,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":335,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":336,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"[[historycommand]]"},{"lineNumber":339,"author":{"gitID":"-"},"content":".Using the `history` command"},{"lineNumber":340,"author":{"gitID":"-"},"content":"image::userguide-images/history-command.png[width\u003d\"790\"]"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":343,"author":{"gitID":"quentinkhoo"},"content":"[[Undo]]"},{"lineNumber":344,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo` [Since v1.0]"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":347,"author":{"gitID":"quentinkhoo"},"content":"Format: `undo` +"},{"lineNumber":348,"author":{"gitID":"quentinkhoo"},"content":"Alias: `u`"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":352,"author":{"gitID":"-"},"content":"Undoable commands are those commands that modify the Investigapptor\u0027s content +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"`addinvestigator`, `deleteinvestigator`, `editinvestigator` +"},{"lineNumber":354,"author":{"gitID":"-"},"content":"`addcase`, `deletecase`, `editcase`, `close` and `clear`"},{"lineNumber":355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"* *Scenario 1:*"},{"lineNumber":360,"author":{"gitID":"-"},"content":". Delete case at index 1: `deletecase 1` +"},{"lineNumber":361,"author":{"gitID":"-"},"content":". List all cases: `listcases` +"},{"lineNumber":362,"author":{"gitID":"-"},"content":". Undo: `undo` +"},{"lineNumber":363,"author":{"gitID":"-"},"content":"*Outcome:* `undo` reverses the `deletecase 1` command +"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":366,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":367,"author":{"gitID":"-"},"content":"`listcases` is NOT an undoable command. Hence, `undo` will not be applied on `listcases`."},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"* *Scenario 2:*"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":". Select case at index 1: `selectcase 1` +"},{"lineNumber":373,"author":{"gitID":"-"},"content":". List all cases: `listcases` +"},{"lineNumber":374,"author":{"gitID":"-"},"content":". Undo: `undo` +"},{"lineNumber":375,"author":{"gitID":"-"},"content":"*Outcome:* `undo` command fails as no undoable commands were executed"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"* *Scenario 3:*"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":". Delete case at index 1: `deletecase 1` +"},{"lineNumber":380,"author":{"gitID":"-"},"content":". Remove all investigators and cases: `clear` +"},{"lineNumber":381,"author":{"gitID":"-"},"content":". Undo: `undo` +"},{"lineNumber":382,"author":{"gitID":"-"},"content":"*Outcome:* reverses the `clear` command +"},{"lineNumber":383,"author":{"gitID":"-"},"content":". Undo: `undo` +"},{"lineNumber":384,"author":{"gitID":"-"},"content":"*Outcome:* reverses the `deletecase 1` command +"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"quentinkhoo"},"content":"[[Redo]]"},{"lineNumber":387,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo` [Since v1.0]"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":390,"author":{"gitID":"quentinkhoo"},"content":"Format: `redo` +"},{"lineNumber":391,"author":{"gitID":"quentinkhoo"},"content":"Alias: `r`"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"* *Scenario 1:*"},{"lineNumber":396,"author":{"gitID":"-"},"content":". Delete case at index 1: `deletecase 1` +"},{"lineNumber":397,"author":{"gitID":"-"},"content":". Undo: `undo` +"},{"lineNumber":398,"author":{"gitID":"-"},"content":"*Outcome:* `undo` reverses the `deletecase 1` command"},{"lineNumber":399,"author":{"gitID":"-"},"content":". Redo: `redo` +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"*Outcome:* `redo` reapplies the `deletecase 1` command +"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"* *Scenario 2:*"},{"lineNumber":403,"author":{"gitID":"-"},"content":". Delete case at index 1: `deletecase 1` +"},{"lineNumber":404,"author":{"gitID":"-"},"content":". Redo: `redo` +"},{"lineNumber":405,"author":{"gitID":"-"},"content":"*Outcome:* `redo` command fails as no `undo` commands were executed previously +"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"* *Scenario 3:*"},{"lineNumber":408,"author":{"gitID":"-"},"content":". Delete case at index 1: `deletecase 1` +"},{"lineNumber":409,"author":{"gitID":"-"},"content":". Remove all investigators and cases: `clear` +"},{"lineNumber":410,"author":{"gitID":"-"},"content":". Undo: `undo` +"},{"lineNumber":411,"author":{"gitID":"-"},"content":"*Outcome:* `undo` reverses the `clear` command"},{"lineNumber":412,"author":{"gitID":"-"},"content":". Undo: `undo` +"},{"lineNumber":413,"author":{"gitID":"-"},"content":"*Outcome:* `undo` reverses the `deletecase 1` command"},{"lineNumber":414,"author":{"gitID":"-"},"content":". Redo: `redo` +"},{"lineNumber":415,"author":{"gitID":"-"},"content":"*Outcome:* `redo` reapplies the `deletecase 1` command +"},{"lineNumber":416,"author":{"gitID":"-"},"content":". Redo: `redo` +"},{"lineNumber":417,"author":{"gitID":"-"},"content":"*Outcome:* `redo` reapplies the `clear` command +"},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"//tag::clear[]"},{"lineNumber":422,"author":{"gitID":"-"},"content":"[[Clear]]"},{"lineNumber":423,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear` [Since v1.0]"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":426,"author":{"gitID":"quentinkhoo"},"content":"Format: `clear` +"},{"lineNumber":427,"author":{"gitID":"quentinkhoo"},"content":"Alias: `c`"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example of how the Investigapptor"},{"lineNumber":430,"author":{"gitID":"-"},"content":"will look like after you\u0027ve executed the `clear` command."},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"[[before-clear-command]]"},{"lineNumber":433,"author":{"gitID":"-"},"content":".Before `clear` command"},{"lineNumber":434,"author":{"gitID":"-"},"content":"image::userguide-images/before-clear-command.png[width\u003d\"790\"]"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"[[after-clear-command]]"},{"lineNumber":437,"author":{"gitID":"-"},"content":".After `clear` command"},{"lineNumber":438,"author":{"gitID":"-"},"content":"image::userguide-images/after-clear-command.png[width\u003d\"790\"]"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":441,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":442,"author":{"gitID":"-"},"content":"If you accidentally keyed in this command, enter the `undo` command to revert back"},{"lineNumber":443,"author":{"gitID":"-"},"content":"the data."},{"lineNumber":444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":445,"author":{"gitID":"-"},"content":"// end::clear[]"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"[[Exit]]"},{"lineNumber":448,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit` [Since v1.0]"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":451,"author":{"gitID":"quentinkhoo"},"content":"Format: `exit` +"},{"lineNumber":452,"author":{"gitID":"quentinkhoo"},"content":"Alias: `ex`"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"//tag::backup[]"},{"lineNumber":455,"author":{"gitID":"-"},"content":"[[Backup]]"},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Backing up data : `backup`"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"To save a snapshot of the current data in the Investigapptor before you make major changes, you use a the backup command to create"},{"lineNumber":459,"author":{"gitID":"-"},"content":"a new xml file of the current state. The new save file will be placed in the data folder. +"},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":"Format: `backup \"Filename\"` +"},{"lineNumber":462,"author":{"gitID":"-"},"content":"Alias: `bu`"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":465,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":466,"author":{"gitID":"-"},"content":"The data folder is located in the same directory as your investigapptor.jar +"},{"lineNumber":467,"author":{"gitID":"-"},"content":"Saving the xml using the name \"Investigator\" will only overwrite the currenty save file and not create a new file."},{"lineNumber":468,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":471,"author":{"gitID":"-"},"content":"[[backup-img]]"},{"lineNumber":472,"author":{"gitID":"-"},"content":".`backup` command"},{"lineNumber":473,"author":{"gitID":"-"},"content":"image::userguide-images/backup.png[width\u003d\"450\"]"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples: +"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"* `backup February` +"},{"lineNumber":478,"author":{"gitID":"-"},"content":"Creates a copy of the data with the name `February` in `root/data` folder"},{"lineNumber":479,"author":{"gitID":"-"},"content":"* `backup 02012018` +"},{"lineNumber":480,"author":{"gitID":"-"},"content":"Creates a copy of the data with the name `02012018` in `root/data` folder"},{"lineNumber":481,"author":{"gitID":"-"},"content":"* `bu 03Mar2018` +"},{"lineNumber":482,"author":{"gitID":"-"},"content":"Creates a copy of the data with the name `March3rd` in `root/data` folder"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"//end::backup[]"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Investigator Commands"},{"lineNumber":487,"author":{"gitID":"-"},"content":"These commands will help you to manage contact details of investigators easily and to view cases they have been assigned. +"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"//tag::addinv[]"},{"lineNumber":490,"author":{"gitID":"-"},"content":"[[AddInv]]"},{"lineNumber":491,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Adding an investigator: `addinvestigator` [Since v1.3]"},{"lineNumber":492,"author":{"gitID":"-"},"content":"You can add an investigator to the application so that the cases can be assigned to him/her."},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"Format: `addinvestigator n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS r/RANK [t/TAG]...` +"},{"lineNumber":495,"author":{"gitID":"-"},"content":"Alias: `ai`"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":498,"author":{"gitID":"-"},"content":"[[addinvestigator]]"},{"lineNumber":499,"author":{"gitID":"-"},"content":".Adding an investigator"},{"lineNumber":500,"author":{"gitID":"-"},"content":"image::userguide-images/ai-command.png[width\u003d\"790\"]"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples: +"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"* `addinvestigator n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/1 t/newcomer`"},{"lineNumber":505,"author":{"gitID":"-"},"content":"* `ai n/Tome Lee p/94727341 e/Tom@gmail.com a/323, Baker Street, #01-03 r/1 t/Rookie`"},{"lineNumber":506,"author":{"gitID":"-"},"content":"* `ai n/Lim Choo t/teamC e/choochoo@example.com a/Bedok Street, Block 789 r/5 p/1234567`"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":509,"author":{"gitID":"-"},"content":"An investigator can have any number of tags (including 0) +"},{"lineNumber":510,"author":{"gitID":"-"},"content":"Tags are alphanumeric without spaces +"},{"lineNumber":511,"author":{"gitID":"-"},"content":"Ranks ranges from 1 to 5 (Constable ,Sergeant, Inspector, Detective, Captain)"},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"//end::addinv[]"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"//tag::listinv[]"},{"lineNumber":516,"author":{"gitID":"-"},"content":"[[ListInv]]"},{"lineNumber":517,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Listing all investigators : `listinvestigators` [Since v1.2]"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"You can view all the investigators in the Investigapptor. +"},{"lineNumber":520,"author":{"gitID":"-"},"content":"Format: `listinvestigators` +"},{"lineNumber":521,"author":{"gitID":"-"},"content":"Alias: `li`"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":524,"author":{"gitID":"-"},"content":"[[listinvestigators]]"},{"lineNumber":525,"author":{"gitID":"-"},"content":".Listing of all investigators"},{"lineNumber":526,"author":{"gitID":"-"},"content":"image::userguide-images/li-command.png[width\u003d\"450\"]"},{"lineNumber":527,"author":{"gitID":"-"},"content":"//end::listinv[]"},{"lineNumber":528,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"//tag::editinv[]"},{"lineNumber":530,"author":{"gitID":"-"},"content":"[[EditInv]]"},{"lineNumber":531,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Editing an investigator : `editinvestigator` [Since v1.3]"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"You can edit an existing information of an existing investigator in the Investigapptor. +"},{"lineNumber":534,"author":{"gitID":"-"},"content":"Format: `editinvestigator INVESTIGATOR_INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/RANK] [t/TAG]...` +"},{"lineNumber":535,"author":{"gitID":"-"},"content":"Alias: `ei`"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":538,"author":{"gitID":"-"},"content":"Edits the investigator at the specified `INVESTIGATOR_INDEX`. +"},{"lineNumber":539,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the last listing of investigators. +"},{"lineNumber":540,"author":{"gitID":"-"},"content":"Existing values will be updated to the input values."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":543,"author":{"gitID":"-"},"content":"The index *must be a positive integer* 1, 2, 3, ... +"},{"lineNumber":544,"author":{"gitID":"-"},"content":"At least one of the optional fields must be provided. +"},{"lineNumber":545,"author":{"gitID":"-"},"content":"When editing tags, the existing tags of the person will be removed (i.e adding of tags is not cumulative)."},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":548,"author":{"gitID":"-"},"content":"You can remove all the investigator\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"To change a investigator\u0027s detail, follow the steps below"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":" . Select the investigator you want to edit by using the index as show below in \u003c\u003ceditinvestigator\u003e\u003e."},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":" . Use the prefix to indicate which details you want to edit, e.g `n/John` to change the name to John."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"[[editinvestigator]]"},{"lineNumber":559,"author":{"gitID":"-"},"content":".Using the Edit Investigator Command"},{"lineNumber":560,"author":{"gitID":"-"},"content":"image::userguide-images/ei-command1.png[width\u003d\"450\"]"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"You can observe that the details of the investigator has be change in both the panel list and details panel."},{"lineNumber":563,"author":{"gitID":"-"},"content":"The result box will also print the new investigator details as show in \u003c\u003ceditinvestigator2\u003e\u003e."},{"lineNumber":564,"author":{"gitID":"-"},"content":"[[editinvestigator2]]"},{"lineNumber":565,"author":{"gitID":"-"},"content":".Outcome"},{"lineNumber":566,"author":{"gitID":"-"},"content":"image::userguide-images/ei-command2.png[width\u003d\"450\"]"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"* `editinvestigator 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":571,"author":{"gitID":"pkaijun"},"content":"Edits the phone number and email address of the 1st investigator to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":572,"author":{"gitID":"-"},"content":"* `ei 2 n/Betsy Crower t/` +"},{"lineNumber":573,"author":{"gitID":"pkaijun"},"content":"Edits the name of the 2nd investigator to be `Betsy Crower` and clears all existing tags."},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"//end::editinv[]"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"//tag::findinv[]"},{"lineNumber":578,"author":{"gitID":"-"},"content":"[[FindInv]]"},{"lineNumber":579,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Locating investigators by name: `findinvestigators` [Since v1.3]"},{"lineNumber":580,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"You can find investigators whose names contain any of your given keywords. +"},{"lineNumber":582,"author":{"gitID":"-"},"content":"Format: `findinvestigators KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":583,"author":{"gitID":"-"},"content":"Alias: `fi`"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":586,"author":{"gitID":"-"},"content":"The search is case insensitive. e.g `hans` will match `Hans`. +"},{"lineNumber":587,"author":{"gitID":"-"},"content":"The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`. +"},{"lineNumber":588,"author":{"gitID":"-"},"content":"Only the name is searched. +"},{"lineNumber":589,"author":{"gitID":"-"},"content":"Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":592,"author":{"gitID":"-"},"content":"Only full words will be matched e.g. `Han` will not match `Hans`."},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":595,"author":{"gitID":"-"},"content":"[[findinvestigators]]"},{"lineNumber":596,"author":{"gitID":"-"},"content":".Finding investigators by its name"},{"lineNumber":597,"author":{"gitID":"-"},"content":"image::userguide-images/fi-command.png[width\u003d\"450\"]"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"* `findinvestigators John` +"},{"lineNumber":602,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":603,"author":{"gitID":"-"},"content":"* `fi Betsy Tim John` +"},{"lineNumber":604,"author":{"gitID":"quentinkhoo"},"content":"Returns any investigators having names `Betsy`, `Tim`, or `John`"},{"lineNumber":605,"author":{"gitID":"-"},"content":"//end::findinv[]"},{"lineNumber":606,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"//tag::findinvtags[]"},{"lineNumber":608,"author":{"gitID":"-"},"content":"[[FindInvTags]]"},{"lineNumber":609,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Locating investigators by tags: `findinvestigatortags` [Since v1.2]"},{"lineNumber":610,"author":{"gitID":"-"},"content":"You can find investigators whose tags contain any of your given keywords. +"},{"lineNumber":611,"author":{"gitID":"-"},"content":"Format: `findinvestigatortags KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":612,"author":{"gitID":"-"},"content":"Alias: `fit`"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":615,"author":{"gitID":"-"},"content":"The search is case insensitive. e.g `teamA` will match `teama`. +"},{"lineNumber":616,"author":{"gitID":"-"},"content":"Only the tags are searched. +"},{"lineNumber":617,"author":{"gitID":"-"},"content":"Investigators matching at least one keyword will be returned (i.e. `OR` search)"},{"lineNumber":618,"author":{"gitID":"-"},"content":"(e.g. `teamA teamB` will return investigators that contains the tag \u0027teamA\u0027 or \u0027teamB\u0027)."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":621,"author":{"gitID":"-"},"content":"Only full words will be matched e.g. `teamA` will not match `teamyA`."},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":624,"author":{"gitID":"-"},"content":"[[findinvestigatortags]]"},{"lineNumber":625,"author":{"gitID":"-"},"content":".Finding investigators by its tags"},{"lineNumber":626,"author":{"gitID":"-"},"content":"image::userguide-images/fit-command.png[width\u003d\"450\"]"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"* `findinvestigatortags teamA` +"},{"lineNumber":631,"author":{"gitID":"-"},"content":"Returns investigator(s) with tag `teamA`"},{"lineNumber":632,"author":{"gitID":"-"},"content":"* `findinvestigatortags teamA new teamb` +"},{"lineNumber":633,"author":{"gitID":"-"},"content":"Returns investigator(s) having tags `teamA`, `new`, OR `teamb`"},{"lineNumber":634,"author":{"gitID":"-"},"content":"* `fit teamc newbie a` +"},{"lineNumber":635,"author":{"gitID":"-"},"content":"Returns investigator(s) having tags `teamc`, `newbie`, OR `a`"},{"lineNumber":636,"author":{"gitID":"-"},"content":"//end::findinvtags[]"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"//tag::deleteinv[]"},{"lineNumber":639,"author":{"gitID":"-"},"content":"[[DelInv]]"},{"lineNumber":640,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Deleting an investigator : `deleteinvestigator` [Since v1.3]"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"You can delete a specified investigator from Investigapptor. +"},{"lineNumber":643,"author":{"gitID":"-"},"content":"Format: `deleteinvestigator INVESTIGATOR_INDEX` +"},{"lineNumber":644,"author":{"gitID":"-"},"content":"Alias: `di`"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":647,"author":{"gitID":"-"},"content":"Deletes the investigator at the specified `INVESTIGATOR_INDEX`. +"},{"lineNumber":648,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the most recent listing."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":651,"author":{"gitID":"-"},"content":"The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"You can identify and delete the investigator by looking at their `INDEX` at the top left of their card as show in the"},{"lineNumber":654,"author":{"gitID":"-"},"content":"diagram \u003c\u003cdeleteinv-index, below\u003e\u003e."},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"[[deleteinv-index]]"},{"lineNumber":657,"author":{"gitID":"-"},"content":".Investigator Index"},{"lineNumber":658,"author":{"gitID":"-"},"content":"image::userguide-images/di-command-index.png[width\u003d\"320\"]"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":661,"author":{"gitID":"-"},"content":"[[deleteinv]]"},{"lineNumber":662,"author":{"gitID":"-"},"content":".Deleting an investigator"},{"lineNumber":663,"author":{"gitID":"-"},"content":"image::userguide-images/di-command.png[width\u003d\"500\"]"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"* `listinvestigators` +"},{"lineNumber":668,"author":{"gitID":"-"},"content":"`deleteinvestigator 2` +"},{"lineNumber":669,"author":{"gitID":"pkaijun"},"content":"Deletes the 2nd investigator in the address book."},{"lineNumber":670,"author":{"gitID":"-"},"content":"* `findinvestigators Betsy` +"},{"lineNumber":671,"author":{"gitID":"-"},"content":"`di 1` +"},{"lineNumber":672,"author":{"gitID":"-"},"content":"Deletes the 1st investigator in the results of the `findinvestigators` command."},{"lineNumber":673,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":676,"author":{"gitID":"-"},"content":"If the investigator you are deleting is currently in charge of a case, it cannot be deleted."},{"lineNumber":677,"author":{"gitID":"-"},"content":"The case should be reassigned to another investigator before you delete the selected investigator."},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"//end::deleteinv[]"},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"//tag::selectinv[]"},{"lineNumber":683,"author":{"gitID":"-"},"content":"[[SelInv]]"},{"lineNumber":684,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Selecting an investigator : `selectinvestigator` [Coming in v1.5]"},{"lineNumber":685,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last investigator listing. +"},{"lineNumber":687,"author":{"gitID":"-"},"content":"Format: `selectinvestigator INVESTIGATOR_INDEX` +"},{"lineNumber":688,"author":{"gitID":"-"},"content":"Alias: `si`"},{"lineNumber":689,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":691,"author":{"gitID":"-"},"content":"Selects the investigator and loads the details of the investigator at the specified `INDEX`. +"},{"lineNumber":692,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the most recent listing."},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":695,"author":{"gitID":"-"},"content":"The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":696,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":698,"author":{"gitID":"-"},"content":"[[selectinv]]"},{"lineNumber":699,"author":{"gitID":"-"},"content":".Selecting an investigator"},{"lineNumber":700,"author":{"gitID":"-"},"content":"image::userguide-images/si-command.png[width\u003d\"500\"]"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":"* `listinvestigators` +"},{"lineNumber":705,"author":{"gitID":"-"},"content":"`selectinvestigator 2` +"},{"lineNumber":706,"author":{"gitID":"-"},"content":"Selects the 2nd investigator in the results of the `listinvestigators` command."},{"lineNumber":707,"author":{"gitID":"-"},"content":"* `findinvestigators Betsy` +"},{"lineNumber":708,"author":{"gitID":"-"},"content":"`selectinvestigator 1` +"},{"lineNumber":709,"author":{"gitID":"-"},"content":"Selects the 1st investigator in the results of the `findinvestigator` command."},{"lineNumber":710,"author":{"gitID":"-"},"content":"* `selectinvestigator 3` +"},{"lineNumber":711,"author":{"gitID":"pkaijun"},"content":"Selects the 3rd person in the listed panel list."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"//end::selectinv[]"},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Case Commands"},{"lineNumber":716,"author":{"gitID":"-"},"content":"Managing lots of cases can be daunting but we\u0027ve got you covered! Here are some commands you can use to make the process a simple and pleasant one. +"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"//tag::addcase[]"},{"lineNumber":719,"author":{"gitID":"-"},"content":"[[AddCase]]"},{"lineNumber":720,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a case: `addcase` [Since v1.1]"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"The first step to managing your cases is to add them to the application along with their details. +"},{"lineNumber":723,"author":{"gitID":"-"},"content":"*Format:* `addcase n/CASE_NAME d/DESCRIPTION i/INVESTIGATOR_INDEX s/START_DATE [t/TAG]...` +"},{"lineNumber":724,"author":{"gitID":"-"},"content":"*Alias:* `ac`"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":727,"author":{"gitID":"-"},"content":"Tags are optional, but you can add as many as you like to a case to help you organize better."},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"[[addcase]]"},{"lineNumber":732,"author":{"gitID":"-"},"content":".Adding a case"},{"lineNumber":733,"author":{"gitID":"-"},"content":"image::userguide-images/ac-command.png[width\u003d\"800\"]"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"The following are some command examples that you can try out:"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"* `addcase n/Geylang Rape d/Rape at geylang i/1 s/12/05/1994 t/Rape t/prostitution`"},{"lineNumber":738,"author":{"gitID":"-"},"content":"* `addcase n/Bedok Riot i/3 s/12/05/2017 d/Riot at bedok 85 t/Rape t/prostitution`"},{"lineNumber":739,"author":{"gitID":"-"},"content":"* `ac n/Geylang Rape d/Rape at geylang i/1 s/12/05/1994`"},{"lineNumber":740,"author":{"gitID":"-"},"content":"//end::addcase[]"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"quentinkhoo"},"content":"//tag::listcases[]"},{"lineNumber":743,"author":{"gitID":"quentinkhoo"},"content":"[[ListCases]]"},{"lineNumber":744,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Listing all cases : `listcases` [Since v1.2]"},{"lineNumber":745,"author":{"gitID":"-"},"content":"This command will show you the list of all cases that have been added to the Investigapptor. +"},{"lineNumber":746,"author":{"gitID":"-"},"content":"Format: `listcases` +"},{"lineNumber":747,"author":{"gitID":"quentinkhoo"},"content":"Alias: `lc`"},{"lineNumber":748,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":749,"author":{"gitID":"quentinkhoo"},"content":"[NOTE]"},{"lineNumber":750,"author":{"gitID":"-"},"content":"Running this command will automatically help you toggle the panel tab"},{"lineNumber":751,"author":{"gitID":"quentinkhoo"},"content":"to the case tab. +"},{"lineNumber":752,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example."},{"lineNumber":754,"author":{"gitID":"quentinkhoo"},"content":"[[listcases]]"},{"lineNumber":755,"author":{"gitID":"quentinkhoo"},"content":".Listing cases"},{"lineNumber":756,"author":{"gitID":"-"},"content":"image::userguide-images/lc-command.png[width\u003d\"450\"]"},{"lineNumber":757,"author":{"gitID":"quentinkhoo"},"content":"//end::listcases[]"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"//tag::editcase[]"},{"lineNumber":760,"author":{"gitID":"-"},"content":"[[EditCase]]"},{"lineNumber":761,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a case: `editcase` [Since v1.4]"},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"You can use this command to update case details or to re-assign a case to another investigator. Edit an existing case in the application by specifying the `CASE_INDEX` and entering the attributes that you wish to modify. +"},{"lineNumber":764,"author":{"gitID":"-"},"content":"*Format:* `editcase CASE_INDEX [n/NAME] [d/DESCRIPTION] [i/INVESTIGATOR_INDEX] [s/STARTDATE] [t/TAG]...` +"},{"lineNumber":765,"author":{"gitID":"-"},"content":"*Alias:* `ec`"},{"lineNumber":766,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":768,"author":{"gitID":"-"},"content":"The `CASE_INDEX` refers to the index number shown in the last listing of cases. +"},{"lineNumber":769,"author":{"gitID":"-"},"content":"The `INVESTIGATOR_INDEX` refers to the index number shown in the last listing of investigators. +"},{"lineNumber":770,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":772,"author":{"gitID":"-"},"content":"At least one of the optional fields must be provided. +"},{"lineNumber":773,"author":{"gitID":"-"},"content":"The index *must be a positive integer* 1, 2, 3, ... +"},{"lineNumber":774,"author":{"gitID":"-"},"content":"When editing tags, the existing tags of the case will be replaced by the new tags entered i.e adding of tags is not cumulative."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":777,"author":{"gitID":"-"},"content":"To help you find the index of the case that you want to edit, you can use the `findcases` command before using the `editcase` command to narrow the number of cases displayed in the listing. +"},{"lineNumber":778,"author":{"gitID":"-"},"content":"You can remove all the investigator\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":779,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example."},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"quentinkhoo"},"content":"[[editcase1]]"},{"lineNumber":783,"author":{"gitID":"quentinkhoo"},"content":".Editing Case"},{"lineNumber":784,"author":{"gitID":"-"},"content":"image::userguide-images/ec-command1.png[width\u003d\"400\"]"},{"lineNumber":785,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":786,"author":{"gitID":"quentinkhoo"},"content":"[[editcase2]]"},{"lineNumber":787,"author":{"gitID":"quentinkhoo"},"content":".Result"},{"lineNumber":788,"author":{"gitID":"-"},"content":"image::userguide-images/ec-command2.png[width\u003d\"400\"]"},{"lineNumber":789,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":791,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"* `editcase 1 d/some description i/1` +"},{"lineNumber":793,"author":{"gitID":"-"},"content":"Edits the description and investigator of the 1st case to be `some description` and the 1st investigator in the most recent listing of investigators respectively."},{"lineNumber":794,"author":{"gitID":"-"},"content":"* `ec 2 i/3 t/` +"},{"lineNumber":795,"author":{"gitID":"-"},"content":"Changes the investigator of the 2nd case to the 3rd investigator in the most recent listing of investigators, and clears all existing tags."},{"lineNumber":796,"author":{"gitID":"-"},"content":"//end::editcase[]"},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"//tag::findcasesname[]"},{"lineNumber":799,"author":{"gitID":"-"},"content":"[[FindCases]]"},{"lineNumber":800,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Locating cases by name: `findcases` [Since v1.3]"},{"lineNumber":801,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"To help you get the details you need faster, you can use this command. You can find cases whose names contain any of your given keywords. +"},{"lineNumber":803,"author":{"gitID":"-"},"content":"Format: `findcases KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":804,"author":{"gitID":"-"},"content":"Alias: `fc`"},{"lineNumber":805,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":807,"author":{"gitID":"-"},"content":"The search is case insensitive. e.g `project` will match `Project` +"},{"lineNumber":808,"author":{"gitID":"-"},"content":"The order of the keywords does not matter. e.g. `Project Magic` will match `Magic Project` +"},{"lineNumber":809,"author":{"gitID":"-"},"content":"You can only search for case names. e.g. `Stranger Danger` [Name] is valid `fraud` [Tag] is not valid +"},{"lineNumber":810,"author":{"gitID":"-"},"content":"Case matching at least one keyword will be returned  (i.e. `OR` search). e.g. `Stranger Danger` will return `Stranger Things`, `Danger Lightning`"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":813,"author":{"gitID":"-"},"content":"Only full words will be matched e.g. You cannot type `Danger` to search for names with the word `Dangerous` +"},{"lineNumber":814,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example."},{"lineNumber":816,"author":{"gitID":"-"},"content":"[[findcases]]"},{"lineNumber":817,"author":{"gitID":"-"},"content":".Finding cases by its name (Panel List)"},{"lineNumber":818,"author":{"gitID":"-"},"content":"image::userguide-images/fc-command.png[width\u003d\"350\"]"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"[[findcases-calendar]]"},{"lineNumber":821,"author":{"gitID":"-"},"content":".Finding cases by its name (Calendar View)"},{"lineNumber":822,"author":{"gitID":"-"},"content":"image::userguide-images/fc-command-calendar.png[width\u003d\"350\"]"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":825,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"* `findcases SPF` +"},{"lineNumber":827,"author":{"gitID":"quentinkhoo"},"content":"Returns `SPF Murder` and `SPF rape`"},{"lineNumber":828,"author":{"gitID":"-"},"content":"* `findcases murder rape arson` +"},{"lineNumber":829,"author":{"gitID":"quentinkhoo"},"content":"Returns any cases having names `murder`, `rape`, or `arson`"},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"You can refer to \u003c\u003cCasesCalendar, Cases Calendar Section\u003e\u003e for the guide to the Cases\u0027 Calendar"},{"lineNumber":832,"author":{"gitID":"-"},"content":"should you require more information about it."},{"lineNumber":833,"author":{"gitID":"-"},"content":"//end::findcasesname[]"},{"lineNumber":834,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":"//tag::findcasetags[]"},{"lineNumber":836,"author":{"gitID":"-"},"content":"[[FindCaseTags]]"},{"lineNumber":837,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Locating cases by tags: `findcasetags` [Since v1.3]"},{"lineNumber":838,"author":{"gitID":"-"},"content":"You can find cases whose tags contain any of your given keywords. +"},{"lineNumber":839,"author":{"gitID":"-"},"content":"Format: `findcasetags KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":840,"author":{"gitID":"-"},"content":"Alias: `fct`"},{"lineNumber":841,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":843,"author":{"gitID":"-"},"content":"The search is case insensitive. e.g `homicide` will match `Homicide` +"},{"lineNumber":844,"author":{"gitID":"-"},"content":"Only the tags are searched. +"},{"lineNumber":845,"author":{"gitID":"-"},"content":"Cases matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":846,"author":{"gitID":"-"},"content":"e.g. `murder robbery` will return cases that contains the tag \u0027murder\u0027 or \u0027robbery\u0027"},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":849,"author":{"gitID":"-"},"content":"Only full words will be matched e.g. `homicide` will not match `homicidey`"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example."},{"lineNumber":852,"author":{"gitID":"-"},"content":"[[findcasetags]]"},{"lineNumber":853,"author":{"gitID":"-"},"content":".Finding cases by its tags"},{"lineNumber":854,"author":{"gitID":"-"},"content":"image::userguide-images/fct-command.png[width\u003d\"450\"]"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"[[findcasetags-calendar]]"},{"lineNumber":857,"author":{"gitID":"-"},"content":".Finding cases by its tags (Calendar View)"},{"lineNumber":858,"author":{"gitID":"-"},"content":"image::userguide-images/fct-command-calendar.png[width\u003d\"450\"]"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"* `findcasetags murder` +"},{"lineNumber":863,"author":{"gitID":"-"},"content":"Returns case(s) with tag `murder`"},{"lineNumber":864,"author":{"gitID":"-"},"content":"* `findcasetags murder homicide robbery` +"},{"lineNumber":865,"author":{"gitID":"-"},"content":"Returns case(s) having tags `murder`, `homicide`, OR `robbery`"},{"lineNumber":866,"author":{"gitID":"-"},"content":"* `fct murder supernatural a` +"},{"lineNumber":867,"author":{"gitID":"-"},"content":"Returns case(s) having tags `murder`, `supernatural`, OR `a`"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"You can refer to \u003c\u003cCasesCalendar, Cases Calendar Section\u003e\u003e for the guide to the Cases\u0027 Calendar"},{"lineNumber":870,"author":{"gitID":"-"},"content":"should you require more information about it."},{"lineNumber":871,"author":{"gitID":"-"},"content":"//end::findcasetags[]"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"-"},"content":"//tag::findclosecases[]"},{"lineNumber":874,"author":{"gitID":"-"},"content":"[[FindCloseCases]]"},{"lineNumber":875,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating cases by tags: `findclosecases` [Since v1.5rc]"},{"lineNumber":876,"author":{"gitID":"-"},"content":"You can find cases whose status is `close`. +"},{"lineNumber":877,"author":{"gitID":"-"},"content":"Format: `findclosecases` +"},{"lineNumber":878,"author":{"gitID":"-"},"content":"Alias: `fcc`"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example of how the Investigapptor"},{"lineNumber":881,"author":{"gitID":"-"},"content":"will look like after you\u0027ve executed the `findclosecases` command."},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"[[all-cases-displayed]]"},{"lineNumber":884,"author":{"gitID":"-"},"content":".Default interface displays all cases"},{"lineNumber":885,"author":{"gitID":"-"},"content":"image::userguide-images/all-cases-displayed.png[width\u003d\"800\"]"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"[[findclosecases]]"},{"lineNumber":888,"author":{"gitID":"-"},"content":".After `findclosecases` command"},{"lineNumber":889,"author":{"gitID":"-"},"content":"image::userguide-images/fcc-command.png[width\u003d\"800\"]"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"* `findclosecases` +"},{"lineNumber":894,"author":{"gitID":"-"},"content":"Returns case(s) with status `close`"},{"lineNumber":895,"author":{"gitID":"-"},"content":"* `fcc` +"},{"lineNumber":896,"author":{"gitID":"-"},"content":"Returns case(s) with status `close`"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"You can refer to \u003c\u003cCasesCalendar, Cases Calendar Section\u003e\u003e for the guide to the Cases\u0027 Calendar"},{"lineNumber":899,"author":{"gitID":"-"},"content":"should you require more information about it."},{"lineNumber":900,"author":{"gitID":"-"},"content":"//end::findclosecases[]"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"//tag::findopencases[]"},{"lineNumber":903,"author":{"gitID":"-"},"content":"[[FindOpenCases]]"},{"lineNumber":904,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating cases by tags: `findopencases` [Since v1.5rc]"},{"lineNumber":905,"author":{"gitID":"-"},"content":"You can find cases whose status is `open`. +"},{"lineNumber":906,"author":{"gitID":"-"},"content":"Format: `findopencases` +"},{"lineNumber":907,"author":{"gitID":"-"},"content":"Alias: `foc`"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example of how the Investigapptor"},{"lineNumber":910,"author":{"gitID":"-"},"content":"will look like after you\u0027ve executed the `findopencases` command."},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"[[all-cases-displayed]]"},{"lineNumber":913,"author":{"gitID":"-"},"content":".Default interface displays all cases"},{"lineNumber":914,"author":{"gitID":"-"},"content":"image::userguide-images/all-cases-displayed.png[width\u003d\"800\"]"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"[[findopencases]]"},{"lineNumber":917,"author":{"gitID":"-"},"content":".After `findopencases` command"},{"lineNumber":918,"author":{"gitID":"-"},"content":"image::userguide-images/foc-command.png[width\u003d\"800\"]"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"* `findopencases` +"},{"lineNumber":923,"author":{"gitID":"-"},"content":"Returns case(s) with status `open`"},{"lineNumber":924,"author":{"gitID":"-"},"content":"* `foc` +"},{"lineNumber":925,"author":{"gitID":"-"},"content":"Returns case(s) with status `open`"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"You can refer to \u003c\u003cCasesCalendar, Cases Calendar Section\u003e\u003e for the guide to the Cases\u0027 Calendar"},{"lineNumber":928,"author":{"gitID":"-"},"content":"should you require more information about it."},{"lineNumber":929,"author":{"gitID":"-"},"content":"//end::findopencases[]"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"//tag::closecase[]"},{"lineNumber":932,"author":{"gitID":"-"},"content":"[[CloseCase]]"},{"lineNumber":933,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Close a case : `close` [Since v1.3]"},{"lineNumber":934,"author":{"gitID":"-"},"content":"You can close the case that is identified by the index number used in the last case listing. +"},{"lineNumber":935,"author":{"gitID":"-"},"content":"Format: `close CASE_INDEX` +"},{"lineNumber":936,"author":{"gitID":"-"},"content":"Alias: `cl`"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":939,"author":{"gitID":"-"},"content":"Closes the case by updating the status of the case from `open` to `close` at the specified `CASE_INDEX`."},{"lineNumber":940,"author":{"gitID":"-"},"content":"The index refers to the index number shown in the most recent listing. +"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":943,"author":{"gitID":"-"},"content":"The index *must be a positive integer* `1, 2, 3, ...` +"},{"lineNumber":944,"author":{"gitID":"-"},"content":"This command is only applied to cases with the status `open`. It will not be allowed on cases"},{"lineNumber":945,"author":{"gitID":"-"},"content":"with the status `close`."},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example of how the Investigapptor"},{"lineNumber":948,"author":{"gitID":"-"},"content":"will look like after you\u0027ve executed the `close` command."},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"[[closecase-1]]"},{"lineNumber":951,"author":{"gitID":"-"},"content":".Before `close` command"},{"lineNumber":952,"author":{"gitID":"-"},"content":"image::userguide-images/close-command-1.png[width\u003d\"800\"]"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"[[closecase-2]]"},{"lineNumber":955,"author":{"gitID":"-"},"content":".After `close` command"},{"lineNumber":956,"author":{"gitID":"-"},"content":"image::userguide-images/close-command-2.png[width\u003d\"800\"]"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"* `listcases` +"},{"lineNumber":961,"author":{"gitID":"-"},"content":"`close 2` +"},{"lineNumber":962,"author":{"gitID":"-"},"content":"Closes the 2nd case in the results of the `listcases` command."},{"lineNumber":963,"author":{"gitID":"-"},"content":"* `findcases murder` +"},{"lineNumber":964,"author":{"gitID":"-"},"content":"`close 1` +"},{"lineNumber":965,"author":{"gitID":"-"},"content":"Closes the 1st case in the results of the `findcases` command."},{"lineNumber":966,"author":{"gitID":"-"},"content":"* `cl 3` +"},{"lineNumber":967,"author":{"gitID":"-"},"content":"Closes the 3rd case in the listed panel list case."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"You can refer to \u003c\u003cCasesCalendar, Cases Calendar Section\u003e\u003e for the guide to the Cases\u0027 Calendar should you require more information about it."},{"lineNumber":970,"author":{"gitID":"-"},"content":"//end::closecase[]"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"//tag::deletecase[]"},{"lineNumber":973,"author":{"gitID":"-"},"content":"[[DeleteCase]]"},{"lineNumber":974,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a case : `deletecase` [Since v1.3]"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"You can remove cases by specifying the `CASE_INDEX`. The index refers to the index number shown in the most recent listing of cases. +"},{"lineNumber":977,"author":{"gitID":"-"},"content":"*Format:* `deletecase CASE_INDEX` +"},{"lineNumber":978,"author":{"gitID":"-"},"content":"*Alias:* `dc`"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":981,"author":{"gitID":"-"},"content":"The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":984,"author":{"gitID":"-"},"content":"To help you find the index of the case that you want to remove, you can use the `findcases` command before using the `deletecase` command to narrow the number of cases displayed in the listing. +"},{"lineNumber":985,"author":{"gitID":"-"},"content":"If a case is no longer active, consider using the `close` command instead so that you can continue to view details of the case."},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"You can identify and delete the case by looking at their"},{"lineNumber":988,"author":{"gitID":"-"},"content":"INDEX at the top left of their card as show in the diagram \u003c\u003cdeletecase-index, below\u003e\u003e."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"[[deletecase-index]]"},{"lineNumber":991,"author":{"gitID":"-"},"content":".Case Index"},{"lineNumber":992,"author":{"gitID":"-"},"content":"image::userguide-images/dc-index.png[width\u003d\"280\"]"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"//end::deletecase[]"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"You can refer to the screenshots below for an example of how the Investigapptor"},{"lineNumber":997,"author":{"gitID":"-"},"content":"will look like after you\u0027ve executed the `deletecase` command."},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"[[deletecase-before]]"},{"lineNumber":1000,"author":{"gitID":"-"},"content":".Before executing `deletecase 1` command"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"image::userguide-images/before-dc-command.png[width\u003d\"800\"]"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"[[deletecase-command]]"},{"lineNumber":1004,"author":{"gitID":"-"},"content":".After executing `deletecase 1` command"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"image::userguide-images/dc-command.png[width\u003d\"800\"]"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"* `listcases` +"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"`deletecase 2` +"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"Deletes the 2nd case in the list of all cases."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"* `findcases Arson` +"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"`dc 1` +"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"Deletes the 1st case in the results of the `findcases` command."},{"lineNumber":1015,"author":{"gitID":"-"},"content":"//end::deletecase[]"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"//tag::selectcase[]"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"[[SelectCase]]"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Selecting a case : `selectcase` [Since v1.5]"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"To view more details about a case, you can select the case identified by the index number used in the last case listing. +"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"*Format:* `selectcase CASE_INDEX` +"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"*Alias:* `sc`"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"The `CASE_INDEX` refers to the index number shown in the last listing of cases."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":"You can refer to the screenshot below for an example on how to use the command."},{"lineNumber":1032,"author":{"gitID":"-"},"content":"[[selectcase-img]]"},{"lineNumber":1033,"author":{"gitID":"-"},"content":".`selectcase 1` command"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"image::userguide-images/sc-command.png[width\u003d\"400\"]"},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"* `listcases` +"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"`selectcase 2` +"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"Selects the 2nd case in the results of the `listcases` command."},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"* `findcases murder` +"},{"lineNumber":1043,"author":{"gitID":"-"},"content":"`selectcase 1` +"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"Selects the 1st case in the results of the `findcases` command."},{"lineNumber":1045,"author":{"gitID":"-"},"content":"* `sc 3` +"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"Selects the 3rd case in the most recent list of cases."},{"lineNumber":1047,"author":{"gitID":"-"},"content":"//end::selectcase[]"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"//tag::listinvcase[]"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"[[ListInvCases]]"},{"lineNumber":1051,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d List a specific Investigator\u0027s cases `listinvestigatorcases` [Since v1.4]"},{"lineNumber":1052,"author":{"gitID":"quentinkhoo"},"content":"To find all the case belonging to a certain investigator, you can use the `listinvestigatorcases` command to retrieve all"},{"lineNumber":1053,"author":{"gitID":"quentinkhoo"},"content":"the cases which the investigator is currently in charge of and display them on the list panel. +"},{"lineNumber":1054,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1055,"author":{"gitID":"quentinkhoo"},"content":"Format: `listinvestigatorcases INDEX` +"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"Alias: `lic`"},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"Selects the investigator by the `INVESTIGATOR_INDEX` and loads the cases he/she is in-charge of in the case list. +"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"The `INVESTIGATOR_INDEX` refers to the index number shown in the most recent listing of the investigators."},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"quentinkhoo"},"content":"To use the `listinvestigatorcases` command, you just need to indicate which investigator\u0027s cases you"},{"lineNumber":1066,"author":{"gitID":"-"},"content":"want to view by using the index as shown in \u003c\u003cinvestigatorcase-1\u003e\u003e below"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"[[investigatorcase-1]]"},{"lineNumber":1069,"author":{"gitID":"-"},"content":".Locating investigator\u0027s index"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"image::userguide-images/lic-command1.png[width\u003d\"450\"]"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"[[lic-after]]"},{"lineNumber":1073,"author":{"gitID":"-"},"content":".After executing `listinvestigatorcases 1` command"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"image::userguide-images/lic-command.png[width\u003d\"800\"]"},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"The following provides an explanation of some command examples:"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"* `listinvestigators` +"},{"lineNumber":1079,"author":{"gitID":"quentinkhoo"},"content":"`listinvestigatorcases 2` +"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"Display all the cases of the 2nd investigator in the results of the `list case` command."},{"lineNumber":1081,"author":{"gitID":"quentinkhoo"},"content":"* `findinvestigators Amy` +"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"`listinvestigatorcases 1` +"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"Display all the cases of the 2nd investigator in the results of the `FindInvestigator` command."},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* `lic 3` +"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"Display all the cases of the 2nd investigator  in the investigator panel list case."},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"//end::listinvcase[]"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Future Enhancement Commands"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"These are features that will come in future releases of Investigapptor +"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Adding a witness `addwitness` [Coming in v2.0]"},{"lineNumber":1093,"author":{"gitID":"quentinkhoo"},"content":"We plan to implement this feature to allow for investigators to"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"create and add witnesses to the cases in the Investigapptor. This will allow for"},{"lineNumber":1095,"author":{"gitID":"quentinkhoo"},"content":"them to associate relevant witnesses to the various cases."},{"lineNumber":1096,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1097,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Adding a suspect `addsuspect` [Coming in v2.0]"},{"lineNumber":1098,"author":{"gitID":"quentinkhoo"},"content":"We plan to implement this feature to allow for investigators to"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"create and add suspects to the cases in the Investigapptor. This will allow for"},{"lineNumber":1100,"author":{"gitID":"quentinkhoo"},"content":"them to associate relevant suspects to the various cases."},{"lineNumber":1101,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1102,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Adding evidence files `addevidence` [Coming in v2.0]"},{"lineNumber":1103,"author":{"gitID":"quentinkhoo"},"content":"We plan to implement this feature to allow for investigators to"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"create and add evidence files to the cases in the Investigapptor. This will allow for"},{"lineNumber":1105,"author":{"gitID":"quentinkhoo"},"content":"them to associate relevant evidences to the various cases."},{"lineNumber":1106,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1107,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Setting up chain of custody `buildcoc` [Coming in v2.0]"},{"lineNumber":1108,"author":{"gitID":"quentinkhoo"},"content":"We plan to implement this feature to document the tracing of the handing over"},{"lineNumber":1109,"author":{"gitID":"quentinkhoo"},"content":"of files and documents."},{"lineNumber":1110,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1111,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Entering commands in other languages `language` [Coming in v2.0]"},{"lineNumber":1112,"author":{"gitID":"quentinkhoo"},"content":"We plan to add more languages support such as Mandarin and Malay to the"},{"lineNumber":1113,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor in the future to allow non-english"},{"lineNumber":1114,"author":{"gitID":"quentinkhoo"},"content":"users to be able to use Investigapptor"},{"lineNumber":1115,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1116,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Adding any person via scanner `scanperson` [Coming in v2.0]"},{"lineNumber":1117,"author":{"gitID":"quentinkhoo"},"content":"We plan to add a scanner feature where Investigapptor is able to read the image of the case file and automatically"},{"lineNumber":1118,"author":{"gitID":"quentinkhoo"},"content":"process the information and add it into the Investigapptor."},{"lineNumber":1119,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1120,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Exporting case information into a PDF file `exportfile` [Coming in v2.0]"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"We plan to add this feature which will allow Investigapptor to create a"},{"lineNumber":1122,"author":{"gitID":"quentinkhoo"},"content":"PDF file which contains the information of a case or investigator."},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":1125,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d Encrypting data files `encryptdata` [Coming in v2.0]"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"We plan to implement data encryption for Investigapptor in the future, which will encrypt and protect the data stored"},{"lineNumber":1127,"author":{"gitID":"quentinkhoo"},"content":"in investigapptor."},{"lineNumber":1128,"author":{"gitID":"-"},"content":"// end::dataencryption[]]"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":1133,"author":{"gitID":"quentinkhoo"},"content":"*A*: You can do so by installing Investigapptor in the other computer and"},{"lineNumber":1134,"author":{"gitID":"quentinkhoo"},"content":"overwriting the empty data file it creates with the file that contains"},{"lineNumber":1135,"author":{"gitID":"quentinkhoo"},"content":"the data of your previous Investigapptor folder."},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"*Q*: How do I save my data? +"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"*A*: Investigapptor data are saved in the hard disk automatically after any command that changes the data."},{"lineNumber":1139,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":1140,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1141,"author":{"gitID":"quentinkhoo"},"content":"*Q*: How do I report a bug that I have noticed? +"},{"lineNumber":1142,"author":{"gitID":"quentinkhoo"},"content":"*A*: If you have found a bug with our application, you may post it in our issue tracker over"},{"lineNumber":1143,"author":{"gitID":"quentinkhoo"},"content":"https://github.com/CS2103JAN2018-F14-B3/main/issues[here]."},{"lineNumber":1144,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"This section provides a quick reference for all the commands available in the Investigapptor."},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d General Commands"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"General commands that you might find useful in helping you to navigate and configure Investigapptor:"},{"lineNumber":1150,"author":{"gitID":"quentinkhoo"},"content":"[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c20%,\u003c30\",options\u003d\"header\",]"},{"lineNumber":1151,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"|Task |Purpose |Command |Example"},{"lineNumber":1153,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1154,"author":{"gitID":"quentinkhoo"},"content":"|_\u003c\u003cHelp, Help\u003e\u003e_ |Shows you the user guide |`help` | `help`"},{"lineNumber":1155,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"|_\u003c\u003cSetPassword, Set Password\u003e\u003e_ |Sets the password |`setpassword` |"},{"lineNumber":1157,"author":{"gitID":"quentinkhoo"},"content":"`setpassword pw/password`"},{"lineNumber":1158,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1159,"author":{"gitID":"quentinkhoo"},"content":"|_\u003c\u003cRemovePassword, Remove Password\u003e\u003e_ |Removes the password |"},{"lineNumber":1160,"author":{"gitID":"quentinkhoo"},"content":"`removepassword` | `removepassword`"},{"lineNumber":1161,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1162,"author":{"gitID":"quentinkhoo"},"content":"|_\u003c\u003cHistory, History\u003e\u003e_ |Shows you a history of all commands used |`history` | `history`"},{"lineNumber":1163,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1164,"author":{"gitID":"quentinkhoo"},"content":"|_\u003c\u003cUndo, Undo\u003e\u003e_ |Undo your previous command |`undo` | `undo`"},{"lineNumber":1165,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1166,"author":{"gitID":"quentinkhoo"},"content":"|_\u003c\u003cRedo, Redo\u003e\u003e_ |Redo your undo | `redo` | `redo`"},{"lineNumber":1167,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1168,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1169,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1170,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Investigator Commands"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"Commands to help you manage investigator details:"},{"lineNumber":1172,"author":{"gitID":"quentinkhoo"},"content":"[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c20%,\u003c30\",options\u003d\"header\",]"},{"lineNumber":1173,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"|Task |Purpose |Command |Example"},{"lineNumber":1175,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"|_\u003c\u003cAddInv, Add an Investigator\u003e\u003e_ |Add a new investigator |"},{"lineNumber":1177,"author":{"gitID":"quentinkhoo"},"content":"`listinvestigators` | `listinvestigators`"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"|_\u003c\u003cSelInv, Select an Investigator\u003e\u003e_ |Select the investigator to view its details based on the investigator index given |"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"`selectinvestigator` | `selectinvestigator 1`"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"|_\u003c\u003cEditInv, Edit an Investigator\u003e\u003e_ |Edit the investigator\u0027s details based on the parameters given |"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"`editinvestigator` | `editinvestigator 1 n/Project NewName`"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"|_\u003c\u003cDelInv, Delete an Investigator\u003e\u003e_ |Delete an investigator based on the investigator index given |"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"`deleteinvestigator` | `deleteinvestigator 2`"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"|_\u003c\u003cListInv, List all Investigators\u003e\u003e_ |Shows you the list of all investigators |"},{"lineNumber":1185,"author":{"gitID":"quentinkhoo"},"content":"`listinvestigators` | `listinvestigators`"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"|_\u003c\u003cFindInv, Find Investigators by their name\u003e\u003e_ |Shows you the list of all investigators whose name matches the keyword(s) given|"},{"lineNumber":1187,"author":{"gitID":"-"},"content":"`findinvestigators` | `findinvestigators Robert`"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"|_\u003c\u003cFindInvTags, Find Investigators by their tags\u003e\u003e_ |Shows you the list of all investigators whose tag matches the keyword(s) given |"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"`findinvestigatortags` | `findinvestigatortags Expert TeamA`"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1193,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1194,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1195,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Case Commands"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"Commands to help you manage case details:"},{"lineNumber":1197,"author":{"gitID":"quentinkhoo"},"content":"[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c20%,\u003c30\",options\u003d\"header\",]"},{"lineNumber":1198,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"|Task |Purpose |Command |Example"},{"lineNumber":1200,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"|_\u003c\u003cAddCase, Add a Case\u003e\u003e_ |Adds a new case |"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"`addcase` | `addcase n/Geylang Rape d/Rape at geylang i/1 s/12/05/1994`"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"|_\u003c\u003cSelectCase, Select a Case\u003e\u003e_ |Select the case based on its index to view its details |"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"`selectcase` | `selectcase 1`"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"|_\u003c\u003cEditCase, Edit a Case\u003e\u003e_ |Edit the case\u0027s details based on the parameters given |"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"`editcase` | `editcase 1 d/new description i/1`"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"|_\u003c\u003cDeleteCase, Delete a Case\u003e\u003e_ |Delete a case based on the case index given |"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"`deletecase` | `deletecase 1`"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"|_\u003c\u003cCloseCase, Closing a case\u003e\u003e_ |Changes the status of the case from `open` to `close` based on the case index given|"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"`close` | `close 1`"},{"lineNumber":1211,"author":{"gitID":"-"},"content":"|_\u003c\u003cListCases, List all Cases\u003e\u003e_ |Shows you the list of all cases |"},{"lineNumber":1212,"author":{"gitID":"quentinkhoo"},"content":"`listcases` | `listcases`"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"|_\u003c\u003cListInvCases, List the Cases assigned to an Investigator\u003e\u003e_ |Shows you the list of all cases that has been assigned to the investigator based on the investigator index given |"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"`listinvestigatorcases` | `listinvestigatorcases  2`"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"|_\u003c\u003cFindCases, Find Cases by their name\u003e\u003e_ |Shows you the list of all cases whose name matches the keyword(s) given|"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"`findcases` | `findcases Project Murder`"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"|_\u003c\u003cFindCaseTags, Find Cases by their tags\u003e\u003e_ |Shows you the list of all cases whose tag matches the keyword(s) given |"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"`findcasetags` | `findcasetags Homicide Fraud`"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"|_\u003c\u003cFindCloseCases, Find Cases with the status \u0027close\u0027\u003e\u003e_ |Shows you the list of all cases whose status is `close`|"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"`findclosecases` | `findclosecases`"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"|_\u003c\u003cFindOpenCases, Find Cases with the status \u0027open\u0027\u003e\u003e_ |Shows you the list of all cases whose status is `open` |"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"`findopencases` | `findopencases`"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1225,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1226,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1227,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Keyboard Shortcuts"},{"lineNumber":1228,"author":{"gitID":"quentinkhoo"},"content":"[width\u003d\"100%\",cols\u003d\"20%,\u003c30%,\u003c30%,options\u003d\"header\",]"},{"lineNumber":1229,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1230,"author":{"gitID":"quentinkhoo"},"content":"|Shortcut |Purpose |Remarks"},{"lineNumber":1231,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1232,"author":{"gitID":"quentinkhoo"},"content":"|kbd:[Esc] | Helps you clears the entire command box | -"},{"lineNumber":1233,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1234,"author":{"gitID":"quentinkhoo"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"}],"authorContributionMap":{"pkaijun":4,"-":995,"quentinkhoo":235}},{"path":"src/test/java/systemtests/ClockRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.StatusBarFooter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * This rule makes the time stamp in the status bar predictable during a test."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * At the end of the test, the rule restores the original clock."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * @see Clock#fixed(Instant, ZoneId)"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ClockRule implements TestRule {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private Clock injectedClock;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected void before() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        setInjectedClockToCurrentTime();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    protected void after() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                before();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Clock getInjectedClock() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return injectedClock;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void setInjectedClockToCurrentTime() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":56,"quentinkhoo":1}},{"path":"src/test/java/systemtests/SelectInvestigatorCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"pkaijun"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"import static seedu.investigapptor.logic.commands.SelectInvestigatorCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.SelectInvestigatorCommand;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"public class SelectInvestigatorCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        String command \u003d \"   \" + SelectInvestigatorCommand.COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"        command \u003d SelectInvestigatorCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        command \u003d SelectInvestigatorCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: filtered person list, select index within bounds of investigapptor but out of bounds of person list"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"        int invalidIndex \u003d getModel().getInvestigapptor().getPersonList().size();"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(SelectInvestigatorCommand.COMMAND_WORD + \" \""},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"                + invalidIndex, MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: filtered person list, select index within bounds of investigapptor book and person list -\u003e selected */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"        command \u003d SelectInvestigatorCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(SelectInvestigatorCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(SelectInvestigatorCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(SelectInvestigatorCommand.COMMAND_WORD + \" \""},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"                + invalidIndex, MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(SelectInvestigatorCommand.COMMAND_WORD + \" abc\","},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(SelectInvestigatorCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: select from empty investigapptor book -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(SelectInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"                MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":115,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":120,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":144,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":23,"-":115,"quentinkhoo":18}},{"path":"src/test/java/systemtests/InvestigapptorSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.MainApp;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.TestApp;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestigatorCommand;"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListInvestigatorCommand;"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.SelectInvestigatorCommand;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.BrowserPanel;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.CommandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":" * A system test class for Investigapptor, which provides access to handles of GUI components and helper methods"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":48,"author":{"gitID":"-"},"content":" */"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"public abstract class InvestigapptorSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\","},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"            \"password-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"            Arrays.asList(\"text-input\", \"text-field\", \"password-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"    protected Investigapptor getInitialData() {"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        return TypicalPersons.getTypicalInvestigapptor();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"quentinkhoo"},"content":"     * Displays all persons in the investigapptor book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":144,"author":{"gitID":"quentinkhoo"},"content":"        executeCommand(ListInvestigatorCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(getModel().getInvestigapptor().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(FindInvestigatorCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":153,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getInvestigapptor().getPersonList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":160,"author":{"gitID":"pkaijun"},"content":"        executeCommand(SelectInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"quentinkhoo"},"content":"     * Deletes all persons in the investigapptor book."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":169,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(0, getModel().getInvestigapptor().getPersonList().size());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":182,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(expectedModel.getInvestigapptor(), testApp.readStorageInvestigapptor());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":290,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":2,"-":262,"quentinkhoo":30}},{"path":"src/test/java/systemtests/FindInvestigatorCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.DeleteInvestigatorCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestigatorCommand;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindInvestigatorCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find multiple persons in investigapptor book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindInvestigatorCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":40,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, CARL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find multiple persons in investigapptor book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BENSON, DANIEL);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find multiple persons in investigapptor book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find multiple persons in investigapptor book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find multiple persons in investigapptor book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find same persons in investigapptor book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        executeCommand(DeleteInvestigatorCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(getModel().getInvestigapptor().getPersonList().contains(BENSON));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find person in investigapptor book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find person in investigapptor book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find person in investigapptor book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find person not in investigapptor book -\u003e 0 persons found */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find phone number of person in investigapptor book -\u003e 0 persons found */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find investigapptor of person in investigapptor book -\u003e 0 persons found */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find email of person in investigapptor book -\u003e 0 persons found */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find tags of person in investigapptor book -\u003e 0 persons found */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: find person in empty investigapptor book -\u003e 0 persons found */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d FindInvestigatorCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":163,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":166,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":170,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":182,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":185,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":2,"-":163,"quentinkhoo":31}},{"path":"src/test/java/systemtests/EditInvestigatorCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand;"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"public class EditInvestigatorCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"        String command \u003d \" \" + EditInvestigatorCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"                + NAME_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"                + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":80,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        command \u003d EditInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //TODO"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        //assertCommandSuccess(command, index, BOB);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"        command \u003d EditInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":"        command \u003d EditInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: filtered person list, edit index within bounds of investigapptor book and person list -\u003e edited */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":108,"author":{"gitID":"pkaijun"},"content":"        command \u003d EditInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: filtered person list, edit index within bounds of investigapptor book but out of bounds of person list"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"        int invalidIndex \u003d getModel().getInvestigapptor().getPersonList().size();"},{"lineNumber":118,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":119,"author":{"gitID":"pkaijun"},"content":"                Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":129,"author":{"gitID":"pkaijun"},"content":"        command \u003d EditInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":130,"author":{"gitID":"pkaijun"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":139,"author":{"gitID":"pkaijun"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":143,"author":{"gitID":"pkaijun"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":147,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":148,"author":{"gitID":"pkaijun"},"content":"                Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":152,"author":{"gitID":"pkaijun"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":156,"author":{"gitID":"pkaijun"},"content":"                EditInvestigatorCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":160,"author":{"gitID":"pkaijun"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":164,"author":{"gitID":"pkaijun"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":168,"author":{"gitID":"pkaijun"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: invalid investigapptor -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":172,"author":{"gitID":"pkaijun"},"content":"                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(EditInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":176,"author":{"gitID":"pkaijun"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getRegCommand(BOB));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        //TODO"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        //assertTrue(getModel().getInvestigapptor().getPersonList().contains(BOB));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":184,"author":{"gitID":"pkaijun"},"content":"        command \u003d EditInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":185,"author":{"gitID":"pkaijun"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        //TODO"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        //assertCommandFailure(command, EditInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"pkaijun"},"content":"        command \u003d EditInvestigatorCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"},{"lineNumber":191,"author":{"gitID":"pkaijun"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        //TODO"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        //assertCommandFailure(command, EditInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":200,"author":{"gitID":"pkaijun"},"content":"     * @see EditInvestigatorCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"pkaijun"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditInvestigatorCommand}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":212,"author":{"gitID":"pkaijun"},"content":"     * @see EditInvestigatorCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":223,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":227,"author":{"gitID":"pkaijun"},"content":"                String.format(EditInvestigatorCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson),"},{"lineNumber":228,"author":{"gitID":"pkaijun"},"content":"                expectedSelectedCardIndex);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":234,"author":{"gitID":"pkaijun"},"content":"     * @see EditInvestigatorCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":250,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":252,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":276,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":44,"-":193,"quentinkhoo":51}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cCrimeCase\u003e PREDICATE_MATCHING_NO_CASES \u003d unused -\u003e false;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cCrimeCase\u003e PREDICATE_MATCHING_NO_CRIMECASE \u003d unused -\u003e false;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** PERSON PORTION **/"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void setFilteredCrimeCaseList(Model model, List\u003cCrimeCase\u003e toDisplay) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cCrimeCase\u003e\u003e predicate \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model.updateFilteredCrimeCaseList(predicate.orElse(PREDICATE_MATCHING_NO_CASES));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredCrimeCaseList(Model, List)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void setFilteredCrimeCaseList(Model model, CrimeCase... toDisplay) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        setFilteredCrimeCaseList(model, Arrays.asList(toDisplay));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void setFilteredPersonList(Model model, List\u003cPerson\u003e toDisplay) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredPersonList(Model, List)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static void setFilteredPersonList(Model model, Person... toDisplay) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setFilteredPersonList(model, Arrays.asList(toDisplay));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code CrimeCase} equals to {@code other}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static Predicate\u003cCrimeCase\u003e getPredicateMatching(CrimeCase other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /*** CRIME CASE PORTION ***/"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s crime case filtered list to display only {@code toDisplay}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static void setCrimeCaseFilteredList(Model model, List\u003cCrimeCase\u003e toDisplay) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cCrimeCase\u003e\u003e predicate \u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatchingCrimeCase).reduce(Predicate::or);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model.updateFilteredCrimeCaseList(predicate.orElse(PREDICATE_MATCHING_NO_CRIMECASE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setCrimeCaseFilteredList(Model, List)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static void setCrimeCaseFilteredList(Model model, CrimeCase... toDisplay) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setCrimeCaseFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code CrimeCase} equals to {@code other}."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static Predicate\u003cCrimeCase\u003e getPredicateMatchingCrimeCase(CrimeCase other) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return crimeCase -\u003e crimeCase.equals(other);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":90,"quentinkhoo":2}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"public class ErrorDialogGuiTest extends InvestigapptorSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":28,"quentinkhoo":6}},{"path":"src/test/java/seedu/investigapptor/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // new result received"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        postNow(NEW_RESULT_EVENT_STUB);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":35}},{"path":"src/test/java/systemtests/AddInvestigatorCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.RANK_DESC_CAP;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.CARL;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.DANIEL;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.HOON;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.IDA;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.KEYWORD_MATCHING_MEIER;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddInvestigatorCommand;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"public class AddInvestigatorCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: add a person without tags to a non-empty investigapptor, command with leading and trailing spaces"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Investigator toAdd \u003d AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddInvestigatorCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \""},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: add a person with all fields same as another person in the investigapptor book except name -\u003e added */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        toAdd \u003d new InvestigatorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \" + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: add a person with all fields same as another person in the investigapptor except phone -\u003e added */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        toAdd \u003d new InvestigatorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \" + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: add a person with all fields same as another person in the investigapptor except email -\u003e added */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        toAdd \u003d new InvestigatorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \" + ADDRESS_DESC_AMY + RANK_DESC_CAP + \" \" + TAG_DESC_FRIEND;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: add a person with all fields same as another person in the investigapptor except investigapptor"},{"lineNumber":106,"author":{"gitID":"quentinkhoo"},"content":"        -\u003e added"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":"        */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        toAdd \u003d new InvestigatorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \" + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: add to empty investigapptor book -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(DANIEL);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \" + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d InvestigatorUtil.getRegCommand(HOON);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalInvestigator#ALICE"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // Investigapptor#addInvestigator(Investigator)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d InvestigatorUtil.getRegCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \";"},{"lineNumber":155,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                AddInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \";"},{"lineNumber":161,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                AddInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \";"},{"lineNumber":167,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                AddInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: missing investigapptor -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                + RANK_DESC_CAP + \" \";"},{"lineNumber":173,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                AddInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + InvestigatorUtil.getInvestigatorDetails(toAdd);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + RANK_DESC_CAP + \" \";"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + RANK_DESC_CAP + \" \";"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + RANK_DESC_CAP + \" \";"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"quentinkhoo"},"content":"        /* Case: invalid investigapptor -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + INVALID_ADDRESS_DESC + RANK_DESC_CAP + \" \";"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        command \u003d AddInvestigatorCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + RANK_DESC_CAP + \" \" + INVALID_TAG_DESC;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Executes the {@code AddInvestigatorCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddInvestigatorCommand}"},{"lineNumber":211,"author":{"gitID":"pkaijun"},"content":"     * with the details of"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":218,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Investigator toAdd) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(InvestigatorUtil.getRegCommand(toAdd), toAdd);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Investigator)}. Executes {@code command}"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see AddInvestigatorCommandSystemTest#assertCommandSuccess(Investigator)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Investigator toAdd) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddInvestigatorCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @see AddInvestigatorCommandSystemTest#assertCommandSuccess(String, Investigator)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":266,"author":{"gitID":"quentinkhoo"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"quentinkhoo"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":5,"-":221,"quentinkhoo":52}},{"path":"src/test/java/seedu/investigapptor/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToPersonListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            new JumpToPersonListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":52}},{"path":"src/test/java/seedu/investigapptor/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":" * A GUI unit test class for Investigapptor."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":34}},{"path":"src/test/java/seedu/investigapptor/ui/HelpWindowTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.HelpWindow.USERGUIDE_FILE_PATH;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HelpWindowTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private HelpWindowHandle helpWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Stage helpWindowStage \u003d FxToolkit.setupStage((stage) -\u003e stage.setScene(helpWindow.getRoot().getScene()));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        helpWindowHandle \u003d new HelpWindowHandle(helpWindowStage);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":31}},{"path":"src/test/java/seedu/investigapptor/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.Logic;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.LogicManager;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListInvestigatorCommand;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListInvestigatorCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"                CommandBoxHandle.COMMAND_FIELD_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"    public void handleKeyPress_escape() {"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(\"\".equals(commandBoxHandle.getInput()));"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.write(\"some input\");"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(\"some input\".equals(commandBoxHandle.getInput()));"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(\"some input\".equals(commandBoxHandle.getInput()));"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(\"\".equals(commandBoxHandle.getInput()));"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"        String thirdCommand \u003d \"listinvestigators\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":150,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":151,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":161,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":162,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":163,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":34,"-":139}},{"path":"src/test/java/seedu/investigapptor/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":68}},{"path":"src/test/java/systemtests/FindCaseTagsCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_CASES_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ALFA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.BRAVO;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.KEYWORD_MATCHING_HOMICIDE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.KEYWORD_MATCHING_MURDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.THREE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.TWO;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseTagsCommand;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"public class FindCaseTagsCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"    public void find() {"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"        /* Case 1 (murder): find multiple cases in investigapptor book, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 3 cases found"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        String command \u003d \"   \" + FindCaseTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MURDER + \"   \";"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setCrimeCaseFilteredList(expectedModel, ALFA, ONE, THREE); //three cases contain the tag \"murder\""},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"        /* Case 1 (murder): repeat previous findCaseTag command where crimecase list is displaying the cases"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"         * we are finding"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 3 cases found"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MURDER;"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"        /* Case 2 (homicide): find multiple cases in investigapptor book, command with leading spaces and trailing space"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":"         * we are finding"},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 2 cases found"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"        command \u003d \"   \" + FindCaseTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_HOMICIDE + \"   \";"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setCrimeCaseFilteredList(expectedModel, BRAVO, ONE); // these two cases contain the tag \"homicide\""},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"        /* Case 2 (homicide): repeat previous findCaseTag command where crimecase list is displaying the cases"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"         * we are finding"},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 3 cases found"},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_HOMICIDE;"},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"        /* Case 3: find multiple cases in investigapptor book, 2 keywords -\u003e 3 cases found */"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" murder kidnap\";"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setCrimeCaseFilteredList(expectedModel, ALFA, BRAVO, ONE, TWO, THREE);"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"        /* Case 4: find multiple cases in investigapptor book,"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"        2 keywords in reversed order -\u003e 3 cases found */"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" kidnap murder\";"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"        /* Case: find multiple cases in investigapptor book, 2 keywords with 1 repeat -\u003e 3 cases found */"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" kidnap murder kidnap\";"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"        /* Case: find multiple persons in investigapptor book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 2 persons found"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" kidnap murder NonMatchingKeyWord\";"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"        /* Case: find case in investigapptor book, keyword is substring of tag -\u003e 0 persons found */"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" mur\";"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setCrimeCaseFilteredList(expectedModel);"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"        /* Case: find person in investigapptor book, tag is substring of keyword -\u003e 0 persons found */"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"        // keyword -\u003e teamAs, tag -\u003e teamA (substring of keyword)"},{"lineNumber":101,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" murders\";"},{"lineNumber":102,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setCrimeCaseFilteredList(expectedModel);"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":106,"author":{"gitID":"pkaijun"},"content":"        /* Case: find tag that is not found in any investigators -\u003e 0 persons found */"},{"lineNumber":107,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" murderie\";"},{"lineNumber":108,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":111,"author":{"gitID":"pkaijun"},"content":"        /* Case: find name of case in investigapptor -\u003e 0 persons found */"},{"lineNumber":112,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" \" + ONE.getCaseName().crimeCaseName;"},{"lineNumber":113,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":116,"author":{"gitID":"pkaijun"},"content":"        /* Case: find status of investigator in investigapptor -\u003e 0 persons found */"},{"lineNumber":117,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindCaseTagsCommand.COMMAND_WORD + \" \" + ONE.getStatus().toString();"},{"lineNumber":118,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":119,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":120,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":121,"author":{"gitID":"pkaijun"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"pkaijun"},"content":"        command \u003d \"FiNdcAsEtAgs murder\";"},{"lineNumber":123,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":124,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":126,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"pkaijun"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":128,"author":{"gitID":"pkaijun"},"content":"     * box displays {@code Messages#MESSAGE_CASES_LISTED_OVERVIEW} with the number of crime cases in the filtered list,"},{"lineNumber":129,"author":{"gitID":"pkaijun"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":130,"author":{"gitID":"pkaijun"},"content":"     * These verifications are done by"},{"lineNumber":131,"author":{"gitID":"pkaijun"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"pkaijun"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":133,"author":{"gitID":"pkaijun"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":134,"author":{"gitID":"pkaijun"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":135,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":137,"author":{"gitID":"pkaijun"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":138,"author":{"gitID":"pkaijun"},"content":"                MESSAGE_CASES_LISTED_OVERVIEW, expectedModel.getFilteredCrimeCaseList().size());"},{"lineNumber":139,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":140,"author":{"gitID":"pkaijun"},"content":"        executeCommand(command);"},{"lineNumber":141,"author":{"gitID":"pkaijun"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":143,"author":{"gitID":"pkaijun"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":144,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":146,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"pkaijun"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":148,"author":{"gitID":"pkaijun"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":149,"author":{"gitID":"pkaijun"},"content":"     * These verifications are done by"},{"lineNumber":150,"author":{"gitID":"pkaijun"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"pkaijun"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":152,"author":{"gitID":"pkaijun"},"content":"     * error style."},{"lineNumber":153,"author":{"gitID":"pkaijun"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"pkaijun"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":158,"author":{"gitID":"pkaijun"},"content":"        executeCommand(command);"},{"lineNumber":159,"author":{"gitID":"pkaijun"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":160,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":161,"author":{"gitID":"pkaijun"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":162,"author":{"gitID":"pkaijun"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":163,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":145,"-":15,"quentinkhoo":4}},{"path":"src/test/java/seedu/investigapptor/ui/TestFxmlObject.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.beans.DefaultProperty;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A test object which can be constructed via an FXML file."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"@DefaultProperty(\"text\")"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class TestFxmlObject {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private String text;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public TestFxmlObject() {}"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public TestFxmlObject(String text) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        setText(text);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return text;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void setText(String text) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.text \u003d text;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.text.equals(((TestFxmlObject) other).getText()));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":34}},{"path":"src/test/java/seedu/investigapptor/ui/PasswordBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import guitests.guihandles.PasswordBoxHandle;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ValidPasswordEvent;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.JsonUserPrefsStorage;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.Storage;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.StorageManager;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.XmlInvestigapptorStorage;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"public class PasswordBoxTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    private static final String CORRECT_PASSWORD \u003d \"password\";"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private static final String WRONG_PASSWORD \u003d \"p@ssword\";"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath("},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"            \"src/test/data/XmlSerializableInvestigapptorTest/\");"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfPasswordBox;"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    private ArrayList\u003cString\u003e errorStyleOfPasswordBox;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    private PasswordBoxHandle passwordBoxHandle;"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"    public void setUp() throws Exception {"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        Storage storageManager \u003d setUpStorage();"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"        PasswordBox passwordBox \u003d new PasswordBox(storageManager);"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        passwordBoxHandle \u003d new PasswordBoxHandle(getChildNode(passwordBox.getRoot(),"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"                PasswordBoxHandle.PASSWORD_INPUT_FIELD_ID));"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"        uiPartRule.setUiPart(passwordBox);"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        defaultStyleOfPasswordBox \u003d new ArrayList\u003c\u003e(passwordBoxHandle.getStyleClass());"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        errorStyleOfPasswordBox \u003d new ArrayList\u003c\u003e(defaultStyleOfPasswordBox);"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        errorStyleOfPasswordBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"    private String getTestFilePath(String fileName) {"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        return TEST_DATA_FOLDER + fileName;"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"    private Storage setUpStorage() {"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        XmlInvestigapptorStorage addressBookStorage \u003d new XmlInvestigapptorStorage(getTestFilePath("},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"                \"typicalPasswordInvestigapptor.xml\"));"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTestFilePath(\"prefs\"));"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"        return new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    public void passwordBox_startingWithWrongPassword() {"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"        assertBehaviorForWrongPassword();"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"    public void passwordBox_startingWithCorrectPassword() {"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        assertBehaviorForCorrectPassword();"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"    public void passwordBox_handleKeyPress() {"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        passwordBoxHandle.run(WRONG_PASSWORD);"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(\"\", passwordBoxHandle.getInput());"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(defaultStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"     * Input a wrong password, then verify that \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"     *      - the text remains resets \u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"    private void assertBehaviorForWrongPassword() {"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"        passwordBoxHandle.run(WRONG_PASSWORD);"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(\"\", passwordBoxHandle.getInput());"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"     * Input the correct password, then verifies that"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"     *      - the event {@code ValidPasswordEvent} is raised."},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"    private void assertBehaviorForCorrectPassword() {"},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"        passwordBoxHandle.run(CORRECT_PASSWORD);"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ValidPasswordEvent);"},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":98,"-":7}},{"path":"src/test/java/seedu/investigapptor/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":71}},{"path":"src/test/java/seedu/investigapptor/ui/testutil/StageRule.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Properly sets up and tears down a JavaFx stage for our testing purposes."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class StageRule implements TestRule {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    protected void before() throws Throwable {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        FxToolkit.registerPrimaryStage();"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected void after() throws Throwable {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        FxToolkit.cleanupStages();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                before();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":33}},{"path":"src/test/java/seedu/investigapptor/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":27}},{"path":"src/test/java/seedu/investigapptor/ui/UiPartTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.MainApp;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class UiPartTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return testFileUrl;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * UiPart used for testing."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        @FXML"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":115}},{"path":"src/test/java/seedu/investigapptor/ui/testutil/EventsCollectorRule.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.rules.TestRule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.runner.Description;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.runners.model.Statement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Sets up an {@code EventsCollector} and tears it down after each test."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EventsCollectorRule implements TestRule {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final EventsCollector eventsCollector \u003d new EventsCollector();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected void after() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Statement apply(final Statement base, final Description description) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Statement() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            public void evaluate() throws Throwable {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                    base.evaluate();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                } finally {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                    after();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * A class that collects events raised by other classes."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public class EventsCollector {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        public EventsCollector() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * Collects any event raised by any class"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        @Subscribe"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        public void collectEvent(BaseEvent event) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            events.add(event);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * Removes collected events from the collected list"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        public void reset() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            events.clear();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        public int getSize() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return events.size();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * Returns the most recent event collected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        public BaseEvent getMostRecent() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            if (events.isEmpty()) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                return null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return events.get(events.size() - 1);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"         * Returns true if the collector did not receive any events"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        public boolean isEmpty() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return events.isEmpty();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":83}},{"path":"src/test/java/seedu/investigapptor/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.MainApp;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":41}},{"path":"src/test/java/seedu/investigapptor/commons/core/VersionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class VersionTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Version.fromString(\"This is not a version string\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(19, version.getMajor());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(10, version.getMinor());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(20, version.getPatch());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(true, version.isEarlyAccess());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // boundary at 0"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // normal values"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        version \u003d new Version(4, 10, 5, false);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // big numbers"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        version \u003d new Version(100, 100, 100, true);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Version one;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Version another;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // Tests equality"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, true);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, true);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        one \u003d new Version(11, 12, 13, false);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        another \u003d new  Version(11, 12, 13, false);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Tests different patch"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 5, false);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, false);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Tests different minor"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 5, 0, false);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Tests different major"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, true);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // Tests high major vs low minor"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 1, 0, true);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // Tests high patch vs low minor"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 10, false);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 1, 0, false);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Tests same major minor different patch"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, false);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // Tests early access vs not early access on same version number"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 0, false);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, false);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        another \u003d new  Version(2, 15, 5, true);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(100100100, version.hashCode());"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        version \u003d new Version(10, 10, 10, false);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertEquals(1010010010, version.hashCode());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Version one;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Version another;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        another \u003d new  Version(0, 0, 0, false);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        one \u003d new Version(100, 191, 275, true);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        another \u003d new  Version(100, 191, 275, true);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                                              int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":138}},{"path":"src/test/java/seedu/investigapptor/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        String defaultConfigAsString \u003d \"App title : Investigapptor\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":31}},{"path":"src/test/java/seedu/investigapptor/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorChangedEvent;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    private static final InvestigapptorChangedEvent EVENT_STUB \u003d new InvestigapptorChangedEvent(new Investigapptor());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"        // after investigapptor book is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":8,"-":67}},{"path":"src/test/java/seedu/investigapptor/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.XmlUtil;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.UserPrefsStorage;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.XmlSerializableInvestigapptor;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.TestUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    protected Supplier\u003cReadOnlyInvestigapptor\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    public TestApp(Supplier\u003cReadOnlyInvestigapptor\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"            createDataFileWithData(new XmlSerializableInvestigapptor(this.initialDataSupplier.get()),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"        userPrefs.setInvestigapptorFilePath(saveFileLocation);"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"        userPrefs.setInvestigapptorName(ADDRESS_BOOK_NAME);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"     * Returns a defensive copy of the investigapptor book data stored inside the storage file."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"    public Investigapptor readStorageInvestigapptor() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"            return new Investigapptor(storage.readInvestigapptor().get());"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"            throw new AssertionError(\"Invalid password\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"            throw new AssertionError(\"Data is not in the Investigapptor format.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        return storage.getInvestigapptorFilePath();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"        Model copy \u003d new ModelManager((model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(copy, model.getFilteredPersonList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":28,"-":98}},{"path":"src/test/java/seedu/investigapptor/commons/util/FileUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class FileUtilTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getPath() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"        // valid case"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(\"folder\" + File.separator + \"sub-folder\", FileUtil.getPath(\"folder/sub-folder\"));"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // null parameter -\u003e throws NullPointerException"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        FileUtil.getPath(null);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no forwards slash -\u003e assertion failure"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        FileUtil.getPath(\"folder\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":30}},{"path":"src/test/java/systemtests/FindInvestTagsCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.KEYWORD_MATCHING_TEAMA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.KEYWORD_MATCHING_TEAMB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.MDM_ONG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.SIR_CHONG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.SIR_LIM;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.SIR_LOO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestTagsCommand;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"public class FindInvestTagsCommandSystemTest extends InvestigapptorSystemTest {"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    public void find() {"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"        /* Case 1 (teamA): find multiple persons in investigapptor book, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 2 persons found"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"        String command \u003d \"   \" + FindInvestTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TEAMA + \"   \";"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setFilteredPersonList(expectedModel,"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"                SIR_LIM, SIR_LOO); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"        /* Case 1 (teamA): repeat previous findInvestTag command where person list is displaying the investigators"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"         * we are finding"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 2 persons found"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TEAMA;"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"        /* Case 2 (teamB): find multiple persons in investigapptor book, command with leading spaces and trailing spaces"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":"         * we are finding"},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 2 persons found"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"        command \u003d \"   \" + FindInvestTagsCommand.COMMAND_WORD + \" \""},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":"                + KEYWORD_MATCHING_TEAMB + \"   \";"},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setFilteredPersonList(expectedModel,"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"                MDM_ONG, SIR_CHONG); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":"        /* Case 2 (teamB): repeat previous findInvestTag command where person list is displaying the investigators"},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"         * we are finding"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 2 persons found"},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TEAMB;"},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"        /* Case 3: find multiple investigators in investigapptor book, 2 keywords -\u003e 3 persons found */"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" new teamB\";"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, SIR_LIM, MDM_ONG, SIR_CHONG);"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"        /* Case 4: find multiple investigators in investigapptor book,"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"        2 keywords in reversed order -\u003e 3 persons found */"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" teamB new\";"},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"        /* Case: find multiple persons in investigapptor book, 2 keywords with 1 repeat -\u003e 3 persons found */"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" teamB new teamB\";"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"        /* Case: find multiple persons in investigapptor book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"         * -\u003e 2 persons found"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"         */"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" teamB new NonMatchingKeyWord\";"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        /* Case: find person in investigapptor book, keyword is substring of tag -\u003e 0 persons found */"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":101,"author":{"gitID":"pkaijun"},"content":"        /* Case: find person in investigapptor book, tag is substring of keyword -\u003e 0 persons found */"},{"lineNumber":102,"author":{"gitID":"pkaijun"},"content":"        // keyword -\u003e teamAs, tag -\u003e teamA (substring of keyword)"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" teamAs\";"},{"lineNumber":104,"author":{"gitID":"pkaijun"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":105,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":106,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":108,"author":{"gitID":"pkaijun"},"content":"        /* Case: find tag that is not found in any investigators -\u003e 0 persons found */"},{"lineNumber":109,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" teamie\";"},{"lineNumber":110,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":111,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":113,"author":{"gitID":"pkaijun"},"content":"        /* Case: find name of investigator in investigapptor -\u003e 0 persons found */"},{"lineNumber":114,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" \" + SIR_LIM.getName().fullName;"},{"lineNumber":115,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":118,"author":{"gitID":"pkaijun"},"content":"        /* Case: find address of investigator in investigapptor -\u003e 0 persons found */"},{"lineNumber":119,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" \" + SIR_LIM.getAddress().value;"},{"lineNumber":120,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":123,"author":{"gitID":"pkaijun"},"content":"        /* Case: find email of investigator in investigapptor book -\u003e 0 persons found */"},{"lineNumber":124,"author":{"gitID":"pkaijun"},"content":"        command \u003d FindInvestTagsCommand.COMMAND_WORD + \" \" + SIR_LIM.getEmail().value;"},{"lineNumber":125,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":128,"author":{"gitID":"pkaijun"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":129,"author":{"gitID":"pkaijun"},"content":"        command \u003d \"FiNdinVesttAgs teamA\";"},{"lineNumber":130,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":131,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":133,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"pkaijun"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":135,"author":{"gitID":"pkaijun"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":136,"author":{"gitID":"pkaijun"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":137,"author":{"gitID":"pkaijun"},"content":"     * These verifications are done by"},{"lineNumber":138,"author":{"gitID":"pkaijun"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"pkaijun"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":140,"author":{"gitID":"pkaijun"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":141,"author":{"gitID":"pkaijun"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":144,"author":{"gitID":"pkaijun"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":145,"author":{"gitID":"pkaijun"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":146,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":147,"author":{"gitID":"pkaijun"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"pkaijun"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"pkaijun"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":150,"author":{"gitID":"pkaijun"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":151,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":153,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"pkaijun"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":155,"author":{"gitID":"pkaijun"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":156,"author":{"gitID":"pkaijun"},"content":"     * These verifications are done by"},{"lineNumber":157,"author":{"gitID":"pkaijun"},"content":"     * {@code InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"pkaijun"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":159,"author":{"gitID":"pkaijun"},"content":"     * error style."},{"lineNumber":160,"author":{"gitID":"pkaijun"},"content":"     * @see InvestigapptorSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":161,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":163,"author":{"gitID":"pkaijun"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":164,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":165,"author":{"gitID":"pkaijun"},"content":"        executeCommand(command);"},{"lineNumber":166,"author":{"gitID":"pkaijun"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":167,"author":{"gitID":"pkaijun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":168,"author":{"gitID":"pkaijun"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":169,"author":{"gitID":"pkaijun"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":170,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":153,"-":13,"quentinkhoo":5}},{"path":"src/test/java/seedu/investigapptor/commons/util/JsonUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.SerializableTestClass;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.TestUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final File SERIALIZATION_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"serialize.json\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":42}},{"path":"src/test/java/seedu/investigapptor/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":46}},{"path":"src/test/java/seedu/investigapptor/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":158}},{"path":"src/test/java/seedu/investigapptor/commons/core/index/IndexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertCreateOneBasedFailure(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCreateZeroBasedFailure(-1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidZeroBasedIndex, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidOneBasedIndex, false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (isZeroBased) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Index.fromZeroBased(invalidIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Index.fromOneBased(invalidIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ie) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // expected behaviour"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":92}},{"path":"src/test/java/seedu/investigapptor/logic/CommandHistoryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class CommandHistoryTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void add() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        final String validCommand \u003d \"clear\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        final String invalidCommand \u003d \"adds Bob\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        history.add(validCommand);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        history.add(invalidCommand);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":26}},{"path":"src/test/java/seedu/investigapptor/commons/util/CollectionUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class CollectionUtilTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no arguments"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // any non-empty argument list"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // null reference"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // null reference"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // empty list"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // list with all non-null elements"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", new Integer(1)));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void elementsAreUnique() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // empty list"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertAreUnique();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // only one object"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertAreUnique((Object) null);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertAreUnique(1);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertAreUnique(\"\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertAreUnique(\"abc\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // all objects unique"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertAreUnique(\"abc\", \"ab\", \"a\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertAreUnique(1, 2);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // some identical objects"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertNotUnique(\"abc\", \"abc\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertNotUnique(\"abc\", \"\", \"abc\", \"ABC\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertNotUnique(\"\", \"abc\", \"a\", \"abc\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertNotUnique(1, new Integer(1));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertNotUnique(null, 1, new Integer(1));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertNotUnique(null, null);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertNotUnique(null, \"a\", \"b\", null);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            requireAllNonNull(objects);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"The expected NullPointerException was not thrown\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            // expected behavior"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            requireAllNonNull(collection);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"The expected NullPointerException was not thrown\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            // expected behavior"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertAreUnique(Object... objects) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(CollectionUtil.elementsAreUnique(Arrays.asList(objects)));"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void assertNotUnique(Object... objects) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertFalse(CollectionUtil.elementsAreUnique(Arrays.asList(objects)));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":149}},{"path":"src/test/java/seedu/investigapptor/commons/util/ConfigUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/ConfigUtilTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void read_null_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        read(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        read(\"NotJsonFormatConfig.json\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        config.setAppTitle(\"Typical App Title\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(\"C:\\\\preferences.json\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() throws IOException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        save(null, \"SomeFile.json\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void save_nullFile_throwsNullPointerException() throws IOException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        save(new Config(), null);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String configFilePath \u003d testFolder.getRoot() + File.separator + \"TempConfig.json\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        original.setAppTitle(\"Updated Title\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                                  ? TEST_DATA_FOLDER + configFileInTestDataFolder"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                                  : null;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":127}},{"path":"src/test/java/seedu/investigapptor/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.XmlSerializableInvestigapptor;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.InvestigapptorBuilder;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validInvestigapptor.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempInvestigapptor.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        XmlUtil.getDataFromFile(null, Investigapptor.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, Investigapptor.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, Investigapptor.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableInvestigapptor.class)"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"                                        .toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(4, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(1, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"        XmlUtil.saveDataToFile(null, new Investigapptor());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"quentinkhoo"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new Investigapptor());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"quentinkhoo"},"content":"        XmlSerializableInvestigapptor dataToWrite \u003d new XmlSerializableInvestigapptor(new Investigapptor());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"quentinkhoo"},"content":"        XmlSerializableInvestigapptor dataFromFile \u003d XmlUtil.getDataFromFile("},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":"                                                        TEMP_FILE, XmlSerializableInvestigapptor.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"quentinkhoo"},"content":"        InvestigapptorBuilder builder \u003d new InvestigapptorBuilder(new Investigapptor());"},{"lineNumber":134,"author":{"gitID":"quentinkhoo"},"content":"        dataToWrite \u003d new XmlSerializableInvestigapptor("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableInvestigapptor.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":23,"-":125}},{"path":"src/test/java/seedu/investigapptor/logic/UndoRedoStackUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoableCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Contains helper methods for testing {@code UndoRedoStack}."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class UndoRedoStackUtil {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Adds {@code undoElements} into {@code UndoRedoStack#undoStack} and adds {@code redoElements}"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * into {@code UndoRedoStack#redoStack}. The first element in both {@code undoElements} and {@code redoElements}"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * will be the bottommost element in the respective stack in {@code undoRedoStack}, while the last element will"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * be the topmost element."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static UndoRedoStack prepareStack(List\u003cUndoableCommand\u003e undoElements,"},{"lineNumber":19,"author":{"gitID":"-"},"content":"                                             List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        undoElements.forEach(undoRedoStack::push);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Collections.reverse(redoElements);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        redoElements.forEach(undoRedoStack::push);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        redoElements.forEach(unused -\u003e undoRedoStack.popUndo());"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":27}},{"path":"src/test/java/seedu/investigapptor/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"pkaijun"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListInvestigatorCommand;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        String deleteCommand \u003d \"deleteinvestigator 9\";"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        String listInvestigatorCommand \u003d ListInvestigatorCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(listInvestigatorCommand, ListInvestigatorCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"        assertHistoryCorrect(listInvestigatorCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"     *      - {@code expectedModel}\u0027s investigapptor book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":2,"quentinkhoo":16,"-":106}},{"path":"src/test/java/seedu/investigapptor/logic/parser/FindInvestTagsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestTagsCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"public class FindInvestTagsCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    private FindInvestTagsCommandParser parser \u003d new FindInvestTagsCommandParser();"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"                FindInvestTagsCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"    public void parse_validArgs_returnsFindInvestTagsCommand() {"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"        // no leading and trailing whitespaces. arguments are lowercase as comparison is lowercase based"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        FindInvestTagsCommand expectedFindCommand \u003d"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"                new FindInvestTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"teama\", \"new\")));"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        assertParseSuccess(parser, \"teama new\", expectedFindCommand);"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"        assertParseSuccess(parser, \" \\n teama \\n \\t new  \\t\", expectedFindCommand);"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":23,"quentinkhoo":4,"-":9}},{"path":"src/test/java/seedu/investigapptor/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":36}},{"path":"src/test/java/seedu/investigapptor/logic/parser/FindCaseCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseCommand;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CaseNameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCaseCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCaseCommandParser parser \u003d new FindCaseCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCaseCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCaseCommand() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        FindCaseCommand expectedFindCaseCommand \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                new FindCaseCommand(new CaseNameContainsKeywordsPredicate(Arrays.asList(\"Alpha\", \"Bravo\")));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alpha Bravo\", expectedFindCaseCommand);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alpha \\n \\t Bravo  \\t\", expectedFindCaseCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":30}},{"path":"src/test/java/seedu/investigapptor/logic/parser/SetPasswordCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.SetPasswordCommand;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":" * Note that these test cases cover only input in set password \u003cinput\u003e"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":" * the testing for the prior part is done in SetCommandParser"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"public class SetPasswordCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    private SetPasswordCommandParser parser;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    public void setUp() {"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        this.parser \u003d new SetPasswordCommandParser();"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"        //no space before prefix"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"        assertParseFailure(parser, \"pw/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"                SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        //empty password"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        assertParseFailure(parser, \" pw/\", Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        //presence of space password"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        assertParseFailure(parser, \" pw/ password\", Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        //insufficient length password"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        assertParseFailure(parser, \" pw/passwor\", Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        assertParseSuccess(parser, \" pw/password\", new SetPasswordCommand(new Password(\"password\")));"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":44,"-":3}},{"path":"src/test/java/seedu/investigapptor/logic/parser/FindCaseTagsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseTagsCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"public class FindCaseTagsCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    private FindCaseTagsCommandParser parser \u003d new FindCaseTagsCommandParser();"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"                FindCaseTagsCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"    public void parse_validArgs_returnsFindInvestTagsCommand() {"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"        // no leading and trailing whitespaces. arguments are lowercase as comparison is lowercase based"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        FindCaseTagsCommand expectedFindCommand \u003d"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"                new FindCaseTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"murder\", \"robbery\")));"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        assertParseSuccess(parser, \"murder robbery\", expectedFindCommand);"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"        assertParseSuccess(parser, \" \\n murder \\n \\t robbery  \\t\", expectedFindCommand);"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":23,"quentinkhoo":4,"-":9}},{"path":"src/test/java/seedu/investigapptor/logic/parser/FindInvestigatorCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestigatorCommand;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindInvestigatorCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindInvestigatorCommandParser parser \u003d new FindInvestigatorCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindInvestigatorCommand() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        FindInvestigatorCommand expectedFindInvestigatorCommand \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                new FindInvestigatorCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindInvestigatorCommand);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindInvestigatorCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":30}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"\u003d Investigapptor - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toclevels: 3"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":sectnumlevels: 6"},{"lineNumber":8,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":9,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":10,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B3/main/tree/master"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":":teamURL: https://github.com/CS2103JAN2018-F14-B3"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"By: `Team F14-B3`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d Introduction"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d What is Investigapptor"},{"lineNumber":23,"author":{"gitID":"-"},"content":"Investigapptor is desktop application for a team of professional"},{"lineNumber":24,"author":{"gitID":"-"},"content":"investigators to easily manage crime cases that have been"},{"lineNumber":25,"author":{"gitID":"-"},"content":"delegated to them."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Core Team"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor was deveoped and is continually being maintained and"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"improved upon by link:teamURL[Team F14-B3]."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d About this Developer Guide"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"This developer guide serves to assist you in making contributions to"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor. To get started, jump to \u003c\u003cSetting Up\u003e\u003e."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d Setting Up"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"Follow the instructions below to set up and configure `Investigapptor`"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"project files on your computer."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor requires you to have the following programs installed"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"in order for you to work on it further."},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"- *JDK `1.8.0_60`* or later."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"[TIP]"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"If you do not"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"already have it installed, you can download it from"},{"lineNumber":48,"author":{"gitID":"-"},"content":"link:http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html[here]."},{"lineNumber":49,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":51,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"- *IntelliJ* IDE"},{"lineNumber":54,"author":{"gitID":"-"},"content":"+"},{"lineNumber":55,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":57,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"To setup Investigapptor on IntelliJ, follow the steps below."},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":64,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":65,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":66,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":67,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":68,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":69,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":71,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":72,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":73,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"To verify that the setup is completed, you should"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":". Run the `seedu.investigapptor.MainApp` and try a few commands"},{"lineNumber":79,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"This subsection would guide you through in setting up certain configurations"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"that you may find useful as you work on this project. It is highly recommended"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"that you make these configurations before you write any code."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":91,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":92,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":95,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-F14-B3/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-F14-B3/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":115,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"quentinkhoo"},"content":"When you are ready to start coding, get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":122,"author":{"gitID":"-"},"content":"This section will explain structure of the Investigapptor and what each component of the"},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"Investigapptor does. With a clear understanding of the design, it becomes much easier for you"},{"lineNumber":124,"author":{"gitID":"quentinkhoo"},"content":"to identify where and how your enhancement should be implemented."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":127,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"quentinkhoo"},"content":"The *_Architecture Diagram_* as shown in \u003c\u003cArcDiagram, Architecture Diagram\u003e\u003e"},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":" below explains the high-level design of the Application."},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":" Given below is a quick overview of each component."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"quentinkhoo"},"content":"[[ArcDiagram]]"},{"lineNumber":134,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":135,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":"The `.pptx` files used to create diagrams in this document can be found in the"},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"quentinkhoo"},"content":"`Main` has only one class called"},{"lineNumber":143,"author":{"gitID":"quentinkhoo"},"content":"link:{repoURL}/src/main/java/seedu/investigapptor/MainApp.java[`MainApp`]."},{"lineNumber":144,"author":{"gitID":"quentinkhoo"},"content":"It is responsible for:"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"quentinkhoo"},"content":"* At Investigapptor launch: Initializing the components in the correct sequence, and connects them up with each other."},{"lineNumber":147,"author":{"gitID":"-"},"content":"* At shut down: Shutting down the components and invokes cleanup method where necessary."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":152,"author":{"gitID":"quentinkhoo"},"content":"* `LogsCenter` : Used by many classes to write log messages to the Investigapptor\u0027s log file."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"quentinkhoo"},"content":"The rest of the Application consists of four components."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"quentinkhoo"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the Application."},{"lineNumber":157,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":158,"author":{"gitID":"quentinkhoo"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of Investigapptor in-memory."},{"lineNumber":159,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":164,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":169,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `deletecase 1`."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":".Component interactions for `deletecase 1` command (part 1)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"image::SDforDeleteCase.png[width\u003d\"800\"]"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":180,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `InvestigapptorChangedEvent` when the Investigapptor data is changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":".Component interactions for `deletecase1` command (part 2)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":188,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":193,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":197,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/investigapptor/ui/Ui.java[`Ui.java`]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `CrimeCaseListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/investigapptor/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":215,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":216,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":222,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/investigapptor/logic/Logic.java[`Logic.java`]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"quentinkhoo"},"content":".  `Logic` uses the `InvestigapptorParser` class to parse the user command."},{"lineNumber":225,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":226,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":227,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deletecase 1\")` API call."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `deletecase 1` Command"},{"lineNumber":232,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":238,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/investigapptor/model/Model.java[`Model.java`]"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":245,"author":{"gitID":"-"},"content":"* stores the Investigapptor data."},{"lineNumber":246,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":247,"author":{"gitID":"quentinkhoo"},"content":"* exposes an unmodifiable `ObservableList\u003cCrimeCase\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":248,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":254,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/investigapptor/storage/Storage.java[`Storage.java`]"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":261,"author":{"gitID":"-"},"content":"* can save the Investigapptor data in xml format and read it back."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"quentinkhoo"},"content":"Classes used by multiple components are in the `seedu.investigapptor.commons` package."},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Laying the Groundwork"},{"lineNumber":273,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":275,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuration"},{"lineNumber":276,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"For starters, you can control certain properties of the application, such as:"},{"lineNumber":278,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"* application name"},{"lineNumber":280,"author":{"gitID":"-"},"content":"* logging level"},{"lineNumber":281,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"through the configuration file (default: `config.json`)."},{"lineNumber":283,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Logging"},{"lineNumber":285,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":287,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":289,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":290,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":291,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":293,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":295,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":296,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":297,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":298,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":300,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"quentinkhoo"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which"},{"lineNumber":303,"author":{"gitID":"quentinkhoo"},"content":"resides inside `LogicManager`. It supports undoing and redoing of"},{"lineNumber":304,"author":{"gitID":"quentinkhoo"},"content":" commands that modifies the state of the Investigapptor (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":313,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":314,"author":{"gitID":"-"},"content":"----"},{"lineNumber":315,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"},{"lineNumber":321,"author":{"gitID":"-"},"content":"----"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":324,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":325,"author":{"gitID":"-"},"content":"----"},{"lineNumber":326,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"-"},"content":"}"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":"}"},{"lineNumber":341,"author":{"gitID":"-"},"content":"----"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":354,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":363,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":372,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":391,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":392,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":393,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":394,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":395,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":402,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":403,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":404,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":410,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":411,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":412,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":413,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":414,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":415,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":421,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":422,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":423,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":424,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":425,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":426,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Functional Enhancements"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"// tag::password[]"},{"lineNumber":431,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Password feature"},{"lineNumber":432,"author":{"gitID":"quentinkhoo"},"content":"The password feature allows for the user to set a password"},{"lineNumber":433,"author":{"gitID":"quentinkhoo"},"content":"for the application. This password can then be disclosed only to"},{"lineNumber":434,"author":{"gitID":"quentinkhoo"},"content":"authorised users so as disallow unauthorised users from accessing"},{"lineNumber":435,"author":{"gitID":"quentinkhoo"},"content":" or modifying the application data."},{"lineNumber":436,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":438,"author":{"gitID":"quentinkhoo"},"content":"This subsection will describe the current implementation of the password"},{"lineNumber":439,"author":{"gitID":"quentinkhoo"},"content":"feature. An overview of how the password feature is implemented can be"},{"lineNumber":440,"author":{"gitID":"quentinkhoo"},"content":"seen in the sequence diagram below:"},{"lineNumber":441,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":442,"author":{"gitID":"quentinkhoo"},"content":"[[HighLevelDiagram]]"},{"lineNumber":443,"author":{"gitID":"quentinkhoo"},"content":".High Level Sequence Diagram of Password Feature"},{"lineNumber":444,"author":{"gitID":"quentinkhoo"},"content":"image::PasswordHighLevelSequenceDiagram.png[width\u003d\"790\"]"},{"lineNumber":445,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Logic Component"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"quentinkhoo"},"content":"When a `setpassword` command is executed, a"},{"lineNumber":449,"author":{"gitID":"quentinkhoo"},"content":"link:{repoUrl}/src/main/java/seedu/investigapptor/logic/commands/SetPasswordCommand.java[SetPasswordCommand]"},{"lineNumber":450,"author":{"gitID":"quentinkhoo"},"content":"object gets created if the parsing of the command was successful. This"},{"lineNumber":451,"author":{"gitID":"quentinkhoo"},"content":"will in turn make a call to the `updatePassword` function in the `Model`"},{"lineNumber":452,"author":{"gitID":"quentinkhoo"},"content":"component, as shown in the sequence diagram below:"},{"lineNumber":453,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":454,"author":{"gitID":"quentinkhoo"},"content":"[[LogicDiagram]]"},{"lineNumber":455,"author":{"gitID":"quentinkhoo"},"content":".Password Feature\u0027s Logic Component Sequence Diagram"},{"lineNumber":456,"author":{"gitID":"quentinkhoo"},"content":"image::PasswordLogicSequenceDiagram.png[width\u003d\"790\"]"},{"lineNumber":457,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Model Component"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"quentinkhoo"},"content":"Upon being called, the `updatePassword` function in the"},{"lineNumber":461,"author":{"gitID":"quentinkhoo"},"content":"link:{repoUrl}/src/main/java/seedu/investigapptor/model/ModelManager.java[ModelManager]"},{"lineNumber":462,"author":{"gitID":"quentinkhoo"},"content":"would raise a new `InvestigapptorChangedEvent` to indicate that the"},{"lineNumber":463,"author":{"gitID":"quentinkhoo"},"content":"password has been updated. The entire sequence diagram for the `Model`"},{"lineNumber":464,"author":{"gitID":"quentinkhoo"},"content":"component as shown below describes this in greater detail."},{"lineNumber":465,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":466,"author":{"gitID":"quentinkhoo"},"content":"[[ModelDiagram]]"},{"lineNumber":467,"author":{"gitID":"quentinkhoo"},"content":".Password Feature\u0027s Model Component Sequence Diagram"},{"lineNumber":468,"author":{"gitID":"quentinkhoo"},"content":"image::PasswordModelSequenceDiagram.png[width\u003d\"790\"]"},{"lineNumber":469,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":470,"author":{"gitID":"quentinkhoo"},"content":"Whenever then link:{repoUrl}/src/main/java/seedu/investigapptor/model/Password.java[Password]"},{"lineNumber":471,"author":{"gitID":"quentinkhoo"},"content":" Object\u0027s `updatePassword` function is called,"},{"lineNumber":472,"author":{"gitID":"quentinkhoo"},"content":"the \u003c\u003chash, hash\u003e\u003e of the password is first generated with the `generatePasswordHash`"},{"lineNumber":473,"author":{"gitID":"quentinkhoo"},"content":"function. This function makes use of the link:https://en.wikipedia.org/wiki/SHA-2[SHA-256]"},{"lineNumber":474,"author":{"gitID":"quentinkhoo"},"content":"hashing algorithm as shown below:"},{"lineNumber":475,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":476,"author":{"gitID":"quentinkhoo"},"content":"[source, java]"},{"lineNumber":477,"author":{"gitID":"quentinkhoo"},"content":"----"},{"lineNumber":478,"author":{"gitID":"quentinkhoo"},"content":"public static String generatePasswordHash(String password) {"},{"lineNumber":479,"author":{"gitID":"quentinkhoo"},"content":"        String encodedHash \u003d null;"},{"lineNumber":480,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":481,"author":{"gitID":"quentinkhoo"},"content":"            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"},{"lineNumber":482,"author":{"gitID":"quentinkhoo"},"content":"            digest.update(INITIAL_VALUE.getBytes());"},{"lineNumber":483,"author":{"gitID":"quentinkhoo"},"content":"            if (!isNull(password)) {"},{"lineNumber":484,"author":{"gitID":"quentinkhoo"},"content":"                byte[] byteHash \u003d digest.digest(password.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":485,"author":{"gitID":"quentinkhoo"},"content":"                encodedHash \u003d Base64.getEncoder().encodeToString(byteHash);"},{"lineNumber":486,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":487,"author":{"gitID":"quentinkhoo"},"content":"        } catch (NoSuchAlgorithmException noSuchAlgoException) {"},{"lineNumber":488,"author":{"gitID":"quentinkhoo"},"content":"            System.out.println(\"Cannot generate hash: MessageDigest.getInstance\");"},{"lineNumber":489,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":490,"author":{"gitID":"quentinkhoo"},"content":"        return encodedHash;"},{"lineNumber":491,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":492,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":493,"author":{"gitID":"quentinkhoo"},"content":"----"},{"lineNumber":494,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Storage Component"},{"lineNumber":496,"author":{"gitID":"quentinkhoo"},"content":"With regards to the password feature, the `Storage` component is responsible"},{"lineNumber":497,"author":{"gitID":"quentinkhoo"},"content":"not only for storing the currently set password, but also for checking whether"},{"lineNumber":498,"author":{"gitID":"quentinkhoo"},"content":"an input password is correct. If the input password is correct, a"},{"lineNumber":499,"author":{"gitID":"quentinkhoo"},"content":"`ValidPasswordEvent` is raised, as shown in the sequence diagram below:"},{"lineNumber":500,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":501,"author":{"gitID":"quentinkhoo"},"content":"[[StorageDiagram]]"},{"lineNumber":502,"author":{"gitID":"quentinkhoo"},"content":".Password Feature\u0027s Storage Component Sequence Diagram"},{"lineNumber":503,"author":{"gitID":"quentinkhoo"},"content":"image::PasswordInputSequenceDiagram.png[width\u003d\"790\"]"},{"lineNumber":504,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Alternatives Considered"},{"lineNumber":506,"author":{"gitID":"quentinkhoo"},"content":"This subsection would describe other designs and implementations"},{"lineNumber":507,"author":{"gitID":"quentinkhoo"},"content":"that were taken into consideration."},{"lineNumber":508,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Usage of password feature"},{"lineNumber":510,"author":{"gitID":"quentinkhoo"},"content":"* **Alternative 1 (Current Choice)**: Have a single password for the entire"},{"lineNumber":511,"author":{"gitID":"quentinkhoo"},"content":"application"},{"lineNumber":512,"author":{"gitID":"quentinkhoo"},"content":"** Pros: Investigators within a team can simply share the password."},{"lineNumber":513,"author":{"gitID":"quentinkhoo"},"content":"** Cons: There is no access control between investigators of different"},{"lineNumber":514,"author":{"gitID":"quentinkhoo"},"content":"ranks."},{"lineNumber":515,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":516,"author":{"gitID":"quentinkhoo"},"content":"* **Alternative 2 **: Have a separate password for each investigator."},{"lineNumber":517,"author":{"gitID":"quentinkhoo"},"content":"** Pros: Each investigator can have their own password, allowing for"},{"lineNumber":518,"author":{"gitID":"quentinkhoo"},"content":"access control between investigators of different ranks."},{"lineNumber":519,"author":{"gitID":"quentinkhoo"},"content":"** Cons: Requires an additional password attribute for each investigator."},{"lineNumber":520,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":521,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Password related commands being undoable"},{"lineNumber":522,"author":{"gitID":"quentinkhoo"},"content":"* **Alternative 1 (Current Choice)**: Password related commands should not be"},{"lineNumber":523,"author":{"gitID":"quentinkhoo"},"content":"undoable"},{"lineNumber":524,"author":{"gitID":"quentinkhoo"},"content":"** Pros: Security becomes tighter."},{"lineNumber":525,"author":{"gitID":"quentinkhoo"},"content":"** Cons: More effort is required in configuring passwords."},{"lineNumber":526,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":527,"author":{"gitID":"quentinkhoo"},"content":"* **Alternative 2 **: Password related commands should be undoable."},{"lineNumber":528,"author":{"gitID":"quentinkhoo"},"content":"** Pros: Less effort is required in configuring passwords."},{"lineNumber":529,"author":{"gitID":"quentinkhoo"},"content":"** Cons: Security becomes less tight due to the additional method of"},{"lineNumber":530,"author":{"gitID":"quentinkhoo"},"content":"configuring passwords"},{"lineNumber":531,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"// end::password[]"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"//tag::calendar[]"},{"lineNumber":535,"author":{"gitID":"-"},"content":"[[Calendar-Feature]]"},{"lineNumber":536,"author":{"gitID":"-"},"content":"//tag::calendar2[]"},{"lineNumber":537,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Calendar feature"},{"lineNumber":538,"author":{"gitID":"-"},"content":"The calendar feature serves as an interface to provide an overview of all the cases"},{"lineNumber":539,"author":{"gitID":"-"},"content":"present in the `CrimeCaseListPanel`. The entries are colour-coded according to its case\u0027s"},{"lineNumber":540,"author":{"gitID":"-"},"content":"status. Red represents the status `open`; whereas green represents the status `close`."},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"[[CalendarFeature]]"},{"lineNumber":543,"author":{"gitID":"-"},"content":".Calendar Interface"},{"lineNumber":544,"author":{"gitID":"-"},"content":"image::CalendarFeature.PNG[width\u003d\"700\"]"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":547,"author":{"gitID":"-"},"content":"The calendar serves as an organization tool to arrange the cases according to its start and end date,"},{"lineNumber":548,"author":{"gitID":"-"},"content":"and it also categorizes the cases by its current status. This feature is useful for the investigators as it provides them an overview of all the cases that they are looking for."},{"lineNumber":549,"author":{"gitID":"-"},"content":"Having such an overview, the investigators can instantly identify all the required cases at a quick glance."},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"This feature not only brings in convenience for the investigators, it also eliminates the need of manual work in"},{"lineNumber":552,"author":{"gitID":"-"},"content":"scheduling existing cases. This thus improves the efficiency of the investigators as time will be spent on"},{"lineNumber":553,"author":{"gitID":"-"},"content":"significant events such as investigative work instead of bookkeeping tasks."},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":556,"author":{"gitID":"-"},"content":"The calendar graphical interface was implemented with an external library, https://github.com/dlemmermann/CalendarFX[CalendarFX]."},{"lineNumber":557,"author":{"gitID":"-"},"content":"The calendar interface, `CalendarPanel` is part of the UI component which supports the view of the cases that are currently present"},{"lineNumber":558,"author":{"gitID":"-"},"content":"in the panel list."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"The following sequence diagram illustrates how the components within the `CalendarPanel`"},{"lineNumber":561,"author":{"gitID":"-"},"content":"interacts with each other."},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"[[SDforCalendar]]"},{"lineNumber":564,"author":{"gitID":"-"},"content":".Component interactions within `CalendarPanel`"},{"lineNumber":565,"author":{"gitID":"-"},"content":"image::SDForCalendar.png[width\u003d\"800\"]"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"The `CalendarPanel` comprises of the following attributes and objects:"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"* A `Calendar` object called `caseCloseCalendar` which stores the entries consisting of cases whose status is `close`"},{"lineNumber":570,"author":{"gitID":"-"},"content":"* A `Calendar` object called `caseOpenCalendar` which stores the entries consisting of cases whose status is `open`"},{"lineNumber":571,"author":{"gitID":"-"},"content":"* A `CalendarSource` object called `caseCalendarSource` which stores the calendars, `caseCloseCalendar` and `caseOpenCalendar`"},{"lineNumber":572,"author":{"gitID":"-"},"content":"* A `CalendarView` FXML object called `calendarPanel` which provides the graphical view (interface) of the calendar"},{"lineNumber":573,"author":{"gitID":"-"},"content":"* An `ObservableList\u003cCrimeCase\u003e` called `crimeList` that stores the current list of the crime cases"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"The `CalendarPanel` does event handling in order to keep its view updated with the list of"},{"lineNumber":576,"author":{"gitID":"-"},"content":"cases that is currently displayed on the `CrimeCaseListPanel`. Hence, when either one of the two events, `InvestigapptorChangedEvent` or `FilteredCrimeCaseListChangedEvent`"},{"lineNumber":577,"author":{"gitID":"-"},"content":"has been raised from the `EventsCenter`, the `CalendarPanel` will handle the event by updating the"},{"lineNumber":578,"author":{"gitID":"-"},"content":"`FilteredCrimeCaseList`. The following section below will illustrate in details"},{"lineNumber":579,"author":{"gitID":"-"},"content":"on how the event handling was carried out by `CalendarPanel`."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Events-Driven Entries"},{"lineNumber":582,"author":{"gitID":"-"},"content":"The entries displayed on the calendar will be changed according to the commands that were executed."},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Event raised from data change in application"},{"lineNumber":585,"author":{"gitID":"-"},"content":"As mentioned in the \u003c\u003cEvents, event-driven design section\u003e\u003e, the model will raise"},{"lineNumber":586,"author":{"gitID":"-"},"content":"an `InvestigapptorChangedEvent` to indicate that the data in the application has changed."},{"lineNumber":587,"author":{"gitID":"-"},"content":"In the following sequence diagrams, it indicates how the components interacts when the user"},{"lineNumber":588,"author":{"gitID":"-"},"content":"enters the commands that changes the data in the investigapptor. (Commands are as shown in the diagrams)."},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagram for `addcase`"},{"lineNumber":591,"author":{"gitID":"-"},"content":"[[SDforAddCase]]"},{"lineNumber":592,"author":{"gitID":"-"},"content":".Component interactions for `addcase 1` command"},{"lineNumber":593,"author":{"gitID":"-"},"content":"image::SDforAddCase.png[width\u003d\"800\"]"},{"lineNumber":594,"author":{"gitID":"-"},"content":"For the `addcase` command, when a new case has been added to the investigapptor, it will raise"},{"lineNumber":595,"author":{"gitID":"-"},"content":"an `InvestigapptorChangedEvent` which will update the calendar to reflect the newly added case."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagram for `deletecase`"},{"lineNumber":598,"author":{"gitID":"-"},"content":"[[SDforDeleteCase]]"},{"lineNumber":599,"author":{"gitID":"-"},"content":".Component interactions for `deletecase 1` command"},{"lineNumber":600,"author":{"gitID":"-"},"content":"image::SDforDeleteCase.png[width\u003d\"800\"]"},{"lineNumber":601,"author":{"gitID":"-"},"content":"Similarly, for the `deletecase` command, when a case has been deleted from the investigapptor, it"},{"lineNumber":602,"author":{"gitID":"-"},"content":"will raise the `InvestigapptorChangedEvent` which will remove the case from the calendar."},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagram for commands that updates the case\u0027s details"},{"lineNumber":605,"author":{"gitID":"-"},"content":"[[SDForUpdateCase]]"},{"lineNumber":606,"author":{"gitID":"-"},"content":".Component interactions for commands that update the details of a case"},{"lineNumber":607,"author":{"gitID":"-"},"content":"image::SDforUpdateCase.png[width\u003d\"800\"]"},{"lineNumber":608,"author":{"gitID":"-"},"content":"As for `editcase` and `close` command, it will make changes to the details of the cases. When the"},{"lineNumber":609,"author":{"gitID":"-"},"content":"case is updated, the investigapptor will raise the `InvestigapptorChangedEvent` which will"},{"lineNumber":610,"author":{"gitID":"-"},"content":"update the calendar by displaying the updated entry."},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagram for handling `InvestigapptorChangedEvent`"},{"lineNumber":613,"author":{"gitID":"-"},"content":"[[SDForInvestigapptorChangedEventHandling]]"},{"lineNumber":614,"author":{"gitID":"-"},"content":".Handling `InvestigapptorChangedEvent`"},{"lineNumber":615,"author":{"gitID":"-"},"content":"image::SDForInvestigapptorChangedEventHandling.png[width\u003d\"800\"]"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"The \u003c\u003cSDForInvestigapptorChangedEventHandling, diagram above\u003e\u003e represents how the `EventsCenter`"},{"lineNumber":618,"author":{"gitID":"-"},"content":"reacts to the `InvestigapptorChangedEvent`."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"When the commands mentioned in these diagrams - \u003c\u003cSDforAddCase, #1\u003e\u003e, \u003c\u003cSDforDeleteCase, #2\u003e\u003e, \u003c\u003cSDForUpdateCase, #3\u003e\u003e"},{"lineNumber":621,"author":{"gitID":"-"},"content":"are executed, the `InvestigapptorChangedEvent` will be raised and the function"},{"lineNumber":622,"author":{"gitID":"-"},"content":"`handleInvestigapptorChangedEvent` in `CalendarPanel` will be invoked. The function"},{"lineNumber":623,"author":{"gitID":"-"},"content":"would then re-initialize `crimeList` to the updated `crimeCaseList` and proceed to"},{"lineNumber":624,"author":{"gitID":"-"},"content":"update the calendar accordingly."},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":627,"author":{"gitID":"-"},"content":"----"},{"lineNumber":628,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":629,"author":{"gitID":"-"},"content":"private void handleInvestigapptorChangedEvent(InvestigapptorChangedEvent event) {"},{"lineNumber":630,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":631,"author":{"gitID":"-"},"content":"    crimeList \u003d event.data.getCrimeCaseList();"},{"lineNumber":632,"author":{"gitID":"-"},"content":"    Platform.runLater(this::updateCalendar);"},{"lineNumber":633,"author":{"gitID":"-"},"content":"}"},{"lineNumber":634,"author":{"gitID":"-"},"content":"----"},{"lineNumber":635,"author":{"gitID":"-"},"content":"//end::calendar2[]"},{"lineNumber":636,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"[[Calendar-Events-Filter]]"},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Event raised from filtering the `CrimeCase` list"},{"lineNumber":639,"author":{"gitID":"-"},"content":"In the following sequence diagram, it shows how the components interacts when the user issues"},{"lineNumber":640,"author":{"gitID":"-"},"content":"the commands that filters  the cases that the user is looking for. (Commands are shown in the diagram)."},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"These commands does not change the data in the investigapptor, but it filters the cases that matches the keywords"},{"lineNumber":643,"author":{"gitID":"-"},"content":"predicate which is passed in as an parameter in `updateFilteredCrimeCaseList(keywords)`."},{"lineNumber":644,"author":{"gitID":"-"},"content":"When the `FilteredCrimeCaseList` has been updated, it  will contain the cases that the user is looking for."},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagram for commands that update `FilteredCrimeCaseList`"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"[[SDForFindCase]]"},{"lineNumber":649,"author":{"gitID":"-"},"content":".Component interactions for commands that update the `FilteredCrimeCaseList`"},{"lineNumber":650,"author":{"gitID":"-"},"content":"image::SDforFindCase.png[width\u003d\"800\"]"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"When these commands are executed, it will raise a `FilteredCrimeCaseListChangedEvent` which will"},{"lineNumber":653,"author":{"gitID":"-"},"content":"update the calendar with the cases that are currently in the `FilteredCrimeCaseList`."},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagram for handling `FilteredCrimeCaseListChangedEvent`"},{"lineNumber":656,"author":{"gitID":"-"},"content":"[[SDforFilteredCrimeCaseListChangedEventHandling]]"},{"lineNumber":657,"author":{"gitID":"-"},"content":".Handling `FilteredCrimeCaseListChangedEvent`"},{"lineNumber":658,"author":{"gitID":"-"},"content":"image::SDforFilteredCrimeCaseListChangedEventHandling.png[width\u003d\"800\"]"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"The \u003c\u003cSDforFilteredCrimeCaseListChangedEventHandling, diagram above\u003e\u003e represents how the `EventsCenter`"},{"lineNumber":661,"author":{"gitID":"-"},"content":"reacts to the `FilteredCrimeCaseListChangedEvent`."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"When the commands in the \u003c\u003cSDForFindCase\u003e\u003e is executed, it will update the `FilteredCrimeCaseList` in the"},{"lineNumber":664,"author":{"gitID":"-"},"content":"model component and the `FilteredCrimeCaseListChangedEvent` will be raised."},{"lineNumber":665,"author":{"gitID":"-"},"content":"`handleFilteredCrimeCaseListChangedEvent` from `CalendarPanel` will be invoked which"},{"lineNumber":666,"author":{"gitID":"-"},"content":"updates the `crimeList` to the updated `FilteredCrimeCaseList`. It will then"},{"lineNumber":667,"author":{"gitID":"-"},"content":"update the calendar accordingly with the updated `crimeList`."},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":670,"author":{"gitID":"-"},"content":"----"},{"lineNumber":671,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":672,"author":{"gitID":"-"},"content":"private void handleFilteredCrimeCaseListChangedEvent(FilteredCrimeCaseListChangedEvent event) {"},{"lineNumber":673,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":674,"author":{"gitID":"-"},"content":"    crimeList \u003d event.getFilteredCrimeCaseList();"},{"lineNumber":675,"author":{"gitID":"-"},"content":"    Platform.runLater(this::updateCalendar);"},{"lineNumber":676,"author":{"gitID":"-"},"content":"}"},{"lineNumber":677,"author":{"gitID":"-"},"content":"----"},{"lineNumber":678,"author":{"gitID":"-"},"content":"//end::calendar[]"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"//tag::backup[]"},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Create backup"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"This feature allows users to create a new xml file of the current state of the Investigapptor"},{"lineNumber":684,"author":{"gitID":"-"},"content":"with a new name."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"As investigators may want to save the current state of the Investigapptor before progressing"},{"lineNumber":689,"author":{"gitID":"-"},"content":"or having to create a periodic backup to fall back on."},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"The `BackupCommand` is created when the command word `backup` is detected in the user input. It will then use the `BackupCommandParser`"},{"lineNumber":694,"author":{"gitID":"-"},"content":"ensure that the filename is alphanumeric. The `BackupCommand` will then call the `backupInvestigapptor` method from the model"},{"lineNumber":695,"author":{"gitID":"-"},"content":"and pass in the filename as a string."},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"[[backup-diagram]]"},{"lineNumber":698,"author":{"gitID":"-"},"content":".Backup Sequence Diagram"},{"lineNumber":699,"author":{"gitID":"-"},"content":"image::backupDiagram.png[width\u003d\"790\"]"},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"In the `Model`, the `backUpInvestigapptor` will raise the event `InvestigapptorBackupEvent` .The event contains filename which will be passed to"},{"lineNumber":704,"author":{"gitID":"-"},"content":"Storage component to start the saving sequence."},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"    public void backUpInvestigapptor(String fileName) {"},{"lineNumber":707,"author":{"gitID":"-"},"content":"        raise(new InvestigapptorBackupEvent(investigapptor, fileName));"},{"lineNumber":708,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"At the Storage component, the `handleInvestigapptorBackupEvent` will extract the filename and create a new"},{"lineNumber":711,"author":{"gitID":"-"},"content":"xml by using the `backupInvestigapptor` method."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"    public void handleInvestigapptorBackupEvent(InvestigapptorBackupEvent event) {"},{"lineNumber":714,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Backup command, saving to file\"));"},{"lineNumber":715,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":716,"author":{"gitID":"-"},"content":"            backupInvestigapptor(event.data, event.fileName);"},{"lineNumber":717,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":718,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":719,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":720,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":721,"author":{"gitID":"-"},"content":"//end::backup[]"},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"//tag::investigator[]"},{"lineNumber":724,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Investigator Features"},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `investigator` Package"},{"lineNumber":727,"author":{"gitID":"-"},"content":""},{"lineNumber":728,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":729,"author":{"gitID":"-"},"content":"As person class provided by the addressbook only has basic capability to store simple information such name and"},{"lineNumber":730,"author":{"gitID":"-"},"content":"phone number, we had to create a new `Investigator` package which can store and handle a list of `CrimeCases` which is a core"},{"lineNumber":731,"author":{"gitID":"-"},"content":"requirement for our product to work. We chose not to modify the `Person` package but instead extend from it as it will be easier"},{"lineNumber":732,"author":{"gitID":"-"},"content":"for you to implement new type of person object in the future such as suspects or witnesses."},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":735,"author":{"gitID":"-"},"content":"Currently the `Investigator` extends from the `Person` class, and the additional two properties the are:"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"11,10,20,20\", options\u003d\"header\"]"},{"lineNumber":738,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":739,"author":{"gitID":"-"},"content":"|Composition Of |Class |Constructor |Remark"},{"lineNumber":740,"author":{"gitID":"-"},"content":"|Person |Name |`new Name(“Jon Doe”)` |Stores a `String` that represents the name of the person."},{"lineNumber":741,"author":{"gitID":"-"},"content":"|Person |Phone |`new Phone(9123874)` |Stores an `int` that represents the phone number of the person."},{"lineNumber":742,"author":{"gitID":"-"},"content":"|Person |Email |`new Email(“JohnD@gmail.com”)` |Stores a `String` that represents the email of the person."},{"lineNumber":743,"author":{"gitID":"-"},"content":"|Person |Address |`new EndDate(\"Baker Street #01-04\")` |Stores a `String` that represents the address of the person."},{"lineNumber":744,"author":{"gitID":"-"},"content":"|Investigator |Rank |`new Status(\u00271\u0027)` |Store a `String` that represent a int value that can be converted to the appropriate \u003c\u003cRank\u003e\u003e."},{"lineNumber":745,"author":{"gitID":"-"},"content":"|Investigator |UniqueCrimeCaseList |`new Status()` | Stores a `UniqueCrimeCaseList` that contains all the cases the investigator is in charged of"},{"lineNumber":746,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"[[Rank]]"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"* `Rank`"},{"lineNumber":751,"author":{"gitID":"-"},"content":"+"},{"lineNumber":752,"author":{"gitID":"-"},"content":"Stores the rank of the investigator"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"[width\u003d\"50%\",cols\u003d\"15%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":755,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":756,"author":{"gitID":"-"},"content":"|Integer Value |Rank"},{"lineNumber":757,"author":{"gitID":"-"},"content":"|`1` |`Constable`"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"|`2` |`Sergeant`"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"|`3` |`Inspector`"},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"|`4` |`Detective`"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"|`5` |`Captain`"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"* `UniqueCrimeCaseList`"},{"lineNumber":771,"author":{"gitID":"-"},"content":"+"},{"lineNumber":772,"author":{"gitID":"-"},"content":"Stores and manages all the CrimeCases which the investigator is in charge of."},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Model"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"Currently the `Investigator` is upcasted and stored in the `Investigapptor` \u0027s `UniquePersonList`."},{"lineNumber":777,"author":{"gitID":"-"},"content":"This is done on purpose to allow future enhancement that allows us to implement types of people such as suspects and witnesses. Storing them together makes it easier to use general"},{"lineNumber":778,"author":{"gitID":"-"},"content":"functions."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"[invest-com]"},{"lineNumber":781,"author":{"gitID":"-"},"content":".Investigator in Model Component"},{"lineNumber":782,"author":{"gitID":"-"},"content":"image::investigatorComponent.png[width\u003d\"790\"]"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"The code below is from the `syncWithMasterTagList` function. It shows that"},{"lineNumber":785,"author":{"gitID":"-"},"content":"both Investigator and Person type are both return into the `UniquePersonList`."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Storage"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"As Investigator has addition properties compared to Person, `XmlAdaptedInvestigator` is created to convert"},{"lineNumber":790,"author":{"gitID":"-"},"content":"the `Investigator` into correct XML format. We had to also change the method of storing the in `Investigapptor`"},{"lineNumber":791,"author":{"gitID":"-"},"content":"the different classes have to be converted and stored in the correct format. To accomplish this,"},{"lineNumber":792,"author":{"gitID":"-"},"content":"two new methods were added which each return a person only list and a investigator only list to store them"},{"lineNumber":793,"author":{"gitID":"-"},"content":"separately"},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"This function will return only `Investigator` in the list"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"    public ObservableList\u003cInvestigator\u003e investigatorList() {"},{"lineNumber":798,"author":{"gitID":"-"},"content":"        Iterator irt \u003d iterator();"},{"lineNumber":799,"author":{"gitID":"-"},"content":"        ObservableList\u003cInvestigator\u003e investigators \u003d FXCollections.observableArrayList();"},{"lineNumber":800,"author":{"gitID":"-"},"content":"        while (irt.hasNext()) {"},{"lineNumber":801,"author":{"gitID":"-"},"content":"            Object element \u003d irt.next();"},{"lineNumber":802,"author":{"gitID":"-"},"content":"            if (element instanceof Investigator) {"},{"lineNumber":803,"author":{"gitID":"-"},"content":"                investigators.add((Investigator) element);"},{"lineNumber":804,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":805,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":806,"author":{"gitID":"-"},"content":"        return investigators;"},{"lineNumber":807,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"This function will only return `Person` in the list"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e personOnlyList() {"},{"lineNumber":812,"author":{"gitID":"-"},"content":"        Iterator irt \u003d iterator();"},{"lineNumber":813,"author":{"gitID":"-"},"content":"        ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":814,"author":{"gitID":"-"},"content":"        while (irt.hasNext()) {"},{"lineNumber":815,"author":{"gitID":"-"},"content":"            Object element \u003d irt.next();"},{"lineNumber":816,"author":{"gitID":"-"},"content":"            if (!(element instanceof Investigator)) {"},{"lineNumber":817,"author":{"gitID":"-"},"content":"                persons.add((Person) element);"},{"lineNumber":818,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":819,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":820,"author":{"gitID":"-"},"content":"        return persons;"},{"lineNumber":821,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"As the `Investigator` has to store multiple `CrimeCase` , instead of store the whole `CrimeCase` and all"},{"lineNumber":824,"author":{"gitID":"-"},"content":"its details inside of the `XmlAdaptedInvestigator`, we stored the hashcode instead to"},{"lineNumber":825,"author":{"gitID":"-"},"content":"reduce the amount of space used for storage."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Interaction between Investigator and CrimeCase"},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use mutual reference between Investigator and CrimeCase"},{"lineNumber":832,"author":{"gitID":"-"},"content":"** Pros: Easy and fast to find relation between Investigator and CrimeCase by using the reference"},{"lineNumber":833,"author":{"gitID":"-"},"content":"** Cons: Hard to implement due to the undo/redo feature due to creating multiple `Investigapptor` hence the reference"},{"lineNumber":834,"author":{"gitID":"-"},"content":"has to be correct for each instance."},{"lineNumber":835,"author":{"gitID":"-"},"content":"* **Alternative 2:** Using Association class"},{"lineNumber":836,"author":{"gitID":"-"},"content":"** Pros: Easier to implement. More compatible with the undo/redo feature"},{"lineNumber":837,"author":{"gitID":"-"},"content":"** Cons: Slower due to having to search through all the association class to find all all the connected"},{"lineNumber":838,"author":{"gitID":"-"},"content":" `Investigator` and `CrimeCase`. More duplicates in the XML file."},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"//end::investigator[]"},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"//tag::addinvestigator[]"},{"lineNumber":843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add investigator"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"The `addInvestigatorCommand` will create an instance of the Investigator class and store it in the Investigapptor."},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"The `addInvestigatorCommand` is important as you would want to be able to add your own investigator details into the"},{"lineNumber":850,"author":{"gitID":"-"},"content":"investigapptor before you can start editing and managing with the other commands."},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":853,"author":{"gitID":"-"},"content":"The `addInvestigatorCommand` is created when the command word `addinvestigator` is detected in the user input. It will then use the `ParserUtil`"},{"lineNumber":854,"author":{"gitID":"-"},"content":"to split the user input into its separate components (i.e. `Name`, `Phone`, `Email`, `Address`, `Rank`, `Set\u003cTag\u003e`). The"},{"lineNumber":855,"author":{"gitID":"-"},"content":"add investigator command will then create a Investigator instance and pass it from the logic component to the model component as shown"},{"lineNumber":856,"author":{"gitID":"-"},"content":"in \u003c\u003cadd-investLogic\u003e\u003e."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"[[add-investLogic]]"},{"lineNumber":859,"author":{"gitID":"-"},"content":".Add Investigator Logic Diagram"},{"lineNumber":860,"author":{"gitID":"-"},"content":"image::AddInvestigatorLogicDiagram.png[width\u003d\"790\"]"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"When initialising Investigapptor, the storage using the `addPerson()` method as well to populate the"},{"lineNumber":863,"author":{"gitID":"-"},"content":"Investigapptor thus it has to be able to correctly set up the reference to the `CrimeCase`. To do this,"},{"lineNumber":864,"author":{"gitID":"-"},"content":"when a `investigator` is added to Investigapptor, it will check its list of `CrimeCase` hashcodes against"},{"lineNumber":865,"author":{"gitID":"-"},"content":"the all the `CrimeCase` in the Investigapptor and add those that match into its list of `CrimeCase`."},{"lineNumber":866,"author":{"gitID":"-"},"content":"Only after adding the `CrimeCase` will the investigator be stored in the `persons` list as show in \u003c\u003cadd-invest\u003e\u003e."},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"[[add-invest]]"},{"lineNumber":869,"author":{"gitID":"-"},"content":".Add Investigator Sequence Diagram"},{"lineNumber":870,"author":{"gitID":"-"},"content":"image::AddInvestigatorSequenceDiagram.png[width\u003d\"790\"]"},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"Due to the Redo/Undo feature, multiple instance of the Investigapptor will be created which means the references may point to"},{"lineNumber":873,"author":{"gitID":"-"},"content":"the wrong instance. In order to fix this, hashcode is used to identify the correct the CrimeCase and set the correct reference."},{"lineNumber":874,"author":{"gitID":"-"},"content":"This is done by the convertHashtoCases method in the Investigapptor as show below."},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"The methods below are used to match and add the `CrimeCase` to the `investigator`."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"    private void convertHashToCases(Investigator key) {"},{"lineNumber":879,"author":{"gitID":"-"},"content":"        requireNonNull(key.getCaseListHashed());"},{"lineNumber":880,"author":{"gitID":"-"},"content":"        for (Integer i : key.getCaseListHashed()) {"},{"lineNumber":881,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":882,"author":{"gitID":"-"},"content":"                addCaseFromHash(key, i);"},{"lineNumber":883,"author":{"gitID":"-"},"content":"            } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":884,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Not possible, duplicate case while retrieving from xml\");"},{"lineNumber":885,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":886,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":887,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"    private void addCaseFromHash (Investigator key, int hash) throws DuplicateCrimeCaseException {"},{"lineNumber":890,"author":{"gitID":"-"},"content":"        for (CrimeCase c : cases) {"},{"lineNumber":891,"author":{"gitID":"-"},"content":"            if (c.hashCode() \u003d\u003d hash) {"},{"lineNumber":892,"author":{"gitID":"-"},"content":"                key.addCrimeCase(c);"},{"lineNumber":893,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":894,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":895,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Setting up Reference between `Investigator` and `CrimeCase` when loading the XML"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Using hashcode to reference `CrimeCase` when adding"},{"lineNumber":902,"author":{"gitID":"-"},"content":"** Pros: The `Investigator` will be able to find correct `CrimeCase` to reference despite having multiple instances."},{"lineNumber":903,"author":{"gitID":"-"},"content":"Storage takes lesser space as only the hashcode is required."},{"lineNumber":904,"author":{"gitID":"-"},"content":"** Cons: Have to scan every `CrimeCase` for each `CrimeCase` belonging to the Investigator."},{"lineNumber":905,"author":{"gitID":"-"},"content":"* **Alternative 2: Saving the whole `CrimeCase` inside the XML"},{"lineNumber":906,"author":{"gitID":"-"},"content":"** Pros: Able to reference the correct `CrimeCase` after loading the XML."},{"lineNumber":907,"author":{"gitID":"-"},"content":"** Cons: Takes up a lot of storage as two copy `CrimeCase` has to be saved, one in `UniqueCrimeCaseList`"},{"lineNumber":908,"author":{"gitID":"-"},"content":"and one in the `Investigator`."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"//end::addinvestigator[]"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"//tag::deleteinvestigator[]"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete investigator"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"The `deleteInvestigatorCommand` will find and delete the specified Investigator in the Investigapptor."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"The `deleteInvestigatorCommand` is important as you may not longer wish to store certain investigator or have made a mistake when"},{"lineNumber":921,"author":{"gitID":"-"},"content":"add the investigator."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":924,"author":{"gitID":"-"},"content":"The `deleteInvestigatorCommand` is created when the command word `deleteinvestigator` is"},{"lineNumber":925,"author":{"gitID":"-"},"content":"detected in the user input. It will then check if the index given is valid. If the index"},{"lineNumber":926,"author":{"gitID":"-"},"content":" is valid, it will check if the investigator at the index if it\u0027s `UniqueCaseList` is empty."},{"lineNumber":927,"author":{"gitID":"-"},"content":" If it is empty, it will call the `deletePerson` method from the `ModelManager`."},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"[[delete-investLogic]]"},{"lineNumber":930,"author":{"gitID":"-"},"content":".Delete Investigator Sequence Diagram"},{"lineNumber":931,"author":{"gitID":"-"},"content":"image::DeleteInvestigatorLogic.png[width\u003d\"790\"]"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"The `ModelManager` will then call"},{"lineNumber":934,"author":{"gitID":"-"},"content":"`Investigapptor` \u0027s `deletePerson` method which will remove the investigator from the"},{"lineNumber":935,"author":{"gitID":"-"},"content":"`persons` as show below in \u003c\u003cdelete-invest\u003e\u003e."},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"[[delete-invest]]"},{"lineNumber":938,"author":{"gitID":"-"},"content":".Delete Investigator Sequence Diagram"},{"lineNumber":939,"author":{"gitID":"-"},"content":"image::DeleteInvestigatorSequenceDiagram.png[width\u003d\"790\"]"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Method of removing investigator"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Fully delete the investigator"},{"lineNumber":946,"author":{"gitID":"-"},"content":"** Pros: Easy to implement, no further issues after deleting the investigator."},{"lineNumber":947,"author":{"gitID":"-"},"content":"** Cons: No longer able to retrieve it after deleted, other than undo."},{"lineNumber":948,"author":{"gitID":"-"},"content":"* **Alternative 2:** Archive the investigator"},{"lineNumber":949,"author":{"gitID":"-"},"content":"** Pros: Able bring any investigator out of archive."},{"lineNumber":950,"author":{"gitID":"-"},"content":"** Cons: Complicated to implement, does not actually delete the investigator and may cause build up of unwanted data."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"//end::deleteinvestigator[]"},{"lineNumber":953,"author":{"gitID":"-"},"content":""},{"lineNumber":954,"author":{"gitID":"-"},"content":"//tag::editinvestigator[]"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Edit investigator"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"The `EditInvestigatorCommand` will recreate an instance of the Investigator class that exist and store it in the Investigapptor."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"The `EditInvestigatorCommand` is important as you would want to be able to edit an investigator\u0027s details in the"},{"lineNumber":963,"author":{"gitID":"-"},"content":"investigapptor rather than having to delete and add a new investigator."},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":966,"author":{"gitID":"-"},"content":"The `EditInvestigatorCommand` is created when the command word `editinvestigator` is detected in the user input. It will then use the `ParserUtil`"},{"lineNumber":967,"author":{"gitID":"-"},"content":"to identify which detail is to be changed (i.e. `Name`, `Phone`, `Email`, `Address`, `Rank`, `Set\u003cTag\u003e`). The `EditInvestigatorCommand`"},{"lineNumber":968,"author":{"gitID":"-"},"content":"will then create a Investigator instance using both the old and new information and pass it from the logic component to the model component."},{"lineNumber":969,"author":{"gitID":"-"},"content":"As the logic for edit is extremely similar to add, you can refer to \u003c\u003cadd-invest\u003e\u003e to view the logic diagram."},{"lineNumber":970,"author":{"gitID":"-"},"content":""},{"lineNumber":971,"author":{"gitID":"-"},"content":"The model will take in both the old and new the Investigator instance and start by recreating the all the cases as they reference the old investigator has to"},{"lineNumber":972,"author":{"gitID":"-"},"content":"be updated. In order to do this, the `Investigapptor` will swap all the `CrimeCases` that belong to the investigator with a `CrimeCase` with the new `Investigator`."},{"lineNumber":973,"author":{"gitID":"-"},"content":"Once all the `CrimeCases` are recreated, they will be added to new `Investigator` and the `Investigator` will be stored in the `persons` list."},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"[edit-invest]"},{"lineNumber":977,"author":{"gitID":"-"},"content":".Editing Investigator Sequence Diagram"},{"lineNumber":978,"author":{"gitID":"-"},"content":"image::EditInvestigatorSequenceDiagram.png[width\u003d\"790\"]"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"Code snippet of how each case is recreated and swapped to ensure that the index is not changed."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"    private void recreateCasesForInvestigator(Investigator inv, CrimeCase c) {"},{"lineNumber":983,"author":{"gitID":"-"},"content":"         CrimeCase newCase \u003d syncWithMasterTagList(new CrimeCase(c.getCaseName(), c.getDescription(),"},{"lineNumber":984,"author":{"gitID":"-"},"content":"            inv, c.getStartDate(), c.getEndDate(), c.getStatus(), c.getTags()));"},{"lineNumber":985,"author":{"gitID":"-"},"content":"         try {"},{"lineNumber":986,"author":{"gitID":"-"},"content":"             cases.setCrimeCase(c, newCase);"},{"lineNumber":987,"author":{"gitID":"-"},"content":"         } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":988,"author":{"gitID":"-"},"content":"             throw new AssertionError(\"Duplicate Case when editing investigator\");"},{"lineNumber":989,"author":{"gitID":"-"},"content":"         } catch (CrimeCaseNotFoundException e) {"},{"lineNumber":990,"author":{"gitID":"-"},"content":"             throw new AssertionError(\"Case not found when editing investigator\");"},{"lineNumber":991,"author":{"gitID":"-"},"content":"         }"},{"lineNumber":992,"author":{"gitID":"-"},"content":"     }"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Updating the `CrimeCases` referencing the `Investigator`"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Recreate every `CrimeCase` with the new value"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"** Pros: By recreating the `CrimeCase`, we are able to set the `Investigator` to be final inside the `CrimeCase`."},{"lineNumber":1001,"author":{"gitID":"-"},"content":"This will help avoid bugs when redoing and undoing."},{"lineNumber":1002,"author":{"gitID":"-"},"content":"** Cons: Each edit requires more work as `CrimeCase` has to be remove and recreated."},{"lineNumber":1003,"author":{"gitID":"-"},"content":"* **Alternative 2:** Change `CrimeCase` \u0027s investigator to be not final, so that direct change can be made."},{"lineNumber":1004,"author":{"gitID":"-"},"content":"** Pros: Easier to change the each CrimeCase as it does not need to be recreated."},{"lineNumber":1005,"author":{"gitID":"-"},"content":"** Cons: `Investigator` in `CrimeCase` will no longer be final. This however involve the `Invesetigator` to"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"modify `CrimeCase`, which result in bad coupling."},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"//end::editinvestigator[]"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"//tag::listinvestigatorcase[]"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d List investigator\u0027s cases"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"The `ListInvestigatorCaseCommand` will search and display all the cases belonging to the investigator in the panel list."},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"The `ListInvestigatorCaseCommand` is important as you would want to be able find all the cases the investigator is in charge of"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"easily as compared to search each case one by one."},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"The `ListInvestigatorCaseCommand` is created when the command word `listinvestigatorcases` is detected in the user input. It will then use the `ParserUtil`"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"to identify which investigator is selected by using the `Index`. `ListInvestigatorCaseCommand` will retrieve the selected `investigator`"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"from the `Model` and use its hashcode to create the `CaseContainsInvestigatorPredicate`. The"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"predicate will be used to filter the list of `CrimeCase` to only show `CrimeCase` that contain"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"the selected `investigator`. An event will be raised to alert the UI to swap over to show the `CrimeCase` panel list."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"[edit-invest]"},{"lineNumber":1029,"author":{"gitID":"-"},"content":".Editing Investigator Sequence Diagram"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"image::ListInvestigatorCaseLogicDiagram.png[width\u003d\"790\"]"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"Code snippet of what is being done in the execute method"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"        if (targetIndex !\u003d null) {"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":1037,"author":{"gitID":"-"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"                throw new"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"                CommandException(Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"            investigator \u003d (Investigator) lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"            requireNonNull(investigator);"},{"lineNumber":1043,"author":{"gitID":"-"},"content":"            predicate \u003d new CaseContainsInvestigatorPredicate(investigator.hashCode());"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"        model.updateFilteredCrimeCaseList(predicate);"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForCrimeCaseListShownSummary(model.getFilteredCrimeCaseList().size()));"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Updating the `CrimeCases` referencing the `Investigator`"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Using predicate and filtered list"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"** Pros: The architecture for using predicate and filtered is already implemented and used for other"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"type of searches."},{"lineNumber":1059,"author":{"gitID":"-"},"content":"** Cons: Require to search every single `CrimeCase` to get the result."},{"lineNumber":1060,"author":{"gitID":"-"},"content":"* **Alternative 2:** Using the `investigator` \u0027s list of `CrimeCase`"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"** Pros: Does not need to search every `CrimeCase` , meaning command will be processed faster"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"** Cons: Have to implement a method to convert the `investigator` \u0027s list of `CrimeCase` to a filtered list."},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"//end::listinvestigatorcase[]"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Case Features"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"//tag::crimecase[]"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `crimecase` Package"},{"lineNumber":1070,"author":{"gitID":"-"},"content":""},{"lineNumber":1071,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"As Investigapptor is a tool for managing investigations, the ability to store information about a case is essential."},{"lineNumber":1074,"author":{"gitID":"-"},"content":""},{"lineNumber":1075,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"Each attribute of a case, such as the case name, description, status, etc. are classes in the `crimecase` package. Each of the classes provide utility methods to check the validity of the string to be stored, retrieve the string that is stored, and obtain the hash code of the object."},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"The following classes have been introduced in the package as of v1.1:"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"|Class |Constructor |Remark"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"|CaseName |`new CaseName(“Project Zero”)` |Stores a `String` that represents the name of the case."},{"lineNumber":1085,"author":{"gitID":"-"},"content":"|Description |`new Description(“Abduction and murder of a Chicago greeting card executive.”)` |Stores a `String` that represents the description of the case."},{"lineNumber":1086,"author":{"gitID":"-"},"content":"|StartDate |`new StartDate(“01/01/2015”)` |Stores a `String` that represents the start date of the case."},{"lineNumber":1087,"author":{"gitID":"-"},"content":"|EndDate |`new EndDate(LARGEST_DATE)` |Stores a `String` that represents the end date of the case."},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"The class contains a static string `LARGEST_DATE` that is often used as the default argument when instantiating the `EndDate` class to indicate a newly created case whose `Status` is “open”."},{"lineNumber":1090,"author":{"gitID":"-"},"content":"|Status |`new Status()` |Stores a `String` that represents the status of the case. The class only stores strings of value \"open\" or \"close\", with the default value set to \"open\" when the constructor is called."},{"lineNumber":1091,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"The `crimecase` package includes the `CrimeCase` class which is used to keep information about a case. The `CrimeCase` class provides utility methods to retrieve the different objects (e.g. `CaseName`), delete a tag, and obtain the hash code of the `CrimeCase` object."},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"A `CrimeCase` class is created with one constructor."},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"1,2,2\", options\u003d\"header\"]"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"|Class |Constructor |Remark"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"|CrimeCase |`new CrimeCase(name, description, investigatorToAdd, startDate, endDate, status, tagList)` |Stores `CaseName`, `Description`, `Investigator`, `StartDate`, `Status`, and `UniqueTagList` objects to represent information of the case."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"`CrimeCase` objects are considered \"duplicates\" when they share at least the same `CaseName`, `Description`, and `StartDate`."},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reasons for how it is implemented"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"The `crimecase` package follows the model of the `person` package, whereby each attribute is represented by a class. This allows for better organization and a modular design which follows the single responsibility principle."},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"//end::crimecase[]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"//tag::addcase[]"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add case"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"To be able to manage cases, investigators should have the ability to add case details into the application."},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"The `AddCaseCommandParser` parses the string of arguments provided by the user and splits the `String` into its separate components (i.e. `CaseName`, `Description`, `Index`, `StartDate`, `Set\u003cTag\u003e`) to be used in the context of the `AddCaseCommand`. A `ParseException` is thrown if the user input does not conform to the expected format."},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"The `AddCaseCommand` that extends the `UndoableCommand` class is implemented with constructor overloading, where either constructor can be used depending on the developer’s needs."},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"1,2\", options\u003d\"header\"]"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"|Constructor |Remark"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"|`new AddCaseCommand(crimeCase)` |Accepts a `CrimeCase` object as parameter."},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"Useful in testing where `CrimeCaseBuilder` is used to create the `CrimeCase` object first."},{"lineNumber":1132,"author":{"gitID":"-"},"content":"|`new AddCaseCommand(name, description, investigatorIndex, startDate, tagList)` |Accepts `CaseName`, `Description`, `Index`, `StartDate`, `Set\u003cTag\u003e` objects as parameters."},{"lineNumber":1133,"author":{"gitID":"-"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"Called by `AddCaseCommandParser` when a user inputs the command and details of a case."},{"lineNumber":1135,"author":{"gitID":"-"},"content":""},{"lineNumber":1136,"author":{"gitID":"-"},"content":"When this constructor is used, the `Index` object is processed to retrieve the `Investigator` object at the specified index on the most recent list of investigators displayed by the model. A `CrimeCase` object is created using the parameters and the retrieved `Investigator` object."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"-"},"content":"The `CrimeCase` object is then added to the model and throws a `DuplicateCrimeCaseException` if there exists a similar object already in Investigapptor. The following snippet shows the execution code."},{"lineNumber":1140,"author":{"gitID":"-"},"content":""},{"lineNumber":1141,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1143,"author":{"gitID":"-"},"content":"public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"    requireNonNull(model);"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"        model.addCrimeCase(toAdd);"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"    } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"        throw new CommandException(MESSAGE_DUPLICATE_CASE);"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Model component"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"In the `Model` component, the new `CrimeCase` object gets added to the case list of the assigned investigator as well (i.e. `UniqueCrimeCaseList` within the `Investigator` object) via the `addCrimeCaseToInvestigator` method. This method traverses through the entire list of investigators to find the correct `Investigator` object to add the new `CrimeCase` object to. The code is shown below."},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"public void addCrimeCase(CrimeCase c) throws DuplicateCrimeCaseException {"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"    CrimeCase crimeCase \u003d syncWithMasterTagList(c);"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"    if (cases.add(crimeCase)) {"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"        addCrimeCaseToInvestigator(crimeCase);"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"The following sequence diagram illustrates what happens in the `Model` component when a case is added."},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":".Interactions Inside the Model Component for the `addcase` Command"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"image::SD_AddCaseCommand_Model.png[width\u003d\"800\"]"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Parsing the investigator-to-be-assigned"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"-"},"content":"* **Alternative 1:** User inputs an investigator\u0027s name after the `i/` prefix to indicate who to assign the case to"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"** Pros: More intuitive for the user."},{"lineNumber":1179,"author":{"gitID":"-"},"content":"** Cons: More difficult to implement - need a way to decide which investigator to assign if they share identical names."},{"lineNumber":1180,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** User inputs the index of the investigator based on the case list after the `i/` prefix to indicate who to assign the case to"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"** Pros: Easier to implement and more straightforward. Index provided is the investigator to be assigned - don\u0027t have to worry about identical names."},{"lineNumber":1182,"author":{"gitID":"-"},"content":"** Cons: User would have to switch between lists to refer to the investigator index. For example, the user types the command to add the case but then realises that they needed the investigator index. They would have to either use the interface to switch the tabs or type the `listinvestigators` command. This disrupts the flow and hinders efficiency."},{"lineNumber":1183,"author":{"gitID":"-"},"content":"//end::addcase[]"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"//tag::deletecase[]"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete case"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"Sometimes, cases are added by error or there is no need to continue management of a case. Investigators should have a method to remove a case from the application."},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"The `DeleteCaseCommandParser` parses the string of arguments provided by the user to retrieve the index (i.e. `Index`) to be used in the context of the `DeleteCaseCommand`. A `ParseException` is thrown if the user input does not conform to the expected format."},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"-"},"content":"The `DeleteCaseCommand` extends the `UndoableCommand`."},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"1,2\", options\u003d\"header\"]"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"|Constructor |Remark"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"|`new DeleteCaseCommand(targetIndex)` |Accepts an `Index` object as parameter."},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"The `targetIndex` is processed to retrieve the `CrimeCase` object at the specified index on the most recent list of cases displayed by the model."},{"lineNumber":1206,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"The `CrimeCase` object is then removed from the model. `EventsCenter` reacts to the `SwapTabEvent`, which switches the tab to show the list of cases. The following snippet shows the execution code."},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1211,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"public CommandResult executeUndoableCommand() {"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"    requireNonNull(caseToDelete);"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"        model.deleteCrimeCase(caseToDelete);"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"    } catch (CrimeCaseNotFoundException pnfe) {"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"        throw new AssertionError(\"The target case cannot be missing\");"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"    return new CommandResult(String.format(MESSAGE_DELETE_CASE_SUCCESS, caseToDelete));"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"Below is a sequence diagram illustrating the `Logic` component."},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `deletecase 1` Command"},{"lineNumber":1227,"author":{"gitID":"-"},"content":"image::SD_DeleteCaseCommand_Logic.png[width\u003d\"800\"]"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Model component"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"The new `CrimeCase` object gets removed from the case list of the assigned investigator as well (i.e. `UniqueCrimeCaseList` within the `Investigator` object) via the `removeCrimeCaseFromInvestigator` method. This method traverses through the entire list of investigators to find the correct `Investigator` object to remove the `CrimeCase` object from. The code is shown below."},{"lineNumber":1232,"author":{"gitID":"-"},"content":""},{"lineNumber":1233,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"public boolean removeCrimeCase(CrimeCase key) throws CrimeCaseNotFoundException {"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"    if (cases.remove(key)) {"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"        removeCrimeCaseFromInvestigator(key);"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"        throw new CrimeCaseNotFoundException();"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"The sequence diagram for the `Model` component is provided below."},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":".Interactions Inside the Model Component for the `deletecase 1` Command"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"image::SD_DeleteCaseCommand_Model.png[width\u003d\"400\"]"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"//end::deletecase[]"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"//tag::editcase[]"},{"lineNumber":1252,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Edit case"},{"lineNumber":1253,"author":{"gitID":"-"},"content":""},{"lineNumber":1254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"-"},"content":"Typos can be made when in a haste. The ability to edit cases would give investigators a chance to rectify these mistakes easily. This feature will also enable re-assignment of cases to other investigators, which is useful when an investigator can no longer work on a case."},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"The EditCaseCommandParser parses the String of arguments provided by the user and splits the `String` into the case index (`Index`) and the separate components (i.e. `CaseName`, `Description`, `Index`, `StartDate`, `Set\u003cTag\u003e`) and directs it into a `EditCrimeCaseDescriptor` object  to be used in the context of the `EditCaseCommand`. A `ParseException` is thrown if the user input does not conform to the expected format."},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"-"},"content":"The `EditCrimeCaseDescriptor` is a class containing information that describes the case (i.e. case name, description, investigator, start date, tags). The descriptor is used because the user is not required to input all the fields except the case index. When the user specifies the field they wish to edit, it sets the field in the `EditCrimeCaseDescriptor` to that value. If any field is not specified, the field is set to `null`."},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"The `EditCaseCommand` that extends the `UndoableCommand` has one constructor."},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"1,2\", options\u003d\"header\"]"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1270,"author":{"gitID":"-"},"content":"|Constructor |Remark"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"|`new EditCaseCommand(caseIndex, editCrimeCaseDescriptor)` |Accepts an `Index` object and `EditCrimeCaseDescriptor` as parameters."},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"The `caseIndex` is processed to retrieve the `CrimeCase` object at the specified index on the most recent list of cases displayed by the model."},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"A new `CrimeCase` object is created using the retrieved case-to-be-edited and the descriptor."},{"lineNumber":1276,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Model component"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"When the `EditCaseCommand` is executed, note that the original `CrimeCase` object is not modified, but rather, replaced by a new `CrimeCase` object. When the `CrimeCase` constructor is called, a new `Investigator` object without its `UniqueCrimeCaseList` is created within the `CrimeCase` (i.e. only the personal details are stored). This is to simplify the data to be recorded in storage. The list of cases within the original `Investigator` object remains untouched. The snippet of code below shows the implementation."},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"private CrimeCase syncWithMasterTagList(CrimeCase crimeCase) {"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"    // … logic for handling and rebuilding tags …"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"    return new CrimeCase("},{"lineNumber":1288,"author":{"gitID":"-"},"content":"        crimeCase.getCaseName(), crimeCase.getDescription(), crimeCase.getCurrentInvestigator(),,"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"        crimeCase.getStartDate(), crimeCase.getEndDate(), crimeCase.getStatus(), correctTagReferences);"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"Remember that each `Investigator` object has their own `UniqueCrimeCaseList` that holds `CrimeCase` objects that they\u0027ve been assigned."},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"Since the `CrimeCase` object is replaced rather than modified, we need to remove the old `CrimeCase` object stored in the `UniqueCrimeCaseList` of the `Investigator` and reference the new, modified `CrimeCase` object instead. This is done by traversing the entire list of investigators and finding the correct `Investigator` object to remove the `CrimeCase` object from using the `removeCrimeCaseFromInvestigator` method. Next, after replacing the old `CrimeCase` object with the edited one in master list of all cases, it traverses the entire list of investigators again to add the case back to the correct `Investigator` object using the `addCrimeCaseFromInvestigator` method. The code below shows its implementation."},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1298,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1299,"author":{"gitID":"-"},"content":"public void updateCrimeCase(CrimeCase target, CrimeCase editedCase)"},{"lineNumber":1300,"author":{"gitID":"-"},"content":"throws DuplicateCrimeCaseException, CrimeCaseNotFoundException {"},{"lineNumber":1301,"author":{"gitID":"-"},"content":"    requireNonNull(editedCase);"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"    CrimeCase syncedEditedCrimeCase \u003d syncWithMasterTagList(editedCase);"},{"lineNumber":1304,"author":{"gitID":"-"},"content":"    removeCrimeCaseFromInvestigator(target);"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"    cases.setCrimeCase(target, syncedEditedCrimeCase);"},{"lineNumber":1306,"author":{"gitID":"-"},"content":"    addCrimeCaseToInvestigator(syncedEditedCrimeCase);"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"The following sequence diagram below illustrates how the Model component works when a case is edited."},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":".Interactions Inside the Model Component for the `editcase` Command"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"image::SD_EditCaseCommand_Model.png[width\u003d\"600\"]"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":"//end::editcase[]"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"//tag::findcasesname[]"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Find cases by name"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"To manage large numbers of cases, having a feature that would allow investigators to search the list of cases by name would be extremely helpful. If an investigator is looking for a particular case, it would be extremely inefficient and time-consuming to have to manually browse through all the cases. Hence, being able to find cases by name can help to increase workflow productivity and efficiency."},{"lineNumber":1323,"author":{"gitID":"-"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"The `FindCaseCommandParser` parses the string of arguments provided by the user to retrieve the list of keywords to be used in the context of the `DeleteCaseCommand`. A `ParseException` is thrown if the user input does not conform to the expected format."},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"The `FindCaseCommand` has one constructor."},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"1,2\", options\u003d\"header\"]"},{"lineNumber":1334,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"|Constructor |Remark"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"|`new FindCaseCommand(predicate)` |Accepts a `CaseNameContainsKeywordsPredicate` object as parameter."},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":"The `targetIndex` is processed to retrieve the `CrimeCase` object at the specified index on the most recent list of cases displayed by the model."},{"lineNumber":1339,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1340,"author":{"gitID":"-"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"The model is then updated to show the cases whose case name matches the predicate keywords. `EventsCenter` reacts to the `SwapTabEvent`, which switches the tab to show the filtered list of cases. The following snippet shows the execution code."},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1345,"author":{"gitID":"-"},"content":"public CommandResult execute() {"},{"lineNumber":1346,"author":{"gitID":"-"},"content":"    model.updateFilteredCrimeCaseList(predicate);"},{"lineNumber":1347,"author":{"gitID":"quentinkhoo"},"content":"    EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":1348,"author":{"gitID":"-"},"content":"    return new CommandResult(getMessageForCrimeCaseListShownSummary(model.getFilteredCrimeCaseList().size()));"},{"lineNumber":1349,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1350,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"The following sequence diagram illustrates how the `Logic` component operates when a keyword is given with the command."},{"lineNumber":1353,"author":{"gitID":"-"},"content":""},{"lineNumber":1354,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `findcase magic` Command"},{"lineNumber":1355,"author":{"gitID":"-"},"content":"image::SD_FindCaseCommand_Logic.png[width\u003d\"800\"]"},{"lineNumber":1356,"author":{"gitID":"-"},"content":"//end::findcasesname[]"},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"[[Find-Feature]]"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"//tag::findcasestag[]"},{"lineNumber":1360,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Find cases by status/tags"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"The following sections provides an explanation on how the investigapptor finds"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"certain cases according to its status or tags."},{"lineNumber":1363,"author":{"gitID":"-"},"content":""},{"lineNumber":1364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"This implementation improves efficiency as the investigators do not need to manually browse through"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"all the listed cases just to find certain cases."},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"By having a find command, the investigator can easily search for cases that they"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"are looking for. They can simply just run the find-related commands with their desired"},{"lineNumber":1370,"author":{"gitID":"-"},"content":"keywords and the cases they require will be displayed instantly."},{"lineNumber":1371,"author":{"gitID":"-"},"content":""},{"lineNumber":1372,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation to find cases by status"},{"lineNumber":1373,"author":{"gitID":"-"},"content":"Commands were created to find the cases according to the status specified. As there"},{"lineNumber":1374,"author":{"gitID":"-"},"content":"are only two possible status - `open` or `close`, two separate command classes `FindCloseCaseCommand`"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"and `FindOpenCaseCommand` were created. These two commands inherits from its parent class - `FindByStatusCommand`."},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Class Inheritance"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"[[CDFindByStatus]]"},{"lineNumber":1379,"author":{"gitID":"-"},"content":".Class Diagram to illustrate inheritance"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"image::CDFindByStatus.png[width\u003d\"800\"]"},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"In both `FindCloseCaseCommand` and `FindOpenCaseCommand`, its respective constructor will"},{"lineNumber":1383,"author":{"gitID":"-"},"content":"invoke its parent class\u0027 (`FindByStatusCommand`) constructor as passes in its corresponding status as the parameter."},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"`FindCloseCaseCommand` will pass in the status `close` as shown in the code segment below."},{"lineNumber":1386,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1387,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"public FindCloseCaseCommand() {"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"    super(CASE_CLOSE);"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1391,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"`FindOpenCaseCommand` will pass in the status `open` as shown in the code segment below."},{"lineNumber":1394,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1395,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1396,"author":{"gitID":"-"},"content":"public FindOpenCaseCommand() {"},{"lineNumber":1397,"author":{"gitID":"-"},"content":"    super(CASE_OPEN);"},{"lineNumber":1398,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1399,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1400,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagrams for Logic Component"},{"lineNumber":1401,"author":{"gitID":"-"},"content":"The following sequence diagrams represents the interactions within the `Logic`"},{"lineNumber":1402,"author":{"gitID":"-"},"content":"component when the user inputs the `findopencases` or `findclosecases` command."},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":"[[SDforFindOpenCase]]"},{"lineNumber":1405,"author":{"gitID":"-"},"content":".Sequence Diagram for interactions within Logic component for `FindOpenCaseCommand`"},{"lineNumber":1406,"author":{"gitID":"-"},"content":"image::SDforFindOpenCase.png[width\u003d\"800\"]"},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":"[[SDforFindCloseCase]]"},{"lineNumber":1409,"author":{"gitID":"-"},"content":".Sequence Diagram for interactions within Logic component for `FindCloseCaseCommand`"},{"lineNumber":1410,"author":{"gitID":"-"},"content":"image::SDForFindCloseCase.png[width\u003d\"800\"]"},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"-"},"content":"The `Logic` component will set the `StatusContainsKeywordsPredicate` with"},{"lineNumber":1413,"author":{"gitID":"-"},"content":"a `List\u003cString\u003e` containing the keyword of either `open` or `close`."},{"lineNumber":1414,"author":{"gitID":"-"},"content":""},{"lineNumber":1415,"author":{"gitID":"-"},"content":"For `FindCloseCaseCommand`, the `List\u003cString\u003e` will contain the keyword `close`;"},{"lineNumber":1416,"author":{"gitID":"-"},"content":"whereas for `FindOpenCaseCommand`, the `List\u003cString\u003e` will contain the keyword `open`."},{"lineNumber":1417,"author":{"gitID":"-"},"content":""},{"lineNumber":1418,"author":{"gitID":"-"},"content":"The command will be executed by the `LogicManager` by updating the"},{"lineNumber":1419,"author":{"gitID":"-"},"content":"`FilteredCrimeCaseList` in the `Model` component with the given `StatusContainsKeywordsPredicate`."},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagrams for Model Component"},{"lineNumber":1422,"author":{"gitID":"-"},"content":"Below are the sequence diagrams that represents the interactions within the"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"`Model` component after the `findopencases` or `findclosecases` command"},{"lineNumber":1424,"author":{"gitID":"-"},"content":"has been executed by the `LogicManager`."},{"lineNumber":1425,"author":{"gitID":"-"},"content":""},{"lineNumber":1426,"author":{"gitID":"-"},"content":"[[SDForFindByStatusModel]]"},{"lineNumber":1427,"author":{"gitID":"-"},"content":".Sequence Diagram for interactions within Model component"},{"lineNumber":1428,"author":{"gitID":"-"},"content":"image::SDForFindByStatusModel.png[width\u003d\"800\"]"},{"lineNumber":1429,"author":{"gitID":"-"},"content":""},{"lineNumber":1430,"author":{"gitID":"-"},"content":"The `Model` component is responsible for updating the filtered crime case list with"},{"lineNumber":1431,"author":{"gitID":"-"},"content":"the given `StatusContainsKeywordsPredicate`. The predicate will test if any keywords matches"},{"lineNumber":1432,"author":{"gitID":"-"},"content":"with any status of the case(s)."},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"Specifically, for `findopencases`, the predicate will test"},{"lineNumber":1435,"author":{"gitID":"-"},"content":"if the keyword \u0027open\u0027 matches any cases with the status of \u0027open\u0027. Similarly,"},{"lineNumber":1436,"author":{"gitID":"-"},"content":"for `findclosecases`,  the predicate will test if the keyword \u0027close\u0027 matches"},{"lineNumber":1437,"author":{"gitID":"-"},"content":"any cases with the status of \u0027close\u0027."},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"The `FilteredCrimeCaseList` will then be updated with the cases that matches the"},{"lineNumber":1440,"author":{"gitID":"-"},"content":"given `StatusContainsKeywordsPredicate`."},{"lineNumber":1441,"author":{"gitID":"-"},"content":""},{"lineNumber":1442,"author":{"gitID":"-"},"content":"The `Model` will then raise a `FilteredCrimeCaseListChangedEvent` which is"},{"lineNumber":1443,"author":{"gitID":"-"},"content":"captured by the `EventsCenter`. This event is used as an indication to update the calendar entries"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"whenever the `FilteredCrimeCaseList` has changed. This implementation can be found in"},{"lineNumber":1445,"author":{"gitID":"-"},"content":"the \u003c\u003cCalendar-Events-Filter, above section\u003e\u003e."},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Activity Diagram"},{"lineNumber":1448,"author":{"gitID":"-"},"content":"The following activity diagram illustrates an example when a user executes a command that finds the cases"},{"lineNumber":1449,"author":{"gitID":"-"},"content":"by its status."},{"lineNumber":1450,"author":{"gitID":"-"},"content":""},{"lineNumber":1451,"author":{"gitID":"-"},"content":"[[ADForFindCase]]"},{"lineNumber":1452,"author":{"gitID":"-"},"content":".Activity Diagram when user enters `findclosecase` command"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"image::ADforFindCase.png[width\u003d\"800\"]"},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current Implementation to find cases by tags"},{"lineNumber":1456,"author":{"gitID":"-"},"content":"The command class, `FindCaseTagsCommand` was created to find the cases according to its tags. Cases whose tags"},{"lineNumber":1457,"author":{"gitID":"-"},"content":"matches the keywords that the user has input will be displayed."},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagrams for Logic Component"},{"lineNumber":1460,"author":{"gitID":"-"},"content":"The following sequence diagrams represents the interactions within the `Logic`"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"component when the user inputs the `findcasetags`."},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"[[SDforFindCaseTags]]"},{"lineNumber":1464,"author":{"gitID":"-"},"content":".Sequence Diagram for interactions within Logic component"},{"lineNumber":1465,"author":{"gitID":"-"},"content":"image::SDforFindCaseTags.png[width\u003d\"800\"]"},{"lineNumber":1466,"author":{"gitID":"-"},"content":""},{"lineNumber":1467,"author":{"gitID":"-"},"content":"The `Logic` component will set the `TagContainsKeywordsPredicate` with"},{"lineNumber":1468,"author":{"gitID":"-"},"content":"a `List\u003cString\u003e` containing the keywords that were parsed by `FindCaseTagsCommandParser`."},{"lineNumber":1469,"author":{"gitID":"-"},"content":""},{"lineNumber":1470,"author":{"gitID":"-"},"content":"For the command `findcasetags fraud homicide` in the"},{"lineNumber":1471,"author":{"gitID":"-"},"content":"\u003c\u003cSDforFindCaseTags, sequence diagram above\u003e\u003e, the `List\u003cString\u003e` will"},{"lineNumber":1472,"author":{"gitID":"-"},"content":"contain the keywords `fraud` and `homicide`."},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"The command will be executed by the `LogicManager` by updating the"},{"lineNumber":1475,"author":{"gitID":"-"},"content":"`FilteredCrimeCaseList` in the `Model` component with the given `TagContainsKeywordsPredicate`."},{"lineNumber":1476,"author":{"gitID":"-"},"content":""},{"lineNumber":1477,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Sequence Diagrams for Model Component"},{"lineNumber":1478,"author":{"gitID":"-"},"content":"The following sequence diagram shows the interactions within the `Model` component."},{"lineNumber":1479,"author":{"gitID":"-"},"content":""},{"lineNumber":1480,"author":{"gitID":"-"},"content":"[[SDforFindCaseTagsModel]]"},{"lineNumber":1481,"author":{"gitID":"-"},"content":".Sequence Diagram for interactions within Model component"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"image::SDForFindByStatusModel.png[width\u003d\"800\"]"},{"lineNumber":1483,"author":{"gitID":"-"},"content":""},{"lineNumber":1484,"author":{"gitID":"-"},"content":"The `Model` component is responsible for updating the filtered crime case list with"},{"lineNumber":1485,"author":{"gitID":"-"},"content":"the given `TagContainsKeywordsPredicate`. The predicate will test if any keywords matches"},{"lineNumber":1486,"author":{"gitID":"-"},"content":"with any tags of the case(s)."},{"lineNumber":1487,"author":{"gitID":"-"},"content":""},{"lineNumber":1488,"author":{"gitID":"-"},"content":"For the example in the \u003c\u003cSDforFindCaseTags, above logic sequence diagram\u003e\u003e,"},{"lineNumber":1489,"author":{"gitID":"-"},"content":"the predicate will test if the keywords \"fraud\" or \"homicide\" matches any cases\u0027"},{"lineNumber":1490,"author":{"gitID":"-"},"content":"tags."},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":"The `FilteredCrimeCaseList` will then be updated with the cases whose"},{"lineNumber":1493,"author":{"gitID":"-"},"content":"tags matches the keyword of either \"fraud\" or \"homicide\"."},{"lineNumber":1494,"author":{"gitID":"-"},"content":""},{"lineNumber":1495,"author":{"gitID":"-"},"content":"The `Model` will then raise a `FilteredCrimeCaseListChangedEvent` which is"},{"lineNumber":1496,"author":{"gitID":"-"},"content":"captured by the `EventsCenter`. This event is used as an indication to update the calendar entries"},{"lineNumber":1497,"author":{"gitID":"-"},"content":"whenever the `FilteredCrimeCaseList` has changed. This implementation can be found in"},{"lineNumber":1498,"author":{"gitID":"-"},"content":"the \u003c\u003cCalendar-Events-Filter, above section\u003e\u003e."},{"lineNumber":1499,"author":{"gitID":"-"},"content":""},{"lineNumber":1500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Activity Diagram"},{"lineNumber":1501,"author":{"gitID":"-"},"content":"The following activity diagram illustrates an example when a user executes a command that finds the cases"},{"lineNumber":1502,"author":{"gitID":"-"},"content":"by its tags."},{"lineNumber":1503,"author":{"gitID":"-"},"content":""},{"lineNumber":1504,"author":{"gitID":"-"},"content":"[[ADForFindCaseTags]]"},{"lineNumber":1505,"author":{"gitID":"-"},"content":".Activity Diagram when user enters `findcasetags murder` command"},{"lineNumber":1506,"author":{"gitID":"-"},"content":"image::ADForFindCaseTags.png[width\u003d\"800\"]"},{"lineNumber":1507,"author":{"gitID":"-"},"content":""},{"lineNumber":1508,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Alternatives Considered"},{"lineNumber":1509,"author":{"gitID":"-"},"content":"This section compares between the current choice of implementation and the"},{"lineNumber":1510,"author":{"gitID":"-"},"content":"alternative choice that was considered. It lists the pros and cons to each of the"},{"lineNumber":1511,"author":{"gitID":"-"},"content":"choices that were considered."},{"lineNumber":1512,"author":{"gitID":"-"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Design Implementation"},{"lineNumber":1514,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current Choice)**: Separate the find-related commands classes into its"},{"lineNumber":1515,"author":{"gitID":"-"},"content":"individual category its searching for. In this case we have `FindCaseTagsCommand`,"},{"lineNumber":1516,"author":{"gitID":"-"},"content":"`FindCloseCaseCommand` \u0026 `FindOpenCaseCommand`"},{"lineNumber":1517,"author":{"gitID":"-"},"content":"** Pros: Easy for the user as they just need to know the command name/alias"},{"lineNumber":1518,"author":{"gitID":"-"},"content":"(i.e. `findopencases` or `foc` will just instantly display the cases that are closed)"},{"lineNumber":1519,"author":{"gitID":"-"},"content":"** Cons: Additional `.java` class files"},{"lineNumber":1520,"author":{"gitID":"-"},"content":""},{"lineNumber":1521,"author":{"gitID":"-"},"content":"* **Alternative 2 **: Have just one `FindCommand` class and use prefixes to differentiate"},{"lineNumber":1522,"author":{"gitID":"-"},"content":"the type of keywords (i.e. findcase t/Tags s/Status)"},{"lineNumber":1523,"author":{"gitID":"-"},"content":"** Pros: Only one `.java` file required for different types of find. Easier to"},{"lineNumber":1524,"author":{"gitID":"-"},"content":"extend the command to find other details by adding more prefixes."},{"lineNumber":1525,"author":{"gitID":"-"},"content":"** Cons: Not as user-friendly. Users has to recognize the prefixes, could be"},{"lineNumber":1526,"author":{"gitID":"-"},"content":"too technical for non-technical users."},{"lineNumber":1527,"author":{"gitID":"-"},"content":""},{"lineNumber":1528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Class Implementation [for finding cases by status]"},{"lineNumber":1529,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current Choice)**: Have two classes `FindCloseCaseCommand` and `FindOpenCaseCommand`"},{"lineNumber":1530,"author":{"gitID":"-"},"content":"that are extended from parent class `FindByStatusCommand`"},{"lineNumber":1531,"author":{"gitID":"-"},"content":"** Pros: No code duplication as duplicated set of codes will be in the parent class `FindByStatusCommand`"},{"lineNumber":1532,"author":{"gitID":"-"},"content":"** Cons: Additional `.java` class file"},{"lineNumber":1533,"author":{"gitID":"-"},"content":""},{"lineNumber":1534,"author":{"gitID":"-"},"content":"* **Alternative 2 **: Separate commands into two classes without inheritance"},{"lineNumber":1535,"author":{"gitID":"-"},"content":"** Pros: One less `.java` class file (no parent class)"},{"lineNumber":1536,"author":{"gitID":"-"},"content":"** Cons: Duplicated set of codes"},{"lineNumber":1537,"author":{"gitID":"-"},"content":"//end::findcasestag[]"},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"-"},"content":"[[case-select]]"},{"lineNumber":1540,"author":{"gitID":"-"},"content":"//tag::selectcase[]"},{"lineNumber":1541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Select case"},{"lineNumber":1542,"author":{"gitID":"-"},"content":""},{"lineNumber":1543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for implementation"},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"An investigator should be able to retrieve and view information about a case after adding them into the application."},{"lineNumber":1546,"author":{"gitID":"-"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1548,"author":{"gitID":"-"},"content":""},{"lineNumber":1549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Logic component"},{"lineNumber":1550,"author":{"gitID":"-"},"content":""},{"lineNumber":1551,"author":{"gitID":"-"},"content":"Similar to `DeleteCaseCommandParser`, the `SelectCaseCommandParser` parses the string of arguments provided by the user to retrieve the index (i.e. `Index`) to be used in the context of the `SelectCaseCommand`. A `ParseException` is thrown if the user input does not conform to the expected format."},{"lineNumber":1552,"author":{"gitID":"-"},"content":""},{"lineNumber":1553,"author":{"gitID":"-"},"content":"The `SelectCaseCommand` extends `Command` and has one constructor."},{"lineNumber":1554,"author":{"gitID":"-"},"content":""},{"lineNumber":1555,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"1,2\", options\u003d\"header\"]"},{"lineNumber":1556,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1557,"author":{"gitID":"-"},"content":"|Constructor |Remark"},{"lineNumber":1558,"author":{"gitID":"-"},"content":"|`new SelectCaseCommand(targetIndex)` |Accepts an `Index` object as parameter."},{"lineNumber":1559,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1560,"author":{"gitID":"-"},"content":""},{"lineNumber":1561,"author":{"gitID":"-"},"content":"The `targetIndex` is processed to retrieve the `CrimeCase` object at the specified index on the most recent list of cases displayed by the model. Subsequently, a `JumpToCrimeCaseListRequestEvent` is posted to `EventsCenter` to signal the `UI` component. The following snippet shows the execution code."},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1564,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1565,"author":{"gitID":"-"},"content":"public CommandResult execute() throws CommandException {"},{"lineNumber":1566,"author":{"gitID":"-"},"content":""},{"lineNumber":1567,"author":{"gitID":"-"},"content":"    List \u003c CrimeCase \u003e lastShownList \u003d model.getFilteredCrimeCaseList();"},{"lineNumber":1568,"author":{"gitID":"-"},"content":""},{"lineNumber":1569,"author":{"gitID":"-"},"content":"    if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":1570,"author":{"gitID":"-"},"content":"        throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":1571,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1572,"author":{"gitID":"-"},"content":""},{"lineNumber":1573,"author":{"gitID":"-"},"content":"    EventsCenter.getInstance().post(new JumpToCrimeCaseListRequestEvent(targetIndex));"},{"lineNumber":1574,"author":{"gitID":"-"},"content":"    return new CommandResult(String.format(MESSAGE_SELECT_CASE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":1575,"author":{"gitID":"-"},"content":""},{"lineNumber":1576,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1577,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1578,"author":{"gitID":"-"},"content":""},{"lineNumber":1579,"author":{"gitID":"-"},"content":"The following sequence diagram illustrates what happens in the `Logic` component when a case is selected."},{"lineNumber":1580,"author":{"gitID":"-"},"content":""},{"lineNumber":1581,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `selectcase 1` Command"},{"lineNumber":1582,"author":{"gitID":"-"},"content":"image::SD_SelectCaseCommand_Logic.png[width\u003d\"800\"]"},{"lineNumber":1583,"author":{"gitID":"-"},"content":""},{"lineNumber":1584,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d EventsCenter and UI component"},{"lineNumber":1585,"author":{"gitID":"-"},"content":""},{"lineNumber":1586,"author":{"gitID":"-"},"content":"Following the raised event, `handleJumpToCrimeCaseListRequestEvent` (in `CrimeCaseListPanel.java`) is signalled to handle the select request, which scrolls the view to the correct cell in the panel."},{"lineNumber":1587,"author":{"gitID":"-"},"content":""},{"lineNumber":1588,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1590,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":1591,"author":{"gitID":"-"},"content":"private void handleJumpToCrimeCaseListRequestEvent(JumpToCrimeCaseListRequestEvent event) {"},{"lineNumber":1592,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":1593,"author":{"gitID":"-"},"content":"    scrollTo(event.targetIndex);"},{"lineNumber":1594,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1595,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1596,"author":{"gitID":"-"},"content":""},{"lineNumber":1597,"author":{"gitID":"-"},"content":"Next, a `CrimeCasePanelSelectionChangedEvent` that contains the `CrimeCase` object that was selected, is raised. This event is handled by `handleCrimeCasePanelSelectionChangedEvent` (in `BrowserPanel.java`), as shown in the snippet below."},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1600,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1601,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":1602,"author":{"gitID":"-"},"content":"private void handleCrimeCasePanelSelectionChangedEvent(CrimeCasePanelSelectionChangedEvent event) {"},{"lineNumber":1603,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":1604,"author":{"gitID":"-"},"content":"        loadCrimeCasePage(event.getNewSelection().crimeCase);"},{"lineNumber":1605,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1606,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1607,"author":{"gitID":"-"},"content":""},{"lineNumber":1608,"author":{"gitID":"-"},"content":"The following sequence diagram below shows how the EventsCenter interacts with the UI component."},{"lineNumber":1609,"author":{"gitID":"-"},"content":""},{"lineNumber":1610,"author":{"gitID":"-"},"content":".Interactions Inside the EventsCenter and UI Component for the `selectcase 1` Command"},{"lineNumber":1611,"author":{"gitID":"-"},"content":"image::SD_SelectCaseCommand_EventsCenter.png[width\u003d\"600\"]"},{"lineNumber":1612,"author":{"gitID":"-"},"content":""},{"lineNumber":1613,"author":{"gitID":"-"},"content":"`loadCrimeCasePage` method then takes the `CrimeCase` object contained within the event and splits it up into its various components (i.e. case name, description, investigator, start date, end date, status, and tags), to be processed for viewing on the UI."},{"lineNumber":1614,"author":{"gitID":"-"},"content":""},{"lineNumber":1615,"author":{"gitID":"-"},"content":"To learn more about how the data is reflected onto the UI, you can take a look at \u003c\u003cUI-DetailsPane\u003e\u003e."},{"lineNumber":1616,"author":{"gitID":"-"},"content":""},{"lineNumber":1617,"author":{"gitID":"-"},"content":"//end::selectcase[]"},{"lineNumber":1618,"author":{"gitID":"-"},"content":""},{"lineNumber":1619,"author":{"gitID":"-"},"content":"//tag::ui-enhancements[]"},{"lineNumber":1620,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI Enhancements"},{"lineNumber":1621,"author":{"gitID":"-"},"content":""},{"lineNumber":1622,"author":{"gitID":"-"},"content":"[[UI-DetailsPane]]"},{"lineNumber":1623,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Details panel"},{"lineNumber":1624,"author":{"gitID":"-"},"content":""},{"lineNumber":1625,"author":{"gitID":"-"},"content":"This component is used by the `selectinvestigator` and `selectcase`(\u003c\u003ccase-select\u003e\u003e) commands. The details pane makes use of JavaFx\u0027s `WebView` (an embedded browser) to render the data onto the display. The implementation for this can be found in link:{repoURL}/src/main/java/seedu/investigapptor/ui/BrowserPanel.java[BrowserPanel]."},{"lineNumber":1626,"author":{"gitID":"-"},"content":""},{"lineNumber":1627,"author":{"gitID":"-"},"content":"Two HTML files, `/docs/InvestigatorDetailsPage.html` and `/docs/CaseDetailsPage.html` are created as templates for displaying the details of a single investigator and case respectively. `WebView` provides utility methods that can be used to load and display the HTML files."},{"lineNumber":1628,"author":{"gitID":"-"},"content":""},{"lineNumber":1629,"author":{"gitID":"-"},"content":"A `String` containing the URL or file path is passed to the `load` method with a query string appended to the back (e.g. “https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003dJohn%20Doe”). This method can be used to load pages from third-party services (e.g. Google Search)."},{"lineNumber":1630,"author":{"gitID":"-"},"content":""},{"lineNumber":1631,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1632,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1633,"author":{"gitID":"-"},"content":"public void loadPage(String url) {"},{"lineNumber":1634,"author":{"gitID":"-"},"content":"    Platform.runLater(() - \u003e browser.getEngine().load(url));"},{"lineNumber":1635,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1636,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1637,"author":{"gitID":"-"},"content":""},{"lineNumber":1638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Example: Displaying case information"},{"lineNumber":1639,"author":{"gitID":"-"},"content":""},{"lineNumber":1640,"author":{"gitID":"-"},"content":"The following sub-section shows how the query string is generated for the `CrimeCase` object."},{"lineNumber":1641,"author":{"gitID":"-"},"content":""},{"lineNumber":1642,"author":{"gitID":"-"},"content":"A URL query string is generated by deconstructing the `CrimeCase` object into its components (i.e. case name, description, investigator, start date, end date, status, and tags) as `String`. Components that might contain symbols such as “#” are encoded first before appending to the query string to prevent parsing error by the browser."},{"lineNumber":1643,"author":{"gitID":"-"},"content":""},{"lineNumber":1644,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1645,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1646,"author":{"gitID":"-"},"content":"encDescription \u003d URLEncoder.encode(description, \"UTF-8\");"},{"lineNumber":1647,"author":{"gitID":"-"},"content":"encInvEmail \u003d URLEncoder.encode(currentInvestigator.getEmail().value, \"UTF-8\");"},{"lineNumber":1648,"author":{"gitID":"-"},"content":"encInvAddress \u003d URLEncoder.encode(currentInvestigator.getAddress().value, \"UTF-8\");"},{"lineNumber":1649,"author":{"gitID":"-"},"content":"encStartDate \u003d URLEncoder.encode(startDate, \"UTF-8\");"},{"lineNumber":1650,"author":{"gitID":"-"},"content":"encEndDate \u003d URLEncoder.encode(endDate, \"UTF-8\")"},{"lineNumber":1651,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":1654,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1655,"author":{"gitID":"-"},"content":"String caseDetailsPage \u003d CASE_DETAILS_PAGE +"},{"lineNumber":1656,"author":{"gitID":"-"},"content":"    \"?caseName\u003d\" + caseName +"},{"lineNumber":1657,"author":{"gitID":"-"},"content":"    \"\u0026description\u003d\" + encDescription +"},{"lineNumber":1658,"author":{"gitID":"-"},"content":"    \"\u0026tags\u003d\" + tagList +"},{"lineNumber":1659,"author":{"gitID":"-"},"content":"    \"\u0026invName\u003d\" + currentInvestigator.getName().fullName +"},{"lineNumber":1660,"author":{"gitID":"-"},"content":"    \"\u0026invRank\u003d\" + currentInvestigator.getRank().toString() +"},{"lineNumber":1661,"author":{"gitID":"-"},"content":"    \"\u0026invPhone\u003d\" + currentInvestigator.getPhone().value +"},{"lineNumber":1662,"author":{"gitID":"-"},"content":"    \"\u0026invEmail\u003d\" + encInvEmail +"},{"lineNumber":1663,"author":{"gitID":"-"},"content":"    \"\u0026invAddress\u003d\" + encInvAddress +"},{"lineNumber":1664,"author":{"gitID":"-"},"content":"    \"\u0026startDate\u003d\" + encStartDate +"},{"lineNumber":1665,"author":{"gitID":"-"},"content":"    \"\u0026endDate\u003d\" + encEndDate +"},{"lineNumber":1666,"author":{"gitID":"-"},"content":"    \"\u0026status\u003d\" + status;"},{"lineNumber":1667,"author":{"gitID":"-"},"content":""},{"lineNumber":1668,"author":{"gitID":"-"},"content":"loadPage(caseDetailsPage)"},{"lineNumber":1669,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1670,"author":{"gitID":"-"},"content":""},{"lineNumber":1671,"author":{"gitID":"-"},"content":"Javascript code is included in the HTML file to parse the URL request string and populate the HTML file with the corresponding case details."},{"lineNumber":1672,"author":{"gitID":"-"},"content":""},{"lineNumber":1673,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1674,"author":{"gitID":"-"},"content":""},{"lineNumber":1675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation to view case details"},{"lineNumber":1676,"author":{"gitID":"-"},"content":""},{"lineNumber":1677,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use HTML and Javascript with JavaFX `WebView` (embedded browser)"},{"lineNumber":1678,"author":{"gitID":"-"},"content":"** Pros: Easy to implement and design with basic HTML knowledge."},{"lineNumber":1679,"author":{"gitID":"-"},"content":"** Cons: Passing of data to the HTML file has to be done with a request string, which can get a messy if the data is complex in structure. Loading data is not as efficient."},{"lineNumber":1680,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use only JavaFX"},{"lineNumber":1681,"author":{"gitID":"-"},"content":"** Pros: The view integrates more seamlessly with the application."},{"lineNumber":1682,"author":{"gitID":"-"},"content":"** Cons: More troublesome to implement and requires JavaFX knowledge."},{"lineNumber":1683,"author":{"gitID":"-"},"content":""},{"lineNumber":1684,"author":{"gitID":"-"},"content":"**Reason for current choice:** As the data we have is simple, implementing and styling with HTML is easier."},{"lineNumber":1685,"author":{"gitID":"-"},"content":""},{"lineNumber":1686,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Modify interface theme/colour scheme"},{"lineNumber":1687,"author":{"gitID":"-"},"content":""},{"lineNumber":1688,"author":{"gitID":"-"},"content":"It\u0027s easy to customize the look and feel of Investigapptor just by using CSS!"},{"lineNumber":1689,"author":{"gitID":"-"},"content":""},{"lineNumber":1690,"author":{"gitID":"-"},"content":"The default style of the interface is generated by link:{repoURL}/src/main/resources/view/LightTheme.css[LightTheme.css]. To start personalising it, you can create a new CSS file in the `/resources/view/` directory and replace the name of the file in the following line in link:{repoURL}/src/main/resources/view/MainWindow.fxml[MainWindow.fxml]  with the name of your CSS file:"},{"lineNumber":1691,"author":{"gitID":"-"},"content":""},{"lineNumber":1692,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":1693,"author":{"gitID":"-"},"content":"\u003cURL value\u003d\"@LightTheme.css\" /\u003e"},{"lineNumber":1694,"author":{"gitID":"-"},"content":"-----"},{"lineNumber":1695,"author":{"gitID":"-"},"content":""},{"lineNumber":1696,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1697,"author":{"gitID":"-"},"content":"You can take a look at link:{repoURL}/src/main/resources/view/DarkTheme.css[DarkTheme.css] for reference on what elements you can change."},{"lineNumber":1698,"author":{"gitID":"-"},"content":""},{"lineNumber":1699,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1700,"author":{"gitID":"-"},"content":"The current version of Investigapptor does not provide users with the ability to set the theme from within the application. This is a feature that we wish to implement in future versions."},{"lineNumber":1701,"author":{"gitID":"-"},"content":""},{"lineNumber":1702,"author":{"gitID":"-"},"content":"//end::ui-enhancements[]"},{"lineNumber":1703,"author":{"gitID":"-"},"content":""},{"lineNumber":1704,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1705,"author":{"gitID":"-"},"content":""},{"lineNumber":1706,"author":{"gitID":"quentinkhoo"},"content":"We use link:http://www.methods.co.nz/asciidoc/[asciidoc] for writing documentation."},{"lineNumber":1707,"author":{"gitID":"-"},"content":""},{"lineNumber":1708,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1709,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1710,"author":{"gitID":"-"},"content":""},{"lineNumber":1711,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1712,"author":{"gitID":"-"},"content":""},{"lineNumber":1713,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1714,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1715,"author":{"gitID":"-"},"content":""},{"lineNumber":1716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1717,"author":{"gitID":"-"},"content":""},{"lineNumber":1718,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1719,"author":{"gitID":"-"},"content":""},{"lineNumber":1720,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1721,"author":{"gitID":"-"},"content":""},{"lineNumber":1722,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1723,"author":{"gitID":"-"},"content":""},{"lineNumber":1724,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1725,"author":{"gitID":"-"},"content":""},{"lineNumber":1726,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1727,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1728,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1729,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1730,"author":{"gitID":"-"},"content":""},{"lineNumber":1731,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1732,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1733,"author":{"gitID":"-"},"content":""},{"lineNumber":1734,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1735,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1736,"author":{"gitID":"-"},"content":""},{"lineNumber":1737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1738,"author":{"gitID":"-"},"content":""},{"lineNumber":1739,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1740,"author":{"gitID":"-"},"content":""},{"lineNumber":1741,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1742,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1743,"author":{"gitID":"-"},"content":""},{"lineNumber":1744,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1745,"author":{"gitID":"-"},"content":""},{"lineNumber":1746,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1747,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1748,"author":{"gitID":"-"},"content":""},{"lineNumber":1749,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1750,"author":{"gitID":"-"},"content":""},{"lineNumber":1751,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1752,"author":{"gitID":"-"},"content":""},{"lineNumber":1753,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1754,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1755,"author":{"gitID":"-"},"content":""},{"lineNumber":1756,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1757,"author":{"gitID":"-"},"content":""},{"lineNumber":1758,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1759,"author":{"gitID":"-"},"content":""},{"lineNumber":1760,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1761,"author":{"gitID":"-"},"content":""},{"lineNumber":1762,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1763,"author":{"gitID":"-"},"content":""},{"lineNumber":1764,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1765,"author":{"gitID":"-"},"content":""},{"lineNumber":1766,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1767,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1768,"author":{"gitID":"quentinkhoo"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.investigapptor.ui` package."},{"lineNumber":1769,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1770,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1771,"author":{"gitID":"quentinkhoo"},"content":"e.g. `seedu.investigapptor.commons.StringUtilTest`"},{"lineNumber":1772,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1773,"author":{"gitID":"quentinkhoo"},"content":"e.g. `seedu.investigapptor.storage.StorageManagerTest`"},{"lineNumber":1774,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1775,"author":{"gitID":"quentinkhoo"},"content":"e.g. `seedu.investigapptor.logic.LogicManagerTest`"},{"lineNumber":1776,"author":{"gitID":"-"},"content":""},{"lineNumber":1777,"author":{"gitID":"-"},"content":""},{"lineNumber":1778,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1779,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1780,"author":{"gitID":"-"},"content":""},{"lineNumber":1781,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1782,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1783,"author":{"gitID":"-"},"content":""},{"lineNumber":1784,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1785,"author":{"gitID":"-"},"content":""},{"lineNumber":1786,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1787,"author":{"gitID":"-"},"content":""},{"lineNumber":1788,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1789,"author":{"gitID":"-"},"content":""},{"lineNumber":1790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1791,"author":{"gitID":"-"},"content":""},{"lineNumber":1792,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1793,"author":{"gitID":"-"},"content":""},{"lineNumber":1794,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1795,"author":{"gitID":"-"},"content":""},{"lineNumber":1796,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1797,"author":{"gitID":"-"},"content":""},{"lineNumber":1798,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1799,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1800,"author":{"gitID":"-"},"content":""},{"lineNumber":1801,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1802,"author":{"gitID":"-"},"content":""},{"lineNumber":1803,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1804,"author":{"gitID":"-"},"content":""},{"lineNumber":1805,"author":{"gitID":"quentinkhoo"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/investigapptor/MainApp.java[`MainApp.java`]."},{"lineNumber":1806,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1807,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1808,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1809,"author":{"gitID":"-"},"content":""},{"lineNumber":1810,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1811,"author":{"gitID":"-"},"content":""},{"lineNumber":1812,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1813,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1814,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1815,"author":{"gitID":"-"},"content":""},{"lineNumber":1816,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1817,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1818,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1819,"author":{"gitID":"-"},"content":""},{"lineNumber":1820,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d *Target user profile*:"},{"lineNumber":1821,"author":{"gitID":"-"},"content":""},{"lineNumber":1822,"author":{"gitID":"quentinkhoo"},"content":"* team of investigators"},{"lineNumber":1823,"author":{"gitID":"quentinkhoo"},"content":"* has a need to manage a significant number of crime cases"},{"lineNumber":1824,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1825,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1826,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1827,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1828,"author":{"gitID":"-"},"content":""},{"lineNumber":1829,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d *Value proposition*:"},{"lineNumber":1830,"author":{"gitID":"quentinkhoo"},"content":"Exclusive application for management of crime cases and investigators that provides"},{"lineNumber":1831,"author":{"gitID":"quentinkhoo"},"content":"an enhanced listing of investigators and crime cases, speeding up the administrative"},{"lineNumber":1832,"author":{"gitID":"quentinkhoo"},"content":"aspect of investigating crime cases."},{"lineNumber":1833,"author":{"gitID":"-"},"content":""},{"lineNumber":1834,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d *Feature Contribution*:"},{"lineNumber":1835,"author":{"gitID":"-"},"content":""},{"lineNumber":1836,"author":{"gitID":"-"},"content":"* *Leow Wei Ching*"},{"lineNumber":1837,"author":{"gitID":"quentinkhoo"},"content":"** *Major enhancement*: Support for adding, editing, and deleting crime cases"},{"lineNumber":1838,"author":{"gitID":"-"},"content":"*** This enhancement allows users to manage cases."},{"lineNumber":1839,"author":{"gitID":"-"},"content":"** *Minor enhancement*: Update the GUI with a new colour scheme and style"},{"lineNumber":1840,"author":{"gitID":"-"},"content":"*** This would make the interface more aesthetically pleasing."},{"lineNumber":1841,"author":{"gitID":"-"},"content":""},{"lineNumber":1842,"author":{"gitID":"-"},"content":"* *Marcus Chen*"},{"lineNumber":1843,"author":{"gitID":"-"},"content":"** *Major enhancement*: Implement the Investigator package and refactoring the model and logic for the Investigator"},{"lineNumber":1844,"author":{"gitID":"-"},"content":"*** This required to as the investigapptor requires a new person class to store the and handle the new additional data"},{"lineNumber":1845,"author":{"gitID":"-"},"content":"required."},{"lineNumber":1846,"author":{"gitID":"-"},"content":"** *Minor enhancement*: Implement `backup` command"},{"lineNumber":1847,"author":{"gitID":"-"},"content":"*** This feature helps the investigator to create a separate save file of the current state of the investigapptor and name it."},{"lineNumber":1848,"author":{"gitID":"-"},"content":""},{"lineNumber":1849,"author":{"gitID":"-"},"content":"* *Poh Kai Jun*"},{"lineNumber":1850,"author":{"gitID":"-"},"content":"** *Major Enhancement*: Support to view cases efficiently"},{"lineNumber":1851,"author":{"gitID":"-"},"content":"*** *Calendar GUI*: This feature enables the investigator to have an overview of the cases in a calendar interface."},{"lineNumber":1852,"author":{"gitID":"-"},"content":"*** *`findcasetags` Command*: This feature allows the investigator to filter out the cases according to the"},{"lineNumber":1853,"author":{"gitID":"-"},"content":"tags that the investigator is searching for."},{"lineNumber":1854,"author":{"gitID":"-"},"content":"*** *`findclosecases` \u0026 `findopencases` Command*: This feature allows the investigator to filter out the cases according its"},{"lineNumber":1855,"author":{"gitID":"-"},"content":"status."},{"lineNumber":1856,"author":{"gitID":"-"},"content":"*** *`close` Command*: This feature allows the investigator to change the status of the case to close - thus being able to keep"},{"lineNumber":1857,"author":{"gitID":"-"},"content":"track and differentiate between closed and opened cases."},{"lineNumber":1858,"author":{"gitID":"-"},"content":"** *Minor Enhancement*: Tag colours"},{"lineNumber":1859,"author":{"gitID":"-"},"content":"*** This feature helps to differentiate the various tags present in each of the investigator/cases by using different colours to associate"},{"lineNumber":1860,"author":{"gitID":"quentinkhoo"},"content":"different tag content. (Same tag content \u003d same colour \u0026 vice versa)."},{"lineNumber":1861,"author":{"gitID":"-"},"content":""},{"lineNumber":1862,"author":{"gitID":"-"},"content":"* *Quentin Khoo*"},{"lineNumber":1863,"author":{"gitID":"quentinkhoo"},"content":"** *Major enhancement*: Implement a password feature"},{"lineNumber":1864,"author":{"gitID":"quentinkhoo"},"content":"*** This would allow investigators to set a password for the application and in turn,"},{"lineNumber":1865,"author":{"gitID":"quentinkhoo"},"content":"disallow non-authorised users from accessing the application."},{"lineNumber":1866,"author":{"gitID":"quentinkhoo"},"content":"** *Minor enhancement*: Add UI support for tab swapping between listing investigators and"},{"lineNumber":1867,"author":{"gitID":"quentinkhoo"},"content":"crime cases"},{"lineNumber":1868,"author":{"gitID":"quentinkhoo"},"content":"*** This would provide convenience for the investigator in deciding which investigator to assign to which case depending"},{"lineNumber":1869,"author":{"gitID":"quentinkhoo"},"content":"on his or her expertise."},{"lineNumber":1870,"author":{"gitID":"-"},"content":""},{"lineNumber":1871,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1872,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1873,"author":{"gitID":"-"},"content":""},{"lineNumber":1874,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1875,"author":{"gitID":"-"},"content":""},{"lineNumber":1876,"author":{"gitID":"quentinkhoo"},"content":"[width\u003d\"100%\",cols\u003d\"8%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1877,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1878,"author":{"gitID":"quentinkhoo"},"content":"|Priority |As an ... |I want to ... |So that I can..."},{"lineNumber":1879,"author":{"gitID":"quentinkhoo"},"content":"4.1+^s| First Time User Stories"},{"lineNumber":1880,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |a new user |see usage instructions |refer to instructions when I forget how to use the application"},{"lineNumber":1881,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1882,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |a new user |access the user guide |learn how to use the features of the application"},{"lineNumber":1883,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1884,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |a new user |see a list of available instructions |navigate and use the application effectively"},{"lineNumber":1885,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1886,"author":{"gitID":"quentinkhoo"},"content":"4.1+^s| Investigator Related User Stories"},{"lineNumber":1887,"author":{"gitID":"-"},"content":""},{"lineNumber":1888,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |add a new investigator |have more variety of investigators to assign to cases"},{"lineNumber":1889,"author":{"gitID":"-"},"content":""},{"lineNumber":1890,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view an investigator |view their name"},{"lineNumber":1891,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1892,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view an investigator |view their email"},{"lineNumber":1893,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1894,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view an investigator |view their phone"},{"lineNumber":1895,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1896,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view an investigator |view their address"},{"lineNumber":1897,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1898,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view all investigators on the team|choose who to assign to a case"},{"lineNumber":1899,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1900,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |find investigators by tags |view who are under a certain team/category"},{"lineNumber":1901,"author":{"gitID":"-"},"content":""},{"lineNumber":1902,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |edit an investigator |update his/her phone if necessary"},{"lineNumber":1903,"author":{"gitID":"-"},"content":""},{"lineNumber":1904,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |edit an investigator |update his/her address if necessary"},{"lineNumber":1905,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1906,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |edit an investigator |update his/her email if necessary"},{"lineNumber":1907,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1908,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |delete an investigator |remove retired investigators"},{"lineNumber":1909,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1910,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |find an investigator by name |locate details of investigator without having to go through the entire list"},{"lineNumber":1911,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1912,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator with many investigators in my team |sort investigators by name |locate an investigator easily"},{"lineNumber":1913,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1914,"author":{"gitID":"quentinkhoo"},"content":"4.1+^s| Case Related User Stories"},{"lineNumber":1915,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1916,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |add a new case |allow the app to help me monitor the case"},{"lineNumber":1917,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1918,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |edit a case |update description of the case if necessary"},{"lineNumber":1919,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1920,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |edit a case |update the tags of the case if necessary"},{"lineNumber":1921,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1922,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |edit a case |close a case when its over"},{"lineNumber":1923,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1924,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view a case |view its name"},{"lineNumber":1925,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1926,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view a case |view its description"},{"lineNumber":1927,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1928,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view a case |view its start date"},{"lineNumber":1929,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1930,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view a case |view its status"},{"lineNumber":1931,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1932,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view a case |view its end date"},{"lineNumber":1933,"author":{"gitID":"-"},"content":""},{"lineNumber":1934,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |view all cases assigned to the team|see their details"},{"lineNumber":1935,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1936,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |delete a case |easier manage the list of cases"},{"lineNumber":1937,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1938,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |find a case by name |locate details of case without having to go through the entire list"},{"lineNumber":1939,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1940,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |automatically assign an investigator to a case |not have to manually assign an investigator"},{"lineNumber":1941,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1942,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |add case witnesses |classify witnesses under certain cases"},{"lineNumber":1943,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1944,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |add case suspects |classify suspects under certain cases"},{"lineNumber":1945,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1946,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |add case evidences |classify evidences under certain cases"},{"lineNumber":1947,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1948,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |add a witness |add witnesses to a case"},{"lineNumber":1949,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1950,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |add a suspect |add suspects to a case"},{"lineNumber":1951,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1952,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |add evidence |add evidence to a case"},{"lineNumber":1953,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1954,"author":{"gitID":"quentinkhoo"},"content":"4.1+^s| General User Stories"},{"lineNumber":1955,"author":{"gitID":"-"},"content":""},{"lineNumber":1956,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator |have a password for the application |deter non authorized users from accessing the application"},{"lineNumber":1957,"author":{"gitID":"-"},"content":""},{"lineNumber":1958,"author":{"gitID":"quentinkhoo"},"content":"|`* * *` |investigator | have the option to remove the password|"},{"lineNumber":1959,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1960,"author":{"gitID":"quentinkhoo"},"content":"|`* *` |investigator |create a backup |to restore to past states"},{"lineNumber":1961,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1962,"author":{"gitID":"quentinkhoo"},"content":"|`*` |investigator |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone unauthorized from seeing them by accident"},{"lineNumber":1963,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":1964,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1965,"author":{"gitID":"-"},"content":""},{"lineNumber":1966,"author":{"gitID":"-"},"content":""},{"lineNumber":1967,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1968,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1969,"author":{"gitID":"-"},"content":""},{"lineNumber":1970,"author":{"gitID":"quentinkhoo"},"content":"(For all use cases below, the *System* is the `Investigapptor` and the *Actor* is the `investigator`, unless specified otherwise)"},{"lineNumber":1971,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1972,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Use case: Add Investigator"},{"lineNumber":1973,"author":{"gitID":"-"},"content":""},{"lineNumber":1974,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1975,"author":{"gitID":"-"},"content":""},{"lineNumber":1976,"author":{"gitID":"-"},"content":"1.  User keys in investigator details"},{"lineNumber":1977,"author":{"gitID":"-"},"content":"2.  New investigators appear on list"},{"lineNumber":1978,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1979,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1980,"author":{"gitID":"-"},"content":""},{"lineNumber":1981,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1982,"author":{"gitID":"-"},"content":""},{"lineNumber":1983,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1984,"author":{"gitID":"quentinkhoo"},"content":"* 1a. The investigator details are invalid"},{"lineNumber":1985,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1986,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1987,"author":{"gitID":"-"},"content":"**  Investigapptor shows an error message."},{"lineNumber":1988,"author":{"gitID":"-"},"content":""},{"lineNumber":1989,"author":{"gitID":"-"},"content":"* 1b. The given index is invalid."},{"lineNumber":1990,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1991,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1992,"author":{"gitID":"-"},"content":"**  Investigapptor shows an error message."},{"lineNumber":1993,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1994,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1995,"author":{"gitID":"-"},"content":"* 1c. Investigator already exist."},{"lineNumber":1996,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1997,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1998,"author":{"gitID":"-"},"content":"**  Investigapptor shows an error message."},{"lineNumber":1999,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2000,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":2001,"author":{"gitID":"-"},"content":""},{"lineNumber":2002,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2003,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Use case: Delete Investigator"},{"lineNumber":2004,"author":{"gitID":"-"},"content":""},{"lineNumber":2005,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2006,"author":{"gitID":"-"},"content":""},{"lineNumber":2007,"author":{"gitID":"quentinkhoo"},"content":"1.  Investigapptor shows a list of investigators"},{"lineNumber":2008,"author":{"gitID":"-"},"content":"2.  User requests to delete a specific investigator in the list"},{"lineNumber":2009,"author":{"gitID":"quentinkhoo"},"content":"3.  Investigapptor deletes the investigator"},{"lineNumber":2010,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2011,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2012,"author":{"gitID":"-"},"content":""},{"lineNumber":2013,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2014,"author":{"gitID":"-"},"content":""},{"lineNumber":2015,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2016,"author":{"gitID":"-"},"content":"* 1a. The list is empty."},{"lineNumber":2017,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2018,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2019,"author":{"gitID":"-"},"content":""},{"lineNumber":2020,"author":{"gitID":"-"},"content":"* 2a. The given index is invalid."},{"lineNumber":2021,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2022,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2023,"author":{"gitID":"-"},"content":"**  Investigapptor shows an error message."},{"lineNumber":2024,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2025,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2026,"author":{"gitID":"-"},"content":""},{"lineNumber":2027,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2028,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Edit Investigator"},{"lineNumber":2029,"author":{"gitID":"-"},"content":""},{"lineNumber":2030,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2031,"author":{"gitID":"-"},"content":""},{"lineNumber":2032,"author":{"gitID":"-"},"content":"1.  User search investigator by name."},{"lineNumber":2033,"author":{"gitID":"-"},"content":"2.  Investigapptor display a list of investigator."},{"lineNumber":2034,"author":{"gitID":"-"},"content":"3.  User request to edit the investigator by index and key in new information to replace old"},{"lineNumber":2035,"author":{"gitID":"-"},"content":"4.  Investigapptor display success message."},{"lineNumber":2036,"author":{"gitID":"-"},"content":"5.  Case in result reflect new investigator."},{"lineNumber":2037,"author":{"gitID":"-"},"content":""},{"lineNumber":2038,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2039,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2040,"author":{"gitID":"-"},"content":""},{"lineNumber":2041,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2042,"author":{"gitID":"-"},"content":""},{"lineNumber":2043,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2044,"author":{"gitID":"-"},"content":"* 2a. List is empty exist."},{"lineNumber":2045,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2046,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2047,"author":{"gitID":"-"},"content":"** Use case ends."},{"lineNumber":2048,"author":{"gitID":"-"},"content":""},{"lineNumber":2049,"author":{"gitID":"-"},"content":"* 3a. New information is invalid"},{"lineNumber":2050,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2051,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2052,"author":{"gitID":"-"},"content":"**  Investigapptor display error message."},{"lineNumber":2053,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2054,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":2055,"author":{"gitID":"-"},"content":""},{"lineNumber":2056,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2057,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add Case"},{"lineNumber":2058,"author":{"gitID":"-"},"content":""},{"lineNumber":2059,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2060,"author":{"gitID":"-"},"content":""},{"lineNumber":2061,"author":{"gitID":"quentinkhoo"},"content":"1.  User keys in case details and assigns an investigator"},{"lineNumber":2062,"author":{"gitID":"quentinkhoo"},"content":"2.  New case appear on list"},{"lineNumber":2063,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2064,"author":{"gitID":"quentinkhoo"},"content":"Use case resumes at step 1."},{"lineNumber":2065,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2066,"author":{"gitID":"quentinkhoo"},"content":"*Extensions*"},{"lineNumber":2067,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2068,"author":{"gitID":"quentinkhoo"},"content":"[none]"},{"lineNumber":2069,"author":{"gitID":"quentinkhoo"},"content":"* 1a. The case details are invalid"},{"lineNumber":2070,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2071,"author":{"gitID":"quentinkhoo"},"content":"[none]"},{"lineNumber":2072,"author":{"gitID":"quentinkhoo"},"content":"**  Investigapptor shows an error message."},{"lineNumber":2073,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2074,"author":{"gitID":"quentinkhoo"},"content":"* 1b. The given investigator index is invalid."},{"lineNumber":2075,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2076,"author":{"gitID":"quentinkhoo"},"content":"[none]"},{"lineNumber":2077,"author":{"gitID":"quentinkhoo"},"content":"**  Investigapptor shows an error message."},{"lineNumber":2078,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2079,"author":{"gitID":"quentinkhoo"},"content":"Use case resumes at step 1."},{"lineNumber":2080,"author":{"gitID":"quentinkhoo"},"content":"* 1c. Case already exist."},{"lineNumber":2081,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2082,"author":{"gitID":"quentinkhoo"},"content":"[none]"},{"lineNumber":2083,"author":{"gitID":"quentinkhoo"},"content":"**  Investigapptor shows an error message."},{"lineNumber":2084,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2085,"author":{"gitID":"quentinkhoo"},"content":"Use case resumes at step 1."},{"lineNumber":2086,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2087,"author":{"gitID":"quentinkhoo"},"content":"[discrete]"},{"lineNumber":2088,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Use case: Delete Case"},{"lineNumber":2089,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2090,"author":{"gitID":"quentinkhoo"},"content":"*MSS*"},{"lineNumber":2091,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2092,"author":{"gitID":"quentinkhoo"},"content":"1.  Investigapptor shows a list of cases"},{"lineNumber":2093,"author":{"gitID":"quentinkhoo"},"content":"2.  User requests to delete a specific case in the list"},{"lineNumber":2094,"author":{"gitID":"quentinkhoo"},"content":"3.  Investigapptor deletes the case"},{"lineNumber":2095,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2096,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2097,"author":{"gitID":"-"},"content":""},{"lineNumber":2098,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2099,"author":{"gitID":"-"},"content":""},{"lineNumber":2100,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2101,"author":{"gitID":"-"},"content":"* 1a. The list is empty."},{"lineNumber":2102,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2103,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2104,"author":{"gitID":"-"},"content":""},{"lineNumber":2105,"author":{"gitID":"-"},"content":"* 2a. The given index is invalid."},{"lineNumber":2106,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2107,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2108,"author":{"gitID":"-"},"content":"**  Investigapptor shows an error message."},{"lineNumber":2109,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2110,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2111,"author":{"gitID":"-"},"content":""},{"lineNumber":2112,"author":{"gitID":"quentinkhoo"},"content":"[discrete]"},{"lineNumber":2113,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Use case: Setting Password"},{"lineNumber":2114,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2115,"author":{"gitID":"quentinkhoo"},"content":"*MSS*"},{"lineNumber":2116,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2117,"author":{"gitID":"quentinkhoo"},"content":"1.  User requests to set a password"},{"lineNumber":2118,"author":{"gitID":"quentinkhoo"},"content":"2.  Investigapptor creates the password"},{"lineNumber":2119,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2120,"author":{"gitID":"quentinkhoo"},"content":"Use case ends."},{"lineNumber":2121,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2122,"author":{"gitID":"quentinkhoo"},"content":"*Extensions*"},{"lineNumber":2123,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2124,"author":{"gitID":"quentinkhoo"},"content":"[none]"},{"lineNumber":2125,"author":{"gitID":"quentinkhoo"},"content":"* 1a. The password is invalid. +"},{"lineNumber":2126,"author":{"gitID":"quentinkhoo"},"content":"[none]"},{"lineNumber":2127,"author":{"gitID":"quentinkhoo"},"content":"**  Investigapptor shows an error message."},{"lineNumber":2128,"author":{"gitID":"quentinkhoo"},"content":"+"},{"lineNumber":2129,"author":{"gitID":"quentinkhoo"},"content":"Use case resumes at step 1."},{"lineNumber":2130,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2131,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2132,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Display Help"},{"lineNumber":2133,"author":{"gitID":"-"},"content":""},{"lineNumber":2134,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2135,"author":{"gitID":"-"},"content":""},{"lineNumber":2136,"author":{"gitID":"-"},"content":"1.  User"},{"lineNumber":2137,"author":{"gitID":"-"},"content":""},{"lineNumber":2138,"author":{"gitID":"-"},"content":"** key in help"},{"lineNumber":2139,"author":{"gitID":"-"},"content":""},{"lineNumber":2140,"author":{"gitID":"-"},"content":"** press F1"},{"lineNumber":2141,"author":{"gitID":"-"},"content":""},{"lineNumber":2142,"author":{"gitID":"-"},"content":"** User press help on the top left button"},{"lineNumber":2143,"author":{"gitID":"-"},"content":""},{"lineNumber":2144,"author":{"gitID":"-"},"content":"2.  Help windows appears"},{"lineNumber":2145,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2146,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2147,"author":{"gitID":"-"},"content":""},{"lineNumber":2148,"author":{"gitID":"quentinkhoo"},"content":"[discrete]"},{"lineNumber":2149,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Use case: Backup"},{"lineNumber":2150,"author":{"gitID":"-"},"content":""},{"lineNumber":2151,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2152,"author":{"gitID":"-"},"content":""},{"lineNumber":2153,"author":{"gitID":"-"},"content":"1.  User types in the new backup\u0027s name"},{"lineNumber":2154,"author":{"gitID":"-"},"content":""},{"lineNumber":2155,"author":{"gitID":"-"},"content":"2.  Success message appears"},{"lineNumber":2156,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2157,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2158,"author":{"gitID":"-"},"content":""},{"lineNumber":2159,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2160,"author":{"gitID":"-"},"content":""},{"lineNumber":2161,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2162,"author":{"gitID":"-"},"content":"* 1a. Backup\u0027s name is not alphanumerical"},{"lineNumber":2163,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2164,"author":{"gitID":"-"},"content":"Use case resumes at step 1"},{"lineNumber":2165,"author":{"gitID":"-"},"content":""},{"lineNumber":2166,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2167,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":2168,"author":{"gitID":"-"},"content":""},{"lineNumber":2169,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":2170,"author":{"gitID":"quentinkhoo"},"content":".  Should be able to hold up to 1000 investigators without a noticeable sluggishness in performance for typical usage."},{"lineNumber":2171,"author":{"gitID":"quentinkhoo"},"content":".  Should be able to hold up to 1000 cases without a noticeable sluggishness in performance for typical usage."},{"lineNumber":2172,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":2173,"author":{"gitID":"quentinkhoo"},"content":".  Should work on both 32-bit and 64-bit environments."},{"lineNumber":2174,"author":{"gitID":"quentinkhoo"},"content":".  Should respond to user commands within 2 seconds."},{"lineNumber":2175,"author":{"gitID":"quentinkhoo"},"content":".  Should favor DOS style commands over Unix-style commands."},{"lineNumber":2176,"author":{"gitID":"quentinkhoo"},"content":".  Should be intuitive and easy to use for a first-time user."},{"lineNumber":2177,"author":{"gitID":"quentinkhoo"},"content":".  Should be able to work offline."},{"lineNumber":2178,"author":{"gitID":"-"},"content":""},{"lineNumber":2179,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2180,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":2181,"author":{"gitID":"quentinkhoo"},"content":"[[access-control]] Access Control::"},{"lineNumber":2182,"author":{"gitID":"quentinkhoo"},"content":"The selective restriction of access to the Investigapptor"},{"lineNumber":2183,"author":{"gitID":"-"},"content":""},{"lineNumber":2184,"author":{"gitID":"quentinkhoo"},"content":"[[hash]] Hash::"},{"lineNumber":2185,"author":{"gitID":"quentinkhoo"},"content":"A one-way transformation of a text(typically password) into an encoded text."},{"lineNumber":2186,"author":{"gitID":"quentinkhoo"},"content":"The encoded text is mathematically impossible to decode back into the original text."},{"lineNumber":2187,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":2188,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":2189,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":2190,"author":{"gitID":"-"},"content":""},{"lineNumber":2191,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":2192,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":2193,"author":{"gitID":"-"},"content":""},{"lineNumber":2194,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2195,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":2196,"author":{"gitID":"-"},"content":""},{"lineNumber":2197,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":2198,"author":{"gitID":"-"},"content":""},{"lineNumber":2199,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2200,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":2201,"author":{"gitID":"-"},"content":""},{"lineNumber":2202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":2203,"author":{"gitID":"-"},"content":""},{"lineNumber":2204,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":2205,"author":{"gitID":"-"},"content":""},{"lineNumber":2206,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":2207,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":2208,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Shows the GUI with a set of sample investigators. The window size may not be optimum."},{"lineNumber":2209,"author":{"gitID":"-"},"content":""},{"lineNumber":2210,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":2211,"author":{"gitID":"-"},"content":""},{"lineNumber":2212,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":2213,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":2214,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":2215,"author":{"gitID":"-"},"content":""},{"lineNumber":2216,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Setting a Password"},{"lineNumber":2217,"author":{"gitID":"quentinkhoo"},"content":". Setting a password for the application"},{"lineNumber":2218,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2219,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `setpassword pw/pass word` +"},{"lineNumber":2220,"author":{"gitID":"quentinkhoo"},"content":"    Expected: Password is not accepted. Error details shown in status message."},{"lineNumber":2221,"author":{"gitID":"quentinkhoo"},"content":"    Status bar remains the same."},{"lineNumber":2222,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `set password pw/password` +"},{"lineNumber":2223,"author":{"gitID":"quentinkhoo"},"content":"    Expected: Password is set. Upon re-opening of application, a password"},{"lineNumber":2224,"author":{"gitID":"quentinkhoo"},"content":"    is prompted for, and inputting \u0027password\u0027 would allow you access to the"},{"lineNumber":2225,"author":{"gitID":"quentinkhoo"},"content":"    application."},{"lineNumber":2226,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2227,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Adding an investigator"},{"lineNumber":2228,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2229,"author":{"gitID":"quentinkhoo"},"content":". Adding an investigator into the Investigapptor"},{"lineNumber":2230,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2231,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: None"},{"lineNumber":2232,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `addinvestigator n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/1 t/newcomer` +"},{"lineNumber":2233,"author":{"gitID":"quentinkhoo"},"content":"   Expected: A new investigator to be added"},{"lineNumber":2234,"author":{"gitID":"quentinkhoo"},"content":"   Details of the new investigator shown in the status message."},{"lineNumber":2235,"author":{"gitID":"quentinkhoo"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":2236,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `n/John Doe e/johnd@example.com a/John street, block 123, #01-01 r/1 t/newcomer` +"},{"lineNumber":2237,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Missing input phone number. Error details shown in the status message."},{"lineNumber":2238,"author":{"gitID":"quentinkhoo"},"content":"   Status bar remains the same."},{"lineNumber":2239,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect add commands to try: `add .....`, +"},{"lineNumber":2240,"author":{"gitID":"quentinkhoo"},"content":" `n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 t/newcomer` +"},{"lineNumber":2241,"author":{"gitID":"quentinkhoo"},"content":"  ` p/98765432 e/johnd@example.com a/John street, block 123, #01-01 r/1 t/newcomer`"},{"lineNumber":2242,"author":{"gitID":"quentinkhoo"},"content":"     +"},{"lineNumber":2243,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous due to missing input arguments."},{"lineNumber":2244,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2245,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Deleting an investigator"},{"lineNumber":2246,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2247,"author":{"gitID":"quentinkhoo"},"content":". Deleting an investigator while all investigators are listed"},{"lineNumber":2248,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2249,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: List all investigators using the `listinvestigators` command."},{"lineNumber":2250,"author":{"gitID":"quentinkhoo"},"content":"Multiple investigators in the list."},{"lineNumber":2251,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deleteinvestigator 1` +"},{"lineNumber":2252,"author":{"gitID":"quentinkhoo"},"content":"   Expected: First investigator is deleted from the list."},{"lineNumber":2253,"author":{"gitID":"quentinkhoo"},"content":"   Details of the deleted investigator shown in the status message."},{"lineNumber":2254,"author":{"gitID":"quentinkhoo"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":2255,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deleteinvestigator 0` +"},{"lineNumber":2256,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No investigator is deleted. Error details shown in the status message."},{"lineNumber":2257,"author":{"gitID":"quentinkhoo"},"content":"   Status bar remains the same."},{"lineNumber":2258,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect delete commands to try: `delete`, `delete x`"},{"lineNumber":2259,"author":{"gitID":"quentinkhoo"},"content":"(where x is larger than the list size) +"},{"lineNumber":2260,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2261,"author":{"gitID":"-"},"content":""},{"lineNumber":2262,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Unable to delete an investigator with a case"},{"lineNumber":2263,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2264,"author":{"gitID":"quentinkhoo"},"content":". Deleting an investigator while all investigators are listed"},{"lineNumber":2265,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2266,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: Investigator at index one has a CrimeCase under him/her"},{"lineNumber":2267,"author":{"gitID":"quentinkhoo"},"content":"Multiple investigators in the list."},{"lineNumber":2268,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deleteinvestigator 1` +"},{"lineNumber":2269,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Investigator cannot be deleted"},{"lineNumber":2270,"author":{"gitID":"quentinkhoo"},"content":"   Details of why investigator cannot be deleted to be shown in the status message."},{"lineNumber":2271,"author":{"gitID":"quentinkhoo"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":2272,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deleteinvestigator 0` +"},{"lineNumber":2273,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No investigator is deleted. Error details shown in the status message."},{"lineNumber":2274,"author":{"gitID":"quentinkhoo"},"content":"   Status bar remains the same."},{"lineNumber":2275,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect delete commands to try: `delete`, `delete x`"},{"lineNumber":2276,"author":{"gitID":"quentinkhoo"},"content":"(where x is larger than the list size) +"},{"lineNumber":2277,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2278,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2279,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Edit an investigator"},{"lineNumber":2280,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2281,"author":{"gitID":"quentinkhoo"},"content":". Editing an investigator that exist in the Investigapptor"},{"lineNumber":2282,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2283,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: List all investigators using the `listinvestigators` command."},{"lineNumber":2284,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `editinvestigator 1 n/Detective Conan` +"},{"lineNumber":2285,"author":{"gitID":"quentinkhoo"},"content":"   Expected: First investigator name is changed to Detective Conan"},{"lineNumber":2286,"author":{"gitID":"quentinkhoo"},"content":"   Details of the edited investigator shown in the status message. Cases under the"},{"lineNumber":2287,"author":{"gitID":"quentinkhoo"},"content":"   investigator should reflect the change as well."},{"lineNumber":2288,"author":{"gitID":"quentinkhoo"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":2289,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deleteinvestigator 1 n/(\u0026$(@#^$(@` +"},{"lineNumber":2290,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Unable to edit the investigator, name can only be alphanumeric."},{"lineNumber":2291,"author":{"gitID":"quentinkhoo"},"content":"   Error details shown in the status message."},{"lineNumber":2292,"author":{"gitID":"quentinkhoo"},"content":"   Status bar remains the same."},{"lineNumber":2293,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deleteinvestigator 0` +"},{"lineNumber":2294,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No investigator is deleted. Error details shown in the status message."},{"lineNumber":2295,"author":{"gitID":"quentinkhoo"},"content":"   Status bar remains the same."},{"lineNumber":2296,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect delete commands to try: `delete`, `delete x`"},{"lineNumber":2297,"author":{"gitID":"quentinkhoo"},"content":"(where x is larger than the list size) +"},{"lineNumber":2298,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2299,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2300,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Backup Investigapptor"},{"lineNumber":2301,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2302,"author":{"gitID":"quentinkhoo"},"content":". Creating a backup of the investigapptor state."},{"lineNumber":2303,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2304,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: Have a investigator in the investigapptor"},{"lineNumber":2305,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `backup savefile` +"},{"lineNumber":2306,"author":{"gitID":"quentinkhoo"},"content":"   Expected: A savefile.xml to be created in the root/data folder. The newly created backup should be"},{"lineNumber":2307,"author":{"gitID":"quentinkhoo"},"content":"   exactly the same as the default Investigapptor.xml file."},{"lineNumber":2308,"author":{"gitID":"quentinkhoo"},"content":"   Success message of the backup being created,"},{"lineNumber":2309,"author":{"gitID":"quentinkhoo"},"content":"   timestamp in the status bar is updated."},{"lineNumber":2310,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `backup *\u0026@#^$*` +"},{"lineNumber":2311,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Unable to backup as filename can only be alphanumeric."},{"lineNumber":2312,"author":{"gitID":"quentinkhoo"},"content":"   Error details shown in the status message."},{"lineNumber":2313,"author":{"gitID":"quentinkhoo"},"content":"   Status bar remains the same."},{"lineNumber":2314,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2315,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d List Investigator Cases"},{"lineNumber":2316,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2317,"author":{"gitID":"quentinkhoo"},"content":". Viewing all the `CrimeCase` under the selected investigator."},{"lineNumber":2318,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2319,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: List all investigators using the `listinvestigators` command."},{"lineNumber":2320,"author":{"gitID":"quentinkhoo"},"content":"Investigator at index 1 has at least one `CrimeCase`."},{"lineNumber":2321,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `listinvestigatorcase 1` +"},{"lineNumber":2322,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Change to `CrimeCase` List Panel and only display cases under the investigator and"},{"lineNumber":2323,"author":{"gitID":"quentinkhoo"},"content":"   index 1."},{"lineNumber":2324,"author":{"gitID":"quentinkhoo"},"content":"   Details of how many cases shown in the status message."},{"lineNumber":2325,"author":{"gitID":"quentinkhoo"},"content":"   Timestamp in the status bar is updated."},{"lineNumber":2326,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `listinvestigatorcase 0` +"},{"lineNumber":2327,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No investigator is deleted. Error details shown in the status message."},{"lineNumber":2328,"author":{"gitID":"quentinkhoo"},"content":"   Status bar remains the same."},{"lineNumber":2329,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect delete commands to try: `listinvestigatorcase`, `listinvestigatorcase x`"},{"lineNumber":2330,"author":{"gitID":"quentinkhoo"},"content":"(where x is larger than the list size) +"},{"lineNumber":2331,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2332,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2333,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Adding a case"},{"lineNumber":2334,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2335,"author":{"gitID":"quentinkhoo"},"content":". Adding a case while all cases are listed"},{"lineNumber":2336,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2337,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: At least one investigator has been added. List all cases using the `listcases` command. Multiple cases in the list."},{"lineNumber":2338,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `addcase n/Project Magic d/Kidnapping of 6 year-old John Doe i/1 s/01/04/2018 t/Homicide t/Fraud` +"},{"lineNumber":2339,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Case is added to the bottom of the list. Details of the added case shown in the status message. Timestamp in the status bar is updated. Added case is reflected in the case list of the corresponding investigator."},{"lineNumber":2340,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `addcase n/Project Magic i/1 s/01/04/2018 t/Homicide t/Fraud` +"},{"lineNumber":2341,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No case is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":2342,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect `addcase` commands to try: `addcase`, `addcase n/Project Test i/1 d/Kidnapping of 6 year-old John Doe s/x` (where x is an invalid date e.g. greater than today\u0027s date) +"},{"lineNumber":2343,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2344,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2345,"author":{"gitID":"quentinkhoo"},"content":". Adding a case while list is filtered"},{"lineNumber":2346,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2347,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: At least one investigator has been added. List one or more cases using the `findcases` command."},{"lineNumber":2348,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `addcase n/Project Magic d/Kidnapping of 6 year-old John Doe i/1 s/01/04/2018 t/Homicide t/Fraud` +"},{"lineNumber":2349,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Unfiltered list is displayed. Case is added to the bottom of the list. Details of the added case shown in the status message. Timestamp in the status bar is updated. Added case is reflected in the case list of the corresponding investigator."},{"lineNumber":2350,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `addcase n/Project Magic i/1 s/01/04/2018 t/Homicide t/Fraud` +"},{"lineNumber":2351,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No case is added. Error details shown in the status message. Status bar remains the same."},{"lineNumber":2352,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect `addcase` commands to try: `addcase`, `addcase n/Project Test i/1 d/Kidnapping of 6 year-old John Doe s/x` (where x is an invalid date e.g. greater than today\u0027s date) +"},{"lineNumber":2353,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2354,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2355,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Deleting a case"},{"lineNumber":2356,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2357,"author":{"gitID":"quentinkhoo"},"content":". Deleting a case while all cases are listed"},{"lineNumber":2358,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2359,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: List all cases using the `listcases` command. Multiple cases in the list."},{"lineNumber":2360,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deletecase 1` +"},{"lineNumber":2361,"author":{"gitID":"quentinkhoo"},"content":"   Expected: First case is deleted from the list. Details of the deleted case shown in the status message. Timestamp in the status bar is updated. Case is removed from the case list of the corresponding investigator."},{"lineNumber":2362,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `delete 0` +"},{"lineNumber":2363,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No case is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":2364,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect delete commands to try: `deletecase`, `delete x` (where x is larger than the list size) +"},{"lineNumber":2365,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2366,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2367,"author":{"gitID":"quentinkhoo"},"content":". Deleting a case while list is filtered"},{"lineNumber":2368,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2369,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: List some cases using the `findcases` command. One or more cases in the list."},{"lineNumber":2370,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `deletecase 1` +"},{"lineNumber":2371,"author":{"gitID":"quentinkhoo"},"content":"   Expected: View remains on the filtered list. First case is deleted from the filtered list. Details of the deleted case shown in the status message. Case is removed from the case list of the corresponding investigator. Timestamp in the status bar is updated."},{"lineNumber":2372,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2373,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Editing a case"},{"lineNumber":2374,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2375,"author":{"gitID":"quentinkhoo"},"content":". Editing a case while all cases are listed"},{"lineNumber":2376,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2377,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: At least one case has been added. List all cases using the `listcases` command. Multiple cases in the list."},{"lineNumber":2378,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `editcase 1 d/Another description. s/3/4/2017` +"},{"lineNumber":2379,"author":{"gitID":"quentinkhoo"},"content":"   Expected: First case is updated accordingly from the list. Details of the edited case shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":2380,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `editcase 0` +"},{"lineNumber":2381,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No case is edited. Error details shown in the status message. Status bar remains the same."},{"lineNumber":2382,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect delete commands to try: `editcase`, `editcase x`, `editcase 1 i/y` (where x is larger than the case list size and y is larger than the investigator list size) +"},{"lineNumber":2383,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2384,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2385,"author":{"gitID":"quentinkhoo"},"content":". Editing a case while list is filtered"},{"lineNumber":2386,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2387,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: At least one case has been added. List some cases using the `findcases` command. One or more cases in the list."},{"lineNumber":2388,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `editcase 1` +"},{"lineNumber":2389,"author":{"gitID":"quentinkhoo"},"content":"   Expected: First case from the filtered list is edited. The unfiltered list is displayed. Details of the edited case shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":2390,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2391,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Finding a case by name"},{"lineNumber":2392,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2393,"author":{"gitID":"quentinkhoo"},"content":". Finding a case while all cases are listed"},{"lineNumber":2394,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2395,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: List all cases using the `listcases` command. Multiple cases in the list."},{"lineNumber":2396,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findcases happy` +"},{"lineNumber":2397,"author":{"gitID":"quentinkhoo"},"content":"   Expected: List will display all the cases whose name contains the keyword \"happy\". Number of cases found shown in the status message."},{"lineNumber":2398,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findcases happy sad` +"},{"lineNumber":2399,"author":{"gitID":"quentinkhoo"},"content":"   Expected: List will display all the cases whose name contains the keyword \"happy\" OR \"sad\". Number of cases found shown in the status message."},{"lineNumber":2400,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findcases` +"},{"lineNumber":2401,"author":{"gitID":"quentinkhoo"},"content":"   Expected: View is not changed. Error details shown in the status message. Status bar remains the same."},{"lineNumber":2402,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2403,"author":{"gitID":"quentinkhoo"},"content":". Finding a case while list is filtered"},{"lineNumber":2404,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2405,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: List some cases using the `findcases` command. One or more cases in the list."},{"lineNumber":2406,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findcases test` +"},{"lineNumber":2407,"author":{"gitID":"quentinkhoo"},"content":"   Expected: The already filtered list is further filtered. List will display all the cases whose name contains the keyword \"test\". Number of cases found shown in the status message."},{"lineNumber":2408,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2409,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Selecting a case"},{"lineNumber":2410,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2411,"author":{"gitID":"quentinkhoo"},"content":". Selecting a case"},{"lineNumber":2412,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2413,"author":{"gitID":"quentinkhoo"},"content":".. Prerequisites: At least one case has been added."},{"lineNumber":2414,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `selectcase 1` +"},{"lineNumber":2415,"author":{"gitID":"quentinkhoo"},"content":"   Expected: The first case is highlighted in the list. Details of the case is displayed on the panel on the right of the list. Status message displays index of case that has been selected."},{"lineNumber":2416,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `selectcase 0` +"},{"lineNumber":2417,"author":{"gitID":"quentinkhoo"},"content":"   Expected: No case is selected. Error details shown in the status message."},{"lineNumber":2418,"author":{"gitID":"quentinkhoo"},"content":".. Other incorrect delete commands to try: `selectcase`, `selectcase x` (where x is larger than the list size) +"},{"lineNumber":2419,"author":{"gitID":"quentinkhoo"},"content":"   Expected: Similar to previous."},{"lineNumber":2420,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2421,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2422,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Closing a case"},{"lineNumber":2423,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2424,"author":{"gitID":"quentinkhoo"},"content":"Prerequisites: The target case to be closed has a status of `open` +"},{"lineNumber":2425,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2426,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `close 1`"},{"lineNumber":2427,"author":{"gitID":"quentinkhoo"},"content":".. Expected: First case\u0027s status will change from `open` to `close`."},{"lineNumber":2428,"author":{"gitID":"quentinkhoo"},"content":"Success message stating that the case status has been updated is shown in the result box."},{"lineNumber":2429,"author":{"gitID":"quentinkhoo"},"content":"Its corresponding entry on the calendar will change its colour from red to green, and span from its start date to today\u0027s date."},{"lineNumber":2430,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2431,"author":{"gitID":"quentinkhoo"},"content":"Prerequisites: The target case to be closed has a status of `close` +"},{"lineNumber":2432,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2433,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `close 1`"},{"lineNumber":2434,"author":{"gitID":"quentinkhoo"},"content":".. Expected: No case\u0027s status will be changed."},{"lineNumber":2435,"author":{"gitID":"quentinkhoo"},"content":"Error details (case is already closed) shown in the result box."},{"lineNumber":2436,"author":{"gitID":"quentinkhoo"},"content":"Its corresponding entry on the calendar remains the same."},{"lineNumber":2437,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2438,"author":{"gitID":"quentinkhoo"},"content":"Incorrect `close` commands to try: +"},{"lineNumber":2439,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2440,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `close 0`, `close x` (where x is larger than the list size), `close`"},{"lineNumber":2441,"author":{"gitID":"quentinkhoo"},"content":".. Expected: No case\u0027s status will be changed. Error details shown in the result box. Its corresponding entry on the calendar remains the same."},{"lineNumber":2442,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2443,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Finding cases according to its tags"},{"lineNumber":2444,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2445,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findcasetags homicide fraud`"},{"lineNumber":2446,"author":{"gitID":"quentinkhoo"},"content":".. Expected: Panel list will display all the cases whose tags matches the keyword \"homicide\" or \"fraud\"."},{"lineNumber":2447,"author":{"gitID":"quentinkhoo"},"content":"Number of cases listed is shown in the result box."},{"lineNumber":2448,"author":{"gitID":"quentinkhoo"},"content":"The calendar view changes by reflecting the cases that is currently listed on the panel list."},{"lineNumber":2449,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2450,"author":{"gitID":"quentinkhoo"},"content":"Incorrect `findcasetags` commands to try:"},{"lineNumber":2451,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2452,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findcasetags`"},{"lineNumber":2453,"author":{"gitID":"quentinkhoo"},"content":".. Expected: No changes will be seen."},{"lineNumber":2454,"author":{"gitID":"quentinkhoo"},"content":"Error details shown in the result box."},{"lineNumber":2455,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2456,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Finding cases with status `open`"},{"lineNumber":2457,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2458,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findopencases`"},{"lineNumber":2459,"author":{"gitID":"quentinkhoo"},"content":".. Expected: Panel list will display all the cases whose status is `open`."},{"lineNumber":2460,"author":{"gitID":"quentinkhoo"},"content":"Number of cases listed is shown in the result box."},{"lineNumber":2461,"author":{"gitID":"quentinkhoo"},"content":"The calendar view changes by reflecting the cases that is currently listed on the panel list."},{"lineNumber":2462,"author":{"gitID":"quentinkhoo"},"content":"All entries displayed on the calendar is red."},{"lineNumber":2463,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2464,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Finding cases with status `close`"},{"lineNumber":2465,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2466,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findclosecases`"},{"lineNumber":2467,"author":{"gitID":"quentinkhoo"},"content":".. Expected: Panel list will display all the cases whose status is `close`."},{"lineNumber":2468,"author":{"gitID":"quentinkhoo"},"content":"Number of cases listed is shown in the result box."},{"lineNumber":2469,"author":{"gitID":"quentinkhoo"},"content":"The calendar view changes by reflecting the cases that is currently listed on the panel list."},{"lineNumber":2470,"author":{"gitID":"quentinkhoo"},"content":"All entries displayed on the calendar is green."},{"lineNumber":2471,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":2472,"author":{"gitID":"quentinkhoo"},"content":"\u003d\u003d\u003d Finding investigators according to its tags"},{"lineNumber":2473,"author":{"gitID":"-"},"content":""},{"lineNumber":2474,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findinvestigatortags teamA expert`"},{"lineNumber":2475,"author":{"gitID":"quentinkhoo"},"content":".. Expected: Panel list will display all the investigators whose tags matches the keyword \"teamA\" or \"expert\"."},{"lineNumber":2476,"author":{"gitID":"quentinkhoo"},"content":"Number of investigators listed is shown in the result box."},{"lineNumber":2477,"author":{"gitID":"-"},"content":""},{"lineNumber":2478,"author":{"gitID":"quentinkhoo"},"content":"Incorrect `findinvestigatortags` commands to try:"},{"lineNumber":2479,"author":{"gitID":"-"},"content":""},{"lineNumber":2480,"author":{"gitID":"quentinkhoo"},"content":".. Test case: `findinvestigatortags`"},{"lineNumber":2481,"author":{"gitID":"quentinkhoo"},"content":".. Expected: No changes will be seen."},{"lineNumber":2482,"author":{"gitID":"quentinkhoo"},"content":"Error details shown in the result box."}],"authorContributionMap":{"pkaijun":1,"quentinkhoo":595,"-":1886}},{"path":"src/test/java/seedu/investigapptor/logic/parser/ArgumentTokenizerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /** Also covers: testing for prefixes not specified as a prefix **/"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":149}},{"path":"src/test/java/seedu/investigapptor/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":10,"-":236}},{"path":"src/test/java/seedu/investigapptor/logic/parser/EditInvestigatorCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand;"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"public class EditInvestigatorCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditInvestigatorCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":"    private EditInvestigatorCommandParser parser \u003d new EditInvestigatorCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"        assertParseFailure(parser, \"1\", EditInvestigatorCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"                                                    Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":118,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":130,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":141,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":147,"author":{"gitID":"pkaijun"},"content":"        expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":153,"author":{"gitID":"pkaijun"},"content":"        expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"quentinkhoo"},"content":"        // investigapptor"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":159,"author":{"gitID":"pkaijun"},"content":"        expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":165,"author":{"gitID":"pkaijun"},"content":"        expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":179,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":190,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":198,"author":{"gitID":"pkaijun"},"content":"        expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":208,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand expectedCommand \u003d new EditInvestigatorCommand(targetIndex, descriptor);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":17,"quentinkhoo":42,"-":153}},{"path":"src/test/java/seedu/investigapptor/logic/parser/AddCaseCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.CASENAME_DESC_APPLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.CASENAME_DESC_BANANA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESCRIPTION_DESC_APPLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BANANA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_CASENAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_STARTDATE_DESC;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVESTIGATOR_DESC_BANANA;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.STARTDATE_DESC_APPLE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.STARTDATE_DESC_BANANA;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_FRAUD;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_MURDER;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_APPLE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_BANANA;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_APPLE;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BANANA;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_INVESTIGATOR_INDEX_BANANA;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_STARTDATE_APPLE;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_STARTDATE_BANANA;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRAUD;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_MURDER;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddCaseCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.util.SampleDataUtil;"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"public class AddCaseCommandParserTest {"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"    private AddCaseCommandParser parser \u003d new AddCaseCommandParser();"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        Set\u003cTag\u003e tag \u003d SampleDataUtil.getTagSet(VALID_TAG_FRAUD);"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"        Set\u003cTag\u003e tagList \u003d SampleDataUtil.getTagSet(VALID_TAG_FRAUD, VALID_TAG_MURDER);"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand expectedCommand \u003d new AddCaseCommand(new CaseName(VALID_CASENAME_BANANA),"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"                new Description(VALID_DESCRIPTION_BANANA), targetIndex,"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"                new StartDate(VALID_STARTDATE_BANANA), tag);"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"        // whitespace only preamble"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"                + \" i/\" + targetIndex.getOneBased() + STARTDATE_DESC_BANANA"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_FRAUD, expectedCommand);"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"        // multiple case names - last case name accepted"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, CASENAME_DESC_APPLE + CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"                + \" i/\" + targetIndex.getOneBased() + STARTDATE_DESC_BANANA"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_FRAUD, expectedCommand);"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"        // multiple descriptions - last description accepted"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, CASENAME_DESC_BANANA + DESCRIPTION_DESC_APPLE + DESCRIPTION_DESC_BANANA"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"                + \" i/\" + targetIndex.getOneBased() + STARTDATE_DESC_BANANA"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_FRAUD, expectedCommand);"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        // multiple start dates - last start date accepted"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"                + \" i/\" + targetIndex.getOneBased() + STARTDATE_DESC_APPLE + STARTDATE_DESC_BANANA"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_FRAUD, expectedCommand);"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"        // multiple tags - all accepted"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand expectedCommandMultipleTags \u003d new AddCaseCommand(new CaseName(VALID_CASENAME_BANANA),"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"                new Description(VALID_DESCRIPTION_BANANA), targetIndex,"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"                new StartDate(VALID_STARTDATE_BANANA), tagList);"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"                + \" i/\" + targetIndex.getOneBased()"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"                + STARTDATE_DESC_BANANA + TAG_DESC_MURDER"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_FRAUD, expectedCommandMultipleTags);"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"        // zero tags"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"        Set\u003cTag\u003e tag \u003d SampleDataUtil.getTagSet();"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand expectedCommand \u003d new AddCaseCommand(new CaseName(VALID_CASENAME_APPLE),"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"                new Description(VALID_DESCRIPTION_APPLE), targetIndex,"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"                new StartDate(VALID_STARTDATE_APPLE), tag);"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, CASENAME_DESC_APPLE + DESCRIPTION_DESC_APPLE"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"                        + \" i/\" + targetIndex.getOneBased() + STARTDATE_DESC_APPLE,"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"                expectedCommand);"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"                AddCaseCommand.MESSAGE_USAGE);"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"        // missing case name prefix"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, VALID_CASENAME_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"                        + STARTDATE_DESC_BANANA,"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"                expectedMessage);"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"        // missing description prefix"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, CASENAME_DESC_BANANA + VALID_DESCRIPTION_BANANA"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"                        + STARTDATE_DESC_BANANA,"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"        // missing investigator prefix"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"                        + VALID_INVESTIGATOR_INDEX_BANANA + STARTDATE_DESC_BANANA,"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"                expectedMessage);"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"        // missing start date prefix"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"                        + VALID_STARTDATE_BANANA,"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"                expectedMessage);"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"        // all prefixes missing"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, VALID_CASENAME_BANANA + VALID_DESCRIPTION_BANANA"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"                        + VALID_STARTDATE_BANANA,"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"                expectedMessage);"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"        // invalid case name"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, INVALID_CASENAME_DESC + DESCRIPTION_DESC_BANANA"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"                + INVESTIGATOR_DESC_BANANA + STARTDATE_DESC_BANANA"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_MURDER + TAG_DESC_FRAUD, CaseName.MESSAGE_CASE_NAME_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"        // invalid description"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, CASENAME_DESC_BANANA + INVALID_DESCRIPTION_DESC"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"                + INVESTIGATOR_DESC_BANANA + STARTDATE_DESC_BANANA"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_MURDER + TAG_DESC_FRAUD, Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"        // invalid start date"},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"                + INVESTIGATOR_DESC_BANANA + INVALID_STARTDATE_DESC"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_MURDER + TAG_DESC_FRAUD, StartDate.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"        // invalid tag"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, CASENAME_DESC_BANANA + DESCRIPTION_DESC_BANANA"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"                + INVESTIGATOR_DESC_BANANA + STARTDATE_DESC_BANANA"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRAUD, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, INVALID_CASENAME_DESC + DESCRIPTION_DESC_BANANA"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":"                        + INVESTIGATOR_DESC_BANANA + INVALID_STARTDATE_DESC,"},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"                CaseName.MESSAGE_CASE_NAME_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"        // non-empty preamble"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + CASENAME_DESC_BANANA"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"                        + DESCRIPTION_DESC_BANANA + STARTDATE_DESC_BANANA + TAG_DESC_MURDER + TAG_DESC_FRAUD,"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":124,"quentinkhoo":6,"-":36}},{"path":"src/test/java/seedu/investigapptor/logic/parser/SelectCaseCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.SelectCaseCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":" * Test scope: similar to {@code DeleteCaseCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":" * @see DeleteCaseCommandParserTest"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"public class SelectCaseCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"    private SelectCaseCommandParser parser \u003d new SelectCaseCommandParser();"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, \"1\", new SelectCaseCommand(INDEX_FIRST_CASE));"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"                SelectCaseCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":20,"quentinkhoo":4,"-":7}},{"path":"src/test/java/seedu/investigapptor/logic/parser/SelectInvestigatorCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.SelectInvestigatorCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":" * Test scope: similar to {@code DeleteInvestigatorCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":" * @see DeleteInvestigatorCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"public class SelectInvestigatorCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"    private SelectInvestigatorCommandParser parser \u003d new SelectInvestigatorCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"        assertParseSuccess(parser, \"1\", new SelectInvestigatorCommand(INDEX_FIRST_PERSON));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"                SelectInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":8,"quentinkhoo":5,"-":17}},{"path":"src/test/java/seedu/investigapptor/logic/parser/DeleteInvestigatorCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.DeleteInvestigatorCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":" * outside of the DeleteInvestigatorCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":" * same path through the DeleteInvestigatorCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"public class DeleteInvestigatorCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"    private DeleteInvestigatorCommandParser parser \u003d new DeleteInvestigatorCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"        assertParseSuccess(parser, \"1\", new DeleteInvestigatorCommand(INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"                DeleteInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":8,"quentinkhoo":5,"-":20}},{"path":"src/test/java/seedu/investigapptor/logic/parser/AddInvestigatorCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_RANK_DESC;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.RANK_DESC_CAP;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_RANK_INSPECTOR;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddInvestigatorCommand;"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"public class AddInvestigatorCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"    private AddInvestigatorCommandParser parser \u003d new AddInvestigatorCommandParser();"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"        Investigator expectedInvestigator \u003d new InvestigatorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"                .withRank(VALID_RANK_INSPECTOR).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"        // whitespace only preamble"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"                + ADDRESS_DESC_BOB + RANK_DESC_CAP + TAG_DESC_FRIEND,"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"                new AddInvestigatorCommand(expectedInvestigator));"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"                + ADDRESS_DESC_BOB + RANK_DESC_CAP + TAG_DESC_FRIEND,"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"                new AddInvestigatorCommand(expectedInvestigator));"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"                + ADDRESS_DESC_BOB + RANK_DESC_CAP + TAG_DESC_FRIEND,"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"                new AddInvestigatorCommand(expectedInvestigator));"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"        // multiple emails - last email accepted"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"                + ADDRESS_DESC_BOB + RANK_DESC_CAP + TAG_DESC_FRIEND,"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"                new AddInvestigatorCommand(expectedInvestigator));"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"        // multiple addresses - last investigapptor accepted"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"                + ADDRESS_DESC_BOB + RANK_DESC_CAP + TAG_DESC_FRIEND,"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"                new AddInvestigatorCommand(expectedInvestigator));"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"        // multiple tags - all accepted"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"        Investigator expectedInvestigatorMultipleTags \u003d new InvestigatorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"                .withRank(VALID_RANK_INSPECTOR).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"                new AddInvestigatorCommand(expectedInvestigatorMultipleTags));"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"        // zero tags"},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"        Investigator expectedInvestigator \u003d new InvestigatorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"                .withRank(VALID_RANK_INSPECTOR).withTags().build();"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP, new AddInvestigatorCommand(expectedInvestigator));"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"                AddInvestigatorCommand.MESSAGE_USAGE);"},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"        // missing name prefix"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":"                        + RANK_DESC_CAP, expectedMessage);"},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"        // missing phone prefix"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":"                        + RANK_DESC_CAP, expectedMessage);"},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":"        // missing email prefix"},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"                        + RANK_DESC_CAP, expectedMessage);"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"        // missing investigapptor prefix"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":122,"author":{"gitID":"Marcus-cxc"},"content":"                        + RANK_DESC_CAP, expectedMessage);"},{"lineNumber":123,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":124,"author":{"gitID":"Marcus-cxc"},"content":"        // all prefixes missing"},{"lineNumber":125,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":126,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP, expectedMessage);"},{"lineNumber":127,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":129,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"Marcus-cxc"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":131,"author":{"gitID":"Marcus-cxc"},"content":"        // invalid name"},{"lineNumber":132,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":135,"author":{"gitID":"Marcus-cxc"},"content":"        // invalid phone"},{"lineNumber":136,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":137,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":139,"author":{"gitID":"Marcus-cxc"},"content":"        // invalid email"},{"lineNumber":140,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":143,"author":{"gitID":"Marcus-cxc"},"content":"        // invalid investigapptor"},{"lineNumber":144,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":145,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":147,"author":{"gitID":"Marcus-cxc"},"content":"        // invalid tag"},{"lineNumber":148,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"Marcus-cxc"},"content":"                + RANK_DESC_CAP + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":151,"author":{"gitID":"Marcus-cxc"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":152,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":153,"author":{"gitID":"Marcus-cxc"},"content":"                        + RANK_DESC_CAP, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":155,"author":{"gitID":"Marcus-cxc"},"content":"        // non-empty preamble"},{"lineNumber":156,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"Marcus-cxc"},"content":"                + ADDRESS_DESC_BOB + RANK_DESC_CAP + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":158,"author":{"gitID":"Marcus-cxc"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":160,"author":{"gitID":"Marcus-cxc"},"content":"        //invalid rank"},{"lineNumber":161,"author":{"gitID":"Marcus-cxc"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":162,"author":{"gitID":"Marcus-cxc"},"content":"                + INVALID_RANK_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Rank.MESSAGE_RANK_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":116,"quentinkhoo":38,"-":10}},{"path":"src/test/java/seedu/investigapptor/logic/parser/DeleteCaseCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.DeleteCaseCommand;"},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":" * outside of the DeleteCaseCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":" * same path through the DeleteCaseCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"public class DeleteCaseCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    private DeleteCaseCommandParser parser \u003d new DeleteCaseCommandParser();"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCaseCommand(INDEX_FIRST_CASE));"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"                DeleteCaseCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":23,"quentinkhoo":4,"-":6}},{"path":"src/test/java/seedu/investigapptor/logic/UndoRedoStackTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.EmptyStackException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.Command;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoableCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoRedoStackTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommandOne \u003d new DummyCommand();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandOne \u003d new DummyUndoableCommand();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final DummyUndoableCommand dummyUndoableCommandTwo \u003d new DummyUndoableCommand();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void push_nonUndoableCommand_redoStackClearedAndCommandNotAdded() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyCommandOne);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void push_undoableCommand_redoStackClearedAndCommandAdded() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        undoRedoStack.push(dummyUndoableCommandOne);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertStackStatus(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandOne, dummyUndoableCommandOne),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void push_undoCommand_stackRemainsUnchanged() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new UndoCommand());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void push_redoCommand_stackRemainsUnchanged() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // non-empty redoStack"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty redoStack"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        undoRedoStack.push(new RedoCommand());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertStackStatus(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void canUndo() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // empty undo stack"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canUndo());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // non-empty undo stack"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canUndo());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void canRedo() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // empty redo stack"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.canRedo());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // non-empty redo stack"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(), Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.canRedo());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void popUndo() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandOne),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertPopUndoSuccess(dummyUndoableCommandOne, Collections.emptyList(),"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertPopUndoFailure(Collections.emptyList(),"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void popRedo() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Collections.emptyList(),"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandTwo, Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandOne));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertPopRedoSuccess(dummyUndoableCommandOne,"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne), Collections.emptyList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertPopRedoFailure(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                Collections.emptyList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        UndoRedoStack copy \u003d prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(copy));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(undoRedoStack.equals(undoRedoStack));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(null));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(1));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // different undoStack -\u003e returns false"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UndoRedoStack differentUndoStack \u003d prepareStack(Collections.singletonList(dummyUndoableCommandTwo),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Arrays.asList(dummyUndoableCommandOne, dummyUndoableCommandTwo));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentUndoStack));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different redoStack -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoRedoStack differentRedoStack \u003d"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                prepareStack(Arrays.asList(dummyUndoableCommandTwo, dummyUndoableCommandOne),"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Collections.singletonList(dummyUndoableCommandTwo));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(undoRedoStack.equals(differentRedoStack));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popUndo()} equals {@code expectedCommand}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private void assertPopUndoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popUndo());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the result of {@code undoRedoStack#popRedo()} equals {@code expectedCommand}."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertPopRedoSuccess(UndoableCommand expectedCommand, List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, undoRedoStack.popRedo());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popUndo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertPopUndoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            undoRedoStack.popUndo();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the execution of {@code undoRedoStack#popRedo()} fails and {@code EmptyStackException} is thrown."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Also asserts that the content of the {@code undoRedoStack#undoStack} equals {@code undoElements},"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * and {@code undoRedoStack#redoStack} equals {@code redoElements}."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertPopRedoFailure(List\u003cUndoableCommand\u003e expectedUndoElements,"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                                      List\u003cUndoableCommand\u003e expectedRedoElements) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            undoRedoStack.popRedo();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"The expected EmptyStackException was not thrown.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        } catch (EmptyStackException ese) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            assertStackStatus(expectedUndoElements, expectedRedoElements);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that {@code undoRedoStack#undoStack} equals {@code undoElements}, and {@code undoRedoStack#redoStack}"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * equals {@code redoElements}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertStackStatus(List\u003cUndoableCommand\u003e undoElements, List\u003cUndoableCommand\u003e redoElements) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(prepareStack(undoElements, redoElements), undoRedoStack);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    class DummyCommand extends Command {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public CommandResult execute() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    class DummyUndoableCommand extends UndoableCommand {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":240}},{"path":"src/test/java/seedu/investigapptor/logic/commands/ExitCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        CommandResult result \u003d new ExitCommand().execute();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":20}},{"path":"src/test/java/seedu/investigapptor/logic/parser/InvestigapptorParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddCaseCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddInvestigatorCommand;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.DeleteInvestigatorCommand;"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand;"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestigatorCommand;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListCaseCommand;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListInvestigatorCommand;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RemovePasswordCommand;"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.SelectInvestigatorCommand;"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.SetPasswordCommand;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseNameContainsKeywordsPredicate;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseUtil;"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorUtil;"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonUtil;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"public class InvestigapptorParserTest {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"    private final InvestigapptorParser parser \u003d new InvestigapptorParser();"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"    private Model model \u003d new ModelManager(new Investigapptor(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"        Investigator investigator \u003d new InvestigatorBuilder().build();"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCase \u003d new CrimeCaseBuilder().withInvestigator(investigator).build();"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand command \u003d (AddCaseCommand)"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"                parser.parseCommand(CrimeCaseUtil.getAddCommand(crimeCase) + \"i/\" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new AddCaseCommand(crimeCase.getCaseName(), crimeCase.getDescription(),"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"                INDEX_FIRST_PERSON, crimeCase.getStartDate(), crimeCase.getTags()), command);"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        Investigator investigator \u003d new InvestigatorBuilder().build();"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCase \u003d new CrimeCaseBuilder().withInvestigator(investigator).build();"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand command \u003d (AddCaseCommand)"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"                parser.parseCommand(CrimeCaseUtil.getAliasAddCommand(crimeCase)"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"                        + \"i/\" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new AddCaseCommand(crimeCase.getCaseName(), crimeCase.getDescription(),"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"                INDEX_FIRST_PERSON, crimeCase.getStartDate(), crimeCase.getTags()), command);"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_reg() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Investigator investigator \u003d new InvestigatorBuilder().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        AddInvestigatorCommand command \u003d (AddInvestigatorCommand)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                parser.parseCommand(InvestigatorUtil.getRegCommand(investigator));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(new AddInvestigatorCommand(investigator), command);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseCommand_regAlias() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Investigator investigator \u003d new InvestigatorBuilder().build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddInvestigatorCommand command \u003d (AddInvestigatorCommand)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                parser.parseCommand(InvestigatorUtil.getAliasRegCommand(investigator));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(new AddInvestigatorCommand(investigator), command);"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":110,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":111,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":112,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":116,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand command \u003d (DeleteInvestigatorCommand) parser.parseCommand("},{"lineNumber":117,"author":{"gitID":"pkaijun"},"content":"                DeleteInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":118,"author":{"gitID":"pkaijun"},"content":"        assertEquals(new DeleteInvestigatorCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"quentinkhoo"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":123,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand command \u003d (DeleteInvestigatorCommand) parser.parseCommand("},{"lineNumber":124,"author":{"gitID":"pkaijun"},"content":"                DeleteInvestigatorCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":125,"author":{"gitID":"pkaijun"},"content":"        assertEquals(new DeleteInvestigatorCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":132,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand command \u003d (EditInvestigatorCommand)"},{"lineNumber":133,"author":{"gitID":"pkaijun"},"content":"                parser.parseCommand(EditInvestigatorCommand.COMMAND_WORD + \" \""},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":135,"author":{"gitID":"pkaijun"},"content":"        assertEquals(new EditInvestigatorCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand command \u003d (EditInvestigatorCommand)"},{"lineNumber":143,"author":{"gitID":"pkaijun"},"content":"                parser.parseCommand(EditInvestigatorCommand.COMMAND_ALIAS + \" \""},{"lineNumber":144,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":145,"author":{"gitID":"pkaijun"},"content":"        assertEquals(new EditInvestigatorCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":146,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"quentinkhoo"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":156,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":157,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":158,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_findCase() throws Exception {"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand command \u003d (FindCaseCommand) parser.parseCommand("},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"                FindCaseCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new FindCaseCommand(new CaseNameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":170,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_findCaseAlias() throws Exception {"},{"lineNumber":172,"author":{"gitID":"leowweiching"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":173,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand command \u003d (FindCaseCommand) parser.parseCommand("},{"lineNumber":174,"author":{"gitID":"leowweiching"},"content":"                FindCaseCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":175,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new FindCaseCommand(new CaseNameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":176,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":178,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_findInvestigator() throws Exception {"},{"lineNumber":180,"author":{"gitID":"leowweiching"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":181,"author":{"gitID":"leowweiching"},"content":"        FindInvestigatorCommand command \u003d (FindInvestigatorCommand) parser.parseCommand("},{"lineNumber":182,"author":{"gitID":"leowweiching"},"content":"                FindInvestigatorCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":183,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new FindInvestigatorCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":184,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":186,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_findInvestigatorAlias() throws Exception {"},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"        FindInvestigatorCommand command \u003d (FindInvestigatorCommand) parser.parseCommand("},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":"                FindInvestigatorCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new FindInvestigatorCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":194,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":196,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":197,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":198,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":200,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":202,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":203,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":204,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":206,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":208,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":209,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":210,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":211,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":212,"author":{"gitID":"leowweiching"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":213,"author":{"gitID":"leowweiching"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":214,"author":{"gitID":"leowweiching"},"content":"        } catch (ParseException pe) {"},{"lineNumber":215,"author":{"gitID":"leowweiching"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":216,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":219,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":221,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":222,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":223,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":224,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":225,"author":{"gitID":"leowweiching"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":226,"author":{"gitID":"leowweiching"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":227,"author":{"gitID":"leowweiching"},"content":"        } catch (ParseException pe) {"},{"lineNumber":228,"author":{"gitID":"leowweiching"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":229,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":232,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_listInvestigators() throws Exception {"},{"lineNumber":234,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"listinvestigators\") instanceof ListInvestigatorCommand);"},{"lineNumber":235,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(ListInvestigatorCommand.COMMAND_WORD) instanceof ListInvestigatorCommand);"},{"lineNumber":236,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":238,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_listInvestigatorsAlias() throws Exception {"},{"lineNumber":240,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"li\") instanceof ListInvestigatorCommand);"},{"lineNumber":241,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(ListInvestigatorCommand.COMMAND_ALIAS) instanceof ListInvestigatorCommand);"},{"lineNumber":242,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":244,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":245,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_listCases() throws Exception {"},{"lineNumber":246,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"listcases\") instanceof ListCaseCommand);"},{"lineNumber":247,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(ListCaseCommand.COMMAND_WORD) instanceof ListCaseCommand);"},{"lineNumber":248,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":250,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_listCasesAlias() throws Exception {"},{"lineNumber":252,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"lc\") instanceof ListCaseCommand);"},{"lineNumber":253,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(ListCaseCommand.COMMAND_ALIAS) instanceof ListCaseCommand);"},{"lineNumber":254,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":256,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":257,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":258,"author":{"gitID":"leowweiching"},"content":"        SelectInvestigatorCommand command \u003d (SelectInvestigatorCommand) parser.parseCommand("},{"lineNumber":259,"author":{"gitID":"leowweiching"},"content":"                SelectInvestigatorCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":260,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new SelectInvestigatorCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":261,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":263,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":265,"author":{"gitID":"leowweiching"},"content":"        SelectInvestigatorCommand command \u003d (SelectInvestigatorCommand) parser.parseCommand("},{"lineNumber":266,"author":{"gitID":"leowweiching"},"content":"                SelectInvestigatorCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":267,"author":{"gitID":"leowweiching"},"content":"        assertEquals(new SelectInvestigatorCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":268,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":270,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":271,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":272,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":273,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":274,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":276,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":277,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":278,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":279,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":280,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":282,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":283,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":284,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":285,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":286,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":288,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":289,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":290,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":291,"author":{"gitID":"leowweiching"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":292,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":294,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":295,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":296,"author":{"gitID":"leowweiching"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":297,"author":{"gitID":"leowweiching"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":298,"author":{"gitID":"leowweiching"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":299,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":301,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":302,"author":{"gitID":"leowweiching"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":303,"author":{"gitID":"leowweiching"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":304,"author":{"gitID":"leowweiching"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":305,"author":{"gitID":"leowweiching"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":306,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":308,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":309,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":310,"author":{"gitID":"quentinkhoo"},"content":"    public void parseCommand_setPassword() throws Exception {"},{"lineNumber":311,"author":{"gitID":"quentinkhoo"},"content":"        SetPasswordCommand command \u003d (SetPasswordCommand) parser"},{"lineNumber":312,"author":{"gitID":"quentinkhoo"},"content":"                .parseCommand(SetPasswordCommand.COMMAND_WORD + \" pw/password\");"},{"lineNumber":313,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(new SetPasswordCommand(new Password(\"password\")), command);"},{"lineNumber":314,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":316,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":317,"author":{"gitID":"quentinkhoo"},"content":"    public void parserCommand_removePassword() throws Exception {"},{"lineNumber":318,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(parser.parseCommand(RemovePasswordCommand.COMMAND_WORD) instanceof RemovePasswordCommand);"},{"lineNumber":319,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":321,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"leowweiching":172,"pkaijun":16,"quentinkhoo":65,"-":68}},{"path":"src/test/java/seedu/investigapptor/logic/parser/EditCaseCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.CASENAME_DESC_APPLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.CASENAME_DESC_BANANA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESCRIPTION_DESC_APPLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BANANA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_CASENAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_INVESTIGATOR_INDEX_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_STARTDATE_DESC;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.INVESTIGATOR_DESC_APPLE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.STARTDATE_DESC_APPLE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.STARTDATE_DESC_BANANA;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_FRAUD;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.TAG_DESC_MURDER;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_APPLE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_BANANA;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_APPLE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BANANA;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_STARTDATE_APPLE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_STARTDATE_BANANA;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRAUD;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_MURDER;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_CASE;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_THIRD_CASE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand.EditCrimeCaseDescriptor;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.EditCrimeCaseDescriptorBuilder;"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"public class EditCaseCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCaseCommand.MESSAGE_USAGE);"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"    private EditCaseCommandParser parser \u003d new EditCaseCommandParser();"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"        // no index specified"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, VALID_CASENAME_APPLE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        // no field specified"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\", EditCaseCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        // no index and no field specified"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"        // negative index"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"-5\" + CASENAME_DESC_APPLE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        // zero index"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"0\" + CASENAME_DESC_APPLE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1 k/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + INVALID_CASENAME_DESC,"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"                CaseName.MESSAGE_CASE_NAME_CONSTRAINTS); // invalid case name"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"                Description.MESSAGE_DESCRIPTION_CONSTRAINTS); // invalid description"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + INVALID_INVESTIGATOR_INDEX_DESC,"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"                MESSAGE_INVALID_INDEX); // invalid investigator index"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + INVALID_STARTDATE_DESC,"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"                StartDate.MESSAGE_DATE_CONSTRAINTS); // invalid address"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC,"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        // invalid description followed by valid investigator index"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC + INVESTIGATOR_DESC_APPLE,"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"                Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"        // valid description followed by invalid description. The test case for invalid description followed by"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"        // valid description is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + DESCRIPTION_DESC_BANANA + INVALID_DESCRIPTION_DESC,"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"                Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code CrimeCase} being edited,"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRAUD + TAG_DESC_MURDER"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"                + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRAUD + TAG_EMPTY"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_MURDER, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRAUD"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_MURDER, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"        assertParseFailure(parser, \"1\" + INVALID_CASENAME_DESC + INVALID_INVESTIGATOR_INDEX_DESC"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"                        + VALID_STARTDATE_APPLE + VALID_DESCRIPTION_APPLE,"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"                CaseName.MESSAGE_CASE_NAME_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_SECOND_CASE;"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BANANA + TAG_DESC_MURDER"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"                + STARTDATE_DESC_APPLE + CASENAME_DESC_APPLE + TAG_DESC_FRAUD;"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder().withCaseName(VALID_CASENAME_APPLE)"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA)"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"                .withStartDate(VALID_STARTDATE_APPLE)"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"                .withTags(VALID_TAG_MURDER, VALID_TAG_FRAUD).build();"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_FIRST_CASE;"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_BANANA + STARTDATE_DESC_APPLE;"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder()"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA)"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"                .withStartDate(VALID_STARTDATE_APPLE).build();"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"        // case name"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_THIRD_CASE;"},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"        String userInput \u003d targetIndex.getOneBased() + CASENAME_DESC_APPLE;"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder()"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"                .withCaseName(VALID_CASENAME_APPLE).build();"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"        // description"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":"        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_APPLE;"},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"        descriptor \u003d new EditCrimeCaseDescriptorBuilder().withDescription(VALID_DESCRIPTION_APPLE).build();"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"        expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"        // investigapptor"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"        userInput \u003d targetIndex.getOneBased() + STARTDATE_DESC_APPLE;"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"        descriptor \u003d new EditCrimeCaseDescriptorBuilder().withStartDate(VALID_STARTDATE_APPLE).build();"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"        expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"        // tags"},{"lineNumber":170,"author":{"gitID":"leowweiching"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRAUD;"},{"lineNumber":171,"author":{"gitID":"leowweiching"},"content":"        descriptor \u003d new EditCrimeCaseDescriptorBuilder().withTags(VALID_TAG_FRAUD).build();"},{"lineNumber":172,"author":{"gitID":"leowweiching"},"content":"        expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":173,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":174,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":176,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"leowweiching"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":178,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_FIRST_CASE;"},{"lineNumber":179,"author":{"gitID":"leowweiching"},"content":"        String userInput \u003d targetIndex.getOneBased()  + DESCRIPTION_DESC_APPLE + STARTDATE_DESC_APPLE"},{"lineNumber":180,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_FRAUD + DESCRIPTION_DESC_APPLE + STARTDATE_DESC_APPLE"},{"lineNumber":181,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_FRAUD + DESCRIPTION_DESC_BANANA + STARTDATE_DESC_BANANA"},{"lineNumber":182,"author":{"gitID":"leowweiching"},"content":"                + TAG_DESC_MURDER;"},{"lineNumber":183,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":184,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder()"},{"lineNumber":185,"author":{"gitID":"leowweiching"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA)"},{"lineNumber":186,"author":{"gitID":"leowweiching"},"content":"                .withStartDate(VALID_STARTDATE_BANANA)"},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"                .withTags(VALID_TAG_FRAUD, VALID_TAG_MURDER)"},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":"                .build();"},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":194,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"leowweiching"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":196,"author":{"gitID":"leowweiching"},"content":"        // no other valid values specified"},{"lineNumber":197,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_FIRST_CASE;"},{"lineNumber":198,"author":{"gitID":"leowweiching"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_DESCRIPTION_DESC + DESCRIPTION_DESC_BANANA;"},{"lineNumber":199,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder()"},{"lineNumber":200,"author":{"gitID":"leowweiching"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA).build();"},{"lineNumber":201,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":202,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":203,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":204,"author":{"gitID":"leowweiching"},"content":"        // other valid values specified"},{"lineNumber":205,"author":{"gitID":"leowweiching"},"content":"        userInput \u003d targetIndex.getOneBased() + CASENAME_DESC_BANANA + INVALID_DESCRIPTION_DESC"},{"lineNumber":206,"author":{"gitID":"leowweiching"},"content":"                + STARTDATE_DESC_BANANA + DESCRIPTION_DESC_BANANA;"},{"lineNumber":207,"author":{"gitID":"leowweiching"},"content":"        descriptor \u003d new EditCrimeCaseDescriptorBuilder().withDescription(VALID_DESCRIPTION_BANANA)"},{"lineNumber":208,"author":{"gitID":"leowweiching"},"content":"                .withCaseName(VALID_CASENAME_BANANA)"},{"lineNumber":209,"author":{"gitID":"leowweiching"},"content":"                .withStartDate(VALID_STARTDATE_BANANA).build();"},{"lineNumber":210,"author":{"gitID":"leowweiching"},"content":"        expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":211,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":212,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":214,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"leowweiching"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":216,"author":{"gitID":"leowweiching"},"content":"        Index targetIndex \u003d INDEX_THIRD_CASE;"},{"lineNumber":217,"author":{"gitID":"leowweiching"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":218,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":219,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder().withTags().build();"},{"lineNumber":220,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand expectedCommand \u003d new EditCaseCommand(targetIndex, descriptor);"},{"lineNumber":221,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":222,"author":{"gitID":"leowweiching"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":223,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":181,"quentinkhoo":8,"-":35}},{"path":"src/test/java/seedu/investigapptor/logic/commands/EditInvestigatorCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":" * and unit tests for EditInvestigatorCommand."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"public class EditInvestigatorCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(EditInvestigatorCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(editInvestigatorCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(EditInvestigatorCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(editInvestigatorCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"                new EditPersonDescriptor());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(EditInvestigatorCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(editInvestigatorCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(EditInvestigatorCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(editInvestigatorCommand, model, expectedMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":112,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(editInvestigatorCommand, model, EditInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"quentinkhoo"},"content":"        // edit person in filtered list into a duplicate in investigapptor book"},{"lineNumber":122,"author":{"gitID":"quentinkhoo"},"content":"        Person personInList \u003d model.getInvestigapptor().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(editInvestigatorCommand, model, EditInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":133,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(editInvestigatorCommand, model, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"     * but smaller than size of investigapptor book"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":146,"author":{"gitID":"quentinkhoo"},"content":"        // ensures that outOfBoundIndex is still in bounds of investigapptor book list"},{"lineNumber":147,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInvestigapptor().getPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(editInvestigatorCommand, model, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":163,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":164,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":167,"author":{"gitID":"pkaijun"},"content":"        editInvestigatorCommand.execute();"},{"lineNumber":168,"author":{"gitID":"pkaijun"},"content":"        undoRedoStack.push(editInvestigatorCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"quentinkhoo"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered person list to show all persons"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":185,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"pkaijun"},"content":"        // execution failed -\u003e editInvestigatorCommand not pushed into undoRedoStack"},{"lineNumber":188,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(editInvestigatorCommand, model, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":209,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":210,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":215,"author":{"gitID":"pkaijun"},"content":"        editInvestigatorCommand.execute();"},{"lineNumber":216,"author":{"gitID":"pkaijun"},"content":"        undoRedoStack.push(editInvestigatorCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"quentinkhoo"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered person list to show all persons"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":229,"author":{"gitID":"pkaijun"},"content":"        final EditInvestigatorCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":233,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"pkaijun"},"content":"        assertFalse(standardCommand.equals(new EditInvestigatorCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"pkaijun"},"content":"        assertFalse(standardCommand.equals(new EditInvestigatorCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"pkaijun"},"content":"     * Returns an {@code EditInvestigatorCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"pkaijun"},"content":"    private EditInvestigatorCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":260,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand editInvestigatorCommand \u003d new EditInvestigatorCommand(index, descriptor);"},{"lineNumber":261,"author":{"gitID":"pkaijun"},"content":"        editInvestigatorCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":262,"author":{"gitID":"pkaijun"},"content":"        return editInvestigatorCommand;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":43,"quentinkhoo":39,"-":182}},{"path":"src/test/java/seedu/investigapptor/logic/commands/DeleteInvestigatorCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":" * {@code DeleteInvestigatorCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"public class DeleteInvestigatorCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(DeleteInvestigatorCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(deleteInvestigatorCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(deleteInvestigatorCommand, model, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(DeleteInvestigatorCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(deleteInvestigatorCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        // ensures that outOfBoundIndex is still in bounds of investigapptor book list"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInvestigapptor().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(deleteInvestigatorCommand, model, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommand.execute();"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        undoRedoStack.push(deleteInvestigatorCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered person list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"pkaijun"},"content":"        // execution failed -\u003e deleteInvestigatorCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(deleteInvestigatorCommand, model, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":139,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommand.execute();"},{"lineNumber":140,"author":{"gitID":"pkaijun"},"content":"        undoRedoStack.push(deleteInvestigatorCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"quentinkhoo"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"pkaijun"},"content":"     * Returns a {@code DeleteInvestigatorCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"pkaijun"},"content":"    private DeleteInvestigatorCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"pkaijun"},"content":"        DeleteInvestigatorCommand deleteInvestigatorCommand \u003d new DeleteInvestigatorCommand(index);"},{"lineNumber":182,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"pkaijun"},"content":"        return deleteInvestigatorCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":29,"quentinkhoo":26,"-":139}},{"path":"src/test/java/seedu/investigapptor/logic/commands/FindCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_CASES_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.CHARLIE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ECHO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.FOXTROT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CaseNameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCaseCommand}."},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"public class FindCaseCommandTest {"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    private Model model;"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"        model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        CaseNameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"                new CaseNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        CaseNameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"                new CaseNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand findFirstCommand \u003d new FindCaseCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand findSecondCommand \u003d new FindCaseCommand(secondPredicate);"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        // same object -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand findFirstCommandCopy \u003d new FindCaseCommand(firstPredicate);"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"        // different types -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        // null -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        // different case -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    public void execute_zeroKeywords_noCrimeCaseFound() {"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 0);"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand command \u003d prepareCommand(\" \");"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"    public void execute_multipleKeywords_multipleCrimeCasesFound() {"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 3);"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand command \u003d prepareCommand(\"Charlie Echo Foxtrot\");"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CHARLIE, ECHO, FOXTROT));"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"     * Parses {@code userInput} into a {@code FindCaseCommand}."},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"    private FindCaseCommand prepareCommand(String userInput) {"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"        FindCaseCommand command \u003d"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"                new FindCaseCommand(new CaseNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"        return command;"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"     *     - the {@code FilteredList\u003cCrimeCase\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"     *     - the {@code Investigapptor} in model remains the same after executing the {@code command}"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"    private void assertCommandSuccess(FindCaseCommand command, String expectedMessage, List\u003cCrimeCase\u003e expectedList) {"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"        assertEquals(expectedList, model.getFilteredCrimeCaseList());"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"        assertEquals(expectedInvestigapptor, model.getInvestigapptor());"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":78,"quentinkhoo":8,"-":18}},{"path":"src/test/java/seedu/investigapptor/logic/commands/HistoryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class HistoryCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private HistoryCommand historyCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        historyCommand \u003d new HistoryCommand();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        historyCommand.setData(model, history, new UndoRedoStack());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, HistoryCommand.MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String command1 \u003d \"clear\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history.add(command1);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, String.format(HistoryCommand.MESSAGE_SUCCESS, command1));"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String command2 \u003d \"randomCommand\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String command3 \u003d \"select 1\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        history.add(command2);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        history.add(command3);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.join(\"\\n\", command3, command2, command1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandResult(historyCommand, expectedMessage);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that the result message from the execution of {@code historyCommand} equals to {@code expectedMessage}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private void assertCommandResult(HistoryCommand historyCommand, String expectedMessage) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, historyCommand.execute().feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":45}},{"path":"src/test/java/seedu/investigapptor/logic/commands/AddCaseCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseBuilder;"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCaseCommand}."},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"public class AddCaseCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"    private static Model model;"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    @BeforeClass"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    public static void setUp() {"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"        model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"    public void execute_newCrimeCase_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"        CrimeCase validCrimeCase \u003d new CrimeCaseBuilder().build();"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"        expectedModel.addCrimeCase(validCrimeCase);"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(prepareCommand(new CrimeCaseBuilder().build(), model), model,"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"                String.format(AddCaseCommand.MESSAGE_SUCCESS, validCrimeCase), expectedModel);"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    public void execute_duplicateCrimeCase_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseInList \u003d model.getInvestigapptor().getCrimeCaseList().get(0);"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(prepareCommand(crimeCaseInList, model), model,"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"                AddCaseCommand.MESSAGE_DUPLICATE_CASE);"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"     * Generates a new {@code AddCaseCommand} which upon execution,"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"     * adds {@code crimeCase} into the {@code model}."},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"    private AddCaseCommand prepareCommand(CrimeCase crimeCase, Model model) {"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand command \u003d new AddCaseCommand(crimeCase);"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"        return command;"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":41,"quentinkhoo":8,"-":8}},{"path":"src/test/java/seedu/investigapptor/logic/commands/EditCrimeCaseDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_APPLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_BANANA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_BANANA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BANANA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_INVESTIGATOR_BANANA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_STARTDATE_BANANA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_MURDER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand.EditCrimeCaseDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.EditCrimeCaseDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"public class EditCrimeCaseDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptorWithSameValues \u003d new EditCrimeCaseDescriptor(DESC_APPLE);"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"        assertTrue(DESC_APPLE.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"        assertTrue(DESC_APPLE.equals(DESC_APPLE));"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(null));"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(5));"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(DESC_BANANA));"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"        // different case name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor editedApple \u003d new EditCrimeCaseDescriptorBuilder(DESC_APPLE)"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"                .withCaseName(VALID_CASENAME_BANANA).build();"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(editedApple));"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        // different description -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"        editedApple \u003d new EditCrimeCaseDescriptorBuilder(DESC_APPLE)"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA).build();"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(editedApple));"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"        // different investigator -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        editedApple \u003d new EditCrimeCaseDescriptorBuilder(DESC_APPLE)"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"                .withInvestigator(VALID_INVESTIGATOR_BANANA).build();"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(editedApple));"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"        // different start date -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        editedApple \u003d new EditCrimeCaseDescriptorBuilder(DESC_APPLE)"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"                .withStartDate(VALID_STARTDATE_BANANA).build();"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(editedApple));"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"        // different tags -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        editedApple \u003d new EditCrimeCaseDescriptorBuilder(DESC_APPLE).withTags(VALID_TAG_MURDER).build();"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"        assertFalse(DESC_APPLE.equals(editedApple));"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":46,"quentinkhoo":1,"-":15}},{"path":"src/test/java/seedu/investigapptor/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showCrimeCaseAtIndex;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.TypicalCrimeCases;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.TypicalPersons;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    private Model investigatorModel;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private Model expectedInvestigatorModel;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    private ListInvestigatorCommand listCommandInvestigators;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    private Model crimeCaseModel;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    private Model expectedCrimeCaseModel;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    private ListCaseCommand listCommandCases;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        investigatorModel \u003d new ModelManager(TypicalPersons.getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        expectedInvestigatorModel \u003d new ModelManager(investigatorModel.getInvestigapptor(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        listCommandInvestigators \u003d new ListInvestigatorCommand();"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        listCommandInvestigators.setData(investigatorModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        crimeCaseModel \u003d new ModelManager(TypicalCrimeCases.getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        expectedCrimeCaseModel \u003d new ModelManager(crimeCaseModel.getInvestigapptor(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        listCommandCases \u003d new ListCaseCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        listCommandCases.setData(crimeCaseModel, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_investigatorListIsNotFiltered_showsSameList() {"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(listCommandInvestigators, investigatorModel, ListInvestigatorCommand.MESSAGE_SUCCESS,"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"                expectedInvestigatorModel);"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_investigatorListIsFiltered_showsEverything() {"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"        showPersonAtIndex(investigatorModel, INDEX_FIRST_PERSON);"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(listCommandInvestigators, investigatorModel, ListInvestigatorCommand.MESSAGE_SUCCESS,"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"                expectedInvestigatorModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_caseListIsNotFiltered_showsSameList() {"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(listCommandCases, crimeCaseModel, ListCaseCommand.MESSAGE_SUCCESS,"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"                expectedCrimeCaseModel);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_caseListIsFiltered_showsEverything() {"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"        showCrimeCaseAtIndex(crimeCaseModel, INDEX_FIRST_CASE);"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(listCommandCases, crimeCaseModel, ListCaseCommand.MESSAGE_SUCCESS,"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"                expectedCrimeCaseModel);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":46,"-":28}},{"path":"src/test/java/seedu/investigapptor/logic/commands/FindInvestigatorCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindInvestigatorCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class FindInvestigatorCommandTest {"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        FindInvestigatorCommand findFirstCommand \u003d new FindInvestigatorCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindInvestigatorCommand findSecondCommand \u003d new FindInvestigatorCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindInvestigatorCommand findFirstCommandCopy \u003d new FindInvestigatorCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        FindInvestigatorCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindInvestigatorCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindInvestigatorCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private FindInvestigatorCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FindInvestigatorCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new FindInvestigatorCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"     *     - the {@code Investigapptor} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindInvestigatorCommand command,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                                      String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(expectedInvestigapptor, model.getInvestigapptor());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":18,"-":81}},{"path":"src/test/java/seedu/investigapptor/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        // different investigapptor -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":1,"quentinkhoo":10,"-":47}},{"path":"src/test/java/seedu/investigapptor/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_INVESTIGATOR;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_RANK;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CaseNameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.EditCrimeCaseDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /* Person util */"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_RANK_INSPECTOR \u003d \"3\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String RANK_DESC_CAP \u003d \" \" + PREFIX_RANK + VALID_RANK_INSPECTOR;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String INVALID_RANK_DESC \u003d \" \" + PREFIX_RANK + \"6\"; // rank only ranges from 1-5"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"    public static final EditInvestigatorCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"    public static final EditInvestigatorCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /* CrimeCase Util */"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String VALID_CASENAME_APPLE \u003d \"Project Apple\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String VALID_CASENAME_BANANA \u003d \"Project Banana\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_APPLE \u003d \"Description for Project Apple.\";"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String VALID_DESCRIPTION_BANANA \u003d \"Description for Project Banana.\";"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String VALID_INVESTIGATOR_INDEX_APPLE \u003d \"1\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String VALID_INVESTIGATOR_INDEX_BANANA \u003d \"2\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final Investigator VALID_INVESTIGATOR_APPLE;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final Investigator VALID_INVESTIGATOR_BANANA;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        VALID_INVESTIGATOR_APPLE \u003d new InvestigatorBuilder().withName(\"Apple Hong\").withPhone(\"98761234\")"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withEmail(\"apple@gmail.com\").withAddress(\"The Big Apple\").withRank(\"4\").withTags(\"Red\").build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        VALID_INVESTIGATOR_BANANA \u003d new InvestigatorBuilder().withName(\"Banana Huang\").withPhone(\"84267542\")"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withEmail(\"banana@gmail.com\").withAddress(\"The Banana Tree\").withRank(\"2\").withTags(\"Yellow\").build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String VALID_STARTDATE_APPLE \u003d \"31/12/2017\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String VALID_STARTDATE_BANANA \u003d \"4/03/1998\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRAUD \u003d \"Fraud\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_MURDER \u003d \"Murder\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String CASENAME_DESC_APPLE \u003d \" \" + PREFIX_NAME + VALID_CASENAME_APPLE;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static final String CASENAME_DESC_BANANA \u003d \" \" + PREFIX_NAME + VALID_CASENAME_BANANA;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_APPLE \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_APPLE;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final String DESCRIPTION_DESC_BANANA \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BANANA;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String INVESTIGATOR_DESC_APPLE \u003d \" \" + PREFIX_INVESTIGATOR + VALID_INVESTIGATOR_INDEX_APPLE;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final String INVESTIGATOR_DESC_BANANA \u003d \" \" + PREFIX_INVESTIGATOR + VALID_INVESTIGATOR_INDEX_BANANA;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final String STARTDATE_DESC_APPLE \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_APPLE;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final String STARTDATE_DESC_BANANA \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_BANANA;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRAUD \u003d \" \" + PREFIX_TAG + VALID_TAG_FRAUD;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_MURDER \u003d \" \" + PREFIX_TAG + VALID_TAG_MURDER;"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static final String INVALID_CASENAME_DESC \u003d \" \" + PREFIX_NAME + \"Yellow\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static final String INVALID_DESCRIPTION_DESC \u003d \" \""},{"lineNumber":120,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"\"; // empty string not allowed for descriptions"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static final String INVALID_INVESTIGATOR_INDEX_DESC \u003d \" \""},{"lineNumber":122,"author":{"gitID":"-"},"content":"            + PREFIX_INVESTIGATOR + \"-5\"; // negative index"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static final String INVALID_STARTDATE_DESC \u003d \" \""},{"lineNumber":124,"author":{"gitID":"-"},"content":"            + PREFIX_STARTDATE + \"132/11/17\"; // is not a valid date"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static final EditCaseCommand.EditCrimeCaseDescriptor DESC_APPLE;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static final EditCaseCommand.EditCrimeCaseDescriptor DESC_BANANA;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        DESC_APPLE \u003d new EditCrimeCaseDescriptorBuilder().withCaseName(VALID_CASENAME_APPLE)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_APPLE).withInvestigator(VALID_INVESTIGATOR_APPLE)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_STARTDATE_APPLE)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRAUD).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DESC_BANANA \u003d new EditCrimeCaseDescriptorBuilder().withCaseName(VALID_CASENAME_BANANA)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA).withInvestigator(VALID_INVESTIGATOR_BANANA)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withStartDate(VALID_STARTDATE_BANANA)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_MURDER, VALID_TAG_FRAUD).build();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"quentinkhoo"},"content":"     * - the investigapptor book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":163,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(actualModel.getInvestigapptor());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":171,"author":{"gitID":"quentinkhoo"},"content":"            assertEquals(expectedInvestigapptor, actualModel.getInvestigapptor());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":178,"author":{"gitID":"quentinkhoo"},"content":"     * {@code model}\u0027s investigapptor book."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":192,"author":{"gitID":"quentinkhoo"},"content":"     * {@code model}\u0027s investigapptor book."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public static void showCrimeCaseAtIndex(Model model, Index targetIndex) {"},{"lineNumber":195,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCrimeCaseList().size());"},{"lineNumber":196,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":197,"author":{"gitID":"quentinkhoo"},"content":"        CrimeCase crimeCase \u003d model.getFilteredCrimeCaseList().get(targetIndex.getZeroBased());"},{"lineNumber":198,"author":{"gitID":"quentinkhoo"},"content":"        final String[] splitName \u003d crimeCase.getCaseName().crimeCaseName.split(\"\\\\s+\");"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        model.updateFilteredCrimeCaseList(new CaseNameContainsKeywordsPredicate(Arrays.asList(splitName[1])));"},{"lineNumber":200,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredCrimeCaseList().size());"},{"lineNumber":202,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"quentinkhoo"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s investigapptor book."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":2,"quentinkhoo":30,"-":201}},{"path":"src/test/java/seedu/investigapptor/logic/commands/FindCaseTagsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_CASES_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ALFA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.BRAVO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.THREE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.TWO;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.TagContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCaseTagsCommand}."},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"public class FindCaseTagsCommandTest {"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":"        FindCaseTagsCommand findFirstCommand \u003d new FindCaseTagsCommand(firstPredicate);"},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"        FindCaseTagsCommand findSecondCommand \u003d new FindCaseTagsCommand(secondPredicate);"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":"        FindCaseTagsCommand findFirstCommandCopy \u003d new FindCaseTagsCommand(firstPredicate);"},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"        // different person -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"    public void execute_zeroKeywords_noCrimeCaseFound() {"},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 0);"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"        FindCaseTagsCommand command \u003d prepareCommand(\" \");"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"    public void execute_multipleKeywords_multipleCrimeCaseFound() {"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 5);"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"        String userInput \u003d \"Murder Kidnap\".toLowerCase();  // Tags are converted to lowercase during comparison"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        FindCaseTagsCommand command \u003d prepareCommand(userInput);"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALFA, BRAVO, ONE, TWO, THREE));"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"     * Parses {@code userInput} into a {@code FindCaseTagsCommand}."},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"    private FindCaseTagsCommand prepareCommand(String userInput) {"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"        FindCaseTagsCommand command \u003d"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"                new FindCaseTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        return command;"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code FilteredList\u003cCrimeCase\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code Investigapptor} in model remains the same after executing the {@code command}"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandSuccess(FindCaseTagsCommand command, String expectedMessage,"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"                                      List\u003cCrimeCase\u003e expectedList) {"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedList, model.getFilteredCrimeCaseList());"},{"lineNumber":101,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedInvestigapptor, model.getInvestigapptor());"},{"lineNumber":102,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":75,"quentinkhoo":7,"-":21}},{"path":"src/test/java/seedu/investigapptor/logic/commands/ListInvestigatorCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.ALICE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.TypicalInvestigator;"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"public class ListInvestigatorCaseCommandTest {"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"    private Model model \u003d new ModelManager(TypicalInvestigator.getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"    private ListInvestigatorCaseCommand listInvestigatorCaseCommand;"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"        ListInvestigatorCaseCommand findFirstCommand \u003d new ListInvestigatorCaseCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"        ListInvestigatorCaseCommand findSecondCommand \u003d new ListInvestigatorCaseCommand(INDEX_SECOND_PERSON);"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"        findFirstCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"        findSecondCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"            findFirstCommand.execute();"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (CommandException e) {"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"First command execute fail\");"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"            findSecondCommand.execute();"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (CommandException e) {"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"Second command execute fail\");"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"        // same object -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"        // same values -\u003e returns true"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"        ListInvestigatorCaseCommand findFirstCommandCopy \u003d new ListInvestigatorCaseCommand(INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"        findFirstCommandCopy.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"            findFirstCommandCopy.execute();"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (CommandException e) {"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"findFirstCommandCopy execute fail\");"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"        // different types -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"        // null -\u003e returns false"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"        // different person -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"    public void execute_listInvestigatorCrimeCases_showsSameList() {"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"        listInvestigatorCaseCommand \u003d new ListInvestigatorCaseCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"        listInvestigatorCaseCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"        List\u003cCrimeCase\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"        expected.add(new CrimeCaseBuilder().withName(\"Omega\").withInvestigator(ALICE).build());"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"        expected.add(new CrimeCaseBuilder().withName(\"Stigma\").withInvestigator(ALICE).build());"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"            assertCommandSuccess(listInvestigatorCaseCommand,"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"                    String.format(Messages.MESSAGE_CASES_LISTED_OVERVIEW,"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"                            2), expected);"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (CommandException e) {"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"Error\");"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"    public void execute_listInvestigatorCrimeCases_emptyResult() {"},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"        listInvestigatorCaseCommand \u003d new ListInvestigatorCaseCommand(INDEX_THIRD_PERSON);"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"        listInvestigatorCaseCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"        List\u003cCrimeCase\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"            assertCommandSuccess(listInvestigatorCaseCommand,"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"                    String.format(Messages.MESSAGE_CASES_LISTED_OVERVIEW,"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"                            0), expected);"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (CommandException e) {"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"Error\");"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"     * - the {@code FilteredList\u003cCrimeCase\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":"     * - the {@code Investigapptor} in model remains the same after executing the {@code command}"},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"    private void assertCommandSuccess(ListInvestigatorCaseCommand command, String expectedMessage,"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":"                                      List\u003cCrimeCase\u003e expectedList) throws CommandException {"},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":"        assertEquals(expectedList, model.getFilteredCrimeCaseList());"},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"        assertEquals(expectedInvestigapptor, model.getInvestigapptor());"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":96,"quentinkhoo":10,"-":16}},{"path":"src/test/java/seedu/investigapptor/logic/commands/HelpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.testutil.EventsCollectorRule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        CommandResult result \u003d new HelpCommand().execute();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertEquals(SHOWING_HELP_MESSAGE, result.feedbackToUser);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":20}},{"path":"src/test/java/seedu/investigapptor/logic/commands/AddInvestigatorCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddInvestigatorCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddInvestigatorCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddInvestigatorCommand.MESSAGE_SUCCESS, validPerson),"},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddInvestigatorCommand addAliceCommand \u003d new AddInvestigatorCommand(alice);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddInvestigatorCommand addBobCommand \u003d new AddInvestigatorCommand(bob);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddInvestigatorCommand addAliceCommandCopy \u003d new AddInvestigatorCommand(alice);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Generates a new AddInvestigatorCommand with the details of the given person."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private AddInvestigatorCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        AddInvestigatorCommand command \u003d new AddInvestigatorCommand(person);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"quentinkhoo"},"content":"        public void resetData(ReadOnlyInvestigapptor newData) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"        public ReadOnlyInvestigapptor getInvestigapptor() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void addCrimeCase(CrimeCase crimecase)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                throws DuplicateCrimeCaseException {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        public void updateCrimeCase(CrimeCase target, CrimeCase editedCase)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                throws DuplicateCrimeCaseException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public void deleteCrimeCase(CrimeCase target) throws CrimeCaseNotFoundException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public void deleteTag(Tag toDelete)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                throws TagNotFoundException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        public ObservableList\u003cCrimeCase\u003e getFilteredCrimeCaseList() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public void updateFilteredCrimeCaseList(Predicate\u003cCrimeCase\u003e predicate) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void backUpInvestigapptor(String fileName) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":183,"author":{"gitID":"quentinkhoo"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"quentinkhoo"},"content":"        public void updatePassword(Password password) {"},{"lineNumber":185,"author":{"gitID":"quentinkhoo"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":186,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":188,"author":{"gitID":"quentinkhoo"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"quentinkhoo"},"content":"        public void removePassword() {"},{"lineNumber":190,"author":{"gitID":"quentinkhoo"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":191,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"quentinkhoo"},"content":"        public ReadOnlyInvestigapptor getInvestigapptor() {"},{"lineNumber":205,"author":{"gitID":"quentinkhoo"},"content":"            return new Investigapptor();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":222,"author":{"gitID":"quentinkhoo"},"content":"        public ReadOnlyInvestigapptor getInvestigapptor() {"},{"lineNumber":223,"author":{"gitID":"quentinkhoo"},"content":"            return new Investigapptor();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":1,"quentinkhoo":30,"-":196}},{"path":"src/test/java/seedu/investigapptor/logic/commands/FindOpenCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_CASES_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.BRAVO;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.DELTA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ECHO;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.FIVE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.GOLF;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":" * Contains integration tests (interaction with the Model) for {@code FindOpenCaseCommand}."},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"public class FindOpenCaseCommandTest {"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"        FindOpenCaseCommand findOpenCaseFirstCommand \u003d new FindOpenCaseCommand();"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"        FindOpenCaseCommand findOpenCaseSecondCommand \u003d new FindOpenCaseCommand();"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"        // same object -\u003e returns true"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findOpenCaseFirstCommand.equals(findOpenCaseFirstCommand));"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"        // same values -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":"        FindOpenCaseCommand findFirstCommandCopy \u003d new FindOpenCaseCommand();"},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findOpenCaseFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findOpenCaseFirstCommand.equals(1));"},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        // null -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findOpenCaseFirstCommand.equals(null));"},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"        // same object -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findOpenCaseFirstCommand.equals(findOpenCaseSecondCommand));"},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":"    public void execute_command_multipleCrimeCaseFound() {"},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 5);"},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"        FindOpenCaseCommand command \u003d prepareCommand();"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BRAVO, DELTA, ECHO, GOLF, FIVE));"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"     * Prepare the FindOpenCaseCommand {@code FindOpenCaseCommand}."},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"    private FindOpenCaseCommand prepareCommand() {"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"        FindOpenCaseCommand command \u003d new FindOpenCaseCommand();"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":"        return command;"},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code FilteredList\u003cCrimeCase\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code Investigapptor} in model remains the same after executing the {@code command}"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandSuccess(FindOpenCaseCommand command, String expectedMessage,"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"                                      List\u003cCrimeCase\u003e expectedList) {"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedList, model.getFilteredCrimeCaseList());"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedInvestigapptor, model.getInvestigapptor());"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":61,"quentinkhoo":7,"-":19}},{"path":"src/test/java/seedu/investigapptor/logic/commands/SelectInvestigatorCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectInvestigatorCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"public class SelectInvestigatorCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"        // ensures that outOfBoundIndex is still in bounds of investigapptor book list"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getInvestigapptor().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"        SelectInvestigatorCommand selectFirstCommand \u003d new SelectInvestigatorCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"        SelectInvestigatorCommand selectSecondCommand \u003d new SelectInvestigatorCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        SelectInvestigatorCommand selectFirstCommandCopy \u003d new SelectInvestigatorCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"     * Executes a {@code SelectInvestigatorCommand} with the given {@code index},"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"     * and checks that {@code JumpToListRequestEvent}"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":104,"author":{"gitID":"pkaijun"},"content":"        SelectInvestigatorCommand selectInvestigatorCommand \u003d prepareCommand(index);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"pkaijun"},"content":"            CommandResult commandResult \u003d selectInvestigatorCommand.execute();"},{"lineNumber":108,"author":{"gitID":"pkaijun"},"content":"            assertEquals(String.format(SelectInvestigatorCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        JumpToPersonListRequestEvent lastEvent \u003d"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                (JumpToPersonListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"pkaijun"},"content":"     * Executes a {@code SelectInvestigatorCommand} with the given {@code index},"},{"lineNumber":121,"author":{"gitID":"pkaijun"},"content":"     * and checks that a {@code CommandException}"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":125,"author":{"gitID":"pkaijun"},"content":"        SelectInvestigatorCommand selectInvestigatorCommand \u003d prepareCommand(index);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"pkaijun"},"content":"            selectInvestigatorCommand.execute();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"pkaijun"},"content":"     * Returns a {@code SelectInvestigatorCommand} with parameters {@code index}."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"pkaijun"},"content":"    private SelectInvestigatorCommand prepareCommand(Index index) {"},{"lineNumber":140,"author":{"gitID":"pkaijun"},"content":"        SelectInvestigatorCommand selectInvestigatorCommand \u003d new SelectInvestigatorCommand(index);"},{"lineNumber":141,"author":{"gitID":"pkaijun"},"content":"        selectInvestigatorCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":"        return selectInvestigatorCommand;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":21,"quentinkhoo":18,"-":105}},{"path":"src/test/java/seedu/investigapptor/logic/commands/AddInvestigatorCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddInvestigatorCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddInvestigatorCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Investigator validPerson \u003d new InvestigatorBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                String.format(AddInvestigatorCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        Person personInList \u003d model.getInvestigapptor().getPersonList().get(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                    AddInvestigatorCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddInvestigatorCommand} which upon execution,"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"     * adds {@code person} into the {@code model}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private AddInvestigatorCommand prepareCommand(Person person, Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        AddInvestigatorCommand command \u003d new AddInvestigatorCommand(person);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":1,"quentinkhoo":14,"-":44}},{"path":"src/test/java/seedu/investigapptor/logic/commands/CloseCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CloseCaseCommand.MESSAGE_CASE_ALREADY_CLOSE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CloseCaseCommand.MESSAGE_CLOSE_CASE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showCrimeCaseAtIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.Status.CASE_CLOSE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_CASE;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":" * Contains integration tests (interaction with the Model, UndoCommand)"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":" * and unit tests for CloseCaseCommand."},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"public class CloseCaseCommandTest {"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"    public void equals() throws Exception {"},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"        final CloseCaseCommand standardCommand \u003d prepareCommand(INDEX_SECOND_CASE);"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":"        CloseCaseCommand commandWithSameValues \u003d prepareCommand(INDEX_SECOND_CASE);"},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"        //assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":"        // different types -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"        // different index -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"        assertFalse(standardCommand.equals(new CloseCaseCommand(INDEX_FIRST_CASE)));"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"    public void execute_validCrimeCaseIndexFilteredList_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"        Index indexLastCrimeCase \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size());"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"        CrimeCase lastCrimeCase \u003d model.getFilteredCrimeCaseList().get(indexLastCrimeCase.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"        CrimeCaseBuilder crimeCaseInList \u003d new CrimeCaseBuilder(lastCrimeCase);"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"        CrimeCase closedCrimeCase \u003d crimeCaseInList.withStatus(CASE_CLOSE).build();"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"        CloseCaseCommand closeCaseCommand \u003d prepareCommand(indexLastCrimeCase);"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CLOSE_CASE_SUCCESS, closedCrimeCase.getStatus().toString());"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"        expectedModel.updateCrimeCase(lastCrimeCase, closedCrimeCase);"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(closeCaseCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"     * but smaller than size of investigapptor book"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"    public void execute_invalidCrimeCaseIndexFilteredList_failure() {"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CASE;"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"        // ensures that outOfBoundIndex is still in bounds of investigapptor book list"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInvestigapptor().getCrimeCaseList().size());"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        CloseCaseCommand closeCaseCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(closeCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"pkaijun"},"content":"     * Command applied on a case whose status is already closed - test should fail"},{"lineNumber":102,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"pkaijun"},"content":"    public void execute_invalidCaseStatusClosed_failure() {"},{"lineNumber":105,"author":{"gitID":"pkaijun"},"content":"        final CloseCaseCommand closeCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE); // case status already closed"},{"lineNumber":106,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(closeCaseCommand, model, MESSAGE_CASE_ALREADY_CLOSE);"},{"lineNumber":107,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":109,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"pkaijun"},"content":"     * Invalid index as the input - test should fail"},{"lineNumber":111,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"pkaijun"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":114,"author":{"gitID":"pkaijun"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":115,"author":{"gitID":"pkaijun"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":116,"author":{"gitID":"pkaijun"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":117,"author":{"gitID":"pkaijun"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size() + 1);"},{"lineNumber":118,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":119,"author":{"gitID":"pkaijun"},"content":"        CloseCaseCommand closeCaseCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":120,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":121,"author":{"gitID":"pkaijun"},"content":"        // execution failed -\u003e editCaseCommand not pushed into undoRedoStack"},{"lineNumber":122,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(closeCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":123,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":124,"author":{"gitID":"pkaijun"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":125,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":126,"author":{"gitID":"pkaijun"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":127,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":129,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"pkaijun"},"content":"     * 1. Closes a {@code CrimeCase} from a filtered list."},{"lineNumber":131,"author":{"gitID":"pkaijun"},"content":"     * 2. Undo the close."},{"lineNumber":132,"author":{"gitID":"pkaijun"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited crimeCase in the"},{"lineNumber":133,"author":{"gitID":"pkaijun"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":134,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"pkaijun"},"content":"    public void executeUndo_validIndexFilteredList_sameCrimeCaseClosed() throws Exception {"},{"lineNumber":137,"author":{"gitID":"pkaijun"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":138,"author":{"gitID":"pkaijun"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":139,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":140,"author":{"gitID":"pkaijun"},"content":"        CrimeCase closedCrimeCase \u003d new CrimeCaseBuilder().withStatus(CASE_CLOSE).build();"},{"lineNumber":141,"author":{"gitID":"pkaijun"},"content":"        CloseCaseCommand closeCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE);"},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":143,"author":{"gitID":"pkaijun"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":144,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":145,"author":{"gitID":"pkaijun"},"content":"        showCrimeCaseAtIndex(model, INDEX_SECOND_CASE);"},{"lineNumber":146,"author":{"gitID":"pkaijun"},"content":"        CrimeCase crimeCaseToClose \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":147,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":148,"author":{"gitID":"pkaijun"},"content":"        // close -\u003e closes second crimeCase in unfiltered crimeCase list / first crimeCase in filtered crimeCase list"},{"lineNumber":149,"author":{"gitID":"pkaijun"},"content":"        closeCaseCommand.execute();"},{"lineNumber":150,"author":{"gitID":"pkaijun"},"content":"        undoRedoStack.push(closeCaseCommand);"},{"lineNumber":151,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":152,"author":{"gitID":"pkaijun"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered crimeCase list to show all crimeCases"},{"lineNumber":153,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":154,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":155,"author":{"gitID":"pkaijun"},"content":"        expectedModel.updateCrimeCase(crimeCaseToClose, closedCrimeCase);"},{"lineNumber":156,"author":{"gitID":"pkaijun"},"content":"        assertNotEquals(model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased()), crimeCaseToClose);"},{"lineNumber":157,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":159,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"pkaijun"},"content":"     * Returns an {@code CloseCaseCommand} with parameters {@code index}"},{"lineNumber":161,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"pkaijun"},"content":"    private CloseCaseCommand prepareCommand(Index index) {"},{"lineNumber":163,"author":{"gitID":"pkaijun"},"content":"        CloseCaseCommand closeCaseCommand \u003d new CloseCaseCommand(index);"},{"lineNumber":164,"author":{"gitID":"pkaijun"},"content":"        closeCaseCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":165,"author":{"gitID":"pkaijun"},"content":"        return closeCaseCommand;"},{"lineNumber":166,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":136,"quentinkhoo":13,"-":18}},{"path":"src/test/java/seedu/investigapptor/logic/commands/EditCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_APPLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.DESC_BANANA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_BANANA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BANANA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_MURDER;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showCrimeCaseAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_CASE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand.EditCrimeCaseDescriptor;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.EditCrimeCaseDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":" * and unit tests for EditCaseCommand."},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"public class EditCaseCommandTest {"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"        CrimeCase editedCrimeCase \u003d new CrimeCaseBuilder().build();"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder(editedCrimeCase).build();"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(INDEX_SECOND_CASE, descriptor);"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(EditCaseCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCrimeCase);"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"        expectedModel.updateCrimeCase(model.getFilteredCrimeCaseList().get(1), editedCrimeCase);"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(editCaseCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        Index indexLastCrimeCase \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size());"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"        CrimeCase lastCrimeCase \u003d model.getFilteredCrimeCaseList().get(indexLastCrimeCase.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        CrimeCaseBuilder crimeCaseInList \u003d new CrimeCaseBuilder(lastCrimeCase);"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"        CrimeCase editedCrimeCase \u003d crimeCaseInList.withName(VALID_CASENAME_BANANA)"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA)"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"                .withTags(VALID_TAG_MURDER).build();"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder().withCaseName(VALID_CASENAME_BANANA)"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"                .withDescription(VALID_DESCRIPTION_BANANA).withTags(VALID_TAG_MURDER).build();"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(indexLastCrimeCase, descriptor);"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(EditCaseCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCrimeCase);"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        expectedModel.updateCrimeCase(lastCrimeCase, editedCrimeCase);"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(editCaseCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE,"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"                new EditCrimeCaseDescriptor());"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"        CrimeCase editedCrimeCase \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(EditCaseCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCrimeCase);"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(editCaseCommand, model, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseInFilteredList \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        CrimeCase editedCrimeCase \u003d new CrimeCaseBuilder(crimeCaseInFilteredList)"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"                .withName(VALID_CASENAME_BANANA).build();"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE,"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"                new EditCrimeCaseDescriptorBuilder().withCaseName(VALID_CASENAME_BANANA).build());"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(EditCaseCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCrimeCase);"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"        expectedModel.updateCrimeCase(model.getFilteredCrimeCaseList().get(0), editedCrimeCase);"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(editCaseCommand, model, expectedMessage, expectedModel);"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"    public void execute_duplicateCrimeCaseUnfilteredList_failure() {"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"        CrimeCase firstCrimeCase \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder(firstCrimeCase).build();"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(INDEX_SECOND_CASE, descriptor);"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(editCaseCommand, model, EditCaseCommand.MESSAGE_DUPLICATE_CASE);"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"    public void execute_duplicateCrimeCaseFilteredList_failure() {"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"        // edit crimeCase in filtered list into a duplicate in investigapptor book"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseInList \u003d model.getInvestigapptor().getCrimeCaseList().get(INDEX_SECOND_CASE.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE,"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"                new EditCrimeCaseDescriptorBuilder(crimeCaseInList).build());"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(editCaseCommand, model, EditCaseCommand.MESSAGE_DUPLICATE_CASE);"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"    public void execute_invalidCrimeCaseIndexUnfilteredList_failure() {"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size() + 1);"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder()"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"                .withCaseName(VALID_CASENAME_BANANA).build();"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(editCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"     * but smaller than size of investigapptor book"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"    public void execute_invalidCrimeCaseIndexFilteredList_failure() {"},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CASE;"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"        // ensures that outOfBoundIndex is still in bounds of investigapptor book list"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInvestigapptor().getCrimeCaseList().size());"},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"                new EditCrimeCaseDescriptorBuilder().withCaseName(VALID_CASENAME_BANANA).build());"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(editCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"        CrimeCase editedCrimeCase \u003d new CrimeCaseBuilder().build();"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseToEdit \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder(editedCrimeCase).build();"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE, descriptor);"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"        // edit -\u003e first crimeCase edited"},{"lineNumber":170,"author":{"gitID":"leowweiching"},"content":"        editCaseCommand.execute();"},{"lineNumber":171,"author":{"gitID":"leowweiching"},"content":"        undoRedoStack.push(editCaseCommand);"},{"lineNumber":172,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":173,"author":{"gitID":"leowweiching"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered crimeCase list to show all crimeCases"},{"lineNumber":174,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":176,"author":{"gitID":"leowweiching"},"content":"        // redo -\u003e same first crimeCase edited again"},{"lineNumber":177,"author":{"gitID":"leowweiching"},"content":"        expectedModel.updateCrimeCase(crimeCaseToEdit, editedCrimeCase);"},{"lineNumber":178,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":179,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":181,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"leowweiching"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":183,"author":{"gitID":"leowweiching"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":184,"author":{"gitID":"leowweiching"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":185,"author":{"gitID":"leowweiching"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":186,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size() + 1);"},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder()"},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":"                .withCaseName(VALID_CASENAME_BANANA).build();"},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":"        // execution failed -\u003e editCaseCommand not pushed into undoRedoStack"},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(editCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":194,"author":{"gitID":"leowweiching"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":195,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":196,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":197,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":199,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"leowweiching"},"content":"     * 1. Edits a {@code CrimeCase} from a filtered list."},{"lineNumber":201,"author":{"gitID":"leowweiching"},"content":"     * 2. Undo the edit."},{"lineNumber":202,"author":{"gitID":"leowweiching"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited crimeCase in the"},{"lineNumber":203,"author":{"gitID":"leowweiching"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":204,"author":{"gitID":"leowweiching"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the crimeCase object regardless of indexing."},{"lineNumber":205,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"leowweiching"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameCrimeCaseEdited() throws Exception {"},{"lineNumber":208,"author":{"gitID":"leowweiching"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":209,"author":{"gitID":"leowweiching"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":210,"author":{"gitID":"leowweiching"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":211,"author":{"gitID":"leowweiching"},"content":"        CrimeCase editedCrimeCase \u003d new CrimeCaseBuilder().build();"},{"lineNumber":212,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor descriptor \u003d new EditCrimeCaseDescriptorBuilder(editedCrimeCase).build();"},{"lineNumber":213,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE, descriptor);"},{"lineNumber":214,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(new Investigapptor(model.getInvestigapptor()), new UserPrefs());"},{"lineNumber":215,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":216,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_SECOND_CASE);"},{"lineNumber":217,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseToEdit \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":218,"author":{"gitID":"leowweiching"},"content":"        // edit -\u003e edits second crimeCase in unfiltered crimeCase list / first crimeCase in filtered crimeCase list"},{"lineNumber":219,"author":{"gitID":"leowweiching"},"content":"        editCaseCommand.execute();"},{"lineNumber":220,"author":{"gitID":"leowweiching"},"content":"        undoRedoStack.push(editCaseCommand);"},{"lineNumber":221,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":222,"author":{"gitID":"leowweiching"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered crimeCase list to show all crimeCases"},{"lineNumber":223,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":224,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":225,"author":{"gitID":"leowweiching"},"content":"        expectedModel.updateCrimeCase(crimeCaseToEdit, editedCrimeCase);"},{"lineNumber":226,"author":{"gitID":"leowweiching"},"content":"        assertNotEquals(model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased()), crimeCaseToEdit);"},{"lineNumber":227,"author":{"gitID":"leowweiching"},"content":"        // redo -\u003e edits same second crimeCase in unfiltered crimeCase list"},{"lineNumber":228,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":229,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":231,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"leowweiching"},"content":"    public void equals() throws Exception {"},{"lineNumber":233,"author":{"gitID":"leowweiching"},"content":"        final EditCaseCommand standardCommand \u003d prepareCommand(INDEX_FIRST_CASE, DESC_APPLE);"},{"lineNumber":234,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":235,"author":{"gitID":"leowweiching"},"content":"        // same values -\u003e returns true"},{"lineNumber":236,"author":{"gitID":"leowweiching"},"content":"        EditCrimeCaseDescriptor copyDescriptor \u003d new EditCrimeCaseDescriptor(DESC_APPLE);"},{"lineNumber":237,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_CASE, copyDescriptor);"},{"lineNumber":238,"author":{"gitID":"leowweiching"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":239,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":240,"author":{"gitID":"leowweiching"},"content":"        // same object -\u003e returns true"},{"lineNumber":241,"author":{"gitID":"leowweiching"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":242,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":243,"author":{"gitID":"leowweiching"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":244,"author":{"gitID":"leowweiching"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":245,"author":{"gitID":"leowweiching"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":246,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":247,"author":{"gitID":"leowweiching"},"content":"        // null -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"leowweiching"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":249,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":250,"author":{"gitID":"leowweiching"},"content":"        // different types -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"leowweiching"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":252,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":253,"author":{"gitID":"leowweiching"},"content":"        // different index -\u003e returns false"},{"lineNumber":254,"author":{"gitID":"leowweiching"},"content":"        assertFalse(standardCommand.equals(new EditCaseCommand(INDEX_SECOND_CASE, DESC_APPLE)));"},{"lineNumber":255,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":256,"author":{"gitID":"leowweiching"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":257,"author":{"gitID":"leowweiching"},"content":"        assertFalse(standardCommand.equals(new EditCaseCommand(INDEX_FIRST_CASE, DESC_BANANA)));"},{"lineNumber":258,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":260,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"leowweiching"},"content":"     * Returns an {@code EditCaseCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":262,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"leowweiching"},"content":"    private EditCaseCommand prepareCommand(Index index, EditCrimeCaseDescriptor descriptor) {"},{"lineNumber":264,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand editCaseCommand \u003d new EditCaseCommand(index, descriptor);"},{"lineNumber":265,"author":{"gitID":"leowweiching"},"content":"        editCaseCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":266,"author":{"gitID":"leowweiching"},"content":"        return editCaseCommand;"},{"lineNumber":267,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":235,"quentinkhoo":13,"-":20}},{"path":"src/test/java/seedu/investigapptor/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_emptyInvestigapptor_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_nonEmptyInvestigapptor_success() {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"        Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":11,"-":25}},{"path":"src/test/java/seedu/investigapptor/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private final Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"    private final DeleteInvestigatorCommand deleteInvestigatorCommandOne \u003d"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"            new DeleteInvestigatorCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"    private final DeleteInvestigatorCommand deleteInvestigatorCommandTwo \u003d"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"            new DeleteInvestigatorCommand(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"                Arrays.asList(deleteInvestigatorCommandOne, deleteInvestigatorCommandTwo), Collections.emptyList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandOne.execute();"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandTwo.execute();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        expectedModel \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":9,"quentinkhoo":15,"-":35}},{"path":"src/test/java/seedu/investigapptor/logic/commands/DeleteCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showCrimeCaseAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_CASE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":" * {@code DeleteCaseCommand}."},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"public class DeleteCaseCommandTest {"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseToDelete \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE);"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, crimeCaseToDelete);"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"        expectedModel.deleteCrimeCase(crimeCaseToDelete);"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(deleteCaseCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(deleteCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseToDelete \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE);"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, crimeCaseToDelete);"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"        expectedModel.deleteCrimeCase(crimeCaseToDelete);"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"        showNoCrimeCase(expectedModel);"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(deleteCaseCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CASE;"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        // ensures that outOfBoundIndex is still in bounds of investigapptor book list"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInvestigapptor().getCrimeCaseList().size());"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(deleteCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseToDelete \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE);"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"        // delete -\u003e first crimeCase deleted"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        deleteCaseCommand.execute();"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"        undoRedoStack.push(deleteCaseCommand);"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered crimeCase list to show all crimeCases"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"        // redo -\u003e same first crimeCase deleted again"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"        expectedModel.deleteCrimeCase(crimeCaseToDelete);"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"        // execution failed -\u003e deleteCaseCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(deleteCaseCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"     * 1. Deletes a {@code CrimeCase} from a filtered list."},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted crimeCase in the"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the crimeCase object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameCrimeCaseDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d prepareCommand(INDEX_FIRST_CASE);"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        Model expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_SECOND_CASE);"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCaseToDelete \u003d model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"        // delete -\u003e deletes second crimeCase in unfiltered crimeCase list / first crimeCase in filtered crimeCase list"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"        deleteCaseCommand.execute();"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"        undoRedoStack.push(deleteCaseCommand);"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"        // undo -\u003e reverts investigapptor back to previous state and filtered crimeCase list to show all crimeCases"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"        expectedModel.deleteCrimeCase(crimeCaseToDelete);"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"        assertNotEquals(crimeCaseToDelete, model.getFilteredCrimeCaseList().get(INDEX_FIRST_CASE.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"        // redo -\u003e deletes same second crimeCase in unfiltered crimeCase list"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_CASE);"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_CASE);"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_CASE);"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":170,"author":{"gitID":"leowweiching"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"leowweiching"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":173,"author":{"gitID":"leowweiching"},"content":"        // different crimeCase -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"leowweiching"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":177,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"leowweiching"},"content":"     * Returns a {@code DeleteCaseCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"leowweiching"},"content":"    private DeleteCaseCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"leowweiching"},"content":"        DeleteCaseCommand deleteCaseCommand \u003d new DeleteCaseCommand(index);"},{"lineNumber":182,"author":{"gitID":"leowweiching"},"content":"        deleteCaseCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"leowweiching"},"content":"        return deleteCaseCommand;"},{"lineNumber":184,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":186,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"    private void showNoCrimeCase(Model model) {"},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":"        model.updateFilteredCrimeCaseList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"        assertTrue(model.getFilteredCrimeCaseList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":170,"quentinkhoo":12,"-":12}},{"path":"src/test/java/seedu/investigapptor/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    private final Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        expectedModel \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":14,"-":54}},{"path":"src/test/java/seedu/investigapptor/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    private final Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"    private final DeleteInvestigatorCommand deleteInvestigatorCommandOne \u003d"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"            new DeleteInvestigatorCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"    private final DeleteInvestigatorCommand deleteInvestigatorCommandTwo \u003d"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"            new DeleteInvestigatorCommand(INDEX_SECOND_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandOne.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"        deleteInvestigatorCommandTwo.preprocessUndoableCommand();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"                Collections.emptyList(), Arrays.asList(deleteInvestigatorCommandTwo, deleteInvestigatorCommandOne));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":9,"quentinkhoo":15,"-":36}},{"path":"src/test/java/seedu/investigapptor/logic/commands/SetPasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Password.generatePasswordHash;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":" * {@code PasswordCommand}."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"public class SetPasswordCommandTest {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    private static final String DEFAULT_PASSWORD \u003d \"password\";"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"        model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        SetPasswordCommand passwordCommand \u003d prepareCommand(DEFAULT_PASSWORD);"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        String expectedMessage \u003d String.format(SetPasswordCommand.MESSAGE_SUCCESS);"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        expectedModel.updatePassword(new Password(generatePasswordHash(DEFAULT_PASSWORD)));"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(passwordCommand, model, expectedMessage, expectedModel);"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    public void equals() throws Exception {"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        SetPasswordCommand passwordFirstCommand \u003d prepareCommand(DEFAULT_PASSWORD);"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        SetPasswordCommand passwordSecondCommand \u003d prepareCommand(DEFAULT_PASSWORD + \"1\");"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(passwordFirstCommand.equals(passwordFirstCommand));"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        // same values -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        SetPasswordCommand passwordFirstCommandCopy \u003d prepareCommand(DEFAULT_PASSWORD);"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(passwordFirstCommand.equals(passwordFirstCommandCopy));"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        // empty string -\u003e returnf alse"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(passwordFirstCommand.equals(\"\"));"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(passwordFirstCommand.equals(null));"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"        // different password -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(passwordFirstCommand.equals(passwordSecondCommand));"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"     * Returns a {@code PasswordCommand} with the parameter {@code password}."},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"    private SetPasswordCommand prepareCommand(String password) {"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        SetPasswordCommand passwordCommand \u003d new SetPasswordCommand(new Password(password));"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"        passwordCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"        return passwordCommand;"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":70,"-":5}},{"path":"src/test/java/seedu/investigapptor/logic/commands/FindInvestTagsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.MDM_ONG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.SIR_CHONG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.SIR_LIM;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.TagContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":" * Contains integration tests (interaction with the Model) for {@code FindInvestTagsCommand}."},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"public class FindInvestTagsCommandTest {"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"        FindInvestTagsCommand findFirstCommand \u003d new FindInvestTagsCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"        FindInvestTagsCommand findSecondCommand \u003d new FindInvestTagsCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":"        FindInvestTagsCommand findFirstCommandCopy \u003d new FindInvestTagsCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"        FindInvestTagsCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"        String userInput \u003d \"teamB new\".toLowerCase();  // Tags are converted to lowercase during comparison"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"        FindInvestTagsCommand command \u003d prepareCommand(userInput);"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(SIR_LIM, MDM_ONG, SIR_CHONG));"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"     * Parses {@code userInput} into a {@code FindInvestTagsCommand}."},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"    private FindInvestTagsCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"        FindInvestTagsCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"                new FindInvestTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        return command;"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code Investigapptor} in model remains the same after executing the {@code command}"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandSuccess(FindInvestTagsCommand command, String expectedMessage,"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"                                      List\u003cPerson\u003e expectedList) {"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedInvestigapptor, model.getInvestigapptor());"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":75,"quentinkhoo":10,"-":16}},{"path":"src/test/java/seedu/investigapptor/logic/ListElementPointerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ListElementPointerTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FIRST_ELEMENT \u003d \"first\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String SECOND_ELEMENT \u003d \"second\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e pointerElements;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private ListElementPointer pointer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        pointerElements \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        pointerElements.add(FIRST_ELEMENT);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        pointerElements.add(SECOND_ELEMENT);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor_defensiveCopy_backingListUnmodified() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(list);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        list.add(FIRST_ELEMENT);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(emptyPointer, pointer);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void emptyList() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCurrentFailure();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        pointer.add(FIRST_ELEMENT);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertNextSuccess(FIRST_ELEMENT);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void singleElementList() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        list.add(FIRST_ELEMENT);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(list);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        pointer.add(SECOND_ELEMENT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertNextSuccess(SECOND_ELEMENT);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void multipleElementsList() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(pointerElements);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String thirdElement \u003d \"third\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        pointer.add(thirdElement);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(SECOND_ELEMENT);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNextSuccess(thirdElement);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertPreviousSuccess(SECOND_ELEMENT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertPreviousSuccess(FIRST_ELEMENT);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(firstPointer.equals(firstPointer));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(firstPointer.equals(firstPointerCopy));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(1));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(null));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // different elements -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(differentElementPointer));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        firstPointerCopy.previous();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(firstPointerCopy));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasNext()} returns true and the return value"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * of {@code pointer#next()} equals to {@code element}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void assertNextSuccess(String element) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasNext());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.next());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * of {@code pointer#previous()} equals to {@code element}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertPreviousSuccess(String element) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasPrevious());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.previous());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * of {@code pointer#current()} equals to {@code element}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    private void assertCurrentSuccess(String element) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasCurrent());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.current());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasNext()} returns false and the following"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * {@code pointer#next()} call throws {@code NoSuchElementException}."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void assertNextFailure() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasNext());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            pointer.next();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasPrevious()} returns false and the following"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * {@code pointer#previous()} call throws {@code NoSuchElementException}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertPreviousFailure() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasPrevious());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            pointer.previous();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasCurrent()} returns false and the following"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * {@code pointer#current()} call throws {@code NoSuchElementException}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCurrentFailure() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasCurrent());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            pointer.current();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":175}},{"path":"src/test/java/seedu/investigapptor/logic/commands/AddCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseBuilder;"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"public class AddCaseCommandTest {"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"    public void constructor_nullCrimeCase_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        new AddCaseCommand(null);"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    public void execute_crimeCaseAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"        ModelStubAcceptingCrimeCaseAdded modelStub \u003d new ModelStubAcceptingCrimeCaseAdded();"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        CrimeCase validCrimeCase \u003d new CrimeCaseBuilder().build();"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        CommandResult commandResult \u003d getAddCommandForCrimeCase(validCrimeCase, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"        assertEquals(String.format(AddCaseCommand.MESSAGE_SUCCESS, validCrimeCase),"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"        assertEquals(Arrays.asList(validCrimeCase), modelStub.crimeCasesAdded);"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"    public void execute_duplicateCrimeCase_throwsCommandException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateCrimeCaseException();"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"        CrimeCase validCrimeCase \u003d new CrimeCaseBuilder().build();"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        thrown.expectMessage(AddCaseCommand.MESSAGE_DUPLICATE_CASE);"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"        getAddCommandForCrimeCase(validCrimeCase, modelStub).execute();"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        CrimeCase projHappy \u003d new CrimeCaseBuilder().withName(\"Project Happy\").build();"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"        CrimeCase projSad \u003d new CrimeCaseBuilder().withName(\"Project Sad\").build();"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand addProjHappyCommand \u003d new AddCaseCommand(projHappy);"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand addProjSadCommand \u003d new AddCaseCommand(projSad);"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"        assertTrue(addProjHappyCommand.equals(addProjHappyCommand));"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"        // same values -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand addProjHappyCommandCopy \u003d new AddCaseCommand(projHappy);"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        assertTrue(addProjHappyCommand.equals(addProjHappyCommandCopy));"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"        // different types -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"        assertFalse(addProjHappyCommand.equals(1));"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"        // null -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"        assertFalse(addProjHappyCommand.equals(null));"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"        // different case -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"        assertFalse(addProjHappyCommand.equals(addProjSadCommand));"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"     * Generates a new AddCaseCommand with the details of the given case."},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"    private AddCaseCommand getAddCommandForCrimeCase(CrimeCase crimeCase, Model model) {"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        AddCaseCommand command \u003d new AddCaseCommand(crimeCase);"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"        return command;"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"    private class ModelStub implements Model {"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"        public void resetData(ReadOnlyInvestigapptor newData) {"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"        public ReadOnlyInvestigapptor getInvestigapptor() {"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"            return null;"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"                throws DuplicatePersonException {"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        public void addCrimeCase(CrimeCase crimecase)"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"                throws DuplicateCrimeCaseException {"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"        public void updateCrimeCase(CrimeCase target, CrimeCase editedCase)"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"                throws DuplicateCrimeCaseException {"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"        public void deleteCrimeCase(CrimeCase target)"},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"            throws CrimeCaseNotFoundException {"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"        public void deleteTag(Tag toDelete)"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"                throws TagNotFoundException {"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":"        public void backUpInvestigapptor(String fileName) {"},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"            return null;"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"        public ObservableList\u003cCrimeCase\u003e getFilteredCrimeCaseList() {"},{"lineNumber":170,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"leowweiching"},"content":"            return null;"},{"lineNumber":172,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":174,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"leowweiching"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":176,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":179,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"leowweiching"},"content":"        public void updateFilteredCrimeCaseList(Predicate\u003cCrimeCase\u003e predicate) {"},{"lineNumber":181,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":184,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"leowweiching"},"content":"        public void updatePassword(Password password) {"},{"lineNumber":186,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":"        public void removePassword() {"},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":195,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"leowweiching"},"content":"     * A Model stub that always throw a DuplicateCrimeCaseException when trying to add a case."},{"lineNumber":197,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"leowweiching"},"content":"    private class ModelStubThrowingDuplicateCrimeCaseException extends ModelStub {"},{"lineNumber":199,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"leowweiching"},"content":"        public void addCrimeCase(CrimeCase crimeCase) throws DuplicateCrimeCaseException {"},{"lineNumber":201,"author":{"gitID":"leowweiching"},"content":"            throw new DuplicateCrimeCaseException();"},{"lineNumber":202,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":204,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"leowweiching"},"content":"        public ReadOnlyInvestigapptor getInvestigapptor() {"},{"lineNumber":206,"author":{"gitID":"leowweiching"},"content":"            return new Investigapptor();"},{"lineNumber":207,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":210,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"leowweiching"},"content":"     * A Model stub that always accept the case being added."},{"lineNumber":212,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"leowweiching"},"content":"    private class ModelStubAcceptingCrimeCaseAdded extends ModelStub {"},{"lineNumber":214,"author":{"gitID":"leowweiching"},"content":"        final ArrayList\u003cCrimeCase\u003e crimeCasesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":215,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":216,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"leowweiching"},"content":"        public void addCrimeCase(CrimeCase crimeCase) throws DuplicateCrimeCaseException {"},{"lineNumber":218,"author":{"gitID":"leowweiching"},"content":"            requireNonNull(crimeCase);"},{"lineNumber":219,"author":{"gitID":"leowweiching"},"content":"            crimeCasesAdded.add(crimeCase);"},{"lineNumber":220,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":222,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"leowweiching"},"content":"        public ReadOnlyInvestigapptor getInvestigapptor() {"},{"lineNumber":224,"author":{"gitID":"leowweiching"},"content":"            return new Investigapptor();"},{"lineNumber":225,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":228,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":195,"quentinkhoo":13,"-":20}},{"path":"src/test/java/seedu/investigapptor/storage/XmlAdaptedPasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"public class XmlAdaptedPasswordTest {"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public void toModelType_validPassword_returnsPassword() throws Exception {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"        Password password \u003d new Password(\"password\");"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"        XmlAdaptedPassword storedPassword \u003d new XmlAdaptedPassword(password);"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(password, storedPassword.toModelType());"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":19}},{"path":"src/test/java/seedu/investigapptor/logic/commands/RemovePasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.getTypicalInvestigapptor;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"public class RemovePasswordCommandTest {"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    private static final Password TEST_PASSWORD \u003d new Password(\"password\");"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"            model.updatePassword(TEST_PASSWORD);"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"        } catch (InvalidPasswordException ipe) {"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"            throw new AssertionError(\"Shouldn\u0027t reach here\");"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    public void execute_removePassword_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        RemovePasswordCommand removepasswordCommand \u003d prepareCommand();"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getInvestigapptor(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        expectedModel.updatePassword(TEST_PASSWORD);"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        String expectedMessageSuccess \u003d RemovePasswordCommand.MESSAGE_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        expectedModel.removePassword();"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(removepasswordCommand, model, expectedMessageSuccess, expectedModel);"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(model.getInvestigapptor().getPassword(), null);"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"        String expectedMessageNoPassword \u003d RemovePasswordCommand.MESSAGE_NO_PASSWORD;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        assertCommandSuccess(removepasswordCommand, model, expectedMessageNoPassword, expectedModel);"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(model.getInvestigapptor().getPassword(), null);"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"     * Returns a {@code RemovePasswordCommand}."},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"    private RemovePasswordCommand prepareCommand() {"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        RemovePasswordCommand removepasswordCommand \u003d new RemovePasswordCommand();"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        removepasswordCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        return removepasswordCommand;"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":54,"-":4}},{"path":"src/test/java/seedu/investigapptor/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":9,"-":101}},{"path":"src/test/java/seedu/investigapptor/storage/XmlSerializableInvestigapptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.TypicalPersons;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"public class XmlSerializableInvestigapptorTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableInvestigapptorTest/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_CRIMECASES_FILE \u003d new File(TEST_DATA_FOLDER"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"typicalCrimeCasesInvestigapptor.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_CRIMECASE_FILE \u003d new File(TEST_DATA_FOLDER"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"invalidCrimeCaseInvestigapptor.xml\");"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsInvestigapptor.xml\");"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonInvestigapptor.xml\");"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagInvestigapptor.xml\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidCrimeCaseFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"        XmlSerializableInvestigapptor dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CRIMECASE_FILE,"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"                XmlSerializableInvestigapptor.class);"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"        dataFromFile.toModelType();"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"        XmlSerializableInvestigapptor dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"                XmlSerializableInvestigapptor.class);"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor investigapptorFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor typicalPersonsInvestigapptor \u003d TypicalPersons.getTypicalInvestigapptor();"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(investigapptorFromFile, typicalPersonsInvestigapptor);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"        XmlSerializableInvestigapptor dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"                XmlSerializableInvestigapptor.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"        XmlSerializableInvestigapptor dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"                XmlSerializableInvestigapptor.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"leowweiching":10,"quentinkhoo":20,"-":35}},{"path":"src/test/java/seedu/investigapptor/storage/XmlInvestigapptorStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.HOON;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.IDA;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"public class XmlInvestigapptorStorageTest {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlInvestigapptorStorageTest/\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    public void readInvestigapptor_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        readInvestigapptor(null);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    private java.util.Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        return new XmlInvestigapptorStorage(filePath).readInvestigapptor(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    private void readInvestigapptorWithPassword(String filePath, Password password) throws Exception {"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        new XmlInvestigapptorStorage(filePath)"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"                .checkInvestigapptorPassword(addToTestDataPathIfNotNull(filePath), password);"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(readInvestigapptor(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        readInvestigapptor(\"NotXmlFormatInvestigapptor.xml\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"    public void readInvestigapptor_invalidPersonInvestigapptor_throwDataConversionException() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"        readInvestigapptor(\"invalidPersonInvestigapptor.xml\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"    public void readInvestigapptor_invalidAndValidPersonInvestigapptor_throwDataConversionException() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"        readInvestigapptor(\"invalidAndValidPersonInvestigapptor.xml\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"    public void readInvestigapptorWithPassword_invalidAndValidPersonInvestigapptor_throwDataConversionException()"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"            throws Exception {"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"        readInvestigapptorWithPassword(\"invalidPasswordInvestigapptor.xml\","},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"                new Password(\"password\"));"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"    public void readAndSaveInvestigapptor_allInOrder_success() throws Exception {"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempInvestigapptor.xml\";"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor original \u003d getTypicalInvestigapptor();"},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"        XmlInvestigapptorStorage xmlInvestigapptorStorage \u003d new XmlInvestigapptorStorage(filePath);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"        xmlInvestigapptorStorage.saveInvestigapptor(original, filePath);"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"        ReadOnlyInvestigapptor readBack \u003d xmlInvestigapptorStorage.readInvestigapptor(filePath).get();"},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(original, new Investigapptor(readBack));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":"        xmlInvestigapptorStorage.saveInvestigapptor(original, filePath);"},{"lineNumber":108,"author":{"gitID":"quentinkhoo"},"content":"        readBack \u003d xmlInvestigapptorStorage.readInvestigapptor(filePath).get();"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(original, new Investigapptor(readBack));"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"        xmlInvestigapptorStorage.saveInvestigapptor(original); //file path not specified"},{"lineNumber":114,"author":{"gitID":"quentinkhoo"},"content":"        readBack \u003d xmlInvestigapptorStorage.readInvestigapptor().get(); //file path not specified"},{"lineNumber":115,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(original, new Investigapptor(readBack));"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"quentinkhoo"},"content":"    public void saveInvestigapptor_nullInvestigapptor_throwsNullPointerException() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":122,"author":{"gitID":"quentinkhoo"},"content":"        saveInvestigapptor(null, \"SomeFile.xml\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"     * Saves {@code investigapptor} at the specified {@code filePath}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"quentinkhoo"},"content":"    private void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor, String filePath) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":"            new XmlInvestigapptorStorage(filePath).saveInvestigapptor(investigapptor,"},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":"                                                                        addToTestDataPathIfNotNull(filePath));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":"    public void saveInvestigapptor_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"        saveInvestigapptor(new Investigapptor(), null);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":60,"-":84}},{"path":"src/test/java/seedu/investigapptor/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        userPrefs.setInvestigapptorFilePath(\"investigapptor.xml\");"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"        userPrefs.setInvestigapptorName(\"TypicalInvestigapptorName\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":6,"-":129}},{"path":"src/test/java/seedu/investigapptor/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorBackupEvent;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorChangedEvent;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.testutil.EventsCollectorRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        XmlInvestigapptorStorage investigapptorStorage \u003d new XmlInvestigapptorStorage(getTempFilePath(\"ab\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        storageManager \u003d new StorageManager(investigapptorStorage, userPrefsStorage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":55,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":56,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    public void investigapptorReadSave() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"         * {@link XmlInvestigapptorStorage} class."},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlInvestigapptorStorageTest} class."},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor original \u003d getTypicalInvestigapptor();"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"        storageManager.saveInvestigapptor(original);"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"        ReadOnlyInvestigapptor retrieved \u003d storageManager.readInvestigapptor().get();"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(original, new Investigapptor(retrieved));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"    public void investigapptorReadWithWrongPassword() throws Exception {"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor original \u003d getTypicalInvestigapptor();"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        Password password \u003d new Password(\"password\");"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"        original.updatePassword(password);"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"        storageManager.saveInvestigapptor(original);"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        Password wrongPassword \u003d new Password(\"p@ssword\");"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"        storageManager.readInvestigapptorWithPassword(wrongPassword);"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"    public void getInvestigapptorFilePath() {"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        assertNotNull(storageManager.getInvestigapptorFilePath());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"    public void handleInvestigapptorChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"        Storage storage \u003d new StorageManager(new XmlInvestigapptorStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"        storage.handleInvestigapptorChangedEvent(new InvestigapptorChangedEvent(new Investigapptor()));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleInvestigapptorBackupdEvent_exceptionThrown_eventRaised() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":"        Storage storage \u003d new StorageManager(new XmlInvestigapptorStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        storage.handleInvestigapptorBackupEvent(new InvestigapptorBackupEvent(new Investigapptor(), \"dummy\"));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"quentinkhoo"},"content":"    class XmlInvestigapptorStorageExceptionThrowingStub extends XmlInvestigapptorStorage {"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"quentinkhoo"},"content":"        public XmlInvestigapptorStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"        public void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor, String filePath) throws IOException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":43,"-":86}},{"path":"src/test/java/seedu/investigapptor/logic/commands/FindCloseCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_CASES_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ALFA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.CHARLIE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.FOUR;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.FOXTROT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ONE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.THREE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.TWO;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCloseCaseCommand}."},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"public class FindCloseCaseCommandTest {"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"    private Model model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"        FindCloseCaseCommand findCloseCaseFirstCommand \u003d new FindCloseCaseCommand();"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"        FindCloseCaseCommand findCloseCaseSecondCommand \u003d new FindCloseCaseCommand();"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findCloseCaseFirstCommand.equals(findCloseCaseFirstCommand));"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":"        FindCloseCaseCommand findFirstCommandCopy \u003d new FindCloseCaseCommand();"},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findCloseCaseFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findCloseCaseFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"        assertFalse(findCloseCaseFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"        // same object -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":"        assertTrue(findCloseCaseFirstCommand.equals(findCloseCaseSecondCommand));"},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"    public void execute_command_multipleCrimeCaseFound() {"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 7);"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"        FindCloseCaseCommand command \u003d prepareCommand();"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALFA, CHARLIE, FOXTROT, ONE, TWO, THREE, FOUR));"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"     * Prepare the FindCloseCaseCommand {@code FindCloseCaseCommand}."},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"    private FindCloseCaseCommand prepareCommand() {"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":"        FindCloseCaseCommand command \u003d new FindCloseCaseCommand();"},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"        return command;"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code FilteredList\u003cCrimeCase\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"     *     - the {@code Investigapptor} in model remains the same after executing the {@code command}"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"    private void assertCommandSuccess(FindCloseCaseCommand command, String expectedMessage,"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"                                      List\u003cCrimeCase\u003e expectedList) {"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"        Investigapptor expectedInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedList, model.getFilteredCrimeCaseList());"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"        assertEquals(expectedInvestigapptor, model.getInvestigapptor());"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":61,"quentinkhoo":7,"-":21}},{"path":"src/test/java/seedu/investigapptor/model/person/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":39}},{"path":"src/test/java/seedu/investigapptor/model/person/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":39}},{"path":"src/test/java/seedu/investigapptor/model/InvestigapptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.AMY;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.BOB;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.getTypicalInvestigapptor;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.CrimeCaseBuilder;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.InvestigapptorBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.InvestigatorBuilder;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"public class InvestigapptorTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    private final Investigapptor investigapptor \u003d new Investigapptor();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(Collections.emptyList(), investigapptor.getPersonList());"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(Collections.emptyList(), investigapptor.getTagList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.resetData(null);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"    public void resetData_withValidReadOnlyInvestigapptor_replacesData() {"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor newData \u003d getTypicalInvestigapptor();"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(newData, investigapptor);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        InvestigapptorStub newData \u003d new InvestigapptorStub(newPersons, newTags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getCrimeCaseList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        investigapptor.getCrimeCaseList().remove(0);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.getPersonList().remove(0);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.getTagList().remove(0);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void getPersonList_addInvestigator_addSuccessful() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Investigator investigatorAlice \u003d new InvestigatorBuilder().build();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Investigapptor investigapptor \u003d new InvestigapptorBuilder().withPerson(investigatorAlice)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ObservableList\u003cPerson\u003e testList \u003d FXCollections.observableArrayList();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        testList.add(investigatorAlice);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(investigapptor.getPersonList(), testList);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void getCrimeCase_checkAddAndReturn_addCase() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Investigator investigatorAlice \u003d new InvestigatorBuilder().build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        CrimeCase testCase \u003d new CrimeCaseBuilder().build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        investigatorAlice.addCrimeCase(testCase);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ObservableList\u003cCrimeCase\u003e testList \u003d FXCollections.observableArrayList();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        testList.add(testCase);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(investigatorAlice.getCrimeCases(), testList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void deleteTag_usedByMultiplePersons_tagDeleted() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person amyWithFriendTag \u003d new PersonBuilder(AMY).withTags(\"Friend\").build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person bobWithFriendTag \u003d new PersonBuilder(BOB).withTags(\"Friend\").build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor investigapptor \u003d new InvestigapptorBuilder().withPerson(amyWithFriendTag)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withPerson(bobWithFriendTag).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"        ModelManager modelManager \u003d new ModelManager(investigapptor, userPrefs);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        modelManager.deleteTag(new Tag(\"Friend\"));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person amyNoFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Person bobNoFriendTag \u003d new PersonBuilder(BOB).withTags().build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor expectedInvestigapptor \u003d new InvestigapptorBuilder().withPerson(amyNoFriendTag)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .withPerson(bobNoFriendTag).build();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(new ModelManager(expectedInvestigapptor, userPrefs), modelManager);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":"    public void setPassword_passwordAdded() throws Exception {"},{"lineNumber":132,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor investigapptorAddedPassword \u003d new Investigapptor(\"password\");"},{"lineNumber":133,"author":{"gitID":"quentinkhoo"},"content":"        Password expectedPassword \u003d new Password(\"password\");"},{"lineNumber":134,"author":{"gitID":"quentinkhoo"},"content":"        Password investigapptorPassword \u003d investigapptorAddedPassword.getPassword();"},{"lineNumber":135,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(expectedPassword, investigapptorPassword);"},{"lineNumber":136,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":"    public void updatePassword_passwordChanged_passwordUpdated() throws Exception {"},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor investigapptorWithNewPassword \u003d new InvestigapptorBuilder().withPassword(\"oldPassword\").build();"},{"lineNumber":141,"author":{"gitID":"quentinkhoo"},"content":"        investigapptorWithNewPassword.updatePassword(new Password(\"newPassword\"));"},{"lineNumber":142,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor expectedInvestigapptor \u003d new InvestigapptorBuilder().withPassword(\"newPassword\").build();"},{"lineNumber":143,"author":{"gitID":"quentinkhoo"},"content":"        assertEquals(investigapptorWithNewPassword, expectedInvestigapptor);"},{"lineNumber":144,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":146,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":147,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"quentinkhoo"},"content":"     * A stub ReadOnlyInvestigapptor whose persons and tags lists can violate interface constraints."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"quentinkhoo"},"content":"    private static class InvestigapptorStub implements ReadOnlyInvestigapptor {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cCrimeCase\u003e cases \u003d FXCollections.observableArrayList();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cInvestigator\u003e investigators \u003d FXCollections.observableArrayList();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e personsOnly \u003d FXCollections.observableArrayList();"},{"lineNumber":157,"author":{"gitID":"quentinkhoo"},"content":"        private final Password password \u003d new Password(\"password\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"quentinkhoo"},"content":"        InvestigapptorStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public ObservableList\u003cCrimeCase\u003e getCrimeCaseList() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return cases;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public ObservableList\u003cInvestigator\u003e getInvestigatorList() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return investigators;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonOnlyList() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return personsOnly;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":189,"author":{"gitID":"quentinkhoo"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"quentinkhoo"},"content":"        public Password getPassword() {"},{"lineNumber":191,"author":{"gitID":"quentinkhoo"},"content":"            return password;"},{"lineNumber":192,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":56,"-":139}},{"path":"src/test/java/seedu/investigapptor/logic/commands/SelectCaseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.showCrimeCaseAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.getTypicalInvestigapptor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_FIRST_CASE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_SECOND_CASE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalIndexes.INDEX_THIRD_CASE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.FilteredCrimeCaseListChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToCrimeCaseListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCaseCommand}."},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"public class SelectCaseCommandTest {"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        model \u003d new ModelManager(getTypicalInvestigapptor(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"        Index lastCrimeCaseIndex \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size());"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"        assertExecutionSuccess(INDEX_FIRST_CASE);"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        assertExecutionSuccess(INDEX_THIRD_CASE);"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        assertExecutionSuccess(lastCrimeCaseIndex);"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCrimeCaseList().size() + 1);"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        assertExecutionSuccess(INDEX_FIRST_CASE);"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"        showCrimeCaseAtIndex(model, INDEX_FIRST_CASE);"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_CASE;"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"        // ensures that outOfBoundIndex is still in bounds of investigapptor book list"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getInvestigapptor().getCrimeCaseList().size());"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"        assertExecutionFailureWithEvent(outOfBoundsIndex, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"        SelectCaseCommand selectFirstCommand \u003d new SelectCaseCommand(INDEX_FIRST_CASE);"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        SelectCaseCommand selectSecondCommand \u003d new SelectCaseCommand(INDEX_SECOND_CASE);"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"        SelectCaseCommand selectFirstCommandCopy \u003d new SelectCaseCommand(INDEX_FIRST_CASE);"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"        // different person -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"     * Executes a {@code SelectCaseCommand} with the given {@code index},"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"     * and checks that {@code JumpToListRequestEvent}"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"     * is raised with the correct index."},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"        SelectCaseCommand selectCaseCommand \u003d prepareCommand(index);"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"            CommandResult commandResult \u003d selectCaseCommand.execute();"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"            assertEquals(String.format(SelectCaseCommand.MESSAGE_SELECT_CASE_SUCCESS, index.getOneBased()),"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"        } catch (CommandException ce) {"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"        JumpToCrimeCaseListRequestEvent lastEvent \u003d"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"                (JumpToCrimeCaseListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"     * Executes a {@code SelectCaseCommand} with the given {@code index},"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"     * and checks that a {@code CommandException}"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"     * This function checks that no events were raised"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"        SelectCaseCommand selectCaseCommand \u003d prepareCommand(index);"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"            selectCaseCommand.execute();"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        } catch (CommandException ce) {"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"     * Executes a {@code SelectCaseCommand} with the given {@code index},"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"     * and checks that a {@code CommandException}"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"     * This function also checks that the event raised is FilteredCrimeCaseListChangedEvent"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"    private void assertExecutionFailureWithEvent(Index index, String expectedMessage) {"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"        SelectCaseCommand selectCaseCommand \u003d prepareCommand(index);"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"            selectCaseCommand.execute();"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"        } catch (CommandException ce) {"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1"},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"                    \u0026\u0026 eventsCollectorRule.eventsCollector.getMostRecent()"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"                    instanceof FilteredCrimeCaseListChangedEvent);"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"     * Returns a {@code SelectCaseCommand} with parameters {@code index}."},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"    private SelectCaseCommand prepareCommand(Index index) {"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"        SelectCaseCommand selectCaseCommand \u003d new SelectCaseCommand(index);"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"        selectCaseCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"        return selectCaseCommand;"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":141,"quentinkhoo":10,"-":18}},{"path":"src/test/java/seedu/investigapptor/model/person/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":60}},{"path":"src/test/java/seedu/investigapptor/model/person/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        // null investigapptor"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Bl\")); // two character"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":33}},{"path":"src/test/java/seedu/investigapptor/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"        // Keywords match phone, email and investigapptor, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":72}},{"path":"src/test/java/seedu/investigapptor/model/person/RankTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":11,"author":{"gitID":"Marcus-cxc"},"content":"public class RankTest {"},{"lineNumber":12,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":13,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"Marcus-cxc"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Rank(null));"},{"lineNumber":16,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":"    public void constructor_invalidRank_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":"        String invalidRank \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rank(invalidRank));"},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"    public void isValidRank() {"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"        // null rank"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Rank.isValidRank(null));"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":"        // blank rank"},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(Rank.isValidRank(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(Rank.isValidRank(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"        // invalid parts"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(Rank.isValidRank(\"-5\")); // negative value"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(Rank.isValidRank(\"6\")); // greater than 5"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"        assertFalse(Rank.isValidRank(\"0\")); // less than 1"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"        // valid rank"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"        assertTrue(Rank.isValidRank(\"1\"));"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"        assertTrue(Rank.isValidRank(\"2\"));"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"        assertTrue(Rank.isValidRank(\"3\"));"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"        assertTrue(Rank.isValidRank(\"4\"));"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"        assertTrue(Rank.isValidRank(\"5\"));"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":36,"quentinkhoo":1,"-":8}},{"path":"src/test/java/seedu/investigapptor/storage/XmlAdaptedCrimeCaseTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.storage.XmlAdaptedCrimeCase.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.ALFA;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.EndDate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Status;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"public class XmlAdaptedCrimeCaseTest {"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    private static final String INVALID_NAME \u003d \"Project H@ppy\";"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    private static final String INVALID_DESCRIPTION \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    private static final XmlAdaptedInvestigator INVALID_INVESTIGATOR \u003d"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"            new XmlAdaptedInvestigator(\"R@chel\", \" \", \" \", \" \", \" \","},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"                    BENSON.getCrimeCases(), BENSON.getTags().stream()"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"                    .map(XmlAdaptedTag::new)"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"                    .collect(Collectors.toList()));"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    private static final String INVALID_DATE \u003d \"123/44/17\";"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    private static final String INVALID_STATUS \u003d \" \";"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"    private static final String INVALID_TAG \u003d \"#Corruption\";"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"    private static final String VALID_NAME \u003d ALFA.getCaseName().toString();"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    private static final String VALID_DESCRIPTION \u003d ALFA.getDescription().toString();"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    private static final XmlAdaptedInvestigator VALID_INVESTIGATOR \u003d"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"            new XmlAdaptedInvestigator(ALFA.getCurrentInvestigator());"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    private static final String VALID_STARTDATE \u003d ALFA.getStartDate().date;"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"    private static final String VALID_ENDDATE \u003d ALFA.getEndDate().date;"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    private static final String VALID_STATUS \u003d ALFA.getStatus().toString();"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d ALFA.getTags().stream()"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"            .collect(Collectors.toList());"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_validCrimeCaseDetails_returnsPerson() throws Exception {"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d new XmlAdaptedCrimeCase(ALFA);"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        assertEquals(ALFA, crimeCase.toModelType());"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"                new XmlAdaptedCrimeCase(INVALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR,"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"                        VALID_STARTDATE, VALID_ENDDATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d CaseName.MESSAGE_CASE_NAME_CONSTRAINTS;"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d new XmlAdaptedCrimeCase(null, VALID_DESCRIPTION, VALID_INVESTIGATOR,"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"                VALID_STARTDATE, VALID_ENDDATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CaseName.class.getSimpleName());"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidDescription_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"                new XmlAdaptedCrimeCase(VALID_NAME, INVALID_DESCRIPTION, VALID_INVESTIGATOR, VALID_STARTDATE,"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"                        VALID_STATUS, VALID_ENDDATE, VALID_TAGS);"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d Description.MESSAGE_DESCRIPTION_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d new XmlAdaptedCrimeCase(VALID_NAME, null, VALID_INVESTIGATOR,"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"                VALID_STARTDATE, VALID_ENDDATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidInvestigator_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"                new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, INVALID_INVESTIGATOR, VALID_STARTDATE,"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"                        VALID_ENDDATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_nullInvestigator_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, null,"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"                VALID_STARTDATE, VALID_ENDDATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Person.class.getSimpleName());"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidStartDate_throwsIllegalValueException() {"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"                new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR, INVALID_DATE,"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"                        VALID_ENDDATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d StartDate.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidEndDate_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"                new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR, VALID_STARTDATE,"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"                        INVALID_DATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d EndDate.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_nullStartDate_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR,"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"                null, VALID_ENDDATE, VALID_STATUS, VALID_TAGS);"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartDate.class.getSimpleName());"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_nullEndDate_throwsIllegalValueException() {"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR,"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"                VALID_STARTDATE, null, VALID_STATUS, VALID_TAGS);"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndDate.class.getSimpleName());"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"                new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR, VALID_STARTDATE,"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"                        VALID_ENDDATE, INVALID_STATUS, VALID_TAGS);"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d Status.MESSAGE_STATUS_CONSTRAINTS;"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR,"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":"                VALID_STARTDATE, VALID_ENDDATE, null, VALID_TAGS);"},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, crimeCase::toModelType);"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase crimeCase \u003d"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"                new XmlAdaptedCrimeCase(VALID_NAME, VALID_DESCRIPTION, VALID_INVESTIGATOR, VALID_STARTDATE,"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"                        VALID_ENDDATE, VALID_STATUS, invalidTags);"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"        Assert.assertThrows(IllegalValueException.class, crimeCase::toModelType);"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":143,"quentinkhoo":4,"-":18}},{"path":"src/test/java/seedu/investigapptor/model/crimecase/CaseNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"public class CaseNameTest {"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new CaseName(null));"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"        String invalidCaseName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CaseName(invalidCaseName));"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public void isValidCaseName() {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e CaseName.isValidCaseName(null));"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(CaseName.isValidCaseName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(CaseName.isValidCaseName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(CaseName.isValidCaseName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(CaseName.isValidCaseName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(CaseName.isValidCaseName(\"jack the ripper\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(CaseName.isValidCaseName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(CaseName.isValidCaseName(\"jack the ripper number 2\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(CaseName.isValidCaseName(\"Capital Jack\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(CaseName.isValidCaseName(\"Jack The Ripper Junior 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":39,"-":2}},{"path":"src/test/java/seedu/investigapptor/storage/XmlAdaptedInvestigatorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.storage.XmlAdaptedInvestigator.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalInvestigator.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.testutil.TypicalInvestigator;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedInvestigatorTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_RANK \u003d \"0\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_RANK \u003d \"6\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final List\u003cCrimeCase\u003e VALID_CASE \u003d TypicalInvestigator.BENSON.getCrimeCases();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_validInvestigatorDetails_returnsInvestigator() throws Exception {"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d new XmlAdaptedInvestigator(BENSON);"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"        assertEquals(BENSON, investigator.toModelType());"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"                new XmlAdaptedInvestigator(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"                        VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d new XmlAdaptedInvestigator(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"                VALID_ADDRESS, VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"                new XmlAdaptedInvestigator(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"                        VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d new XmlAdaptedInvestigator(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"                VALID_ADDRESS, VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d"},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"                new XmlAdaptedInvestigator(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"                        VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d new XmlAdaptedInvestigator(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"                VALID_ADDRESS, VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"                new XmlAdaptedInvestigator(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"                        VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d new XmlAdaptedInvestigator(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":"                null, VALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d"},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"                new XmlAdaptedInvestigator(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":"                        VALID_RANK, VALID_CASE, invalidTags);"},{"lineNumber":122,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, investigator::toModelType);"},{"lineNumber":123,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":125,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_invalidRank_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d new XmlAdaptedInvestigator(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":128,"author":{"gitID":"Marcus-cxc"},"content":"                VALID_ADDRESS, INVALID_RANK, VALID_CASE, VALID_TAGS);"},{"lineNumber":129,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d Rank.MESSAGE_RANK_CONSTRAINTS;"},{"lineNumber":130,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":131,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":133,"author":{"gitID":"Marcus-cxc"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"Marcus-cxc"},"content":"    public void toModelType_nullRank_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator investigator \u003d new XmlAdaptedInvestigator(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":136,"author":{"gitID":"Marcus-cxc"},"content":"                VALID_ADDRESS, null, VALID_CASE, VALID_TAGS);"},{"lineNumber":137,"author":{"gitID":"Marcus-cxc"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rank.class.getSimpleName());"},{"lineNumber":138,"author":{"gitID":"Marcus-cxc"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, investigator::toModelType);"},{"lineNumber":139,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":141,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":102,"quentinkhoo":6,"-":33}},{"path":"src/test/java/seedu/investigapptor/model/crimecase/DescriptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"public class DescriptionTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public void constructor_invalidDescription_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"        String invalidDescription \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public void isValidDescription() {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        // null description"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        // invalid description"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        // valid description"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Description.isValidDescription(\"jack the ripper\")); // alphabets only"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Description.isValidDescription(\"rape at geylang 8.\")); // alphanumeric and special characters"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Description.isValidDescription(\"$10000 worth of drugs at Geylang\")); // with capital letters"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Description.isValidDescription(\"Jack The Ripper Junior 2nd\")); // long descriptions"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":34,"-":5}},{"path":"src/test/java/seedu/investigapptor/model/tag/TagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":24}},{"path":"src/test/java/seedu/investigapptor/model/UniquePersonListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.UniquePersonList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":17}},{"path":"src/test/java/seedu/investigapptor/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.InvestigapptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor investigapptor \u003d new InvestigapptorBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor differentInvestigapptor \u003d new Investigapptor();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        ModelManager modelManager \u003d new ModelManager(investigapptor, userPrefs);"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(investigapptor, userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"        // different investigapptor -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentInvestigapptor, userPrefs)));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(modelManager.equals(new ModelManager(investigapptor, userPrefs)));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        differentUserPrefs.setInvestigapptorName(\"differentName\");"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(modelManager.equals(new ModelManager(investigapptor, differentUserPrefs)));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":15,"-":50}},{"path":"src/test/java/seedu/investigapptor/model/PasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"public class PasswordTest {"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public void isValidPassword() {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"        // null investigapptor"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"        // invalid password"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(Password.isValidPassword(\"\")); // empty string"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(Password.isValidPassword(\" \")); // spaces only"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(Password.isValidPassword(\"!@#$% !@#$%\")); // with spaces"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"        assertFalse(Password.isValidPassword(\"bugou\")); // less than 8 characters"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        // valid addresses"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Password.isValidPassword(\"peterjack\")); // alphabets only"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Password.isValidPassword(\"12345678\")); // numbers only"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Password.isValidPassword(\"peterthe2nd\")); // alphanumeric characters"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"        assertTrue(Password.isValidPassword(\"C@p1talTAn\")); // with capital letters, numbers and symbols"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":22,"-":7}},{"path":"src/test/java/seedu/investigapptor/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.UniqueTagList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":17}},{"path":"src/test/java/seedu/investigapptor/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":1,"quentinkhoo":7,"-":79}},{"path":"src/test/java/seedu/investigapptor/model/UniqueCrimeCaseListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.UniqueCrimeCaseList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class UniqueCrimeCaseListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        UniqueCrimeCaseList uniqueCrimeCaseList \u003d new UniqueCrimeCaseList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniqueCrimeCaseList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":18}},{"path":"src/test/java/seedu/investigapptor/testutil/Assert.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import junit.framework.AssertionFailedError;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class Assert {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expected} Exception."},{"lineNumber":12,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        assertThrows(expected, null, callable);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                                    VoidCallable callable) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            callable.call();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (Throwable actualException) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String errorMessage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            if (!actualException.getClass().isAssignableFrom(expectedException)) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","},{"lineNumber":32,"author":{"gitID":"-"},"content":"                        expectedException.getName(), actualException.getClass().getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                errorMessage \u003d String.format("},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                return;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new AssertionFailedError(errorMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        throw new AssertionFailedError(String.format("},{"lineNumber":44,"author":{"gitID":"-"},"content":"                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Represents a function which does not return anything and may throw an exception."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FunctionalInterface"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public interface VoidCallable {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        void call() throws Exception;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":54}},{"path":"src/test/java/seedu/investigapptor/model/crimecase/StartDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StartDateTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new StartDate(null));"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public void constructor_invalidStartDate_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"        String invalidStartDate \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidStartDate));"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public void isValidStartDate() {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        // null startdate"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e StartDate.isValidDate(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid startdate"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(StartDate.isValidDate(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StartDate.isValidDate(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StartDate.isValidDate(\"12341231\")); // random numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(StartDate.isValidDate(\"12 05/1994\")); // invalid format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(StartDate.isValidDate(\"30/02/1994\")); // invalid date"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StartDate.isValidDate(\"A/random/string\")); // invalid date format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(StartDate.isValidDate(\"some string\"));  // invalid date format"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // valid description"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(StartDate.isValidDate(\"29/02/2016\")); // leap year"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(StartDate.isValidDate(\"31/05/1994\")); // random date"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(StartDate.isValidDate(\"1/12/2001\")); // single digit day"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(StartDate.isValidDate(\"12/1/2001\")); // single digit month"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTrue(StartDate.isValidDate(\"1/1/2001\")); // Single digit day and month"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":18,"-":26}},{"path":"src/test/java/seedu/investigapptor/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_CASE \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_CASE \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_CASE \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":14}},{"path":"src/test/java/seedu/investigapptor/testutil/SerializableTestClass.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A class used to test serialization and deserialization"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class SerializableTestClass {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""},{"lineNumber":13,"author":{"gitID":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"  }%n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"}\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static String getNameTestValue() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return NAME_TEST_VALUE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setTestValues() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name \u003d getNameTestValue();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":71}},{"path":"src/test/java/seedu/investigapptor/testutil/InvestigapptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" * A utility class to help with building Investigapptor objects."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":" *     {@code Investigapptor ab \u003d new InvestigapptorBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"public class InvestigapptorBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    private Investigapptor investigapptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigapptorBuilder() {"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor \u003d new Investigapptor();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigapptorBuilder(Investigapptor investigapptor) {"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        this.investigapptor \u003d investigapptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Adds a new {@code CrimeCase} to the {@code Investigapptor} that we are building."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public InvestigapptorBuilder withCrimeCase(CrimeCase crimeCase) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            investigapptor.addCrimeCase(crimeCase);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (DuplicateCrimeCaseException dce) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"case is expected to be unique.\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"     * Adds a new {@code Person} to the {@code Investigapptor} that we are building."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigapptorBuilder withPerson(Person person) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"            investigapptor.addPerson(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code Investigapptor} that we are building."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigapptorBuilder withTag(String tagName) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"            investigapptor.addTag(new Tag(tagName));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"     * Parses {@code password} into a {@code Password} and adds it to the {@code Investigapptor} that we are building."},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigapptorBuilder withPassword(String password) {"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.updatePassword(new Password(password));"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"    public Investigapptor build() {"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        return investigapptor;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":33,"-":45}},{"path":"src/test/java/seedu/investigapptor/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddInvestigatorCommand;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an reg command string for adding the {@code person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static String getRegCommand(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return AddInvestigatorCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Returns an reg command string for adding the {@code person}."},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static String getAliasRegCommand(Person person) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return AddInvestigatorCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":41,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":11,"-":34}},{"path":"src/test/java/seedu/investigapptor/testutil/InvestigatorUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_RANK;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddInvestigatorCommand;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Investigator."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class InvestigatorUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an reg command string for adding the {@code investigator}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getRegCommand(Investigator investigator) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddInvestigatorCommand.COMMAND_WORD + \" \" + getInvestigatorDetails(investigator);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an reg command string for adding the {@code investigator}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getAliasRegCommand(Investigator investigator) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return AddInvestigatorCommand.COMMAND_ALIAS + \" \" + getInvestigatorDetails(investigator);"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static String getInvestigatorDetails(Investigator investigator) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + investigator.getName().fullName + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + investigator.getPhone().value + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + investigator.getEmail().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + investigator.getAddress().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_RANK + investigator.getRank().getValue() + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        investigator.getTags().stream().forEach("},{"lineNumber":43,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":39,"quentinkhoo":8}},{"path":"src/test/java/seedu/investigapptor/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        return Index.fromOneBased(model.getInvestigapptor().getPersonList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        return Index.fromOneBased(model.getInvestigapptor().getPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static Person getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"        return model.getInvestigapptor().getPersonList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":8,"-":46}},{"path":"src/test/java/seedu/investigapptor/testutil/EditCrimeCaseDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand.EditCrimeCaseDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditCrimeCaseDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditCrimeCaseDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditCrimeCaseDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditCrimeCaseDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder(EditCrimeCaseDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditCrimeCaseDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCrimeCaseDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder(CrimeCase crimeCase) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditCrimeCaseDescriptor();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setCaseName(crimeCase.getCaseName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setDescription(crimeCase.getDescription());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setCurrentInvestigator(crimeCase.getCurrentInvestigator());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setStartDate(crimeCase.getStartDate());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setTags(crimeCase.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Sets the {@code CaseName} of the {@code EditCrimeCaseDescriptor} that we are building."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder withCaseName(String name) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        descriptor.setCaseName(new CaseName(name));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Description} of the {@code EditCrimeCaseDescriptor} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder withDescription(String description) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        descriptor.setDescription(new Description(description));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Sets the {@code Investigator} of the {@code EditCrimeCaseDescriptor} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder withInvestigator(Investigator investigator) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        descriptor.setCurrentInvestigator(investigator);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code StartDate} of the {@code EditCrimeCaseDescriptor} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder withStartDate(String startDate) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setStartDate(new StartDate(startDate));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCrimeCaseDescriptor}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptorBuilder withTags(String... tags) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public EditCrimeCaseDescriptor build() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":84}},{"path":"src/test/java/seedu/investigapptor/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Investigator POLICE \u003d new InvestigatorBuilder().withName(\"Police\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person SIR_LIM \u003d new PersonBuilder().withName(\"Chao Lim\")"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            .withPhone(\"91672345\").withEmail(\"limck@investiagency.com\").withAddress(\"20th Street\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withTags(\"teamA\", \"new\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person MDM_ONG \u003d new PersonBuilder().withName(\"Cally Ong\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withPhone(\"90123489\").withEmail(\"cong@investiagency.com\").withAddress(\"50th Street\")"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withTags(\"teamB\", \"new\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person SIR_CHONG \u003d new PersonBuilder().withName(\"Ka Chong\")"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withPhone(\"80122469\").withEmail(\"kchong@investiagency.com\").withAddress(\"80th Street\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withTags(\"teamB\", \"experienced\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person SIR_LOO \u003d new PersonBuilder().withName(\"Andy Loo\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withPhone(\"91126469\").withEmail(\"aloo@investiagency.com\").withAddress(\"90th Street\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .withTags(\"teamA\", \"experienced\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_TEAMA \u003d \"TEAMA\"; // A keyword that matches TEAMA"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_TEAMB \u003d \"teamB\"; // A keyword that matches TEAMB"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"     * Returns an {@code Investigapptor} with all the typical persons."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"    public static Investigapptor getTypicalInvestigapptor() {"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor ia \u003d new Investigapptor();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"                ia.addPerson(person);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        return ia;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                SIR_LIM, MDM_ONG, SIR_CHONG, SIR_LOO));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":20,"-":80}},{"path":"src/test/java/seedu/investigapptor/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":8,"-":86}},{"path":"src/test/java/seedu/investigapptor/testutil/EventsUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Helper methods related to events."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class EventsUtil {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * has been posted to all subscribers."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static void postNow(BaseEvent event) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Posts {@code event} to all registered subscribers at some unspecified time in the future."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void postLater(BaseEvent event) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":23}},{"path":"src/test/java/seedu/investigapptor/testutil/CrimeCaseBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.EndDate.LARGEST_DATE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.EndDate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Status;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":" * A utility class to help with building CrimeCase objects."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CrimeCaseBuilder {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Murder Mall\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Just a Test\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_DATE \u003d \"01/01/2011\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"Homicide\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private CaseName name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Description description;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private StartDate startDate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private EndDate endDate;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Investigator currentInvestigator;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Status status;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        name \u003d new CaseName(DEFAULT_NAME);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        status \u003d new Status();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        startDate \u003d new StartDate(DEFAULT_DATE);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        endDate \u003d new EndDate(LARGEST_DATE);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        currentInvestigator \u003d new InvestigatorBuilder().withName(\"Detective Holmes\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Initializes the CrimeCaseBuilder with the data of {@code caseToCopy}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder(CrimeCase caseToCopy) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name \u003d caseToCopy.getCaseName();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        description \u003d caseToCopy.getDescription();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        status \u003d caseToCopy.getStatus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        startDate \u003d caseToCopy.getStartDate();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        endDate \u003d caseToCopy.getEndDate();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        currentInvestigator \u003d caseToCopy.getCurrentInvestigator();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(caseToCopy.getTags());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code CaseName} of the {@code CrimeCase} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.name \u003d new CaseName(name);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code CrimeCase} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder withTags(String... tags) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Description} of the {@code CrimeCase} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder withDescription(String description) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Person} of the {@code CrimeCase} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder withInvestigator(Investigator investigator) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.currentInvestigator \u003d investigator;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Toggles the {@code Status} of the {@code CrimeCase} that we are building."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder toggleStatus() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        this.status.toggleCase();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"     * Sets the {@code Status} of the {@code CrimeCase} that we are building."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"    public CrimeCaseBuilder withStatus(String status) {"},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Sets the {@code StartDate} of the {@code CrimeCase} that we are building."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder withStartDate(String date) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        this.startDate \u003d new StartDate(date);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Sets the {@code ENdDate} of the {@code CrimeCase} that we are building."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder withEndDate() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        this.endDate \u003d new EndDate(LARGEST_DATE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"quentinkhoo"},"content":"     * Sets the {@code currentInvestigator} of the {@code CrimeCase} that we are building."},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public CrimeCaseBuilder withCurrentInvestigator(Investigator investigator) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        this.currentInvestigator \u003d new InvestigatorBuilder(investigator).build();"},{"lineNumber":129,"author":{"gitID":"quentinkhoo"},"content":"        return this;"},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public CrimeCase build() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return new CrimeCase(name, description, currentInvestigator, startDate, endDate, status, tags);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":124,"quentinkhoo":12}},{"path":"src/test/java/guitests/guihandles/AlertDialogHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.control.DialogPane;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.UiManager;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code AlertDialog} of the UI."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AlertDialogHandle extends StageHandle {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final DialogPane dialogPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public AlertDialogHandle(Stage stage) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"        this.dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text of the header in the {@code AlertDialog}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getHeaderText() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return dialogPane.getHeaderText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the text of the content in the {@code AlertDialog}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public String getContentText() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return dialogPane.getContentText();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"quentinkhoo":1}},{"path":"src/test/java/seedu/investigapptor/testutil/InvestigatorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.UniqueCrimeCaseList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":" * A utility class to help with building Investigator objects."},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":"public class InvestigatorBuilder {"},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String DEFAULT_RANK \u003d \"3\";"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"    private Name name;"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"    private Phone phone;"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"    private Email email;"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"    private Address address;"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"    private Rank rank;"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"    private UniqueCrimeCaseList caseList;"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder() {"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"        rank \u003d new Rank(DEFAULT_RANK);"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"        caseList \u003d new UniqueCrimeCaseList();"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"     * Initializes the InvestigatorBuilder with the data of {@code personToCopy}."},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder(Investigator investigatorToCopy) {"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"        name \u003d investigatorToCopy.getName();"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"        phone \u003d investigatorToCopy.getPhone();"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"        email \u003d investigatorToCopy.getEmail();"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"        address \u003d investigatorToCopy.getAddress();"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"        tags \u003d new HashSet\u003c\u003e(investigatorToCopy.getTags());"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"        caseList \u003d new UniqueCrimeCaseList(investigatorToCopy.getCaseAsSet());"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"     * Sets the {@code Name} of the {@code Investigator} that we are building."},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Investigator} that we are building."},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder withTags(String... tags) {"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"     * Sets the {@code Address} of the {@code Investigator} that we are building."},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"     * Sets the {@code Phone} of the {@code Investigator} that we are building."},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder withPhone(String phone) {"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"     * Sets the {@code Email} of the {@code Investigator} that we are building."},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder withEmail(String email) {"},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"     * Sets the {@code Name} of the {@code Investigator} that we are building."},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder withRank(String rank) {"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"        this.rank \u003d new Rank(rank);"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"     * Sets the {@code Name} of the {@code Investigator} that we are building."},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigatorBuilder addCase(CrimeCase crimeCase) {"},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":"            CrimeCase c \u003d new CrimeCase(crimeCase.getCaseName(), crimeCase.getDescription(),"},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":"                    new Investigator(name, phone, email, address, rank, tags), crimeCase.getStartDate(),"},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":"                    crimeCase.getEndDate(), crimeCase.getStatus(), crimeCase.getTags());"},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":"            caseList.add(crimeCase);"},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"not possible\");"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"        return this;"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":123,"author":{"gitID":"Marcus-cxc"},"content":"    public Investigator build() {"},{"lineNumber":124,"author":{"gitID":"Marcus-cxc"},"content":"        return new Investigator(name, phone, email, address, rank, caseList.toSet(), tags);"},{"lineNumber":125,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":127,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":111,"-":14,"quentinkhoo":2}},{"path":"src/test/java/guitests/guihandles/StageHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Provides access to a stage in a JavaFx application for GUI testing purposes."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public abstract class StageHandle {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Stage stage;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public StageHandle(Stage stage) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.stage \u003d requireNonNull(stage);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Closes {@code stage}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void close() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(stage::close);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(stage.isShowing());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Focuses on this {@code stage}."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void focus() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String windowTitle \u003d stage.getTitle();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        logger.info(\"Focusing on\" + windowTitle);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        guiRobot.interact(stage::requestFocus);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        logger.info(\"Finishing focus on\" + windowTitle);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code stage}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector for the node to retrieve."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(String query) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":55,"quentinkhoo":1}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":50,"quentinkhoo":1}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":44,"quentinkhoo":2}},{"path":"src/test/java/seedu/investigapptor/testutil/TypicalCrimeCases.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_APPLE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_CASENAME_BANANA;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_APPLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BANANA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_INVESTIGATOR_APPLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_INVESTIGATOR_BANANA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_STARTDATE_APPLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_STARTDATE_BANANA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRAUD;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_MURDER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code CrimeCase} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalCrimeCases {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final CrimeCase ALFA \u003d new CrimeCaseBuilder().withName(\"Project Alfa\")"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            .withDescription(\"Murder on the orient express\").withStartDate(\"10/11/2015\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withEndDate().toggleStatus()"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withTags(\"Murder\").build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final CrimeCase BRAVO \u003d new CrimeCaseBuilder().withName(\"Project Bravo Johnny\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withDescription(\"Crooked house\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withStartDate(\"12/03/2016\").withEndDate()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withTags(\"Kidnap\", \"Homicide\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final CrimeCase CHARLIE \u003d new CrimeCaseBuilder().withName(\"Project Charlie\").toggleStatus()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withStartDate(\"18/01/2012\").withEndDate()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withDescription(\"ABC murders\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final CrimeCase DELTA \u003d new CrimeCaseBuilder().withName(\"Project Delta Johnny\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withStartDate(\"27/11/1999\").withEndDate()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withDescription(\"Peril at End House\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final CrimeCase ECHO \u003d new CrimeCaseBuilder().withName(\"Project Echo\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withStartDate(\"23/11/1965\").withEndDate()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withDescription(\"A study in scarlet\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final CrimeCase FOXTROT \u003d new CrimeCaseBuilder().withName(\"Project Foxtrot\").toggleStatus()"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withStartDate(\"09/07/2017\").withEndDate()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withDescription(\"The sign of the four\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final CrimeCase GOLF \u003d new CrimeCaseBuilder().withName(\"Project Golf\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withStartDate(\"02/08/2017\").withEndDate()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withDescription(\"The hound of the baskervilles\").build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // For findCaseTags testing"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final CrimeCase ONE \u003d new CrimeCaseBuilder().withName(\"Project One\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withDescription(\"Scary case\").withStartDate(\"10/12/2016\")"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .toggleStatus().withEndDate()"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withTags(\"Murder\", \"Homicide\", \"Missing\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final CrimeCase TWO \u003d new CrimeCaseBuilder().withName(\"Project Two\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withDescription(\"Not so scary case\").withStartDate(\"14/12/2016\")"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            .toggleStatus().withEndDate()"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withTags(\"Robbery\", \"Prank\", \"Kidnap\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final CrimeCase THREE \u003d new CrimeCaseBuilder().withName(\"Project Three\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withDescription(\"Supernatural Case\").withStartDate(\"18/12/2016\")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .toggleStatus().withEndDate()"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withTags(\"Murder\", \"Supernatural\").build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final CrimeCase FOUR \u003d new CrimeCaseBuilder().withName(\"Project Four\")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withDescription(\"Small case\").withStartDate(\"11/12/2016\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .toggleStatus().withEndDate()"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            .withTags(\"Theft\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final CrimeCase FIVE \u003d new CrimeCaseBuilder().withName(\"Project Five\")"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            .withDescription(\"Opened case\").withStartDate(\"11/12/2016\")"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withEndDate()"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withTags(\"Theft\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final CrimeCase BLUE \u003d new CrimeCaseBuilder().withName(\"Project Blue\").toggleStatus()"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            .withStartDate(\"15/06/2014\").withEndDate().withDescription(\"Reichenbach fall\").build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final CrimeCase YELLOW \u003d new CrimeCaseBuilder().withName(\"Project Yellow\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            .withStartDate(\"19/12/2012\").withEndDate().withDescription(\"Scandal in Belgravia\").build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    // Manually added - CrimeCase\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final CrimeCase APPLE \u003d new CrimeCaseBuilder().withName(VALID_CASENAME_APPLE)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            .withDescription(VALID_DESCRIPTION_APPLE).withInvestigator(VALID_INVESTIGATOR_APPLE)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            .withStartDate(VALID_STARTDATE_APPLE).withTags(VALID_TAG_FRAUD).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final CrimeCase BANANA \u003d new CrimeCaseBuilder().withName(VALID_CASENAME_BANANA)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            .withDescription(VALID_DESCRIPTION_BANANA).withInvestigator(VALID_INVESTIGATOR_BANANA)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            .withStartDate(VALID_STARTDATE_BANANA).toggleStatus()"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_MURDER, VALID_TAG_FRAUD)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_HOMICIDE \u003d \"homicide\"; // A keyword that matches homicide"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MURDER \u003d \"MURDER\"; // A keyword that matches murder"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_JOHNNY \u003d \"Johnny\"; // A keyword that matches JOHNNY"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private TypicalCrimeCases() {} // prevents instantiation"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns an {@code Investigapptor} with all the typical cases."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"    public static Investigapptor getTypicalInvestigapptor() {"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"        Investigapptor ia \u003d new Investigapptor();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        for (CrimeCase crimeCase : getTypicalCrimeCases()) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                ia.addCrimeCase(crimeCase);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":"        return ia;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static List\u003cCrimeCase\u003e getTypicalCrimeCases() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        CrimeCase alfa \u003d new CrimeCaseBuilder().withName(\"Project Alfa\")"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withDescription(\"Murder on the orient express\").withStartDate(\"10/11/2015\")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withEndDate().toggleStatus()"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withTags(\"Murder\").build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        CrimeCase bravo \u003d new CrimeCaseBuilder().withName(\"Project Bravo Johnny\")"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withDescription(\"Crooked house\")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .withStartDate(\"12/03/2016\").withEndDate()"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withTags(\"Kidnap\", \"Homicide\").build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        CrimeCase charlie \u003d new CrimeCaseBuilder().withName(\"Project Charlie\").toggleStatus()"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .withStartDate(\"18/01/2012\").withEndDate()"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .withDescription(\"ABC murders\").build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        CrimeCase delta \u003d new CrimeCaseBuilder().withName(\"Project Delta Johnny\")"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .withStartDate(\"27/11/1999\").withEndDate()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                .withDescription(\"Peril at End House\").build();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        CrimeCase echo \u003d new CrimeCaseBuilder().withName(\"Project Echo\")"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                .withStartDate(\"23/11/1965\").withEndDate()"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .withDescription(\"A study in scarlet\").build();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        CrimeCase foxtrot \u003d new CrimeCaseBuilder().withName(\"Project Foxtrot\").toggleStatus()"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withStartDate(\"09/07/2017\").withEndDate()"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withDescription(\"The sign of the four\").build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        CrimeCase golf \u003d new CrimeCaseBuilder().withName(\"Project Golf\")"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withStartDate(\"02/08/2017\").withEndDate()"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withDescription(\"The hound of the baskervilles\").build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        CrimeCase one \u003d new CrimeCaseBuilder().withName(\"Project One\")"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withDescription(\"Scary case\").withStartDate(\"10/12/2016\")"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                .withEndDate().toggleStatus()"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .withTags(\"Murder\", \"Homicide\", \"Missing\").build();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        CrimeCase two \u003d new CrimeCaseBuilder().withName(\"Project Two\")"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                .withDescription(\"Not so scary case\").withStartDate(\"14/12/2016\")"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                .withEndDate().toggleStatus()"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                .withTags(\"Robbery\", \"Prank\", \"Kidnap\").build();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        CrimeCase three \u003d new CrimeCaseBuilder().withName(\"Project Three\")"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                .withDescription(\"Supernatural Case\").withStartDate(\"18/12/2016\")"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                .withEndDate().toggleStatus()"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                .withTags(\"Murder\", \"Supernatural\").build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        CrimeCase four \u003d new CrimeCaseBuilder().withName(\"Project Four\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                .withDescription(\"Small case\").withStartDate(\"11/12/2016\")"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                .withEndDate().toggleStatus()"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                .withTags(\"Theft\").build();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        CrimeCase five \u003d new CrimeCaseBuilder().withName(\"Project Five\")"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                .withDescription(\"Opened case\").withStartDate(\"11/12/2016\")"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                .withEndDate()"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                .withTags(\"Theft\").build();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(alfa, bravo, charlie, delta, echo, foxtrot, golf,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                one, two, three, four, five));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":153,"quentinkhoo":4}},{"path":"src/test/java/guitests/guihandles/PersonListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.PersonCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPersonCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Optional\u003cPersonCard\u003e lastRememberedSelectedPersonCard;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle(ListView\u003cPersonCard\u003e personListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(personListPanelNode);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns a handle to the selected {@code PersonCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public PersonCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e personList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (personList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return new PersonCardHandle(personList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Navigates the listview to display and select the person."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void navigateToCard(Person person) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Optional\u003cPersonCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.person.equals(person)).findFirst();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Person does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns the person card handle of a person associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public PersonCardHandle getPersonCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return getPersonCardHandle(getRootNode().getItems().get(index).person);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the {@code PersonCardHandle} of the specified {@code person} in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonCardHandle getPersonCardHandle(Person person) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Optional\u003cPersonCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .filter(card -\u003e card.person.equals(person))"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .map(card -\u003e new PersonCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Person does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Selects the {@code PersonCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Remembers the selected {@code PersonCard} in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void rememberSelectedPersonCard() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedPersonCard()} call."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public boolean isSelectedPersonCardChanged() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return lastRememberedSelectedPersonCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return !lastRememberedSelectedPersonCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":132,"quentinkhoo":2}},{"path":"src/unused/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_ALIAS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":" * Lists all persons in the investigapptor book to the user."},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    public static final String[] TYPE_INVESTIGATOR_ALIASES \u003d {\"investigators\", \"investigator\", \"invest\", \"inv\", \"i\"};"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public static final String[] TYPE_COMMAND_CASE_ALIASES \u003d {\"cases\", \"case\", \"cas\", \"c\"};"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"            + \": Lists the specified type\\n\""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"            + \"Parameters: TYPE (must be either investigators or cases)\\n\""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" cases\";"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_ALIASES \u003d"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"            \"investigators: Can either be investigators, investigator, invest, inv or i\\n\""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" invest\\n\""},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"            + \"cases: Can either be cases, case, cas or c\\n\""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" cas\";"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$s\";"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    private final String listType;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    public ListCommand(String listType) {"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        this.listType \u003d listType;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        if (isValidInvestigatorAlias(listType)) {"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"            return new ListInvestigatorCommand().execute();"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        } else if (isValidCaseAlias(listType)) {"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"            return new ListCaseCommand().execute();"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"        } else {"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"            throw new CommandException(MESSAGE_INVALID_COMMAND_ALIAS);"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"     * Checks and returns an input listing type is a valid investigator alias"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"     * @param type"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"    public static boolean isValidInvestigatorAlias(String type) {"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        for (String alias : TYPE_INVESTIGATOR_ALIASES) {"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"            if (type.equals(alias)) {"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"                return true;"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"        return false;"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"     * Checks and returns an input listing type is a valid case alias"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"     * @param type"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"    public static boolean isValidCaseAlias(String type) {"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        for (String alias : TYPE_COMMAND_CASE_ALIASES) {"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"            if (type.equals(alias)) {"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"                return true;"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"        return false;"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":73,"-":2}},{"path":"src/test/java/seedu/investigapptor/testutil/CrimeCaseUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddCaseCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for CrimeCase."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class CrimeCaseUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code crimeCase}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static String getAddCommand(CrimeCase crimeCase) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return AddCaseCommand.COMMAND_WORD + \" \" + getCrimeCaseDetails(crimeCase);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code crimeCase}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getAliasAddCommand(CrimeCase crimeCase) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return AddCaseCommand.COMMAND_ALIAS + \" \" + getCrimeCaseDetails(crimeCase);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code crimeCase}\u0027s details."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static String getCrimeCaseDetails(CrimeCase crimeCase) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + crimeCase.getCaseName().crimeCaseName + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_DESCRIPTION + crimeCase.getDescription().description + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_STARTDATE + crimeCase.getStartDate().date + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        crimeCase.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":40,"quentinkhoo":2}},{"path":"src/test/java/guitests/guihandles/PasswordBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.PasswordBox;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" * A handle to the {@code PasswordBox} in the GUI."},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"public class PasswordBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public static final String PASSWORD_WINDOW_TITLE \u003d \"Please Enter Password\";"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public static final String PASSWORD_INPUT_FIELD_ID \u003d \"#passwordField\";"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public PasswordBoxHandle(TextField passwordBoxNode) {"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"        super(passwordBoxNode);"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"     * Returns the text in the password box."},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    public String getInput() {"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        return getRootNode().getText();"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    public boolean run(String password) {"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        click();"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(password));"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        return !getStyleClass().contains(PasswordBox.ERROR_STYLE_CLASS);"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"     * Returns the list of style classes present in the password box."},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"-":5,"quentinkhoo":45}},{"path":"src/test/java/seedu/investigapptor/testutil/TypicalInvestigator.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_RANK_INSPECTOR;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.testutil.TypicalCrimeCases.BRAVO;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Investigator} objects to be used in tests."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TypicalInvestigator {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Investigator ALICE \u003d new InvestigatorBuilder().withName(\"Alice Pauline\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withTags(\"friends\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .addCase(new CrimeCaseBuilder().withName(\"Omega\").build())"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .addCase(new CrimeCaseBuilder().withName(\"Stigma\").build()).build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Investigator BENSON \u003d new InvestigatorBuilder().withName(\"Benson Meier\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .addCase(BRAVO).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Investigator CARL \u003d new InvestigatorBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Investigator DANIEL \u003d new InvestigatorBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Investigator ELLE \u003d new InvestigatorBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Investigator FIONA \u003d new InvestigatorBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Investigator GEORGE \u003d new InvestigatorBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Investigator HOON \u003d new InvestigatorBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Investigator IDA \u003d new InvestigatorBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // Manually added - Investigator\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Investigator AMY \u003d new InvestigatorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Investigator BOB \u003d new InvestigatorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRank(VALID_RANK_INSPECTOR)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"    private TypicalInvestigator() {"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"    } // prevents instantiation"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns an {@code Investigapptor} with all the typical persons."},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"    public static Investigapptor getTypicalInvestigapptor() {"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"        Investigapptor ia \u003d new Investigapptor();"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"        for (CrimeCase c : getCrimeCase()) {"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"            try {"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"                ia.addCrimeCase(c);"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"            } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"        for (Investigator investigator : getTypicalInvestigators()) {"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"            try {"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"                ia.addPerson(investigator);"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":"        return ia;"},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"    public static List\u003cCrimeCase\u003e getCrimeCase() {"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"        ArrayList\u003cCrimeCase\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"        list.add(new CrimeCaseBuilder().withName(\"Omega\").withInvestigator(ALICE).build());"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"        list.add(new CrimeCaseBuilder().withName(\"Stigma\").withInvestigator(ALICE).build());"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"        return list;"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"    public static List\u003cInvestigator\u003e getTypicalInvestigators() {"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":37,"quentinkhoo":14,"-":53}},{"path":"src/unused/SetCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.SetCommand;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"public class SetCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    private SetCommandParser parser;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    @Before"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    public void setUp() {"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"        parser \u003d new SetCommandParser();"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    public void parse_invalidAlias_failure() {"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        assertParseFailure(parser, \"set p@ssword\", String.format(Messages.MESSAGE_INVALID_COMMAND_ALIAS,"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"                SetCommand.MESSAGE_ALIASES));"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":25,"-":2}},{"path":"src/unused/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_ALIAS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListCommand;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":" + * Parses input arguments and creates a new ListCommand object"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":" + */"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"     * and returns an ListCommand object for execution."},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"            String type \u003d ParserUtil.parseListType(args);"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"            return new ListCommand(type);"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_ALIAS, ListCommand.MESSAGE_ALIASES));"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":30,"-":1}},{"path":"src/unused/SetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"public class SetCommandTest {"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    private final SetCommand setCommand \u003d new SetCommand(\"p@ssword p/password\");"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public void executeUndoableCommand_invalidAlias_throwsCommandException()"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"            throws CommandException {"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"        setCommand.executeUndoableCommand();"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":19,"-":5}},{"path":"src/unused/SetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_ALIAS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.SetCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":" + * Parses input arguments and creates a new ListCommand object"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" + */"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"public class SetCommandParser implements Parser\u003cCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    private String inputType;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    private String actualType;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"     * Parses the given {@code String} of arguments in the context of the SetCommand"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"     * and returns an SetCommand object for execution."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public Command parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        args \u003d args.trim();"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        String[] argsArray \u003d args.split(\"\\\\s+\");"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"            inputType \u003d argsArray[0];"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"            actualType \u003d ParserUtil.parseSetType(inputType);"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"            return new SetCommand(args);"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"            throw new ParseException("},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_ALIAS, SetCommand.MESSAGE_ALIASES));"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":36,"-":1}},{"path":"src/unused/SetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_ALIAS;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.SetPasswordCommandParser;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":" * Sets a specific settings for the application"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"public class SetCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"set\";"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public static final String[] TYPE_PASSWORD_ALIASES \u003d {\"password\", \"pass\", \"pw\", \"p\"};"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"            + \": Sets the specified type\\n\""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"            + \"Parameters: TYPE (must be password)\\n\""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"            + \"Example: \" + COMMAND_WORD + \" cases\";"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_ALIASES \u003d"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"            \"password: Can either be password, pass, pw or p\\n\""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"                    + \"Example: \" + COMMAND_WORD + \" pw\\n\";"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Succesfully set %1$s\";"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    private final String setType;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    private String args;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    private String[] argsArray;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    public SetCommand(String args) {"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        this.args \u003d args.trim();"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        argsArray \u003d args.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        this.setType \u003d argsArray[0];"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        if (isValidPasswordAlias(setType)) {"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"            try {"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"                if (args.contains(\" \")) {"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"                    args \u003d args.substring(args.indexOf(\" \"));"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"                    return new SetPasswordCommandParser().parse(args).executeUndoableCommand();"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"                } else {"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"                    return new CommandResult(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"                            SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"                }"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"            } catch (ParseException pe) {"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"                return new CommandResult(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"                        SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        } else {"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"            throw new CommandException(MESSAGE_INVALID_COMMAND_ALIAS);"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"     * Checks and returns an input listing type is a valid investigator alias"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"     * @param type"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"    public static boolean isValidPasswordAlias(String type) {"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        for (String alias : TYPE_PASSWORD_ALIASES) {"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"            if (type.equals(alias)) {"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"                return true;"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"        return false;"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":71,"-":2}},{"path":"src/main/java/seedu/investigapptor/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.skin.PasswordFieldSkin;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    private boolean hideEnabled;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    private PasswordField commandTextField;"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        commandTextField.setSkin(new PasswordFieldSkin(commandTextField));"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        hideEnabled \u003d true;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        case ESCAPE:"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"            keyEvent.consume();"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"            clearScreenText();"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"            break;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                // let JavaFx handle the keypress"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"quentinkhoo"},"content":"     * Clears the command box input field"},{"lineNumber":133,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"quentinkhoo"},"content":"    private void clearScreenText() {"},{"lineNumber":135,"author":{"gitID":"quentinkhoo"},"content":"        commandTextField.setText(\"\");"},{"lineNumber":136,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":163,"author":{"gitID":"quentinkhoo"},"content":"        ObservableList\u003cString\u003e styleClassField \u003d commandTextField.getStyleClass();"},{"lineNumber":164,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":165,"author":{"gitID":"quentinkhoo"},"content":"        if (styleClassField.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"quentinkhoo"},"content":"        styleClassField.add(ERROR_STYLE_CLASS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":38,"-":134}},{"path":"src/main/java/seedu/investigapptor/ui/skin/PasswordFieldSkin.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui.skin;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import com.sun.javafx.scene.control.behavior.PasswordFieldBehavior;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import com.sun.javafx.scene.control.skin.TextFieldSkin;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":" * The PassworldFieldSkin class is responsible for masking the password input yet displaying the other commands"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"public class PasswordFieldSkin extends TextFieldSkin {"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public PasswordFieldSkin(PasswordField passwordField) {"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"        super(passwordField, new PasswordFieldBehavior(passwordField));"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    protected String maskText(String inputText) {"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"        StringBuilder sb \u003d new StringBuilder(inputText);"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        int prefixIndex \u003d inputText.indexOf(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        if (hasPasswordPrefix(inputText)) {"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"            for (int i \u003d prefixIndex + 3; i \u003c inputText.length(); i++) {"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"                sb.setCharAt(i, \u0027*\u0027);"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"        return sb.toString();"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"     * Checks for presence of password prefix"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"     * @param inputText"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"     * @return"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    private boolean hasPasswordPrefix(String inputText) {"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        int passwordPrefixIndex \u003d inputText.indexOf(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        return passwordPrefixIndex !\u003d -1;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":43}},{"path":"src/main/java/seedu/investigapptor/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.URLEncoder;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.MainApp;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.CrimeCasePanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String INVESTIGATOR_DETAILS_PAGE \u003d"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            \"https://cs2103jan2018-f14-b3.github.io/main/InvestigatorDetailsPage.html\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String CASE_DETAILS_PAGE \u003d"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            \"https://cs2103jan2018-f14-b3.github.io/main/CaseDetailsPage.html\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"     * Loads a CrimeCase HTML file with details from {@code CrimeCase}."},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"    private void loadCrimeCasePage(CrimeCase crimeCase) {"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"        loadCaseDetailsPage(crimeCase.getCaseName().crimeCaseName,"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"                crimeCase.getDescription().description,"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"                crimeCase.getCurrentInvestigator(),"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"                crimeCase.getStartDate().toString(),"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"                crimeCase.getEndDate().toString(),"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"                crimeCase.getStatus().toString(),"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"                getTagsSeparatedByComma(crimeCase.getTagsRaw()));"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"     * Loads a Investigator HTML file with details from {@code Investigator}."},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"        if (person instanceof Investigator) {"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"            loadInvestigatorDetailsPage((Investigator) person);"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"        } else {"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"            loadPage(SEARCH_PAGE_URL + person.getName().fullName);"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"     * Loads the case details HTML file with a background that matches the general theme."},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"    private void loadInvestigatorDetailsPage(Investigator investigator) {"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"        StringBuilder  url \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"            String investigatorDetails \u003d INVESTIGATOR_DETAILS_PAGE"},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"?invName\u003d\" + investigator.getName().fullName"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"\u0026rank\u003d\" + investigator.getRank().toString()"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"\u0026phone\u003d\" + investigator.getPhone().value"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"\u0026email\u003d\" + URLEncoder.encode(investigator.getEmail().value, \"UTF-8\")"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"\u0026address\u003d\" + URLEncoder.encode(investigator.getAddress().value, \"UTF-8\")"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"\u0026tags\u003d\" + getTagsSeparatedByComma(investigator.getTagsRaw())"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"\u0026case\u003d\";"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":"            url.append(investigatorDetails);"},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"            for (CrimeCase c : investigator.getCrimeCases()) {"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"                url.append(getBasicCaseDetails(c));"},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"                url.append(\",\");"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"            loadPage(url.toString());"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (Exception e) {"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"Encoder Error\");"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"     * Loads the case details HTML file with a background that matches the general theme."},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"    private String getBasicCaseDetails(CrimeCase crimeCase) {"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":"        String caseDetail \u003d crimeCase.getCaseName().toString()"},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"                + \"!\" + crimeCase.getStatus();"},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"        return caseDetail;"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":"    public void loadPage(String url) {"},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":"    private void loadDefaultPage() {"},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"     * Loads the case details HTML file with a background that matches the general theme."},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"    private void loadCaseDetailsPage(String caseName, String description, Investigator currentInvestigator,"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"                                     String startDate, String endDate, String status, String tagList) {"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"        String encDescription \u003d description;"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"        String encInvEmail \u003d currentInvestigator.getEmail().value;"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"        String encInvAddress \u003d currentInvestigator.getAddress().value;"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"        String encStartDate \u003d startDate;"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        String encEndDate \u003d endDate;"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"        // Encodes emails and addresses to handle symbols such as \u0027#\u0027"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"            encDescription \u003d URLEncoder.encode(description, \"UTF-8\");"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"            encInvEmail \u003d URLEncoder.encode(currentInvestigator.getEmail().value, \"UTF-8\");"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"            encInvAddress \u003d URLEncoder.encode(currentInvestigator.getAddress().value, \"UTF-8\");"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"            encStartDate \u003d URLEncoder.encode(startDate, \"UTF-8\");"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"            encEndDate \u003d URLEncoder.encode(endDate, \"UTF-8\");"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"        } catch (UnsupportedEncodingException usee) {"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"            usee.printStackTrace();"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"        String caseDetailsPage \u003d CASE_DETAILS_PAGE"},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"                + \"?caseName\u003d\" + caseName"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026description\u003d\" + encDescription"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026tags\u003d\" + tagList"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026invName\u003d\" + currentInvestigator.getName().fullName"},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026invRank\u003d\" + currentInvestigator.getRank().toString()"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026invPhone\u003d\" + currentInvestigator.getPhone().value"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026invEmail\u003d\" + encInvEmail"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026invAddress\u003d\" + encInvAddress"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026startDate\u003d\" + encStartDate"},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026endDate\u003d\" + encEndDate"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"                + \"\u0026status\u003d\" + status;"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"        loadPage(caseDetailsPage);"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"    private String getTagsSeparatedByComma(Set\u003cString\u003e tags) {"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"        String sep \u003d \"\";"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"        for (String tag: tags) {"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"            sb.append(sep);"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"            sb.append(tag);"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":"            sep \u003d \",\";"},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"leowweiching"},"content":"        return sb.toString();"},{"lineNumber":171,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":173,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":"    @Subscribe"},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"    private void handleCrimeCasePanelSelectionChangedEvent(CrimeCasePanelSelectionChangedEvent event) {"},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":"        loadCrimeCasePage(event.getNewSelection().crimeCase);"},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"leowweiching":72,"Marcus-cxc":56,"quentinkhoo":7,"-":59}},{"path":"src/unused/RemovePasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RemovePasswordCommand;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" * Parses input arguments and creates a new PasswordCommand object"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"public class RemovePasswordCommandParser implements Parser\u003cRemovePasswordCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"     * Parses the given {@code String} of arguments in the context of the PasswordCommand"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"     * and returns an PasswordCommand object for execution."},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    public RemovePasswordCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PASSWORD);"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD)"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"                    RemovePasswordCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        String inputPassword \u003d args.substring(4);"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        return new RemovePasswordCommand();"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":43,"-":1}},{"path":"src/main/java/seedu/investigapptor/ui/InvestigatorListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":" * Panel containing the list of investigators."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"public class InvestigatorListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    private static final String FXML \u003d \"InvestigatorListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    private static final String panelHeader \u003d \"Investigators\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigatorListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void handleJumpToInvestigatorListRequestEvent(JumpToPersonListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":10,"-":79}},{"path":"src/main/java/seedu/investigapptor/ui/Ui.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /** Stops the UI. */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    void stop();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":15}},{"path":"src/main/java/seedu/investigapptor/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.MainApp;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            mainWindow.hide();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            mainWindow.releaseResources();"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Closing program without inputting password.\");"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":13,"-":111}},{"path":"src/main/java/seedu/investigapptor/ui/CrimeCaseListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.CrimeCasePanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToCrimeCaseListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":" * Panel containing the list of crimecase."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"public class CrimeCaseListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    private static final String FXML \u003d \"CrimeCaseListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    private static final String panelHeader \u003d \"Crime Cases\";"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    private ListView\u003cCrimeCaseCard\u003e crimeCaseListView;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    public CrimeCaseListPanel(ObservableList\u003cCrimeCase\u003e caseList) {"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        setConnections(caseList);"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    private void setConnections(ObservableList\u003cCrimeCase\u003e caseList) {"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        ObservableList\u003cCrimeCaseCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"                caseList, (crimeCase) -\u003e new CrimeCaseCard(crimeCase, caseList.indexOf(crimeCase) + 1));"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        crimeCaseListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        crimeCaseListView.setCellFactory(listView -\u003e new CrimeCaseListViewCell());"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"        crimeCaseListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"                        logger.fine(\"Selection in crime case list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"                        raise(new CrimeCasePanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"            crimeCaseListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"            crimeCaseListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void handleJumpToCrimeCaseListRequestEvent(JumpToCrimeCaseListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"    class CrimeCaseListViewCell extends ListCell\u003cCrimeCaseCard\u003e {"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        @Override"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        protected void updateItem(CrimeCaseCard caseCard, boolean empty) {"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"            super.updateItem(caseCard, empty);"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"            if (empty || caseCard \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"                setGraphic(null);"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"                setText(null);"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"                setGraphic(caseCard.getRoot());"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":87,"-":2}},{"path":"src/main/java/seedu/investigapptor/ui/CrimeCaseCard.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":" * An UI component that displays information of a {@code CaseCard}."},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"public class CrimeCaseCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    private static final String FXML \u003d \"CrimeCaseListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String[] LABEL_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"pink\", \"olive\", \"black\","},{"lineNumber":17,"author":{"gitID":"-"},"content":"        \"brown\", \"gray\", \"green\", \"beige\", \"lightblue\", \"golden\", \"purple\"};"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Investigapptor level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    public final CrimeCase crimeCase;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    private Label description;"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    private Label startDate;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    private Label status;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    private Label currentInvestigator;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    public CrimeCaseCard(CrimeCase crimeCase, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        this.crimeCase \u003d crimeCase;"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        name.setText(crimeCase.getCaseName().toString());"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        description.setText(crimeCase.getDescription().toString());"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"        startDate.setText(crimeCase.getStartDate().date);"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        status.setText(crimeCase.getStatus().toString());"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        currentInvestigator.setText(crimeCase.getCurrentInvestigator().getName().fullName);"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        colorTag(crimeCase);"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"     * Creates tag labels for investigator"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"    private void colorTag(CrimeCase crimeCase) {"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"        crimeCase.getTags().forEach(tag -\u003e {"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"            tagLabel.getStyleClass().add(getTagColorStyle(tag.tagName));"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        });"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"     * @param tagName"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"     * @return Colour in the array"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"    private String getTagColorStyle(String tagName) {"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        // Hash the tag name to get the corresponding colour"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        return LABEL_COLOR[Math.abs(tagName.hashCode()) % LABEL_COLOR.length];"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"        if (!(other instanceof CrimeCaseCard)) {"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"            return false;"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"        // state check"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        CrimeCaseCard card \u003d (CrimeCaseCard) other;"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 crimeCase.equals(card.crimeCase);"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":95,"-":2}},{"path":"src/unused/SetPasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.SetPasswordCommand;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":" * Parses input arguments and creates a new PasswordCommand object"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"public class SetPasswordCommandParser implements Parser\u003cSetPasswordCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"     * Parses the given {@code String} of arguments in the context of the PasswordCommand"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"     * and returns an PasswordCommand object for execution."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public SetPasswordCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PASSWORD);"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD)"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"            String inputPassword \u003d args.substring(4);"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"            Password newPassword \u003d ParserUtil.parsePassword(inputPassword);"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"            return new SetPasswordCommand(newPassword);"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"            throw new ParseException(ive.getMessage());"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"//@@author"}],"authorContributionMap":{"quentinkhoo":47,"-":3}},{"path":"src/main/java/seedu/investigapptor/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    private CrimeCaseListPanel crimeCaseListPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"    private TabPane listPanel;"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"    private StackPane crimeCaseListPanelPlaceholder;"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane calendarPanelPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":116,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":120,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        calendarPanel \u003d new CalendarPanel(logic.getFilteredCrimeCaseList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        calendarPanelPlaceholder.getChildren().add(calendarPanel.getViewPanel());"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":141,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":142,"author":{"gitID":"quentinkhoo"},"content":"        crimeCaseListPanel \u003d new CrimeCaseListPanel(logic.getFilteredCrimeCaseList());"},{"lineNumber":143,"author":{"gitID":"quentinkhoo"},"content":"        crimeCaseListPanelPlaceholder.getChildren().add(crimeCaseListPanel.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"quentinkhoo"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getInvestigapptorFilePath());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"quentinkhoo"},"content":"    public CrimeCaseListPanel getCrimeCaseListPanel() {"},{"lineNumber":209,"author":{"gitID":"quentinkhoo"},"content":"        return this.crimeCaseListPanel;"},{"lineNumber":210,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":212,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":213,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"quentinkhoo"},"content":"     * Changes to the {@code Tab} at the {@code index} and selects it."},{"lineNumber":215,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"quentinkhoo"},"content":"    private void changeTo(int index) {"},{"lineNumber":217,"author":{"gitID":"quentinkhoo"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":218,"author":{"gitID":"quentinkhoo"},"content":"            listPanel.getSelectionModel().select(index);"},{"lineNumber":219,"author":{"gitID":"quentinkhoo"},"content":"        });"},{"lineNumber":220,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"quentinkhoo"},"content":"    @Subscribe"},{"lineNumber":222,"author":{"gitID":"quentinkhoo"},"content":"    private void handleSwapTabEvent(SwapTabEvent event) {"},{"lineNumber":223,"author":{"gitID":"quentinkhoo"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":224,"author":{"gitID":"quentinkhoo"},"content":"        changeTo(event.targetIndex);"},{"lineNumber":225,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":227,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":44,"-":193}},{"path":"src/main/java/seedu/investigapptor/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"    public void handleInvestigapptorChangedEvent(InvestigapptorChangedEvent abce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":77}},{"path":"src/main/java/seedu/investigapptor/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.Status.CASE_CLOSE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.Status.CASE_OPEN;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar.Style;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.FilteredCrimeCaseListChangedEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.EndDate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":" * The CalendarPanel of the Application which displays an overview of the duration of all the cass"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"    private static final Style[] ALL_STYLES \u003d { Style.STYLE1, Style.STYLE2, Style.STYLE3, Style.STYLE4,"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"        Style.STYLE5, Style.STYLE6, Style.STYLE7 };"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"    private static final String CLOSED_CASE_CALENDAR \u003d \"Closed Cases\";"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"    private static final String OPENED_CASE_CALENDAR \u003d \"Opened Cases\";"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"    private static final String CALENDAR_SOURCE \u003d \"All Cases\";"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"    private Calendar caseCloseCalendar;"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":"    private Calendar caseOpenCalendar;"},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"    private CalendarSource caseCalendarSource;"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"    private ObservableList\u003cCrimeCase\u003e crimeList;"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"    private CalendarView calendarPanel;"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"    public CalendarPanel(ObservableList\u003cCrimeCase\u003e crimeList) {"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"        super(FXML);"},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"        this.crimeList \u003d crimeList;"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":"        /** Constructing the new various calendar objects **/"},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":"        calendarPanel \u003d new CalendarView();"},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":"        caseCalendarSource \u003d new CalendarSource(CALENDAR_SOURCE);  // Contains calendars"},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"        caseCloseCalendar \u003d new Calendar(CLOSED_CASE_CALENDAR);  // Contains entries of cases that are closed"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":"        caseOpenCalendar \u003d new Calendar(OPENED_CASE_CALENDAR);  // Contains entries of cases that are opened"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"        /** Setting the defaults **/"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"        setCalendarView();"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"        setCalendar();"},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"        /** Creating the calendar entries **/"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"        createCalendarEntries();"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":"        /** Creating the calendar entries and adding it to the calendar **/"},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"        addToCalendar();"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"    public CalendarView getViewPanel() {"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"        return this.calendarPanel;"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"     * Create canlendar entries for all the cases in the crime list"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"    private void createCalendarEntries() {"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        StartDate startDate;"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        EndDate endDate;"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        String caseName;"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"        String status;"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"        for (CrimeCase crimecase : crimeList) {"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"            status \u003d crimecase.getStatus().toString();"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"            startDate \u003d crimecase.getStartDate();"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"            endDate \u003d crimecase.getEndDate();"},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"            caseName \u003d crimecase.getCaseName().toString();"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"            setEntry(startDate, endDate, status, caseName);"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"     * Creates an entry and adds it to the respective calendar according to its status"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"     * @param startDate"},{"lineNumber":101,"author":{"gitID":"pkaijun"},"content":"     * @param endDate"},{"lineNumber":102,"author":{"gitID":"pkaijun"},"content":"     * @param status"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":"     * @param caseName"},{"lineNumber":104,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"pkaijun"},"content":"    private void setEntry(StartDate startDate, EndDate endDate, String status, String caseName) {"},{"lineNumber":106,"author":{"gitID":"pkaijun"},"content":"        Entry\u003cString\u003e caseEntry \u003d new Entry\u003c\u003e(caseName);"},{"lineNumber":107,"author":{"gitID":"pkaijun"},"content":"        caseEntry.changeStartDate(LocalDate.of(startDate.getYear(), startDate.getMonth(), startDate.getDay()));"},{"lineNumber":108,"author":{"gitID":"pkaijun"},"content":"        caseEntry.setFullDay(true);"},{"lineNumber":109,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":110,"author":{"gitID":"pkaijun"},"content":"        if (status.equals(CASE_OPEN)) {"},{"lineNumber":111,"author":{"gitID":"pkaijun"},"content":"            caseEntry.changeEndDate(caseEntry.getStartDate());"},{"lineNumber":112,"author":{"gitID":"pkaijun"},"content":"            caseOpenCalendar.addEntry(caseEntry);"},{"lineNumber":113,"author":{"gitID":"pkaijun"},"content":"        } else if (status.equals(CASE_CLOSE)) {"},{"lineNumber":114,"author":{"gitID":"pkaijun"},"content":"            caseEntry.changeEndDate(LocalDate.of(endDate.getYear(), endDate.getMonth(), endDate.getDay()));"},{"lineNumber":115,"author":{"gitID":"pkaijun"},"content":"            caseCloseCalendar.addEntry(caseEntry);"},{"lineNumber":116,"author":{"gitID":"pkaijun"},"content":"        } else {"},{"lineNumber":117,"author":{"gitID":"pkaijun"},"content":"            assert(false);  // Should not reach here"},{"lineNumber":118,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":121,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"pkaijun"},"content":"     * Configure the view of the calendar"},{"lineNumber":123,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"pkaijun"},"content":"    private void setCalendarView() {"},{"lineNumber":125,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.setShowAddCalendarButton(false);"},{"lineNumber":126,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.setShowSearchField(false);"},{"lineNumber":127,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.setShowSearchResultsTray(false);"},{"lineNumber":128,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.setShowPrintButton(false);"},{"lineNumber":129,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.setShowToolBar(true);"},{"lineNumber":130,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.setShowAddCalendarButton(false);"},{"lineNumber":131,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.setShowToday(true);"},{"lineNumber":132,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.showMonthPage();"},{"lineNumber":133,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":135,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"pkaijun"},"content":"     * Configure the settings of the calendars"},{"lineNumber":137,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"pkaijun"},"content":"    private void setCalendar() {"},{"lineNumber":139,"author":{"gitID":"pkaijun"},"content":"        caseCloseCalendar.setReadOnly(true);"},{"lineNumber":140,"author":{"gitID":"pkaijun"},"content":"        caseCloseCalendar.setStyle(ALL_STYLES[0]);"},{"lineNumber":141,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":142,"author":{"gitID":"pkaijun"},"content":"        caseOpenCalendar.setReadOnly(true);"},{"lineNumber":143,"author":{"gitID":"pkaijun"},"content":"        caseOpenCalendar.setStyle(ALL_STYLES[4]);"},{"lineNumber":144,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":146,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"pkaijun"},"content":"     * Add the entries to the calendar view and source"},{"lineNumber":148,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"pkaijun"},"content":"    private void addToCalendar() {"},{"lineNumber":150,"author":{"gitID":"pkaijun"},"content":"        caseCalendarSource.getCalendars().add(caseCloseCalendar);"},{"lineNumber":151,"author":{"gitID":"pkaijun"},"content":"        caseCalendarSource.getCalendars().add(caseOpenCalendar);"},{"lineNumber":152,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.getCalendarSources().addAll(caseCalendarSource);"},{"lineNumber":153,"author":{"gitID":"pkaijun"},"content":"        calendarPanel.getCalendarSources().remove(0);   // Remove the default calendar"},{"lineNumber":154,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":156,"author":{"gitID":"pkaijun"},"content":"    @Subscribe"},{"lineNumber":157,"author":{"gitID":"pkaijun"},"content":"    private void handleInvestigapptorChangedEvent(InvestigapptorChangedEvent event) {"},{"lineNumber":158,"author":{"gitID":"pkaijun"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":159,"author":{"gitID":"pkaijun"},"content":"        crimeList \u003d event.data.getCrimeCaseList();"},{"lineNumber":160,"author":{"gitID":"pkaijun"},"content":"        Platform.runLater(this::updateCalendar);"},{"lineNumber":161,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":163,"author":{"gitID":"pkaijun"},"content":"    @Subscribe"},{"lineNumber":164,"author":{"gitID":"pkaijun"},"content":"    private void handleFilteredCrimeCaseListChangedEvent(FilteredCrimeCaseListChangedEvent event) {"},{"lineNumber":165,"author":{"gitID":"pkaijun"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":166,"author":{"gitID":"pkaijun"},"content":"        crimeList \u003d event.getFilteredCrimeCaseList();"},{"lineNumber":167,"author":{"gitID":"pkaijun"},"content":"        Platform.runLater(this::updateCalendar);"},{"lineNumber":168,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":170,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"pkaijun"},"content":"     * Updates the calendar whenever there is a change made to the crimecaselist"},{"lineNumber":172,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"pkaijun"},"content":"    private void updateCalendar() {"},{"lineNumber":174,"author":{"gitID":"pkaijun"},"content":"        caseCloseCalendar.clear();"},{"lineNumber":175,"author":{"gitID":"pkaijun"},"content":"        caseOpenCalendar.clear();"},{"lineNumber":176,"author":{"gitID":"pkaijun"},"content":"        createCalendarEntries();"},{"lineNumber":177,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":152,"-":26}},{"path":"src/main/java/seedu/investigapptor/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":38}},{"path":"src/main/java/seedu/investigapptor/ui/InvestigatorCard.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"public class InvestigatorCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    private static final String FXML \u003d \"InvestigatorListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String[] LABEL_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"pink\", \"olive\", \"black\","},{"lineNumber":17,"author":{"gitID":"-"},"content":"        \"brown\", \"gray\", \"green\", \"beige\", \"lightblue\", \"golden\", \"purple\"};"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Investigapptor level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    public final Investigator investigator;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label rank;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    private FlowPane crimeCaseList;"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    private FlowPane tags;"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigatorCard(Investigator investigator, int displayedIndex) {"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        this.investigator \u003d investigator;"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"        name.setText(investigator.getName().fullName);"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        phone.setText(investigator.getPhone().value);"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        address.setText(investigator.getAddress().value);"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        email.setText(investigator.getEmail().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (investigator instanceof Investigator) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            rank.setText((investigator).getRank().toString());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            rank.setText(\"No Rank\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"        colorCase(investigator);"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        colorTag(investigator);"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"     * Creates tag labels for investigator"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"    private void colorTag(Investigator investigator) {"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"        investigator.getTags().forEach(tag -\u003e {"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"            tagLabel.getStyleClass().add(getTagColorStyle(tag.tagName));"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"     * Creates case labels for investigator"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"    private void colorCase(Investigator investigator) {"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        investigator.getCrimeCases().forEach(CrimeCase -\u003e {"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"            Label caseLabel \u003d new Label(CrimeCase.getCaseName().crimeCaseName);"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"            caseLabel.getStyleClass().add(getCaseColorStyle(CrimeCase.getCaseName().crimeCaseName));"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"            crimeCaseList.getChildren().add(caseLabel);"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"        });"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"     *"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"     * @param tagName"},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"     * @return Colour in the array"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"    private String getTagColorStyle(String tagName) {"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        // Hash the tag name to get the corresponding colour"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":"        return LABEL_COLOR[Math.abs(tagName.hashCode()) % LABEL_COLOR.length];"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"     * @param caseName"},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"     * @return Colour in the array"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"    private String getCaseColorStyle(String caseName) {"},{"lineNumber":105,"author":{"gitID":"pkaijun"},"content":"        // Hash the tag name to get the corresponding colour"},{"lineNumber":106,"author":{"gitID":"quentinkhoo"},"content":"        return LABEL_COLOR[Math.abs(caseName.hashCode()) % LABEL_COLOR.length];"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"        if (!(other instanceof InvestigatorCard)) {"},{"lineNumber":118,"author":{"gitID":"quentinkhoo"},"content":"            return false;"},{"lineNumber":119,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":121,"author":{"gitID":"quentinkhoo"},"content":"        // state check"},{"lineNumber":122,"author":{"gitID":"quentinkhoo"},"content":"        InvestigatorCard card \u003d (InvestigatorCard) other;"},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":124,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 investigator.equals(card.investigator);"},{"lineNumber":125,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"pkaijun":20,"quentinkhoo":53,"-":53}},{"path":"src/main/java/seedu/investigapptor/ui/HelpWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Controller for a help page"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(FXML, root);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browser.getEngine().load(userGuideUrl);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public HelpWindow() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this(new Stage());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Shows the help window."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void show() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        getRoot().show();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":62}},{"path":"src/main/java/seedu/investigapptor/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToPersonListRequestEvent(JumpToPersonListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":84}},{"path":"src/main/java/seedu/investigapptor/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String[] LABEL_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"pink\", \"olive\", \"black\","},{"lineNumber":18,"author":{"gitID":"-"},"content":"        \"brown\", \"gray\", \"green\", \"beige\", \"lightblue\", \"golden\", \"purple\"};"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Investigapptor level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Label rank;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (person.isInvestigator()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            rank.setText(((Investigator) person).getRank().toString());"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            rank.setText(\"No Rank\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"        colorTag(person);"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"    //@@author pkaijun"},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"     * Creates tag labels for person"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":"    private void colorTag(Person person) {"},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"            tagLabel.getStyleClass().add(getTagColorStyle(tag.tagName));"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"     * @param tagName"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"     * @return Colour in the array"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"    private String getTagColorStyle(String tagName) {"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        // Hash the tag name to get the corresponding colour"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        return LABEL_COLOR[Math.abs(tagName.hashCode()) % LABEL_COLOR.length];"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":26,"quentinkhoo":4,"-":75}},{"path":"src/main/java/seedu/investigapptor/ui/PasswordWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.Storage;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":" * The Password Window. Provides the basic application layout containing"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"public class PasswordWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    private static final String FXML \u003d \"PasswordWindow.fxml\";"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private static final String TITLE \u003d \"Please Enter Password\";"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    private Storage storage;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    private StackPane passwordBoxPlacedHolder;"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"    public PasswordWindow(Stage primaryStage, Storage storage) {"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"        super(FXML, primaryStage);"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        // Set dependencies"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        this.storage \u003d storage;"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"        setTitle(TITLE);"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        return primaryStage;"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        /*"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"         * is fixed in later version of SDK."},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"         *"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"         * the TextInputControl(s)."},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"         *"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"                event.consume();"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        });"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"    void fillInnerParts() {"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"        PasswordBox passwordBox \u003d new PasswordBox(storage);"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"        passwordBoxPlacedHolder.getChildren().add(passwordBox.getRoot());"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"    void hide() {"},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"        primaryStage.hide();"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":105,"author":{"gitID":"quentinkhoo"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":106,"author":{"gitID":"quentinkhoo"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"quentinkhoo"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":111,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"quentinkhoo"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":114,"author":{"gitID":"quentinkhoo"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":115,"author":{"gitID":"quentinkhoo"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":116,"author":{"gitID":"quentinkhoo"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":118,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":121,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"quentinkhoo"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"quentinkhoo"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":125,"author":{"gitID":"quentinkhoo"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":127,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":129,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":"    void show() {"},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":"        primaryStage.show();"},{"lineNumber":132,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":134,"author":{"gitID":"quentinkhoo"},"content":"    void releaseResources() {"},{"lineNumber":135,"author":{"gitID":"quentinkhoo"},"content":"        browserPanel.freeResources();"},{"lineNumber":136,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":126,"-":11}},{"path":"src/main/java/seedu/investigapptor/commons/core/GuiSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    private static final double DEFAULT_HEIGHT \u003d 1381;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    private static final double DEFAULT_WIDTH \u003d 885;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Double windowWidth;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Double windowHeight;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Point windowCoordinates;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public GuiSettings() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Double getWindowWidth() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return windowWidth;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Double getWindowHeight() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return windowHeight;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return windowCoordinates;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Objects.equals(windowWidth, o.windowWidth)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":70}},{"path":"src/main/java/seedu/investigapptor/ui/UiPart.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.MainApp;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Resource folder where FXML files are stored. */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public T getRoot() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Raises the event via {@link EventsCenter#post(BaseEvent)}"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param event"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Registers the object as an event handler at the {@link EventsCenter}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param handler usually {@code this}"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(handler);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param location Location of the FXML document."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @param root Specifies the root of the object hierarchy."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(location);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":102}},{"path":"src/main/java/seedu/investigapptor/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_INVALID_COMMAND_ALIAS \u003d \"Invalid command alias! \\n%1$s\";"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX \u003d \"The investigator \""},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":"            + \"index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_CASE_DISPLAYED_INDEX \u003d \"The crime case \""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"            + \"index provided is invalid\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_CASES_LISTED_OVERVIEW \u003d \"%1$d cases listed!\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":3,"quentinkhoo":2,"-":13}},{"path":"src/main/java/seedu/investigapptor/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String appTitle \u003d \"Investigapptor\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":71}},{"path":"src/main/java/seedu/investigapptor/commons/core/ComponentManager.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Base class for *Manager classes"},{"lineNumber":7,"author":{"gitID":"-"},"content":" *"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Registers the class\u0027 event handlers in eventsCenter"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public abstract class ComponentManager {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    protected EventsCenter eventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Uses default {@link EventsCenter}"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public ComponentManager() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this(EventsCenter.getInstance());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ComponentManager(EventsCenter eventsCenter) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.eventsCenter \u003d eventsCenter;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        eventsCenter.registerHandler(this);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        eventsCenter.post(event);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":26}},{"path":"src/main/java/seedu/investigapptor/ui/PasswordBox.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.InvalidFileFormatEvent;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ValidPasswordEvent;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.Storage;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"public class PasswordBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    private static final String FXML \u003d \"PasswordBox.fxml\";"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    private final Storage storage;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    private PasswordField passwordField;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    public PasswordBox(Storage storage) {"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        this.storage \u003d storage;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        passwordField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        case ESCAPE:"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"            keyEvent.consume();"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"            passwordField.setText(\"\");"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        default:"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"    private void handlePasswordInput() {"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        String input \u003d passwordField.getText();"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"            storage.readInvestigapptorWithPassword(new Password(input));"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"            raise(new ValidPasswordEvent());"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"            CommandResult passwordResult \u003d new CommandResult(\"An invalid password has been entered\");"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"            passwordField.setText(\"\");"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Result: \" + passwordResult.feedbackToUser);"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"            raise(new NewResultAvailableEvent(passwordResult.feedbackToUser));"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Investigapptor\");"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"            raise(new InvalidFileFormatEvent());"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        } catch (IOException e) {"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Investigapptor\");"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"            raise(new InvalidFileFormatEvent());"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"     * Sets the password box style to use the default style."},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"    private void setStyleToDefault() {"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        passwordField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"     * Sets the password box style to indicate a wrong password."},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"        ObservableList\u003cString\u003e styleClass \u003d passwordField.getStyleClass();"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"            return;"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":101,"-":2}},{"path":"src/main/java/seedu/investigapptor/commons/core/EventsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.EventBus;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Manages the event dispatching of the app."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class EventsCenter {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static EventsCenter instance;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final EventBus eventBus;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private EventsCenter() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        eventBus \u003d new EventBus();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static EventsCenter getInstance() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            instance \u003d new EventsCenter();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return instance;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void clearSubscribers() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        instance \u003d null;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void registerHandler(Object handler) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        eventBus.register(handler);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Posts an event to the event bus."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        eventBus.post(event);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":43}},{"path":"src/main/java/seedu/investigapptor/commons/core/Version.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.major \u003d major;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public int getMajor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return major;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public int getMinor() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return minor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getPatch() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return patch;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @param versionString version number string"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @return a Version object"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @JsonCreator"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @JsonValue"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (this.major !\u003d other.major) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return this.major - other.major;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (this.minor !\u003d other.minor) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return this.minor - other.minor;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (this.patch !\u003d other.patch) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return this.patch - other.patch;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (this.isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return 0;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (this.isEarlyAccess) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return -1;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return 1;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (!(obj instanceof Version)) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final Version other \u003d (Version) obj;"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return this.compareTo(other) \u003d\u003d 0;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":112}},{"path":"src/main/java/seedu/investigapptor/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    private static final String LOG_FILE \u003d \"investigapptor.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":127}},{"path":"src/main/java/seedu/investigapptor/commons/core/index/Index.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitID":"-"},"content":" *"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":53}},{"path":"src/main/java/seedu/investigapptor/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":69}},{"path":"src/main/java/seedu/investigapptor/commons/util/ConfigUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Config;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ConfigUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(String configFilePath) throws DataConversionException {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveConfig(Config config, String configFilePath) throws IOException {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":19}},{"path":"src/main/java/seedu/investigapptor/commons/util/XmlUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBContext;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.Marshaller;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.Unmarshaller;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Helps with reading from and writing to XML files."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class XmlUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the xml data in the file as an object of the specified type."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *                       Cannot be null."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param classToConvert The class corresponding to the xml data."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *                       Cannot be null."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws FileNotFoundException Thrown if the file is missing."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @SuppressWarnings(\"unchecked\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T getDataFromFile(File file, Class\u003cT\u003e classToConvert)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            throws FileNotFoundException, JAXBException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        requireNonNull(file);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(classToConvert);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!FileUtil.isFileExists(file)) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new FileNotFoundException(\"File not found : \" + file.getAbsolutePath());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Unmarshaller um \u003d context.createUnmarshaller();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return ((T) um.unmarshal(file));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Saves the data in the file in xml format."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *             Cannot be null."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws FileNotFoundException Thrown if the file is missing."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws JAXBException         Thrown if there is an error during converting the data"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *                               into xml and writing to the file."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveDataToFile(File file, T data) throws FileNotFoundException, JAXBException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(file);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(data);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new FileNotFoundException(\"File not found : \" + file.getAbsolutePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Marshaller m \u003d context.createMarshaller();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        m.marshal(data, file);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":69}},{"path":"src/main/java/seedu/investigapptor/commons/util/JsonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class JsonUtil {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(File jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(File jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":58,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        T jsonFile;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(file, classOfObjectToDeserialize);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, String filePath) throws IOException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        serializeObjectToJsonFile(new File(filePath), jsonFile);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            super(vc);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) throws IOException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return Level.class;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":140}},{"path":"src/main/java/seedu/investigapptor/commons/util/AppUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.MainApp;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A container for App specific utility functions"},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class AppUtil {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static Image getImage(String imagePath) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        requireNonNull(imagePath);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void checkArgument(Boolean condition) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!condition) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (!condition) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(errorMessage);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":37}},{"path":"src/main/java/seedu/investigapptor/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":91}},{"path":"src/main/java/seedu/investigapptor/commons/util/CollectionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class CollectionUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /** @see #requireAllNonNull(Collection) */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(items);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns true if every element in a collection are unique by {@link Object#equals(Object)}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        for (Object item : items) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            if (itemAlreadyExists) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":50}},{"path":"src/main/java/seedu/investigapptor/commons/exceptions/DataConversionException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents an error during conversion of data from one format to another"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class DataConversionException extends Exception {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    public DataConversionException(Exception cause) {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"        super(cause);"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":10}},{"path":"src/main/java/seedu/investigapptor/commons/exceptions/DuplicateDataException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals an error caused by duplicate data where there should be none."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public abstract class DuplicateDataException extends IllegalValueException {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    public DuplicateDataException(String message) {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":9}},{"path":"src/main/java/seedu/investigapptor/commons/exceptions/IllegalValueException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class IllegalValueException extends Exception {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitID":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":9,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public IllegalValueException(String message) {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param cause of the main exception"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        super(message, cause);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":20}},{"path":"src/main/java/seedu/investigapptor/commons/exceptions/WrongPasswordException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":" * Represents an error during decryption"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"public class WrongPasswordException extends Exception {"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"    public WrongPasswordException(String message) {"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"}"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""}],"authorContributionMap":{"quentinkhoo":11,"-":1}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/CrimeCasePanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.CrimeCaseCard;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Represents a selection change in the Crime Case List Panel"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"public class CrimeCasePanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    private final CrimeCaseCard newSelection;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public CrimeCasePanelSelectionChangedEvent(CrimeCaseCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    public CrimeCaseCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":25,"-":1}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/PersonPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.PersonCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class PersonPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final PersonCard newSelection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public PersonPanelSelectionChangedEvent(PersonCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public PersonCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":23}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public NewResultAvailableEvent(String message) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":19}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/SwapTabEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Represents swapping of tabs"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"public class SwapTabEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public SwapTabEvent(int targetIndex) {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":19,"-":2}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/ShowHelpRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * An event requesting to view the help page."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ShowHelpRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":13}},{"path":"src/main/java/seedu/investigapptor/ui/PasswordManager.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.ComponentManager;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.InvalidFileFormatEvent;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ValidPasswordEvent;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.Storage;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":" * The manager of the UI component."},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"public class PasswordManager extends ComponentManager implements Ui {"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    private Storage storage;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    private Ui ui;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    private PasswordWindow passwordWindow;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"    private Stage primaryStage;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    public PasswordManager(Storage storage, Ui ui) {"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"        super();"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        this.ui \u003d ui;"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        logger.info(\"Starting Password UI...\");"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"            PasswordWindow pw \u003d new PasswordWindow(primaryStage, storage);"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"            pw.show();"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"            pw.fillInnerParts();"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"        Platform.exit();"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        System.exit(1);"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"        showAlertDialogAndWait(passwordWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"                                               String contentText) {"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        alert.initOwner(owner);"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"        alert.setTitle(title);"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"        alert.setContentText(contentText);"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        alert.showAndWait();"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"    public void stop() {"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        passwordWindow.hide();"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"        passwordWindow.releaseResources();"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"    private void handlePasswordCorrectEvent(ValidPasswordEvent event) {"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        ui.start(primaryStage);"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":"    @Subscribe"},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"    private void handleInvalidStorageFileEvent(InvalidFileFormatEvent event) {"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"        ui.start(primaryStage);"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":94,"-":8}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/ExitAppRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates a request for App termination"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ExitAppRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":12}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/JumpToPersonListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToPersonListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToPersonListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":19}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/JumpToCrimeCaseListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToCrimeCaseListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToCrimeCaseListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":19}},{"path":"src/main/java/seedu/investigapptor/commons/events/BaseEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * The base class for all event classes."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public abstract class BaseEvent {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":9,"author":{"gitID":"-"},"content":"     * All Events should have a clear unambiguous custom toString message so that feedback message creation"},{"lineNumber":10,"author":{"gitID":"-"},"content":"     * stays consistent and reusable."},{"lineNumber":11,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."},{"lineNumber":13,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public abstract String toString();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":15}},{"path":"src/main/java/seedu/investigapptor/commons/events/storage/DataSavingExceptionEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates an exception during a file saving"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DataSavingExceptionEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final Exception exception;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public DataSavingExceptionEvent(Exception exception) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.exception \u003d exception;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return exception.toString();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":19}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/ValidPasswordEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Indicates a request for Starting of Investigapptor"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"public class ValidPasswordEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":13,"-":2}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/InvalidFileFormatEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":" * Indicates a request to start with an empty Investigapptor"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"public class InvalidFileFormatEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":7}},{"path":"src/main/java/seedu/investigapptor/commons/events/model/InvestigapptorChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"/** Indicates the Investigapptor in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"public class InvestigapptorChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"    public final ReadOnlyInvestigapptor data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"    public InvestigapptorChangedEvent(ReadOnlyInvestigapptor data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return \"number of cases \" + data.getCrimeCaseList().size()"},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \", number of persons \" + data.getPersonList().size()"},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \", number of tags \" + data.getTagList().size();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":14}},{"path":"src/main/java/seedu/investigapptor/logic/CommandHistory.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Stores the history of commands executed."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandHistory {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private LinkedList\u003cString\u003e userInputHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public CommandHistory() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        userInputHistory \u003d new LinkedList\u003c\u003e();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Appends {@code userInput} to the list of user input entered."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void add(String userInput) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireNonNull(userInput);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        userInputHistory.add(userInput);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of {@code userInputHistory}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getHistory() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new LinkedList\u003c\u003e(userInputHistory);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":31}},{"path":"src/main/java/seedu/investigapptor/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    /** Returns an unmodifiable view of the filtered clist of investigators */"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    ObservableList\u003cCrimeCase\u003e getFilteredCrimeCaseList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":8,"-":23}},{"path":"src/main/java/seedu/investigapptor/commons/events/model/InvestigapptorBackupEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":5,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":6,"author":{"gitID":"Marcus-cxc"},"content":"/** Indicates the Investigapptor in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"Marcus-cxc"},"content":"public class InvestigapptorBackupEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":9,"author":{"gitID":"Marcus-cxc"},"content":"    public final ReadOnlyInvestigapptor data;"},{"lineNumber":10,"author":{"gitID":"Marcus-cxc"},"content":"    public final String fileName;"},{"lineNumber":11,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":12,"author":{"gitID":"Marcus-cxc"},"content":"    public InvestigapptorBackupEvent(ReadOnlyInvestigapptor data, String fileName) {"},{"lineNumber":13,"author":{"gitID":"Marcus-cxc"},"content":"        this.data \u003d data;"},{"lineNumber":14,"author":{"gitID":"Marcus-cxc"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":15,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":17,"quentinkhoo":3,"-":1}},{"path":"src/main/java/seedu/investigapptor/logic/UndoRedoStack.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.Command;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.UndoableCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Maintains the undo-stack (the stack of commands that can be undone) and the redo-stack (the stack of"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * commands that can be undone)."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UndoRedoStack {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e undoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Stack\u003cUndoableCommand\u003e redoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UndoRedoStack() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        undoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        redoStack \u003d new Stack\u003c\u003e();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Pushes {@code command} onto the undo-stack if it is of type {@code UndoableCommand}. Clears the redo-stack"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * if {@code command} is not of type {@code UndoCommand} or {@code RedoCommand}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void push(Command command) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoCommand) \u0026\u0026 !(command instanceof RedoCommand)) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            redoStack.clear();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (!(command instanceof UndoableCommand)) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        undoStack.add((UndoableCommand) command);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be undone in the stack."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public UndoableCommand popUndo() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoableCommand toUndo \u003d undoStack.pop();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoStack.push(toUndo);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return toUndo;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Pops and returns the next {@code UndoableCommand} to be redone in the stack."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public UndoableCommand popRedo() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        UndoableCommand toRedo \u003d redoStack.pop();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        undoStack.push(toRedo);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return toRedo;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be undone."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public boolean canUndo() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return !undoStack.empty();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns true if there are more commands that can be redone."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean canRedo() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return !redoStack.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!(other instanceof UndoRedoStack)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UndoRedoStack stack \u003d (UndoRedoStack) other;"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return undoStack.equals(stack.undoStack)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                \u0026\u0026 redoStack.equals(stack.redoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":84}},{"path":"src/main/java/seedu/investigapptor/logic/parser/ArgumentMultimap.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns the only value of {@code prefix}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getOnlyValue(Prefix prefix) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return getValue(prefix).orElse(\"\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String getPreamble() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":66}},{"path":"src/main/java/seedu/investigapptor/logic/parser/Parser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.Command;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":13}},{"path":"src/main/java/seedu/investigapptor/logic/parser/Prefix.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitID":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."},{"lineNumber":6,"author":{"gitID":"-"},"content":" */"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":38}},{"path":"src/main/java/seedu/investigapptor/commons/events/ui/FilteredCrimeCaseListChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":" * Indicates a request to change the cases displayed on the calendar panel"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"public class FilteredCrimeCaseListChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"    public final ObservableList\u003cCrimeCase\u003e crimecases;"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"    public FilteredCrimeCaseListChangedEvent(ObservableList\u003cCrimeCase\u003e crimecases) {"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"        this.crimecases \u003d crimecases;"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    public ObservableList\u003cCrimeCase\u003e getFilteredCrimeCaseList() {"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"        return crimecases;"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":21,"quentinkhoo":2,"-":4}},{"path":"src/main/java/seedu/investigapptor/logic/parser/BackupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.BackupCommand;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new BackupCommand command"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class BackupCommandParser implements Parser\u003cBackupCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the BackupCommand"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * and returns an BackupCommand object for execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public BackupCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String fileName \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        if (!fileName.matches(\"^[\\\\w-]*$\")) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new ParseException(\"file name can only contain alphanumeric and underscore\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new BackupCommand(fileName);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":26}},{"path":"src/main/java/seedu/investigapptor/logic/parser/FindCaseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CaseNameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCaseCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCaseCommandParser implements Parser\u003cFindCaseCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCaseCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindCaseCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCaseCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCaseCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new FindCaseCommand(new CaseNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":29}},{"path":"src/main/java/seedu/investigapptor/logic/parser/EditInvestigatorCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_RANK;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand;"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":" * Parses input arguments and creates a new EditInvestigatorCommand object"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"public class EditInvestigatorCommandParser implements Parser\u003cEditInvestigatorCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"     * Parses the given {@code String} of arguments in the context of the EditInvestigatorCommand"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"     * and returns an EditInvestigatorCommand object for execution."},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"    public EditInvestigatorCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_RANK,"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"                        PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"                    EditInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"            ParserUtil.parseRank(argMultimap.getValue(PREFIX_RANK)).ifPresent(editPersonDescriptor::setRank);"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"            throw new ParseException(EditInvestigatorCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"        return new EditInvestigatorCommand(index, editPersonDescriptor);"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"        assert tags !\u003d null;"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"            return Optional.empty();"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":61,"pkaijun":2,"quentinkhoo":11,"-":9}},{"path":"src/main/java/seedu/investigapptor/logic/parser/FindInvestTagsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestTagsCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":" * Parses input arguments and creates a new FindInvestTagsCommand object"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"public class FindInvestTagsCommandParser implements Parser\u003cFindInvestTagsCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"     * Parses the given {@code String} of arguments in the context of the FindInvestTagsCommandParser"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"     * and returns an FindInvestTagsCommandParser object for execution."},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"    public FindInvestTagsCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindInvestTagsCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        String[] nameKeywords \u003d trimmedArgs.toLowerCase().split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        return new FindInvestTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":22,"-":8,"quentinkhoo":2}},{"path":"src/main/java/seedu/investigapptor/logic/parser/exceptions/ParseException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents a parse error encountered by a parser."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ParseException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public ParseException(String message) {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ParseException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":15}},{"path":"src/main/java/seedu/investigapptor/logic/parser/CloseCaseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":2,"author":{"gitID":"pkaijun"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":3,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":4,"author":{"gitID":"pkaijun"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.CloseCaseCommand;"},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":" * Parses input arguments and creates a new CloseCaseCommandParser object"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"public class CloseCaseCommandParser implements Parser\u003cCloseCaseCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"     * Parses the given {@code String} of arguments in the context of the CloseCaseCommand"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"     * and returns an CloseCaseCommand object for execution."},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"    public CloseCaseCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"            return new CloseCaseCommand(index);"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"                    CloseCaseCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":30}},{"path":"src/main/java/seedu/investigapptor/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions for person */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_RANK \u003d new Prefix(\"r/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /* Prefix definitions for crimecase */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_INVESTIGATOR \u003d new Prefix(\"i/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"s/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"st/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    /* Prefix definitions for password */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":21}},{"path":"src/main/java/seedu/investigapptor/logic/parser/DeleteInvestigatorCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.DeleteInvestigatorCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":" * Parses input arguments and creates a new DeleteInvestigatorCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"public class DeleteInvestigatorCommandParser implements Parser\u003cDeleteInvestigatorCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteInvestigatorCommand"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"     * and returns an DeleteInvestigatorCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"    public DeleteInvestigatorCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"            return new DeleteInvestigatorCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":8,"quentinkhoo":5,"-":17}},{"path":"src/main/java/seedu/investigapptor/logic/parser/DeleteCaseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.DeleteCaseCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCaseCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class DeleteCaseCommandParser implements Parser\u003cDeleteCaseCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCaseCommand"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * and returns an DeleteCaseCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public DeleteCaseCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            return new DeleteCaseCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCaseCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":25}},{"path":"src/main/java/seedu/investigapptor/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e oneBasedIndex} into an {@code Optional\u003cIndex\u003e} if {@code oneBasedIndex}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * is present. See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static Optional\u003cIndex\u003e parseIndex(Optional\u003cString\u003e oneBasedIndex) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(oneBasedIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return oneBasedIndex.isPresent() ? Optional.of(parseIndex(oneBasedIndex.get())) : Optional.empty();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"quentinkhoo"},"content":"     * Parses a {@code String investigapptor} into an {@code Address}."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"quentinkhoo"},"content":"     * @throws IllegalValueException if the given {@code investigapptor} is invalid."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"     * Parses a {@code Optional\u003cString\u003e investigapptor} into an {@code Optional\u003cAddress\u003e}"},{"lineNumber":127,"author":{"gitID":"quentinkhoo"},"content":"     * if {@code investigapptor} is present."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code CaseName}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static CaseName parseCaseName(String name) throws IllegalValueException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        String trimmedCaseName \u003d name.trim();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (!CaseName.isValidCaseName(trimmedCaseName)) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(CaseName.MESSAGE_CASE_NAME_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return new CaseName(trimmedCaseName);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cCaseName\u003e} if {@code name} is present."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static Optional\u003cCaseName\u003e parseCaseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseCaseName(name.get())) : Optional.empty();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * Parses a {@code String investigapptor} into an {@code Description}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"quentinkhoo"},"content":"     * @throws IllegalValueException if the given {@code investigapptor} is invalid."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static Description parseDescription(String description) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e investigapptor} into an {@code Optional\u003cStartDa\u003e}"},{"lineNumber":200,"author":{"gitID":"quentinkhoo"},"content":"     * if {@code investigapptor} is present."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        return description.isPresent() ? Optional.of(parseDescription(description.get())) : Optional.empty();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Parses a {@code String investigapptor} into an {@code StartDate}."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":212,"author":{"gitID":"quentinkhoo"},"content":"     * @throws IllegalValueException if the given {@code investigapptor} is invalid."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public static StartDate parseStartDate(String startDate) throws IllegalValueException {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        requireNonNull(startDate);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        String trimmedStartDate \u003d startDate.trim();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        if (!StartDate.isValidDate(trimmedStartDate)) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        return new StartDate(trimmedStartDate);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e investigapptor} into an {@code Optional\u003cStartDate\u003e}"},{"lineNumber":225,"author":{"gitID":"quentinkhoo"},"content":"     * if {@code investigapptor} is present."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public static Optional\u003cStartDate\u003e parseStartDate(Optional\u003cString\u003e startDate) throws IllegalValueException {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        requireNonNull(startDate);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return startDate.isPresent() ? Optional.of(parseStartDate(startDate.get())) : Optional.empty();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Parses a {@code String rank} into a {@code Rank}."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code rank} is invalid."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public static Rank parseRank(String rank) throws IllegalValueException {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        requireNonNull(rank);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        String trimmedRank \u003d rank.trim();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        if (!Rank.isValidRank(trimmedRank)) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Rank.MESSAGE_RANK_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        return new Rank(trimmedRank);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public static Optional\u003cRank\u003e parseRank(Optional\u003cString\u003e rank) throws IllegalValueException {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        requireNonNull(rank);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        return rank.isPresent() ? Optional.of(parseRank(rank.get())) : Optional.empty();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":259,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":283,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":284,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"quentinkhoo"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":286,"author":{"gitID":"quentinkhoo"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":287,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":288,"author":{"gitID":"quentinkhoo"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":289,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"quentinkhoo"},"content":"    public static Password parsePassword(String password) throws InvalidPasswordException {"},{"lineNumber":291,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(password);"},{"lineNumber":292,"author":{"gitID":"quentinkhoo"},"content":"        if (!Password.isValidPassword(password)) {"},{"lineNumber":293,"author":{"gitID":"quentinkhoo"},"content":"            throw new InvalidPasswordException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":294,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"quentinkhoo"},"content":"        return new Password(password);"},{"lineNumber":296,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":35,"-":263}},{"path":"src/main/java/seedu/investigapptor/logic/parser/AddCaseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_INVESTIGATOR;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddCaseCommand;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCaseCommand object"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddCaseCommandParser implements Parser\u003cAddCaseCommand\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCaseCommand"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * and returns an AddCaseCommand object for execution."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public AddCaseCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_INVESTIGATOR,"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        PREFIX_STARTDATE, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_INVESTIGATOR, PREFIX_STARTDATE)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            CaseName name \u003d ParserUtil.parseCaseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Index investigatorIndex \u003d ParserUtil.parseIndex(argMultimap.getOnlyValue(PREFIX_INVESTIGATOR));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            StartDate startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return new AddCaseCommand(name, description, investigatorIndex, startDate, tagList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":57}},{"path":"src/main/java/seedu/investigapptor/logic/parser/InvestigapptorParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddCaseCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddInvestigatorCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.BackupCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.CloseCaseCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.DeleteCaseCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.DeleteInvestigatorCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditInvestigatorCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseTagsCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCloseCaseCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestTagsCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestigatorCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindOpenCaseCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListCaseCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.ListInvestigatorCaseCommand;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.ListInvestigatorCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.RemovePasswordCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.SelectCaseCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.SelectInvestigatorCommand;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.SetPasswordCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.UndoCommand;"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"public class InvestigapptorParser {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case AddCaseCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case AddCaseCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new AddCaseCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case AddInvestigatorCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case AddInvestigatorCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new AddInvestigatorCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case EditCaseCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case EditCaseCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new EditCaseCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"        case EditInvestigatorCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"        case EditInvestigatorCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"            return new EditInvestigatorCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case SelectCaseCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case SelectCaseCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new SelectCaseCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"        case SelectInvestigatorCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"        case SelectInvestigatorCommand.COMMAND_ALIAS:"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"            return new SelectInvestigatorCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case DeleteCaseCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case DeleteCaseCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new DeleteCaseCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"        case DeleteInvestigatorCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":"        case DeleteInvestigatorCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":"            return new DeleteInvestigatorCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case CloseCaseCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case CloseCaseCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new CloseCaseCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case FindCaseCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case FindCaseCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new FindCaseCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case FindInvestigatorCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case FindInvestigatorCommand.COMMAND_ALIAS:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new FindInvestigatorCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case FindInvestTagsCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case FindInvestTagsCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new FindInvestTagsCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case FindCaseTagsCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case FindCaseTagsCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new FindCaseTagsCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case FindCloseCaseCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        case FindCloseCaseCommand.COMMAND_ALIAS:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new FindCloseCaseCommand();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        case FindOpenCaseCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        case FindOpenCaseCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new FindOpenCaseCommand();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"quentinkhoo"},"content":"        case ListInvestigatorCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":"        case ListInvestigatorCommand.COMMAND_ALIAS:"},{"lineNumber":132,"author":{"gitID":"quentinkhoo"},"content":"            return new ListInvestigatorCommand();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"quentinkhoo"},"content":"        case ListCaseCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"quentinkhoo"},"content":"        case ListCaseCommand.COMMAND_ALIAS:"},{"lineNumber":136,"author":{"gitID":"quentinkhoo"},"content":"            return new ListCaseCommand();"},{"lineNumber":137,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":"        case SetPasswordCommand.COMMAND_WORD:"},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":"        case SetPasswordCommand.COMMAND_ALIAS:"},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"            return new SetPasswordCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":142,"author":{"gitID":"quentinkhoo"},"content":"        case RemovePasswordCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"quentinkhoo"},"content":"        case RemovePasswordCommand.COMMAND_ALIAS:"},{"lineNumber":144,"author":{"gitID":"quentinkhoo"},"content":"            return new RemovePasswordCommand();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        case ListInvestigatorCaseCommand.COMMAND_WORD:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        case ListInvestigatorCaseCommand.COMMAND_ALIAS:"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return new ListInvestigatorCaseCommandParser().parse(arguments);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":151,"author":{"gitID":"quentinkhoo"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":155,"author":{"gitID":"quentinkhoo"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":159,"author":{"gitID":"quentinkhoo"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":163,"author":{"gitID":"quentinkhoo"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":167,"author":{"gitID":"quentinkhoo"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        case BackupCommand.COMMAND_WORD:"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        case BackupCommand.COMMAND_ALIAS:"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return new BackupCommandParser().parse(arguments);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":9,"quentinkhoo":29,"-":141}},{"path":"src/main/java/seedu/investigapptor/logic/parser/ArgumentTokenizer.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":8,"author":{"gitID":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":12,"author":{"gitID":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (Prefix prefix : prefixes) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            positions.addAll(findPrefixPositions(argsString, prefix));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * such occurrence can be found."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * {@code argsString}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // Sort by start position"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return argMultimap;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return value.trim();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        private int startPosition;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        int getStartPosition() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return this.startPosition;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return this.prefix;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":149}},{"path":"src/main/java/seedu/investigapptor/logic/parser/FindCaseTagsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindCaseTagsCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":" * Parses input arguments and creates a new FindCaseTagsCommand object"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"public class FindCaseTagsCommandParser implements Parser\u003cFindCaseTagsCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"     * Parses the given {@code String} of arguments in the context of the FindInvestTagsCommandParser"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"     * and returns an FindInvestTagsCommandParser object for execution."},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"    public FindCaseTagsCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCaseTagsCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"        String[] nameKeywords \u003d trimmedArgs.toLowerCase().split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        return new FindCaseTagsCommand(new TagContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":22,"-":8,"quentinkhoo":2}},{"path":"src/main/java/seedu/investigapptor/logic/parser/AddInvestigatorCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_RANK;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.AddInvestigatorCommand;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":" * Parses input arguments and creates a new AddInvestigatorCommand object"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"public class AddInvestigatorCommandParser implements Parser\u003cAddInvestigatorCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"     * Parses the given {@code String} of arguments in the context of the AddInvestigatorCommand"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"     * and returns an AddInvestigatorCommand object for execution."},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"    public AddInvestigatorCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"                        PREFIX_ADDRESS, PREFIX_RANK, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE,"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"                PREFIX_EMAIL, PREFIX_RANK) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"                    AddInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"            Rank rank \u003d ParserUtil.parseRank(argMultimap.getValue(PREFIX_RANK)).get();"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"            Investigator investigator \u003d new Investigator(name, phone, email, address, rank, tagList);"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"            return new AddInvestigatorCommand(investigator);"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":46,"quentinkhoo":14,"-":9}},{"path":"src/main/java/seedu/investigapptor/logic/parser/SelectInvestigatorCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"import seedu.investigapptor.logic.commands.SelectInvestigatorCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":" * Parses input arguments and creates a new SelectInvestigatorCommand object"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"public class SelectInvestigatorCommandParser implements Parser\u003cSelectInvestigatorCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectInvestigatorCommand"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"     * and returns an SelectInvestigatorCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"    public SelectInvestigatorCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"            return new SelectInvestigatorCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":8,"quentinkhoo":5,"-":16}},{"path":"src/main/java/seedu/investigapptor/logic/parser/ListInvestigatorCaseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.ListInvestigatorCaseCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":" * Parses input arguments and creates a new DeleteInvestigatorCommand object"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ListInvestigatorCaseCommandParser implements Parser\u003cListInvestigatorCaseCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteInvestigatorCommand"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * and returns an ListInvestigatorCaseCommand object for execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public ListInvestigatorCaseCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            return new ListInvestigatorCaseCommand(index);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListInvestigatorCaseCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":2,"quentinkhoo":5,"-":22}},{"path":"src/main/java/seedu/investigapptor/logic/parser/FindInvestigatorCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.FindInvestigatorCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindInvestigatorCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindInvestigatorCommandParser implements Parser\u003cFindInvestigatorCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindInvestigatorCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindInvestigatorCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindInvestigatorCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindInvestigatorCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new FindInvestigatorCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":29}},{"path":"src/main/java/seedu/investigapptor/logic/ListElementPointer.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Has a cursor that points to an element in the list, and is able to iterate through the list."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * This is different from {@code ListIterator}, which has a cursor that points in between elements."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * {@code previous()}, the same element is returned on both calls."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ListElementPointer {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e list;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private int index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * The cursor points to the last element in {@code list}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ListElementPointer(List\u003cString\u003e list) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.list \u003d new ArrayList\u003c\u003e(list);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        index \u003d this.list.size() - 1;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Appends {@code element} to the end of the list."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void add(String element) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        list.add(element);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public boolean hasNext() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        int nextIndex \u003d index + 1;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return isWithinBounds(nextIndex);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean hasPrevious() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        int previousIndex \u003d index - 1;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return isWithinBounds(previousIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean hasCurrent() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return isWithinBounds(index);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private boolean isWithinBounds(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns the next element in the list and advances the cursor position."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more next element in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String next() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (!hasNext()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return list.get(++index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns the previous element in the list and moves the cursor position backwards."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more previous element in the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public String previous() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!hasPrevious()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return list.get(--index);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns the current element in the list."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if the list is empty."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public String current() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!hasCurrent()) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return list.get(index);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!(other instanceof ListElementPointer)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ListElementPointer iterator \u003d (ListElementPointer) other;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":110}},{"path":"src/main/java/seedu/investigapptor/logic/parser/SetPasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.SetPasswordCommand;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":" * Parses input arguments and creates a new PasswordCommand object"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"public class SetPasswordCommandParser implements Parser\u003cSetPasswordCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"     * Parses the given {@code String} of arguments in the context of the PasswordCommand"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"     * and returns an PasswordCommand object for execution."},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public SetPasswordCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PASSWORD);"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD)"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"            String inputPassword \u003d args.substring(4);"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"            Password newPassword \u003d ParserUtil.parsePassword(inputPassword);"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"            return new SetPasswordCommand(newPassword);"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"            throw new ParseException(ive.getMessage());"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":46,"-":3}},{"path":"src/main/java/seedu/investigapptor/logic/commands/BackupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":5,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Marcus-cxc"},"content":" * Creates a xml copy of the current state of the investigapptor"},{"lineNumber":7,"author":{"gitID":"Marcus-cxc"},"content":" * The name of the xml is given by the user"},{"lineNumber":8,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Marcus-cxc"},"content":"public class BackupCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":11,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_WORD \u003d \"backup\";"},{"lineNumber":12,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_ALIAS \u003d \"bu\";"},{"lineNumber":13,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":14,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create a backup of the current state \""},{"lineNumber":15,"author":{"gitID":"Marcus-cxc"},"content":"            + \"The backup will be saved as the given name\\n\""},{"lineNumber":16,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Example: \" + COMMAND_WORD + \" February\";"},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_SUCCESS \u003d \" backup has been created\";"},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":"    private final String fileName;"},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":"    public BackupCommand(String fileName) {"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(fileName);"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(fileName);"},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"        model.backUpInvestigapptor(fileName);"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"        return new CommandResult(fileName + MESSAGE_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"                || (other instanceof BackupCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 this.fileName.equals(((BackupCommand) other).fileName)); // state check"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":37,"-":3}},{"path":"src/main/java/seedu/investigapptor/logic/parser/SelectCaseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.SelectCaseCommand;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":10,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":" * Parses input arguments and creates a new SelectCaseCommand object"},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":"public class SelectCaseCommandParser implements Parser\u003cSelectCaseCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCaseCommand"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"     * and returns an SelectCaseCommand object for execution."},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"    public SelectCaseCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"            return new SelectCaseCommand(index);"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCaseCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":21,"quentinkhoo":5,"-":3}},{"path":"src/main/java/seedu/investigapptor/logic/commands/ListCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_CASES;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":" * Lists all investigators in the investigapptor book to the user."},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"public class ListCaseCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"listcases\";"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"lc\";"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all cases\";"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"     * Swap tabs to listing all cases in the investigapptor book to the user."},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"        model.updateFilteredCrimeCaseList(PREDICATE_SHOW_ALL_CASES);"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":26,"-":1}},{"path":"src/main/java/seedu/investigapptor/logic/parser/EditCaseCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_INVESTIGATOR;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.logic.commands.EditCaseCommand.EditCrimeCaseDescriptor;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCrimeCaseCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class EditCaseCommandParser implements Parser\u003cEditCaseCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCrimeCaseCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an EditCrimeCaseCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditCaseCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_INVESTIGATOR,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                        PREFIX_STARTDATE, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Index caseIndex;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            caseIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                    EditCaseCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditCrimeCaseDescriptor editCrimeCaseDescriptor \u003d new EditCrimeCaseDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseCaseName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    .ifPresent(editCrimeCaseDescriptor::setCaseName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION))"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                    .ifPresent(editCrimeCaseDescriptor::setDescription);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INVESTIGATOR))"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    .ifPresent(editCrimeCaseDescriptor::setCurrentInvestigatorIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE))"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    .ifPresent(editCrimeCaseDescriptor::setStartDate);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCrimeCaseDescriptor::setTags);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!editCrimeCaseDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCaseCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return new EditCaseCommand(caseIndex, editCrimeCaseDescriptor);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":1,"quentinkhoo":8,"-":77}},{"path":"src/main/java/seedu/investigapptor/logic/commands/FindByStatusCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StatusContainsKeywordsPredicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":" * Finds and lists all cases in investigapptor according to the status predicate specified"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"public class FindByStatusCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"    private final StatusContainsKeywordsPredicate predicate;"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    public FindByStatusCommand(String caseStatus) {"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(caseStatus);"},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"        this.predicate \u003d new StatusContainsKeywordsPredicate(keywords);"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"        model.updateFilteredCrimeCaseList(predicate);"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));   // List results toggles to case tab"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"        return new CommandResult(getMessageForCrimeListShownSummary(model.getFilteredCrimeCaseList().size()));"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"                || (other instanceof FindByStatusCommand // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"                \u0026\u0026 this.predicate.equals(((FindByStatusCommand) other).predicate)); // state check"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":26,"-":7,"quentinkhoo":2}},{"path":"src/main/java/seedu/investigapptor/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":30}},{"path":"src/main/java/seedu/investigapptor/logic/commands/FindOpenCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.Status.CASE_OPEN;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":" * Finds and lists all cases in investigapptor whose status are opened"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":"public class FindOpenCaseCommand extends FindByStatusCommand {"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_WORD \u003d \"findopencases\";"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_ALIAS \u003d \"foc\";"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds cases whose status is \""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"            + CASE_OPEN + \".\\n\""},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    public FindOpenCaseCommand() {"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"        super(CASE_OPEN);"},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":16,"-":4}},{"path":"src/main/java/seedu/investigapptor/logic/commands/EditInvestigatorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_RANK;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":" * Edits the details of an existing person in the investigapptor book."},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"public class EditInvestigatorCommand extends UndoableCommand {"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_WORD \u003d \"editinvestigator\";"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_ALIAS \u003d \"ei\";"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the investigator identified \""},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"            + \"by the index number used in the last listing of investigators. \""},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"            + \"[\" + PREFIX_RANK + \"RANK] \""},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Investigator: %1$s\";"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This investigator already exists in investigapptor.\";"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"    private final Index index;"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"    private Person personToEdit;"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"    private Person editedPerson;"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"     * @param index                of the person in the filtered person list to edit"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"    public EditInvestigatorCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(index);"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"        this.index \u003d index;"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"     * Creates investigator and returns as {@code Person} with the details of {@code personToEdit}"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"        if (personToEdit instanceof Investigator) {"},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"            Rank updatedRank \u003d editPersonDescriptor.getRank().orElse((((Investigator) personToEdit).getRank()));"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"            return new Investigator(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRank, updatedTags, ("},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"                    (Investigator) personToEdit).getCaseListHashed());"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":112,"author":{"gitID":"quentinkhoo"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":121,"author":{"gitID":"pkaijun"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":136,"author":{"gitID":"pkaijun"},"content":"        if (!(other instanceof EditInvestigatorCommand)) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":141,"author":{"gitID":"pkaijun"},"content":"        EditInvestigatorCommand e \u003d (EditInvestigatorCommand) other;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Rank rank;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":165,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setRank(toCopy.rank);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":177,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.rank,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                    this.tags);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cRank\u003e getRank() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(rank);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void setRank(Rank rank) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.rank \u003d rank;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":225,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":226,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":227,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":234,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":235,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getRank().equals(e.getRank())"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":67,"pkaijun":3,"quentinkhoo":20,"-":173}},{"path":"src/main/java/seedu/investigapptor/logic/commands/ListInvestigatorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":" * Lists all investigators in the investigapptor book to the user."},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"public class ListInvestigatorCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"listinvestigators\";"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"li\";"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all investigators\";"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"     * Swap tabs to listing all investigators in the investigapptor book to the user."},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(0));"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":27,"-":2}},{"path":"src/main/java/seedu/investigapptor/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":" * Clears the investigapptor book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Investigapptor has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        model.resetData(new Investigapptor());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":6,"-":17}},{"path":"src/main/java/seedu/investigapptor/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of cases."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForCrimeCaseListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_CASES_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of cases."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return summary message for cases displayed"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static String getMessageForCrimeListShownSummary(int displaySize) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_CASES_LISTED_OVERVIEW, displaySize);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":6,"-":56}},{"path":"src/main/java/seedu/investigapptor/logic/commands/CloseCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_CASES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.Status.CASE_CLOSE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.EndDate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Status;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":" * Update the status of a case from open to close and update the EndDate field"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"public class CloseCaseCommand extends UndoableCommand {"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_WORD \u003d \"close\";"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_ALIAS \u003d \"cl\";"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the status from open to close \""},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"            + \"and updates the end date to today\u0027s date.\\n\""},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_CLOSE_CASE_SUCCESS \u003d \"Case status updated: %1$s\";"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_DUPLICATE_CASE \u003d \"This case already exists in investigapptor.\";"},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_CASE_ALREADY_CLOSE \u003d \"Case is already closed.\";"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":44,"author":{"gitID":"pkaijun"},"content":"    private final Index index;"},{"lineNumber":45,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":46,"author":{"gitID":"pkaijun"},"content":"    private CrimeCase caseToClose;"},{"lineNumber":47,"author":{"gitID":"pkaijun"},"content":"    private CrimeCase closedCase;"},{"lineNumber":48,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":49,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":"     * @param index of the crimecase in the filtered crimecase list to close"},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"pkaijun"},"content":"    public CloseCaseCommand(Index index) {"},{"lineNumber":53,"author":{"gitID":"pkaijun"},"content":"        requireNonNull(index);"},{"lineNumber":54,"author":{"gitID":"pkaijun"},"content":"        this.index \u003d index;"},{"lineNumber":55,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":57,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"pkaijun"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"pkaijun"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"pkaijun"},"content":"            model.updateCrimeCase(caseToClose, closedCase);"},{"lineNumber":61,"author":{"gitID":"pkaijun"},"content":"        } catch (DuplicateCrimeCaseException dce) {"},{"lineNumber":62,"author":{"gitID":"pkaijun"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CASE);"},{"lineNumber":63,"author":{"gitID":"pkaijun"},"content":"        } catch (CrimeCaseNotFoundException cnfe) {"},{"lineNumber":64,"author":{"gitID":"pkaijun"},"content":"            throw new AssertionError(\"The target case cannot be missing\");"},{"lineNumber":65,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"pkaijun"},"content":"        model.updateFilteredCrimeCaseList(PREDICATE_SHOW_ALL_CASES);"},{"lineNumber":67,"author":{"gitID":"pkaijun"},"content":"        return new CommandResult(String.format(MESSAGE_CLOSE_CASE_SUCCESS, closedCase.getStatus()));"},{"lineNumber":68,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":70,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"pkaijun"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"pkaijun"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));   // List results toggles to case tab"},{"lineNumber":73,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"        List\u003cCrimeCase\u003e lastShownList \u003d model.getFilteredCrimeCaseList();"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"        caseToClose \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"        if (caseToClose.getStatus().toString().equals(CASE_CLOSE)) {"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"            throw new CommandException(MESSAGE_CASE_ALREADY_CLOSE);"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":"        closedCase \u003d createClosedCase(caseToClose);"},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"pkaijun"},"content":"     * Creates and returns a {@code CrimeCase} with the details of {@code caseToEdit}"},{"lineNumber":91,"author":{"gitID":"pkaijun"},"content":"     * Updates status to \"close\" with the other fields remaining the same"},{"lineNumber":92,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"pkaijun"},"content":"    private static CrimeCase createClosedCase(CrimeCase caseToClose) {"},{"lineNumber":94,"author":{"gitID":"pkaijun"},"content":"        assert caseToClose !\u003d null;"},{"lineNumber":95,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":96,"author":{"gitID":"pkaijun"},"content":"        CaseName name \u003d caseToClose.getCaseName();"},{"lineNumber":97,"author":{"gitID":"pkaijun"},"content":"        Description desc \u003d caseToClose.getDescription();"},{"lineNumber":98,"author":{"gitID":"pkaijun"},"content":"        StartDate startDate \u003d caseToClose.getStartDate();"},{"lineNumber":99,"author":{"gitID":"pkaijun"},"content":"        EndDate endDate \u003d new EndDate(EndDate.getTodayDate());"},{"lineNumber":100,"author":{"gitID":"pkaijun"},"content":"        Set\u003cTag\u003e tags \u003d caseToClose.getTags();"},{"lineNumber":101,"author":{"gitID":"pkaijun"},"content":"        Investigator investigator \u003d caseToClose.getCurrentInvestigator();"},{"lineNumber":102,"author":{"gitID":"pkaijun"},"content":"        Status status \u003d new Status(CASE_CLOSE);"},{"lineNumber":103,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":104,"author":{"gitID":"pkaijun"},"content":"        return new CrimeCase(name, desc, investigator, startDate, endDate, status, tags);"},{"lineNumber":105,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":81,"quentinkhoo":7,"-":18}},{"path":"src/main/java/seedu/investigapptor/logic/commands/SelectInvestigatorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToPersonListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" * Selects a person identified using it\u0027s last displayed index from the investigapptor book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"public class SelectInvestigatorCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"selectinvestigator\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"si\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"            + \": Selects the investigator identified by the index number used in the last listing of investigators.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Investigator: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"    public SelectInvestigatorCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToPersonListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"pkaijun"},"content":"                || (other instanceof SelectInvestigatorCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"pkaijun"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectInvestigatorCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":7,"quentinkhoo":8,"-":38}},{"path":"src/main/java/seedu/investigapptor/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":20}},{"path":"src/main/java/seedu/investigapptor/logic/commands/ListInvestigatorCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseContainsInvestigatorPredicate;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":15,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":16,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":" * Lists all investigators in the investigapptor book to the user."},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":"public class ListInvestigatorCaseCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_WORD \u003d \"listinvestigatorcases\";"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_ALIAS \u003d \"lic\";"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cases of the selected investigator \""},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$s\";"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"    private Investigator investigator;"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"    private CaseContainsInvestigatorPredicate predicate;"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"    public ListInvestigatorCaseCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"        if (targetIndex !\u003d null) {"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"            investigator \u003d (Investigator) lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"            requireNonNull(investigator);"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"            predicate \u003d new CaseContainsInvestigatorPredicate(investigator.hashCode());"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"        model.updateFilteredCrimeCaseList(predicate);"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"        return new CommandResult(getMessageForCrimeCaseListShownSummary(model.getFilteredCrimeCaseList().size()));"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"                || (other instanceof ListInvestigatorCaseCommand // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 this.predicate.equals(((ListInvestigatorCaseCommand) other).predicate)); // state check"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":48,"quentinkhoo":6,"-":8}},{"path":"src/main/java/seedu/investigapptor/logic/commands/SetPasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Password.MESSAGE_PASSWORD_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":" * Adds a password to the investigapptor book."},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"public class SetPasswordCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"setpassword\";"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"sp\";"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates/Updates password for the Investigapptor.\""},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"            + \"Parameters: \" + PREFIX_PASSWORD + \"password\";"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Password updated\";"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(SetPasswordCommand.class);"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"    private Password password;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"     * Creates an PasswordCommand to add the specified {@code CrimeCase}"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    public SetPasswordCommand(Password password) {"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(password);"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        this.password \u003d password;"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(model);"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"            model.updatePassword(password);"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Password has been updated!\");"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        } catch (InvalidPasswordException ipe) {"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"            throw new CommandException(MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"            return true;"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"        if (!(other instanceof SetPasswordCommand)) {"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        // state check"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"        return Objects.equals(password, ((SetPasswordCommand) other).password);"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":68,"-":2}},{"path":"src/main/java/seedu/investigapptor/logic/commands/exceptions/CommandException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CommandException extends Exception {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"    public CommandException(String message) {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":9}},{"path":"src/main/java/seedu/investigapptor/logic/commands/exceptions/NoPasswordException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":" * disallows removing of password from application if there is no password"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"public class NoPasswordException extends Exception {"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"    public NoPasswordException(String message) {"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":10,"-":1}},{"path":"src/main/java/seedu/investigapptor/logic/commands/exceptions/InvalidPasswordException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * disallows user from updating password due to invalid password type"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"public class InvalidPasswordException extends IllegalValueException {"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"    public InvalidPasswordException(String message) {"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":12,"-":1}},{"path":"src/main/java/seedu/investigapptor/logic/commands/FindCloseCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.Status.CASE_CLOSE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":" * Finds and lists all cases in investigapptor whose status are closed"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":"public class FindCloseCaseCommand extends FindByStatusCommand {"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_WORD \u003d \"findclosecases\";"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_ALIAS \u003d \"fcc\";"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds cases whose status is \""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"            + CASE_CLOSE + \".\\n\""},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    public FindCloseCaseCommand() {"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"        super(CASE_CLOSE);"},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":16,"-":4}},{"path":"src/main/java/seedu/investigapptor/logic/commands/DeleteCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":" * Deletes a case identified using it\u0027s last displayed index from the investigapptor book."},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"public class DeleteCaseCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_WORD \u003d \"deletecase\";"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_ALIAS \u003d \"dc\";"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"            + \": Deletes the case identified by the index number used in the last listing of cases.\\n\""},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_DELETE_CASE_SUCCESS \u003d \"Deleted Case: %1$s\";"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    private CrimeCase caseToDelete;"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    public DeleteCaseCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(caseToDelete);"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"            model.deleteCrimeCase(caseToDelete);"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"            EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"        } catch (CrimeCaseNotFoundException pnfe) {"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"            throw new AssertionError(\"The target case cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CASE_SUCCESS, caseToDelete));"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"        List\u003cCrimeCase\u003e lastShownList \u003d model.getFilteredCrimeCaseList();"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"        caseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof DeleteCaseCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCaseCommand) other).targetIndex) // state check"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 Objects.equals(this.caseToDelete, ((DeleteCaseCommand) other).caseToDelete));"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":57,"quentinkhoo":7,"-":7}},{"path":"src/main/java/seedu/investigapptor/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"hist\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":34}},{"path":"src/main/java/seedu/investigapptor/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_CASES;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    private ReadOnlyInvestigapptor previousInvestigapptor;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"     * Stores the current state of {@code model#investigapptor}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    private void saveInvestigapptorSnapshot() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"        this.previousInvestigapptor \u003d new Investigapptor(model.getInvestigapptor());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"     * Reverts the Investigapptor to the state before this command"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        requireAllNonNull(model, previousInvestigapptor);"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        model.resetData(previousInvestigapptor);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        model.updateFilteredCrimeCaseList(PREDICATE_SHOW_ALL_CASES);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        model.updateFilteredCrimeCaseList(PREDICATE_SHOW_ALL_CASES);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        saveInvestigapptorSnapshot();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":14,"-":54}},{"path":"src/main/java/seedu/investigapptor/logic/commands/AddInvestigatorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_RANK;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":" * Adds a person to the investigapptor book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddInvestigatorCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"addinvestigator\";"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"ai\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Registers an investigator to investigapptor. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_RANK + \"RANK \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_RANK + \"3 \""},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"            + PREFIX_TAG + \"teamA \""},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"            + PREFIX_TAG + \"new\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New investigator registered: %1$s\";"},{"lineNumber":43,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Investigator already exists in the investigapptor\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Creates an AddInvestigatorCommand to add the specified {@code Person}"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddInvestigatorCommand(Person person) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new SwapTabEvent(0));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof AddInvestigatorCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddInvestigatorCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"pkaijun":5,"quentinkhoo":12,"-":57}},{"path":"src/main/java/seedu/investigapptor/logic/commands/EditCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_INVESTIGATOR;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.Model.PREDICATE_SHOW_ALL_CASES;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":" * Edits the details of an existing case in the investigapptor book."},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"public class EditCaseCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_WORD \u003d \"editcase\";"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_ALIAS \u003d \"ec\";"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the case identified \""},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"            + \"by the index number used in the last listing of crimeCases. \""},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"            + \"[\" + PREFIX_INVESTIGATOR + \"INVESTIGATOR INDEX (must be a positive integer)] \""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"            + \"[\" + PREFIX_STARTDATE + \"STARTDATE] \""},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_DESCRIPTION + \"91234567 \""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_INVESTIGATOR + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_EDIT_CASE_SUCCESS \u003d \"Edited Case: %1$s\";"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_DUPLICATE_CASE \u003d \"This case already exists in investigapptor.\";"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"    private final Index caseIndex;"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"    private final EditCrimeCaseDescriptor editCrimeCaseDescriptor;"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"    private CrimeCase crimeCaseToEdit;"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"    private CrimeCase editedCrimeCase;"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"     * @param caseIndex of the case in the filtered case list to edit"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"     * @param editCrimeCaseDescriptor details to edit the case with"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"    public EditCaseCommand(Index caseIndex, EditCrimeCaseDescriptor editCrimeCaseDescriptor) {"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(caseIndex);"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(editCrimeCaseDescriptor);"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        this.caseIndex \u003d caseIndex;"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        this.editCrimeCaseDescriptor \u003d new EditCrimeCaseDescriptor(editCrimeCaseDescriptor);"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"            model.updateCrimeCase(crimeCaseToEdit, editedCrimeCase);"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"            EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"        } catch (DuplicateCrimeCaseException dpe) {"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CASE);"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"        } catch (CrimeCaseNotFoundException pnfe) {"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"            throw new AssertionError(\"The target case cannot be missing\");"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"        model.updateFilteredCrimeCaseList(PREDICATE_SHOW_ALL_CASES);"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CASE_SUCCESS, editedCrimeCase));"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"        List\u003cCrimeCase\u003e lastShownCrimeCaseList \u003d model.getFilteredCrimeCaseList();"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"        Index investigatorIndex \u003d editCrimeCaseDescriptor.getCurrentInvestigatorIndex()"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"                .orElse(null);"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"        if (caseIndex.getZeroBased() \u003e\u003d lastShownCrimeCaseList.size()) {"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"        crimeCaseToEdit \u003d lastShownCrimeCaseList.get(caseIndex.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"        // An investigator index was parsed"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"        if (investigatorIndex !\u003d null) {"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"            if (investigatorIndex.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"            editCrimeCaseDescriptor"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"                    .setCurrentInvestigator((Investigator) lastShownPersonList"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"                            .get(investigatorIndex.getZeroBased()));"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"        } else {"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"            editCrimeCaseDescriptor.setCurrentInvestigator(crimeCaseToEdit.getCurrentInvestigator());"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"        editedCrimeCase \u003d createEditedCrimeCase(crimeCaseToEdit, editCrimeCaseDescriptor);"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"     * Creates and returns a {@code CrimeCase} with the details of {@code crimeCaseToEdit}"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"     * edited with {@code editCrimeCaseDescriptor}."},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"    private static CrimeCase createEditedCrimeCase(CrimeCase crimeCaseToEdit,"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"                                                   EditCrimeCaseDescriptor editCrimeCaseDescriptor) {"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"        assert crimeCaseToEdit !\u003d null;"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"        CaseName updatedCaseName \u003d editCrimeCaseDescriptor.getCaseName().orElse(crimeCaseToEdit.getCaseName());"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"        Description updatedDescription \u003d editCrimeCaseDescriptor.getDescription()"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"                .orElse(crimeCaseToEdit.getDescription());"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"        Investigator updatedInvestigator \u003d editCrimeCaseDescriptor.getCurrentInvestigator()"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"                .orElse(crimeCaseToEdit.getCurrentInvestigator());"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        StartDate updatedStartDate \u003d editCrimeCaseDescriptor.getStartDate().orElse(crimeCaseToEdit.getStartDate());"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        Set\u003cTag\u003e updatedTags \u003d editCrimeCaseDescriptor.getTags().orElse(crimeCaseToEdit.getTags());"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"        return new CrimeCase(updatedCaseName, updatedDescription, updatedInvestigator,"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"                updatedStartDate, crimeCaseToEdit.getEndDate(), crimeCaseToEdit.getStatus(), updatedTags);"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"        // short circuit if same object"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"            return true;"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"        // instanceof handles nulls"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"        if (!(other instanceof EditCaseCommand)) {"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"        // state check"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"        EditCaseCommand e \u003d (EditCaseCommand) other;"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"        return caseIndex.equals(e.caseIndex)"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 editCrimeCaseDescriptor.equals(e.editCrimeCaseDescriptor)"},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 Objects.equals(crimeCaseToEdit, e.crimeCaseToEdit);"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"     * Stores the details to edit the case with. Each non-empty field value will replace the"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"     * corresponding field value of the crimeCase."},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"    public static class EditCrimeCaseDescriptor {"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"        private CaseName name;"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"        private Description description;"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"        private Index currentInvestigatorIndex;"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"        private Investigator currentInvestigator;"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":"        private StartDate startDate;"},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":170,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":171,"author":{"gitID":"leowweiching"},"content":"        public EditCrimeCaseDescriptor() {}"},{"lineNumber":172,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":173,"author":{"gitID":"leowweiching"},"content":"        /**"},{"lineNumber":174,"author":{"gitID":"leowweiching"},"content":"         * Copy constructor."},{"lineNumber":175,"author":{"gitID":"leowweiching"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":176,"author":{"gitID":"leowweiching"},"content":"         */"},{"lineNumber":177,"author":{"gitID":"leowweiching"},"content":"        public EditCrimeCaseDescriptor(EditCrimeCaseDescriptor toCopy) {"},{"lineNumber":178,"author":{"gitID":"leowweiching"},"content":"            setCaseName(toCopy.name);"},{"lineNumber":179,"author":{"gitID":"leowweiching"},"content":"            setDescription(toCopy.description);"},{"lineNumber":180,"author":{"gitID":"leowweiching"},"content":"            setCurrentInvestigatorIndex(toCopy.currentInvestigatorIndex);"},{"lineNumber":181,"author":{"gitID":"leowweiching"},"content":"            setCurrentInvestigator(toCopy.currentInvestigator);"},{"lineNumber":182,"author":{"gitID":"leowweiching"},"content":"            setStartDate(toCopy.startDate);"},{"lineNumber":183,"author":{"gitID":"leowweiching"},"content":"            setTags(toCopy.tags);"},{"lineNumber":184,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":186,"author":{"gitID":"leowweiching"},"content":"        /**"},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":"         */"},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.description, this.currentInvestigatorIndex,"},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":"                    this.startDate, this.tags);"},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":194,"author":{"gitID":"leowweiching"},"content":"        public void setCaseName(CaseName name) {"},{"lineNumber":195,"author":{"gitID":"leowweiching"},"content":"            this.name \u003d name;"},{"lineNumber":196,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":198,"author":{"gitID":"leowweiching"},"content":"        public Optional\u003cCaseName\u003e getCaseName() {"},{"lineNumber":199,"author":{"gitID":"leowweiching"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":200,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":202,"author":{"gitID":"leowweiching"},"content":"        public void setDescription(Description description) {"},{"lineNumber":203,"author":{"gitID":"leowweiching"},"content":"            this.description \u003d description;"},{"lineNumber":204,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":206,"author":{"gitID":"leowweiching"},"content":"        public Optional\u003cDescription\u003e getDescription() {"},{"lineNumber":207,"author":{"gitID":"leowweiching"},"content":"            return Optional.ofNullable(description);"},{"lineNumber":208,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":210,"author":{"gitID":"leowweiching"},"content":"        public void setCurrentInvestigatorIndex(Index currentInvestigatorIndex) {"},{"lineNumber":211,"author":{"gitID":"leowweiching"},"content":"            this.currentInvestigatorIndex \u003d currentInvestigatorIndex;"},{"lineNumber":212,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":214,"author":{"gitID":"leowweiching"},"content":"        public Optional\u003cIndex\u003e getCurrentInvestigatorIndex() {"},{"lineNumber":215,"author":{"gitID":"leowweiching"},"content":"            return Optional.ofNullable(currentInvestigatorIndex);"},{"lineNumber":216,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":218,"author":{"gitID":"leowweiching"},"content":"        public void setCurrentInvestigator(Investigator currentInvestigator) {"},{"lineNumber":219,"author":{"gitID":"leowweiching"},"content":"            this.currentInvestigator \u003d currentInvestigator;"},{"lineNumber":220,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":222,"author":{"gitID":"leowweiching"},"content":"        public Optional\u003cInvestigator\u003e getCurrentInvestigator() {"},{"lineNumber":223,"author":{"gitID":"leowweiching"},"content":"            return Optional.ofNullable(currentInvestigator);"},{"lineNumber":224,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":226,"author":{"gitID":"leowweiching"},"content":"        public void setStartDate(StartDate startDate) {"},{"lineNumber":227,"author":{"gitID":"leowweiching"},"content":"            this.startDate \u003d startDate;"},{"lineNumber":228,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":230,"author":{"gitID":"leowweiching"},"content":"        public Optional\u003cStartDate\u003e getStartDate() {"},{"lineNumber":231,"author":{"gitID":"leowweiching"},"content":"            return Optional.ofNullable(startDate);"},{"lineNumber":232,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":234,"author":{"gitID":"leowweiching"},"content":"        /**"},{"lineNumber":235,"author":{"gitID":"leowweiching"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":236,"author":{"gitID":"leowweiching"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":237,"author":{"gitID":"leowweiching"},"content":"         */"},{"lineNumber":238,"author":{"gitID":"leowweiching"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":239,"author":{"gitID":"leowweiching"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":240,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":242,"author":{"gitID":"leowweiching"},"content":"        /**"},{"lineNumber":243,"author":{"gitID":"leowweiching"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":244,"author":{"gitID":"leowweiching"},"content":"         * if modification is attempted."},{"lineNumber":245,"author":{"gitID":"leowweiching"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":246,"author":{"gitID":"leowweiching"},"content":"         */"},{"lineNumber":247,"author":{"gitID":"leowweiching"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":248,"author":{"gitID":"leowweiching"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":249,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":251,"author":{"gitID":"leowweiching"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"leowweiching"},"content":"        public boolean equals(Object other) {"},{"lineNumber":253,"author":{"gitID":"leowweiching"},"content":"            // short circuit if same object"},{"lineNumber":254,"author":{"gitID":"leowweiching"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":255,"author":{"gitID":"leowweiching"},"content":"                return true;"},{"lineNumber":256,"author":{"gitID":"leowweiching"},"content":"            }"},{"lineNumber":257,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":258,"author":{"gitID":"leowweiching"},"content":"            // instanceof handles nulls"},{"lineNumber":259,"author":{"gitID":"leowweiching"},"content":"            if (!(other instanceof EditCrimeCaseDescriptor)) {"},{"lineNumber":260,"author":{"gitID":"leowweiching"},"content":"                return false;"},{"lineNumber":261,"author":{"gitID":"leowweiching"},"content":"            }"},{"lineNumber":262,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":263,"author":{"gitID":"leowweiching"},"content":"            // state check"},{"lineNumber":264,"author":{"gitID":"leowweiching"},"content":"            EditCrimeCaseDescriptor e \u003d (EditCrimeCaseDescriptor) other;"},{"lineNumber":265,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":266,"author":{"gitID":"leowweiching"},"content":"            return getCaseName().equals(e.getCaseName())"},{"lineNumber":267,"author":{"gitID":"leowweiching"},"content":"                    \u0026\u0026 getDescription().equals(e.getDescription())"},{"lineNumber":268,"author":{"gitID":"leowweiching"},"content":"                    \u0026\u0026 getCurrentInvestigator().equals(e.getCurrentInvestigator())"},{"lineNumber":269,"author":{"gitID":"leowweiching"},"content":"                    \u0026\u0026 getStartDate().equals(e.getStartDate())"},{"lineNumber":270,"author":{"gitID":"leowweiching"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":271,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":241,"quentinkhoo":9,"-":23}},{"path":"src/main/java/seedu/investigapptor/logic/commands/FindInvestTagsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.TagContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":" * Finds and lists all investigators in investigapptor whose tags contains any of the argument keywords."},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":" * Keyword matching is not case-sensitive."},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":"public class FindInvestTagsCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_WORD \u003d \"findinvestigatortags\";"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_ALIAS \u003d \"fit\";"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds investigators whose tags contain any of \""},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"            + \"the specified keywords and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"            + \"Example: \" + COMMAND_WORD + \" teamA\";"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"    public FindInvestTagsCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(0));   // List results toggles to investigators tab"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"                || (other instanceof FindInvestTagsCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"                \u0026\u0026 this.predicate.equals(((FindInvestTagsCommand) other).predicate)); // state check"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":35,"-":6}},{"path":"src/main/java/seedu/investigapptor/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":7,"-":30}},{"path":"src/main/java/seedu/investigapptor/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"ex\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":18}},{"path":"src/main/java/seedu/investigapptor/logic/commands/CommandResult.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class CommandResult {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String feedbackToUser;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":1,"-":15}},{"path":"src/main/java/seedu/investigapptor/logic/commands/RemovePasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.NoPasswordException;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":" * Removes the password from the investigapptor application"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"public class RemovePasswordCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"removepassword\";"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"rp\";"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_SUCCESS \u003d  \"Password successfully removed!\";"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_NO_PASSWORD \u003d \"No password to remove!\";"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes the password from the Investigapptor.\";"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"            model.removePassword();"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"        } catch (NoPasswordException npe) {"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"            return new CommandResult(MESSAGE_NO_PASSWORD);"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":29,"-":2}},{"path":"src/main/java/seedu/investigapptor/logic/commands/DeleteInvestigatorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":16,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":" * Deletes a person identified using it\u0027s last displayed index from the investigapptor book."},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":"public class DeleteInvestigatorCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_WORD \u003d \"deleteinvestigator\";"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String COMMAND_ALIAS \u003d \"di\";"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"            + \": Deletes the investigator identified by the index number used in the last listing of investigators.\\n\""},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Investigator: %1$s\";"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_ACTIVE_INVESTIGATOR \u003d \"Investigator is currently in charge of a case.\\n\""},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"            + \"Please reassign the cases to another investigator to delete the selected investigator\";"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"    private Person personToDelete;"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"    public DeleteInvestigatorCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"    * Try to call the model to delete Person (@personToDelete)"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"    *"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"    */"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"    private void deletePerson() {"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"            EventsCenter.getInstance().post(new SwapTabEvent(0));"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"The target investigator cannot be missing\");"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"        if (personToDelete instanceof Investigator \u0026\u0026 !((Investigator) personToDelete).isCaseListEmpty()) {"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"            throw new CommandException(MESSAGE_ACTIVE_INVESTIGATOR);"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"        } else {"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"            deletePerson();"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"                || (other instanceof DeleteInvestigatorCommand // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteInvestigatorCommand) other).targetIndex) // state check"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteInvestigatorCommand) other).personToDelete));"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":67,"quentinkhoo":7,"-":8}},{"path":"src/main/java/seedu/investigapptor/logic/commands/FindInvestigatorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":" * Finds and lists all persons in investigapptor book whose name contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class FindInvestigatorCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_WORD \u003d \"findinvestigators\";"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public static final String COMMAND_ALIAS \u003d \"fi\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all investigators whose names contain any of \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public FindInvestigatorCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(0));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                || (other instanceof FindInvestigatorCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindInvestigatorCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":6,"-":34}},{"path":"src/main/java/seedu/investigapptor/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.ComponentManager;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.InvestigapptorParser;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    private final InvestigapptorParser investigapptorParser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        investigapptorParser \u003d new InvestigapptorParser();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"            Command command \u003d investigapptorParser.parseCommand(commandText);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"            history.add(maskPassword(commandText));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"    public ObservableList\u003cCrimeCase\u003e getFilteredCrimeCaseList() {"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        return model.getFilteredCrimeCaseList();"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"     * Masks a password field"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"     * @param inputText"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"     * @return"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"    private String maskPassword(String inputText) {"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"        StringBuilder sb \u003d new StringBuilder(inputText);"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"        int prefixIndex \u003d inputText.indexOf(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        if (hasPasswordPrefix(inputText)) {"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"            for (int i \u003d prefixIndex + 3; i \u003c inputText.length(); i++) {"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"                sb.setCharAt(i, \u0027*\u0027);"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        return sb.toString();"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"     * Checks for presence of password prefix"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"     * @param inputText"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"     * @return"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"    private boolean hasPasswordPrefix(String inputText) {"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"        int passwordPrefixIndex \u003d inputText.indexOf(PREFIX_PASSWORD.getPrefix());"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"        return passwordPrefixIndex !\u003d -1;"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":52,"-":43}},{"path":"src/main/java/seedu/investigapptor/logic/commands/FindCaseTagsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.TagContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":" * Finds and lists all cases in investigapptor whose tags contains any of the argument keywords."},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":" * Keyword matching is not case-sensitive."},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":"public class FindCaseTagsCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_WORD \u003d \"findcasetags\";"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"    public static final String COMMAND_ALIAS \u003d \"fct\";"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds cases whose tags contain any of \""},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"            + \"the specified keywords and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"            + \"Example: \" + COMMAND_WORD + \" Homicide\";"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"    public FindCaseTagsCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"        model.updateFilteredCrimeCaseList(predicate);"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));   // List results toggles to case tab"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"        return new CommandResult(getMessageForCrimeListShownSummary(model.getFilteredCrimeCaseList().size()));"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":35,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"pkaijun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"pkaijun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"pkaijun"},"content":"                || (other instanceof FindCaseTagsCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"pkaijun"},"content":"                \u0026\u0026 this.predicate.equals(((FindCaseTagsCommand) other).predicate)); // state check"},{"lineNumber":40,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":35,"-":6}},{"path":"src/main/java/seedu/investigapptor/logic/commands/AddCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_INVESTIGATOR;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.EndDate.LARGEST_DATE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.EndDate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Status;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":" * Adds a case to the investigapptor book."},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"public class AddCaseCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_WORD \u003d \"addcase\";"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_ALIAS \u003d \"ac\";"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a case to the investigapptor book. \""},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"            + \"Parameters: \""},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_INVESTIGATOR + \"INVESTIGATOR_INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_STARTDATE + \"START DATE \""},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_NAME + \"Project Magic \""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_DESCRIPTION + \"Kidnapping of 6 year-old John Doe \""},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_INVESTIGATOR + \"1 \""},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_STARTDATE + \"01/04/2018 \""},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_TAG + \"Homicide \""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"            + PREFIX_TAG + \"Fraud\";"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New case added: %1$s\";"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_DUPLICATE_CASE \u003d \"This case already exists in the investigapptor book\";"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"    private CaseName name;"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"    private Description description;"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"    private Index investigatorIndex;"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"    private StartDate startDate;"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"    private Set\u003cTag\u003e tagList;"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"    private CrimeCase toAdd;"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"     * Creates an AddCaseCommand to add the specified {@code CrimeCase}"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"    public AddCaseCommand(CrimeCase crimeCase) {"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(crimeCase);"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        toAdd \u003d crimeCase;"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"     * @param name of the case to be added"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"     * @param description of the case to be added"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"     * @param investigatorIndex of the investigator to be added"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"     * @param startDate of the case to be added"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"     * @param tagList of the case to be added"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"    public AddCaseCommand(CaseName name, Description description, Index investigatorIndex,"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"                          StartDate startDate, Set\u003cTag\u003e tagList) {"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(name);"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(description);"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(investigatorIndex);"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(startDate);"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"        this.name \u003d name;"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"        this.description \u003d description;"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"        this.investigatorIndex \u003d investigatorIndex;"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"        this.tagList \u003d tagList;"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(model);"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"            model.addCrimeCase(toAdd);"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"            EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"        } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CASE);"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"        if (investigatorIndex !\u003d null) {"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"            if (investigatorIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_INVESTIGATOR_DISPLAYED_INDEX);"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"            Investigator investigatorToAdd \u003d (Investigator) lastShownList.get(investigatorIndex.getZeroBased());"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"            toAdd \u003d createCrimeCase(investigatorToAdd);"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"     * Creates and returns a {@code CrimeCase} with the details of {@code investigatorToAdd}"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"    private CrimeCase createCrimeCase(Investigator investigatorToAdd) {"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"        assert investigatorToAdd !\u003d null;"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"        return new CrimeCase(this.name, this.description, investigatorToAdd,"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"                this.startDate, new EndDate(LARGEST_DATE), new Status(), this.tagList);"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        // short circuit if same object"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"            return true;"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"        // instanceof handles nulls"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"        if (!(other instanceof AddCaseCommand)) {"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"        // state check"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"        return Objects.equals(toAdd, ((AddCaseCommand) other).toAdd);"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":116,"quentinkhoo":8,"-":22}},{"path":"src/main/java/seedu/investigapptor/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorBackupEvent;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorChangedEvent;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"public interface Storage extends InvestigapptorStorage, UserPrefsStorage {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    String getInvestigapptorFilePath();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor()"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor) throws IOException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void backupInvestigapptor(ReadOnlyInvestigapptor investigapptor, String fileName) throws IOException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    void handleInvestigapptorChangedEvent(InvestigapptorChangedEvent abce);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void handleInvestigapptorBackupEvent(InvestigapptorBackupEvent abce);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":14,"-":32}},{"path":"src/main/java/seedu/investigapptor/storage/InvestigapptorStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" * Represents a storage for {@link Investigapptor}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"public interface InvestigapptorStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"    String getInvestigapptorFilePath();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"     * Returns Investigapptor data as a {@link ReadOnlyInvestigapptor}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor()"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"     * @see #getInvestigapptorFilePath()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"    Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor(String filePath)"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"     * @see #getInvestigapptorFilePath()"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    void readInvestigapptorWithPassword(Password password)"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"     * @see #getInvestigapptorFilePath()"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"    void checkInvestigapptorPassword(String filePath, Password password)"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"     * Saves the given {@link ReadOnlyInvestigapptor} to the storage."},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"     * @param investigapptor cannot be null."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor) throws IOException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"     * @see #saveInvestigapptor(ReadOnlyInvestigapptor)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"    void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor, String filePath) throws IOException;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"     * Creates a backup of the given {@link ReadOnlyInvestigapptor} to the storage."},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"     * @param investigapptor cannot be null."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param fileName"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    void backupInvestigapptor(ReadOnlyInvestigapptor investigapptor, String fileName) throws IOException;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":37,"-":34}},{"path":"src/main/java/seedu/investigapptor/storage/UserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" * Represents a storage for {@link seedu.investigapptor.model.UserPrefs}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getUserPrefsFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"     * Saves the given {@link seedu.investigapptor.model.UserPrefs} to the storage."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":29}},{"path":"src/main/java/seedu/investigapptor/storage/XmlAdaptedPassword.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"public class XmlAdaptedPassword {"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    private String currentPassword;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"     * Constructs an XmlAdaptedPassword."},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"    public XmlAdaptedPassword() {}"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"     * Constructs an {@code XmlAdaptedPassword} with the given password."},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"    public XmlAdaptedPassword(Password password) {"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"            this.currentPassword \u003d password.getPassword();"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"            this.currentPassword \u003d null;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"     * Converts this jaxb-friendly adapted password object into the model\u0027s Password object."},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"    public Password toModelType() {"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"        return new Password(currentPassword);"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"        if (!(other instanceof XmlAdaptedPassword)) {"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"            return false;"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        XmlAdaptedPassword otherPassword \u003d (XmlAdaptedPassword) other;"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        return Objects.equals(currentPassword, otherPassword.currentPassword);"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":56}},{"path":"src/main/java/seedu/investigapptor/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":59}},{"path":"src/main/java/seedu/investigapptor/storage/XmlInvestigapptorStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":" * A class to access Investigapptor data stored as an xml file on the hard disk."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"public class XmlInvestigapptorStorage implements InvestigapptorStorage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlInvestigapptorStorage.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    public XmlInvestigapptorStorage(String filePath) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"    public String getInvestigapptorFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    public Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor() throws DataConversionException, IOException {"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"        return readInvestigapptor(filePath);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"     * Similar to {@link InvestigapptorStorage#readInvestigapptor()}"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"    public Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor(String filePath) throws DataConversionException,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            FileNotFoundException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        File investigapptorFile \u003d new File(filePath);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"        if (!investigapptorFile.exists()) {"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Investigapptor file \" + investigapptorFile + \" not found\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        XmlSerializableInvestigapptor xmlInvestigapptor \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"            return Optional.of(xmlInvestigapptor.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Illegal values found in \" + investigapptorFile + \": \" + ive.getMessage());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"     * Similar to {@link InvestigapptorStorage#readInvestigapptor()}"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"    public void checkInvestigapptorPassword(String filePath, Password password)"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(filePath);"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(password);"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"        File investigapptorFile \u003d new File(filePath);"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"        if (!investigapptorFile.exists()) {"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Investigapptor file \" + investigapptorFile + \" not found\");"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"        XmlSerializableInvestigapptor xmlInvestigapptor \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"            String currentPassword \u003d xmlInvestigapptor.toModelType().getPassword().getPassword();"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"            String inputPassword \u003d Password.generatePasswordHash(password.getPassword());"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"            if (!isCorrectPassword(currentPassword, inputPassword)) {"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"                throw new WrongPasswordException(\"Invalid password entered! Please try again.\");"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Illegal values found in \" + investigapptorFile + \": \" + ive.getMessage());"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"     * Checks if an inputPassword is the currentPassword"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"     * @param currentPassword"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"     * @param inputPassword"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"    private boolean isCorrectPassword(String currentPassword, String inputPassword) {"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"        return currentPassword.equals(inputPassword);"},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":106,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"quentinkhoo"},"content":"    public void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor) throws IOException {"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"        saveInvestigapptor(investigapptor, filePath);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"     * Similar to {@link InvestigapptorStorage#saveInvestigapptor(ReadOnlyInvestigapptor)}"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"    public void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor, String filePath) throws IOException {"},{"lineNumber":118,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(investigapptor);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableInvestigapptor(investigapptor));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":127,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"Marcus-cxc"},"content":"    public void backupInvestigapptor(ReadOnlyInvestigapptor investigapptor, String fileName) throws IOException {"},{"lineNumber":129,"author":{"gitID":"Marcus-cxc"},"content":"        saveInvestigapptor(investigapptor, filePath + \".backup\");"},{"lineNumber":130,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"quentinkhoo"},"content":"    public void readInvestigapptorWithPassword(Password password)"},{"lineNumber":134,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":135,"author":{"gitID":"quentinkhoo"},"content":"        checkInvestigapptorPassword(filePath, password);"},{"lineNumber":136,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":6,"quentinkhoo":75,"-":57}},{"path":"src/main/java/seedu/investigapptor/logic/commands/FindCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.SwapTabEvent;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.CaseNameContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":7,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"leowweiching"},"content":" * Finds and lists all cases in investigapptor book whose name contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"leowweiching"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":"public class FindCaseCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_WORD \u003d \"findcases\";"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_ALIAS \u003d \"fc\";"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cases whose names contain any of \""},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"            + \"Example: \" + COMMAND_WORD + \" alpha bravo charlie\";"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    private final CaseNameContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"    public FindCaseCommand(CaseNameContainsKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"        model.updateFilteredCrimeCaseList(predicate);"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"        EventsCenter.getInstance().post(new SwapTabEvent(1));"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"        return new CommandResult(getMessageForCrimeCaseListShownSummary(model.getFilteredCrimeCaseList().size()));"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof FindCaseCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.predicate.equals(((FindCaseCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":35,"quentinkhoo":4,"-":1}},{"path":"src/main/java/seedu/investigapptor/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorBackupEvent;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorChangedEvent;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Password;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":" * Manages storage of Investigapptor data in local storage."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    private InvestigapptorStorage investigapptorStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    public StorageManager(InvestigapptorStorage investigapptorStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"        this.investigapptorStorage \u003d investigapptorStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Investigapptor methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"    public String getInvestigapptorFilePath() {"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        return investigapptorStorage.getInvestigapptorFilePath();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"    public Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor()"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"        return readInvestigapptor(investigapptorStorage.getInvestigapptorFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"    public Optional\u003cReadOnlyInvestigapptor\u003e readInvestigapptor(String filePath)"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        return investigapptorStorage.readInvestigapptor(filePath);"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"    public void readInvestigapptorWithPassword(Password password)"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"        investigapptorStorage.checkInvestigapptorPassword("},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"                investigapptorStorage.getInvestigapptorFilePath(), password);"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"    public void checkInvestigapptorPassword(String filePath, Password password)"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"        investigapptorStorage.checkInvestigapptorPassword(filePath, password);"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"    public void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor) throws IOException {"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"        saveInvestigapptor(investigapptor, investigapptorStorage.getInvestigapptorFilePath());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":"    public void saveInvestigapptor(ReadOnlyInvestigapptor investigapptor, String filePath) throws IOException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"        investigapptorStorage.saveInvestigapptor(investigapptor, filePath);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"    public void backupInvestigapptor(ReadOnlyInvestigapptor investigapptor, String fileName) throws IOException {"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"        logger.fine(\"Attempting to write to data file: \" + \"data/\" + fileName + \".xml\");"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"        investigapptorStorage.saveInvestigapptor(investigapptor, \"data/\" + fileName + \".xml\");"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":110,"author":{"gitID":"quentinkhoo"},"content":"    public void handleInvestigapptorChangedEvent(InvestigapptorChangedEvent event) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"            saveInvestigapptor(event.data);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"    @Subscribe"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":"    public void handleInvestigapptorBackupEvent(InvestigapptorBackupEvent event) {"},{"lineNumber":122,"author":{"gitID":"Marcus-cxc"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":123,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"Marcus-cxc"},"content":"            backupInvestigapptor(event.data, event.fileName);"},{"lineNumber":125,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (IOException e) {"},{"lineNumber":126,"author":{"gitID":"Marcus-cxc"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":127,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":130,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":20,"quentinkhoo":48,"-":62}},{"path":"src/main/java/seedu/investigapptor/storage/XmlSerializableInvestigapptor.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":" * An Immutable Investigapptor that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"@XmlRootElement(name \u003d \"investigapptor\")"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"public class XmlSerializableInvestigapptor {"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"    private List\u003cXmlAdaptedCrimeCase\u003e cases;"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    private List\u003cXmlAdaptedInvestigator\u003e investigators;"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    private XmlAdaptedPassword password;"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"     * Creates an empty XmlSerializableInvestigapptor."},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"    public XmlSerializableInvestigapptor() {"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"        cases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        investigators \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        password \u003d new XmlAdaptedPassword();"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"     * Conversion"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    public XmlSerializableInvestigapptor(ReadOnlyInvestigapptor src) {"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"        cases.addAll(src.getCrimeCaseList().stream().map(XmlAdaptedCrimeCase::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        persons.addAll(src.getPersonOnlyList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        investigators.addAll(src.getInvestigatorList().stream()"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"                .map(XmlAdaptedInvestigator::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        password \u003d new XmlAdaptedPassword(src.getPassword());"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"     * Converts this investigapptor into the model\u0027s {@code Investigapptor} object."},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"     *                               {@code XmlAdaptedCrimeCase}, {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"    public Investigapptor toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"        Investigapptor investigapptor \u003d new Investigapptor();"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"            investigapptor.addTag(t.toModelType());"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"        for (XmlAdaptedCrimeCase c : cases) {"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"            investigapptor.addCrimeCase(c.toModelType());"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"            investigapptor.addPerson(p.toModelType());"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"        for (XmlAdaptedInvestigator i : investigators) {"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"            Investigator investigator \u003d i.toModelType();"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"            investigapptor.addPerson(investigator);"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"        investigapptor.setPassword(password.toModelType());"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        return investigapptor;"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"        if (!(other instanceof XmlSerializableInvestigapptor)) {"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        XmlSerializableInvestigapptor otherAb \u003d (XmlSerializableInvestigapptor) other;"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"        return cases.equals(otherAb.cases) \u0026\u0026 persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 password.equals(otherAb.password);"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":85,"quentinkhoo":5,"-":8}},{"path":"src/main/java/seedu/investigapptor/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":8,"-":129}},{"path":"src/main/java/seedu/investigapptor/storage/JsonUserPrefsStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.JsonUtil;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public JsonUserPrefsStorage(String filePath) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(String prefsFilePath) throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":41}},{"path":"src/main/java/seedu/investigapptor/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":" * Stores investigapptor data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"     * Saves the given investigapptor data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public static void saveDataToFile(File file, XmlSerializableInvestigapptor investigapptor)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"            XmlUtil.saveDataToFile(file, investigapptor);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"     * Returns investigapptor book in the file or an empty investigapptor book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    public static XmlSerializableInvestigapptor loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableInvestigapptor.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":10,"-":29}},{"path":"src/main/java/seedu/investigapptor/model/ReadOnlyInvestigapptor.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" * Unmodifiable view of an investigapptor book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"public interface ReadOnlyInvestigapptor {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of both persons and investigator list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the cases list."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate cases."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cCrimeCase\u003e getCrimeCaseList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the investigators list."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate investigator."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    ObservableList\u003cInvestigator\u003e getInvestigatorList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the person list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate investigator."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonOnlyList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"     * Returns the hashed password"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"    Password getPassword();"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":12,"-":39}},{"path":"src/main/java/seedu/investigapptor/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.WrongPasswordException;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.ConfigUtil;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Model;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.InvestigapptorStorage;"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.storage.XmlInvestigapptorStorage;"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.PasswordManager;"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.Ui;"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.ui.UiManager;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"    private boolean hasPassword;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Investigapptor ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"        InvestigapptorStorage investigapptorStorage \u003d new"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"                XmlInvestigapptorStorage(userPrefs.getInvestigapptorFilePath());"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"        storage \u003d new StorageManager(investigapptorStorage, userPrefsStorage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"        hasPassword \u003d false;"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s investigapptor and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"     * The data from the sample investigapptor will be used instead if {@code storage}\u0027s investigapptor is not found,"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"     * or an empty investigapptor will be used instead if errors occur when reading {@code storage}\u0027s investigapptor."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":"        Optional\u003cReadOnlyInvestigapptor\u003e investigapptorOptional;"},{"lineNumber":97,"author":{"gitID":"quentinkhoo"},"content":"        ReadOnlyInvestigapptor initialData;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"            investigapptorOptional \u003d storage.readInvestigapptor();"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"            if (!investigapptorOptional.isPresent()) {"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Investigapptor\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"            initialData \u003d investigapptorOptional.orElseGet(SampleDataUtil::getSampleInvestigapptor);"},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"            String currentPasswordHash \u003d initialData.getPassword().getPassword();"},{"lineNumber":105,"author":{"gitID":"quentinkhoo"},"content":"            if (currentPasswordHash \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitID":"quentinkhoo"},"content":"                hasPassword \u003d false;"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":"            } else {"},{"lineNumber":108,"author":{"gitID":"quentinkhoo"},"content":"                hasPassword \u003d true;"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"quentinkhoo"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":111,"author":{"gitID":"quentinkhoo"},"content":"            initialData \u003d new Investigapptor();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":113,"author":{"gitID":"quentinkhoo"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Investigapptor\");"},{"lineNumber":114,"author":{"gitID":"quentinkhoo"},"content":"            initialData \u003d new Investigapptor();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":116,"author":{"gitID":"quentinkhoo"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Investigapptor\");"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"            initialData \u003d new Investigapptor();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":150,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":178,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":181,"author":{"gitID":"quentinkhoo"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Investigapptor\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":201,"author":{"gitID":"quentinkhoo"},"content":"        if (hasPassword) {"},{"lineNumber":202,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Starting Password Prompt \" + MainApp.VERSION);"},{"lineNumber":203,"author":{"gitID":"quentinkhoo"},"content":"            PasswordManager passwordManager \u003d new PasswordManager(storage, ui);"},{"lineNumber":204,"author":{"gitID":"quentinkhoo"},"content":"            passwordManager.start(primaryStage);"},{"lineNumber":205,"author":{"gitID":"quentinkhoo"},"content":"        } else {"},{"lineNumber":206,"author":{"gitID":"quentinkhoo"},"content":"            logger.info(\"Starting Investigapptor \" + MainApp.VERSION);"},{"lineNumber":207,"author":{"gitID":"quentinkhoo"},"content":"            ui.start(primaryStage);"},{"lineNumber":208,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":214,"author":{"gitID":"quentinkhoo"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Investigapptor ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":68,"-":166}},{"path":"src/main/java/seedu/investigapptor/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.EndDate.LARGEST_DATE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.Investigapptor;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.ReadOnlyInvestigapptor;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.EndDate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Status;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":" * Contains utility methods for populating {@code Investigapptor} with sample data."},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"public class SampleDataUtil {"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"        return new Person[]{"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"            new Investigator(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Rank(\"4\"),"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"                    getTagSet(\"teamA\")),"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"            new Investigator(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Rank(\"2\"),"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"                    getTagSet(\"teamB\")),"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"            new Investigator(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Rank(\"1\"),"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"                    getTagSet(\"new\", \"teamC\")),"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"            new Investigator(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Rank(\"3\"),"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"                    getTagSet( \"teamA\")),"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"            new Investigator(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Rank(\"5\"),"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"                    getTagSet(\"new\", \"teamB\")),"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"            new Investigator(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Rank(\"3\"),"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"                    getTagSet(\"teamC\"))"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"        };"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"    public static CrimeCase[] getSampleCases() {"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"        return new CrimeCase[]{"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"            new CrimeCase(new CaseName(\"Murder at Bishan\"), new Description(\"Man stab to death\"),"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"                    (Investigator) getSamplePersons()[1], new StartDate(\"07/08/2017\"), new EndDate(LARGEST_DATE),"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"                    new Status(\"open\"), getTagSet(\"Murder\")),"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"            new CrimeCase(new CaseName(\"BnE at Seragoon\"), new Description(\"Unit #03-132 was broken in\"),"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"                    (Investigator) getSamplePersons()[1], new StartDate(\"01/03/2018\"), new EndDate(LARGEST_DATE),"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"                    new Status(\"open\"), getTagSet(\"Robbery\")),"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"            new CrimeCase(new CaseName(\"Assault At Woodlands\"), new Description(\"Man Assaulted at Woodland Blk \""},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"312 void deck\"), (Investigator) getSamplePersons()[3], new StartDate(\"07/08/2017\"),"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"                    new EndDate(LARGEST_DATE), new Status(\"open\"), getTagSet(\"Assault\")),"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"            new CrimeCase(new CaseName(\"Illegal Firearm\"), new Description(\"Man possessing a SAR-21 at home\"),"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"                    (Investigator) getSamplePersons()[5], new StartDate(\"02/02/2018\"), new EndDate(LARGEST_DATE),"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"                    new Status(\"open\"), getTagSet(\"Firearm\")),"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"            new CrimeCase(new CaseName(\"Robbery at AMK Macdonald\"), new Description(\"Man demanded 50 big mac\""},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"with a knife\"),"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"                    (Investigator) getSamplePersons()[2], new StartDate(\"07/03/2016\"), new EndDate(LARGEST_DATE),"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"                    new Status(\"open\"), getTagSet(\"Robbery\")),"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"            new CrimeCase(new CaseName(\"The Oolong Slayer\"), new Description(\"A serial murderer who always\""},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"leave behind oolong tea\"), (Investigator) getSamplePersons()[0], new StartDate(\"07/02/2011\"),"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"                    new EndDate(LARGEST_DATE), new Status(\"open\"), getTagSet(\"Murder\", \"Serial\")),"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"            new CrimeCase(new CaseName(\"Punggol Arson\"), new Description(\"Fire started by unknown perp at 7pm\"),"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"                    (Investigator) getSamplePersons()[4], new StartDate(\"02/01/2018\"),"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"                    new EndDate(LARGEST_DATE), new Status(\"open\"), getTagSet(\"Arson\", \"Fire\"))"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"        };"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"    public static ReadOnlyInvestigapptor getSampleInvestigapptor() {"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"            Investigapptor sampleAb \u003d new Investigapptor();"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"            for (CrimeCase crimeCase : getSampleCases()) {"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"                sampleAb.addCrimeCase(crimeCase);"},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"            return sampleAb;"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate Case\");"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":"        for (String s : strings) {"},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"            tags.add(new Tag(s));"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":"        return tags;"},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":92,"quentinkhoo":10,"-":16}},{"path":"src/main/java/seedu/investigapptor/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Represents a Person\u0027s phone number in the investigapptor book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":50}},{"path":"src/main/java/seedu/investigapptor/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Represents a Person\u0027s email in the investigapptor book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"     * @param email A valid email investigapptor."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":63}},{"path":"src/main/java/seedu/investigapptor/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Represents a Person\u0027s investigapptor in the investigapptor book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values except \u003c\u003e/\u003d, and it should more than one character\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"     * The first character of the investigapptor must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s][^\u003c\u003e\u003d/]+?\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"     * @param address A valid investigapptor."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":53}},{"path":"src/main/java/seedu/investigapptor/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * \u003cp\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Deletes {@code toDelete} tag from every person in internalList"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"    public void deleteTagFromPersons(Tag toDelete) {"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"        for (Person person : internalList) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            person.deleteTag(toDelete);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns a list containing investigator as an unmodifiable {@code ObservableList}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public ObservableList\u003cInvestigator\u003e investigatorList() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Iterator irt \u003d iterator();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        ObservableList\u003cInvestigator\u003e investigators \u003d FXCollections.observableArrayList();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        while (irt.hasNext()) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            Object element \u003d irt.next();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            if (element instanceof Investigator) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                investigators.add((Investigator) element);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return investigators;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Returns a list containing person as an unmodifiable {@code ObservableList}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e personOnlyList() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Iterator irt \u003d iterator();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        while (irt.hasNext()) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            Object element \u003d irt.next();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            if (!(element instanceof Investigator)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                persons.add((Person) element);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return persons;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":9,"-":152}},{"path":"src/main/java/seedu/investigapptor/model/person/exceptions/PersonNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class PersonNotFoundException extends Exception {}"}],"authorContributionMap":{"quentinkhoo":1,"-":5}},{"path":"src/main/java/seedu/investigapptor/model/person/exceptions/DuplicatePersonException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DuplicatePersonException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public DuplicatePersonException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":10}},{"path":"src/main/java/seedu/investigapptor/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":" * Represents a Person in the investigapptor book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    protected final Name name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    protected final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected final Address address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    protected final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set of type String"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Set\u003cString\u003e getTagsRaw() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Set\u003cString\u003e rawTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (Tag s : tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            rawTags.add(s.getRawString().toLowerCase());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return rawTags;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Deletes (@code toDelete) tag"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag toDelete) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        tags.delete(toDelete);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean isInvestigator() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":5,"-":119}},{"path":"src/main/java/seedu/investigapptor/logic/commands/SelectCaseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.JumpToCrimeCaseListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":" * Selects a person identified using it\u0027s last displayed index from the investigapptor book."},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":"public class SelectCaseCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_WORD \u003d \"selectcase\";"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"    public static final String COMMAND_ALIAS \u003d \"sc\";"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"            + \": Selects the case identified by the index number used in the last listing of cases.\\n\""},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_SELECT_CASE_SUCCESS \u003d \"Selected Case: %1$s\";"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    public SelectCaseCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"        List\u003cCrimeCase\u003e lastShownList \u003d model.getFilteredCrimeCaseList();"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        EventsCenter.getInstance().post(new JumpToCrimeCaseListRequestEvent(targetIndex));"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_CASE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof SelectCaseCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCaseCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":43,"quentinkhoo":5,"-":6}},{"path":"src/main/java/seedu/investigapptor/model/person/investigator/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person.investigator;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":" * Tests that a {@code Person}\u0027s {@code Tags} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    /* Returns true if keywords matches with any element in the set of tags of a person"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":"                .anyMatch(person.getTagsRaw()::contains);"},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":32,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":26,"quentinkhoo":2,"-":5}},{"path":"src/main/java/seedu/investigapptor/model/person/investigator/Investigator.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person.investigator;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.UniqueCrimeCaseList;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":" * Represents a Investigator in the investigapptor book."},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"public class Investigator extends Person {"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"    private UniqueCrimeCaseList crimeCases;"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"    private Rank rank;"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"    private ArrayList\u003cInteger\u003e caseListHashed;"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"    public Investigator(Name name, Phone phone, Email email, Address address, Rank rank, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"        this.rank \u003d rank;"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"        crimeCases \u003d new UniqueCrimeCaseList();"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"        caseListHashed \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"    public Investigator(Name name, Phone phone, Email email, Address address, Rank rank,"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"                        Set\u003cCrimeCase\u003e cases, Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"        this.rank \u003d rank;"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"        crimeCases \u003d new UniqueCrimeCaseList(cases);"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"        caseListHashed \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"        for (CrimeCase c : cases) {"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"            caseListHashed.add(c.hashCode());"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"    public Investigator(Name name, Phone phone, Email email, Address address, Rank rank,"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"                        Set\u003cTag\u003e tags, ArrayList\u003cInteger\u003e caseListHashed) {"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"        this.rank \u003d rank;"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"        crimeCases \u003d new UniqueCrimeCaseList();"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"        this.caseListHashed \u003d new ArrayList\u003c\u003e(caseListHashed);"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"     * Add CrimeCase to list"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"     * Add the CrimeCase hashcode as well"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"    public void addCrimeCase(CrimeCase caseToAdd) throws DuplicateCrimeCaseException {"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"        crimeCases.add(caseToAdd);"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"        if (!caseListHashed.contains(caseToAdd.hashCode())) {"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"            caseListHashed.add(caseToAdd.hashCode());"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns an immutable CrimeCase set, which throws {@code UnsupportedOperationException}"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"     * if modification is attempted."},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"    public Set\u003cCrimeCase\u003e getCaseAsSet() {"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"        return Collections.unmodifiableSet(crimeCases.toSet());"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns rank in string"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"    public Rank getRank() {"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"        return rank;"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean isInvestigator() {"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"        return true;"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns an immutable crime case set, which throws {@code UnsupportedOperationException}"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"     * if modification is attempted."},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"    public ObservableList\u003cCrimeCase\u003e getCrimeCases() {"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"        return crimeCases.asObservableList();"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns true if empty"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":"     * else if not empty"},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean isCaseListEmpty() {"},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"        if (getCrimeCases().isEmpty()) {"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"            return true;"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"        } else {"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"            return false;"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"     * Remove CrimeCase from list"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":"     * Remove the CrimeCase hashcode as well"},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"    public void removeCrimeCase(CrimeCase caseToRemove) throws CrimeCaseNotFoundException {"},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":"        crimeCases.remove(caseToRemove);"},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"        caseListHashed.remove((Integer) caseToRemove.hashCode());"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":"    public void clearCaseList() {"},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"        crimeCases.removeAll();"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":"    public ArrayList\u003cInteger\u003e getCaseListHashed() {"},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":"        return caseListHashed;"},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":"        return Objects.hash(name, phone, email, address, rank, tags);"},{"lineNumber":122,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":124,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"Marcus-cxc"},"content":"    public String toString() {"},{"lineNumber":126,"author":{"gitID":"Marcus-cxc"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":127,"author":{"gitID":"Marcus-cxc"},"content":"        builder.append(getName())"},{"lineNumber":128,"author":{"gitID":"Marcus-cxc"},"content":"                .append(\" Phone: \")"},{"lineNumber":129,"author":{"gitID":"Marcus-cxc"},"content":"                .append(getPhone())"},{"lineNumber":130,"author":{"gitID":"Marcus-cxc"},"content":"                .append(\" Email: \")"},{"lineNumber":131,"author":{"gitID":"Marcus-cxc"},"content":"                .append(getEmail())"},{"lineNumber":132,"author":{"gitID":"Marcus-cxc"},"content":"                .append(\" Address: \")"},{"lineNumber":133,"author":{"gitID":"Marcus-cxc"},"content":"                .append(getAddress())"},{"lineNumber":134,"author":{"gitID":"Marcus-cxc"},"content":"                .append(\" Rank: \")"},{"lineNumber":135,"author":{"gitID":"Marcus-cxc"},"content":"                .append(getRank())"},{"lineNumber":136,"author":{"gitID":"Marcus-cxc"},"content":"                .append(\" Tags: \");"},{"lineNumber":137,"author":{"gitID":"Marcus-cxc"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":138,"author":{"gitID":"Marcus-cxc"},"content":"        return builder.toString();"},{"lineNumber":139,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":122,"quentinkhoo":8,"-":10}},{"path":"src/main/java/seedu/investigapptor/storage/XmlAdaptedInvestigator.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.omg.CORBA.Object;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.person.investigator.Rank;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"public class XmlAdaptedInvestigator {"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Investigator\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"    private String name;"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"    private String phone;"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"    private String email;"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"    private String address;"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"    private String rank;"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"    private List\u003cInteger\u003e caseList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"    public XmlAdaptedInvestigator() {}"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"    public XmlAdaptedInvestigator(String name, String phone, String email, String address, String rank,"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"                                  List\u003cCrimeCase\u003e caseList, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"        this.name \u003d name;"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"        this.phone \u003d phone;"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":"        this.email \u003d email;"},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"        this.address \u003d address;"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"        this.rank \u003d rank;"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"        this.caseList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"        if (caseList !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"            for (CrimeCase c : caseList) {"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"                this.caseList.add(c.hashCode());"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":73,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Marcus-cxc"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":75,"author":{"gitID":"Marcus-cxc"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"Marcus-cxc"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":77,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Marcus-cxc"},"content":"    public XmlAdaptedInvestigator(Investigator source) {"},{"lineNumber":79,"author":{"gitID":"Marcus-cxc"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":80,"author":{"gitID":"Marcus-cxc"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":81,"author":{"gitID":"Marcus-cxc"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":82,"author":{"gitID":"Marcus-cxc"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":83,"author":{"gitID":"Marcus-cxc"},"content":"        rank \u003d source.getRank().getValue();"},{"lineNumber":84,"author":{"gitID":"Marcus-cxc"},"content":"        caseList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"Marcus-cxc"},"content":"        for (CrimeCase crimeCase : source.getCrimeCases()) {"},{"lineNumber":86,"author":{"gitID":"Marcus-cxc"},"content":"            caseList.add(crimeCase.hashCode());"},{"lineNumber":87,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"Marcus-cxc"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitID":"Marcus-cxc"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":90,"author":{"gitID":"Marcus-cxc"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":91,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":94,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Marcus-cxc"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Investigator object."},{"lineNumber":96,"author":{"gitID":"Marcus-cxc"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"Marcus-cxc"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":98,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"Marcus-cxc"},"content":"    public Investigator toModelType() throws IllegalValueException {"},{"lineNumber":100,"author":{"gitID":"Marcus-cxc"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":101,"author":{"gitID":"Marcus-cxc"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":102,"author":{"gitID":"Marcus-cxc"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":103,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":105,"author":{"gitID":"Marcus-cxc"},"content":"        final ArrayList\u003cInteger\u003e investigatorCases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":106,"author":{"gitID":"Marcus-cxc"},"content":"        for (int crimeCase: caseList) {"},{"lineNumber":107,"author":{"gitID":"Marcus-cxc"},"content":"            investigatorCases.add(crimeCase);"},{"lineNumber":108,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Marcus-cxc"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":111,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"Marcus-cxc"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":113,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"Marcus-cxc"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":116,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":117,"author":{"gitID":"Marcus-cxc"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"Marcus-cxc"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":121,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"Marcus-cxc"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":124,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":125,"author":{"gitID":"Marcus-cxc"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":126,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"Marcus-cxc"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":129,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"Marcus-cxc"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":132,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":133,"author":{"gitID":"Marcus-cxc"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":134,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":135,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"Marcus-cxc"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":137,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"Marcus-cxc"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":140,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":141,"author":{"gitID":"Marcus-cxc"},"content":"        if (this.rank \u003d\u003d null) {"},{"lineNumber":142,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rank.class.getSimpleName()));"},{"lineNumber":143,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"Marcus-cxc"},"content":"        if (!Rank.isValidRank(this.rank)) {"},{"lineNumber":145,"author":{"gitID":"Marcus-cxc"},"content":"            throw new IllegalValueException(Rank.MESSAGE_RANK_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"Marcus-cxc"},"content":"        final Rank rank \u003d new Rank(this.rank);"},{"lineNumber":148,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":149,"author":{"gitID":"Marcus-cxc"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":150,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":151,"author":{"gitID":"Marcus-cxc"},"content":"        return new Investigator(name, phone, email, address, rank, tags, investigatorCases);"},{"lineNumber":152,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":154,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"Marcus-cxc"},"content":"     * Compares if it is equal to another object"},{"lineNumber":156,"author":{"gitID":"Marcus-cxc"},"content":"     * @param other"},{"lineNumber":157,"author":{"gitID":"Marcus-cxc"},"content":"     * @return"},{"lineNumber":158,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":160,"author":{"gitID":"Marcus-cxc"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":161,"author":{"gitID":"Marcus-cxc"},"content":"            return true;"},{"lineNumber":162,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":164,"author":{"gitID":"Marcus-cxc"},"content":"        if (!(other instanceof XmlAdaptedInvestigator)) {"},{"lineNumber":165,"author":{"gitID":"Marcus-cxc"},"content":"            return false;"},{"lineNumber":166,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":168,"author":{"gitID":"Marcus-cxc"},"content":"        XmlAdaptedInvestigator otherPerson \u003d (XmlAdaptedInvestigator) other;"},{"lineNumber":169,"author":{"gitID":"Marcus-cxc"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":170,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":171,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":172,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":173,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 Objects.equals(rank, otherPerson.rank)"},{"lineNumber":174,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged)"},{"lineNumber":175,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 caseList.equals(otherPerson.caseList);"},{"lineNumber":176,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":156,"quentinkhoo":7,"-":14}},{"path":"src/main/java/seedu/investigapptor/storage/XmlAdaptedCrimeCase.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CaseName;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Description;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.EndDate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.StartDate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.Status;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":" * JAXB-friendly version of the CrimeCase."},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"public class XmlAdaptedCrimeCase {"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Case\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    private String description;"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"    private XmlAdaptedInvestigator investigator;"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"    private String startDate;"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    private String endDate;"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    private String status;"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    @XmlElement"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"     * Constructs an XmlAdaptedCrimeCase."},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"    public XmlAdaptedCrimeCase() {}"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"     * Constructs an {@code XmlAdaptedCrimeCase} with the given case details."},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"    public XmlAdaptedCrimeCase(String name, String description, XmlAdaptedInvestigator investigator, String startDate,"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"                               String endDate, String status, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"        this.name \u003d name;"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"        this.description \u003d description;"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"        this.investigator \u003d investigator;"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"        this.status \u003d status;"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"     * Converts a given CrimeCase into this class for JAXB use."},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedCrimeCase"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"    public XmlAdaptedCrimeCase(CrimeCase source) {"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        name \u003d source.getCaseName().crimeCaseName;"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        description \u003d source.getDescription().description;"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"        investigator \u003d new XmlAdaptedInvestigator(source.getCurrentInvestigator());"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        startDate \u003d source.getStartDate().date;"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"        endDate \u003d source.getEndDate().date;"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"        status \u003d source.getStatus().toString();"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s CrimeCase object."},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted case"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"    public CrimeCase toModelType() throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"        final List\u003cTag\u003e crimeCaseTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"            crimeCaseTags.add(tag.toModelType());"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"                    CaseName.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"        if (!CaseName.isValidCaseName(this.name)) {"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(CaseName.MESSAGE_CASE_NAME_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"        final CaseName name \u003d new CaseName(this.name);"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"        if (!Description.isValidDescription(this.description)) {"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"        if (this.investigator \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"                    Person.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":"        final Investigator investigator \u003d this.investigator.toModelType();"},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"        if (this.startDate \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"                    StartDate.class.getSimpleName()));"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"        if (!StartDate.isValidDate(this.startDate)) {"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"        final StartDate startDate \u003d new StartDate(this.startDate);"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"        if (this.endDate \u003d\u003d null) {"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"                    EndDate.class.getSimpleName()));"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"        if (!EndDate.isValidDate(this.endDate)) {"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(EndDate.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"        final EndDate endDate \u003d new EndDate(this.endDate);"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"                    Status.class.getSimpleName()));"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"leowweiching"},"content":"        if (!Status.isValidStatus(this.status)) {"},{"lineNumber":142,"author":{"gitID":"leowweiching"},"content":"            throw new IllegalValueException(Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"leowweiching"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":145,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":146,"author":{"gitID":"leowweiching"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(crimeCaseTags);"},{"lineNumber":147,"author":{"gitID":"leowweiching"},"content":"        return new CrimeCase(name, description, investigator, startDate, endDate, status, tags);"},{"lineNumber":148,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":150,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":152,"author":{"gitID":"leowweiching"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":153,"author":{"gitID":"leowweiching"},"content":"            return true;"},{"lineNumber":154,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":156,"author":{"gitID":"leowweiching"},"content":"        if (!(other instanceof XmlAdaptedCrimeCase)) {"},{"lineNumber":157,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":158,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":160,"author":{"gitID":"leowweiching"},"content":"        XmlAdaptedCrimeCase otherCrimeCase \u003d (XmlAdaptedCrimeCase) other;"},{"lineNumber":161,"author":{"gitID":"leowweiching"},"content":"        return Objects.equals(name, otherCrimeCase.name)"},{"lineNumber":162,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 Objects.equals(description, otherCrimeCase.description)"},{"lineNumber":163,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 Objects.equals(investigator, otherCrimeCase.investigator)"},{"lineNumber":164,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 Objects.equals(startDate, otherCrimeCase.startDate)"},{"lineNumber":165,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 Objects.equals(endDate, otherCrimeCase.endDate)"},{"lineNumber":166,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 Objects.equals(status, otherCrimeCase.status)"},{"lineNumber":167,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 tagged.equals(otherCrimeCase.tagged);"},{"lineNumber":168,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":149,"quentinkhoo":4,"-":16}},{"path":"src/main/java/seedu/investigapptor/model/person/investigator/Rank.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person.investigator;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":7,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Marcus-cxc"},"content":" * Represents an Investigator\u0027s rank in the investigapptor book."},{"lineNumber":9,"author":{"gitID":"Marcus-cxc"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRank(String)}"},{"lineNumber":10,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Marcus-cxc"},"content":"public class Rank {"},{"lineNumber":12,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":13,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":14,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String MESSAGE_RANK_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"Marcus-cxc"},"content":"            \"Rank can only contain numbers which present their rank as show below\\n\""},{"lineNumber":16,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"Constable \u003d 1\\n\""},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"Sergeant \u003d 2\\n\""},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"Inspector \u003d 3\\n\""},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"Detective \u003d 4\\n\""},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":"                    + \"Captain \u003d 5\\n\";"},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":"    public static final String RANK_VALIDATION_REGEX \u003d \"\\\\b[1-5]\\\\b\";"},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":"    private final int value;"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"     * Constructs a {@code Rank}."},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":"     * @param rank a value representing their rank"},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Marcus-cxc"},"content":"    public Rank(String rank) {"},{"lineNumber":30,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(rank);"},{"lineNumber":31,"author":{"gitID":"Marcus-cxc"},"content":"        checkArgument(isValidRank(rank), MESSAGE_RANK_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"Marcus-cxc"},"content":"        this.value \u003d Integer.parseInt(rank);"},{"lineNumber":33,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":35,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":37,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Marcus-cxc"},"content":"    public static boolean isValidRank(String test) {"},{"lineNumber":39,"author":{"gitID":"Marcus-cxc"},"content":"        return test.matches(RANK_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Marcus-cxc"},"content":"     * Returns rank\u0027s value in string"},{"lineNumber":43,"author":{"gitID":"Marcus-cxc"},"content":"     * @return"},{"lineNumber":44,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Marcus-cxc"},"content":"    public String getValue() {"},{"lineNumber":46,"author":{"gitID":"Marcus-cxc"},"content":"        return String.valueOf(value);"},{"lineNumber":47,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"Marcus-cxc"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitID":"Marcus-cxc"},"content":"        switch (value) {"},{"lineNumber":51,"author":{"gitID":"Marcus-cxc"},"content":"        case 1: return \"Constable\\n\";"},{"lineNumber":52,"author":{"gitID":"Marcus-cxc"},"content":"        case 2: return \"Sergeant\\n\";"},{"lineNumber":53,"author":{"gitID":"Marcus-cxc"},"content":"        case 3: return \"Inspector\\n\";"},{"lineNumber":54,"author":{"gitID":"Marcus-cxc"},"content":"        case 4: return \"Detective\\n\";"},{"lineNumber":55,"author":{"gitID":"Marcus-cxc"},"content":"        case 5: return \"Captain\\n\";"},{"lineNumber":56,"author":{"gitID":"Marcus-cxc"},"content":"        default: return \"Error\\n\";"},{"lineNumber":57,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":60,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"Marcus-cxc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"Marcus-cxc"},"content":"                || (other instanceof Rank // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Rank) other).value); // state check"},{"lineNumber":65,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":67,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"Marcus-cxc"},"content":"    public int hashCode() {"},{"lineNumber":69,"author":{"gitID":"Marcus-cxc"},"content":"        return value;"},{"lineNumber":70,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":72,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":67,"quentinkhoo":2,"-":3}},{"path":"src/main/java/seedu/investigapptor/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Represents a Person\u0027s name in the investigapptor book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"     * The first character of the investigapptor must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":55}},{"path":"src/main/java/seedu/investigapptor/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":29}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/Status.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":6,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"leowweiching"},"content":" * Represents a CrimeCase\u0027s status in the Investigapptor."},{"lineNumber":8,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":9,"author":{"gitID":"leowweiching"},"content":"public class Status {"},{"lineNumber":10,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_STATUS_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"            \"Crime case status should not be blank\";"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":"    public static final String CASE_CLOSE \u003d \"close\";"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":"    public static final String CASE_OPEN \u003d \"open\";"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"    private String status;"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"     * Constructs a {@code Status}."},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"    public Status() {"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"        this.status \u003d CASE_OPEN;"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"     * Constructs a {@code Status}."},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"     * @param status A valid status."},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    public Status(String status) {"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(status);"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"        checkArgument(isValidStatus(status), MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"        this.status \u003d status;"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"     * Toggles status depending on current status"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    public void toggleCase() {"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        if (this.status.equals(CASE_OPEN)) {"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"            this.status \u003d CASE_CLOSE;"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"            this.status \u003d CASE_OPEN;"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string is a valid case status."},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        return !test.trim().isEmpty() \u0026\u0026 (test.trim().equals(\"open\") || test.trim().equals(\"close\"));"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"        return this.status;"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.status.equals(((Status) other).status)); // state check"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        return status.hashCode();"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":69,"quentinkhoo":2,"-":2}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/CaseNameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":" * Tests that a {@code CrimeCase}\u0027s {@code CaseName} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"public class CaseNameContainsKeywordsPredicate implements Predicate\u003cCrimeCase\u003e {"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    public CaseNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"    public boolean test(CrimeCase crimeCase) {"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(crimeCase.getCaseName().crimeCaseName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":"                || (other instanceof CaseNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 this.keywords.equals(((CaseNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":20,"-":11}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/UniqueCrimeCaseList.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":" * A list of crimecases that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":" * \u003cp\u003e"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitID":"-"},"content":" *"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CrimeCase#equals(Object)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class UniqueCrimeCaseList implements Iterable\u003cCrimeCase\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cCrimeCase\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public UniqueCrimeCaseList(){}"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public UniqueCrimeCaseList(Set\u003cCrimeCase\u003e cases) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(cases);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        internalList.addAll(cases);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean contains(CrimeCase toCheck) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"     * Adds a crimeCase to the list."},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"     * @throws DuplicateCrimeCaseException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean add(CrimeCase toAdd) throws DuplicateCrimeCaseException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new DuplicateCrimeCaseException();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"     * Replaces the crimeCase {@code target} in the list with {@code editedCrimeCase}."},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":"     * @throws DuplicateCrimeCaseException if the replacement is equivalent to another existing crimecase in the list."},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"     * @throws CrimeCaseNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"    public void setCrimeCase(CrimeCase crimeCase, CrimeCase editedCrimeCase)"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"            throws DuplicateCrimeCaseException, CrimeCaseNotFoundException {"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(editedCrimeCase);"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        int index \u003d internalList.indexOf(crimeCase);"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"            throw new CrimeCaseNotFoundException();"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"        if (!crimeCase.equals(editedCrimeCase) \u0026\u0026 internalList.contains(editedCrimeCase)) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new DuplicateCrimeCaseException();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"        internalList.set(index, editedCrimeCase);"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"     * @throws CrimeCaseNotFoundException if no such person could be found in the list."},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"    public boolean remove(CrimeCase toRemove) throws CrimeCaseNotFoundException {"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(toRemove);"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"        final boolean crimeCaseFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"        if (!crimeCaseFoundAndDeleted) {"},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"            throw new CrimeCaseNotFoundException();"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"        return crimeCaseFoundAndDeleted;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Removes all cases from the list."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void removeAll() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        internalList.clear();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void setCrimeCases(UniqueCrimeCaseList replacement) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void setCrimeCases(List\u003cCrimeCase\u003e crimeCases) throws DuplicateCrimeCaseException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireAllNonNull(crimeCases);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final UniqueCrimeCaseList replacement \u003d new UniqueCrimeCaseList();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        for (final CrimeCase crimeCase : crimeCases) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            replacement.add(crimeCase);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        setCrimeCases(replacement);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"quentinkhoo"},"content":"     * Deletes {@code toDelete} tag from every crimecase in internalList"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"quentinkhoo"},"content":"    public void deleteTagFromCrimeCases(Tag toDelete) {"},{"lineNumber":122,"author":{"gitID":"quentinkhoo"},"content":"        for (CrimeCase crimeCase : internalList) {"},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"            crimeCase.deleteTag(toDelete);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCrimeCase\u003e asObservableList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns all CrimeCase in this list as a Set."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public Set\u003cCrimeCase\u003e toSet() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public Iterator\u003cCrimeCase\u003e iterator() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueCrimeCaseList // instanceof handles nulls"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueCrimeCaseList) other).internalList));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":46,"-":111}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":" * Tests that a {@code Person}\u0027s {@code Tags} matches any of the keywords given."},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cCrimeCase\u003e {"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    /* Returns true if keywords matches with any element in the set of tags of a person"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"    public boolean test(CrimeCase crimecase) {"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"                .anyMatch(crimecase.getTagsRaw()::contains);"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":26,"quentinkhoo":1,"-":4}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/EndDate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import java.time.DateTimeException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":10,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":" * Represents a CrimeCase\u0027s End date in the Investigapptor."},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":"public class EndDate {"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"            \"Input date must follow DD/MM/YYYY or D/M/YYYY format, and it should not be blank\";"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}\";"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"    public static final String LARGEST_DATE \u003d \"12/12/3000\";"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"    private static final int DOB_DAY_INDEX \u003d 0;"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"    private static final int DOB_MONTH_INDEX \u003d 1;"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    private static final int DOB_YEAR_INDEX \u003d 2;"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    private static String[] dateProperties;"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    public final String date;"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    private int day;"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    private int month;"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"    private int year;"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"     * Constructs a {@code date}."},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"     * @param date A valid date."},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    public EndDate(String date) {"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(date);"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"        setDateProperties(date);"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"     * Using LocalDate to retrieve the current date according to the format dd/mm/yyyy"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"     * @return String todayDate"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"    public static String getTodayDate() {"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        LocalDate now \u003d LocalDate.now();"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"        String todayDate \u003d now.format(formatter);"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        return todayDate;"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"    public static boolean isValidDate(String date) {"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"        if (isEmptyDate(date) || !date.matches(DATE_VALIDATION_REGEX) || !hasDateMonthYear(date)) {"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"            stringToDate(date);"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"            return true;"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"     * Returns {@code LocalDate} from given {@code String} date"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"    private static LocalDate stringToDate(String date) throws DateTimeException {"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        String[] dateProperties \u003d date.split(\"/\");"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"        int testDay \u003d Integer.parseInt(dateProperties[DOB_DAY_INDEX]);"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"        int testMonth \u003d Integer.parseInt(dateProperties[DOB_MONTH_INDEX]);"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"        int testYear \u003d Integer.parseInt(dateProperties[DOB_YEAR_INDEX]);"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"        return LocalDate.of(testYear, testMonth, testDay);"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string is empty or has only whitespaces"},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"    public static boolean isEmptyDate(String str) {"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"        return str.trim().isEmpty();"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string has a day, month, year input"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"    public static boolean hasDateMonthYear(String date) {"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"        String[] dateProperties \u003d date.split(\"/\");"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"        return dateProperties.length \u003d\u003d 3;"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"    public void setDateProperties(String date) {"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":"        this.dateProperties \u003d date.split(\"/\");"},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"        this.day \u003d Integer.parseInt(dateProperties[DOB_DAY_INDEX]);"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"        this.month \u003d Integer.parseInt(dateProperties[DOB_MONTH_INDEX]);"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"        this.year \u003d Integer.parseInt(dateProperties[DOB_YEAR_INDEX]);"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"    public int getYear() {"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"        return this.year;"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"    public int getMonth() {"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"        return this.month;"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"    public int getDay() {"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"        return this.day;"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"        return date.hashCode();"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof EndDate"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.date.equals(((EndDate) other).date));"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"    public String toString() {"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        builder.append(this.day)"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"                .append(\"/\")"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"                .append(this.month)"},{"lineNumber":136,"author":{"gitID":"leowweiching"},"content":"                .append(\"/\")"},{"lineNumber":137,"author":{"gitID":"leowweiching"},"content":"                .append(this.year);"},{"lineNumber":138,"author":{"gitID":"leowweiching"},"content":"        return builder.toString();"},{"lineNumber":139,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":132,"quentinkhoo":5,"-":3}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/Description.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":6,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"leowweiching"},"content":" * Represents a Crime Case\u0027s description in the Investigator Application."},{"lineNumber":8,"author":{"gitID":"leowweiching"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"},{"lineNumber":9,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":10,"author":{"gitID":"leowweiching"},"content":"public class Description {"},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":"            \"Crime case descriptions can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":"    public static final String CASE_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph}]*\";"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"    public final String description;"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"     * Constructs a {@code Description}."},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"     * @param description A valid description."},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    public Description(String description) {"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(description);"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"        this.description \u003d description;"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string is a valid case description."},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"        return test.trim() !\u003d null \u0026\u0026 !test.trim().isEmpty();"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        return description;"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof Description // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.description.equals(((Description) other).description)); // state check"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        return description.hashCode();"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":49,"quentinkhoo":2,"-":2}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/exceptions/DuplicateCrimeCaseException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.investigapptor.model.crimecase.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate CrimeCase objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DuplicateCrimeCaseException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public DuplicateCrimeCaseException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate cases\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":11,"quentinkhoo":1}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/CaseName.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":3,"author":{"gitID":"leowweiching"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"leowweiching"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":6,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"leowweiching"},"content":" * Represents a CrimeCase\u0027s name in the Investigapptor."},{"lineNumber":8,"author":{"gitID":"leowweiching"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCaseName(String)}"},{"lineNumber":9,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":10,"author":{"gitID":"leowweiching"},"content":"public class CaseName {"},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_CASE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":"            \"Crime case names should be alphanumeric, and not be blank\";"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":"    public static final String CASE_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":"    public final String crimeCaseName;"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"     * Constructs a {@code Name}."},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"     * @param name A valid name."},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    public CaseName(String name) {"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(name);"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"        checkArgument(isValidCaseName(name), MESSAGE_CASE_NAME_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"        this.crimeCaseName \u003d name;"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    public static boolean isValidCaseName(String test) {"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"        return test.matches(CASE_NAME_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        return crimeCaseName;"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof CaseName // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.crimeCaseName.equals(((CaseName) other).crimeCaseName)); // state check"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"        return crimeCaseName.hashCode();"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":52,"quentinkhoo":1}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/StartDate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import java.time.DateTimeException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":" * Represents a CrimeCase\u0027s Start date in the Investigapptor."},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":"public class StartDate {"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"            \"Input date must follow DD/MM/YYYY or D/M/YYYY format, cannot be greater than today\u0027s date,\""},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"                    + \" and should not be blank\";"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}\";"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    private static final int DOB_DAY_INDEX \u003d 0;"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    private static final int DOB_MONTH_INDEX \u003d 1;"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    private static final int DOB_YEAR_INDEX \u003d 2;"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    private static String[] dateProperties;"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    public final String date;"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"    private int day;"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    private int month;"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"    private int year;"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"     * Constructs a {@code date}."},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"     * @param date A valid date."},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"    public StartDate(String date) {"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(date);"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/YYYY\");"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":"        this.date \u003d stringToDate(date).format(formatter);"},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"        setDateProperties(date);"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"    public static boolean isValidDate(String date) {"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"        if (isEmptyDate(date) || !date.matches(DATE_VALIDATION_REGEX) || !hasDateMonthYear(date)) {"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"            // Check if input date exceeds today\u0027s date"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"            LocalDate inputDate \u003d stringToDate(date);"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"            LocalDate now \u003d LocalDate.now();"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"            LocalDate tomorrow \u003d now.plus(1, ChronoUnit.DAYS);"},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"            return inputDate.isBefore(tomorrow);"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":"     * Returns {@code LocalDate} from given {@code String} date"},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"    private static LocalDate stringToDate(String date) throws DateTimeException {"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"        String[] dateProperties \u003d date.split(\"/\");"},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"        int testDay \u003d Integer.parseInt(dateProperties[DOB_DAY_INDEX]);"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"        int testMonth \u003d Integer.parseInt(dateProperties[DOB_MONTH_INDEX]);"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        int testYear \u003d Integer.parseInt(dateProperties[DOB_YEAR_INDEX]);"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"        return LocalDate.of(testYear, testMonth, testDay);"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string is empty or has only whitespaces"},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"leowweiching"},"content":"    public static boolean isEmptyDate(String str) {"},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"        return str.trim().isEmpty();"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"     * Returns true if a given string has a day, month, year input"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":"    public static boolean hasDateMonthYear(String date) {"},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"        String[] dateProperties \u003d date.split(\"/\");"},{"lineNumber":91,"author":{"gitID":"leowweiching"},"content":"        return dateProperties.length \u003d\u003d 3;"},{"lineNumber":92,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":94,"author":{"gitID":"leowweiching"},"content":"    public void setDateProperties(String date) {"},{"lineNumber":95,"author":{"gitID":"leowweiching"},"content":"        this.dateProperties \u003d date.split(\"/\");"},{"lineNumber":96,"author":{"gitID":"leowweiching"},"content":"        this.day \u003d Integer.parseInt(dateProperties[DOB_DAY_INDEX]);"},{"lineNumber":97,"author":{"gitID":"leowweiching"},"content":"        this.month \u003d Integer.parseInt(dateProperties[DOB_MONTH_INDEX]);"},{"lineNumber":98,"author":{"gitID":"leowweiching"},"content":"        this.year \u003d Integer.parseInt(dateProperties[DOB_YEAR_INDEX]);"},{"lineNumber":99,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":101,"author":{"gitID":"leowweiching"},"content":"    public int getYear() {"},{"lineNumber":102,"author":{"gitID":"leowweiching"},"content":"        return this.year;"},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"    public int getMonth() {"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"        return this.month;"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":"    public int getDay() {"},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"        return this.day;"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"    public int hashCode() {"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"        return date.hashCode();"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof StartDate"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.date.equals(((StartDate) other).date));"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"    public String toString() {"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"        builder.append(this.day)"},{"lineNumber":129,"author":{"gitID":"leowweiching"},"content":"                .append(\"/\")"},{"lineNumber":130,"author":{"gitID":"leowweiching"},"content":"                .append(this.month)"},{"lineNumber":131,"author":{"gitID":"leowweiching"},"content":"                .append(\"/\")"},{"lineNumber":132,"author":{"gitID":"leowweiching"},"content":"                .append(this.year);"},{"lineNumber":133,"author":{"gitID":"leowweiching"},"content":"        return builder.toString();"},{"lineNumber":134,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":125,"quentinkhoo":5,"-":5}},{"path":"src/main/java/seedu/investigapptor/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"    private String investigapptorFilePath \u003d \"data/investigapptor.xml\";"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"    private String investigapptorName \u003d \"MyInvestigapptor\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"    public String getInvestigapptorFilePath() {"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"        return investigapptorFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":"    public void setInvestigapptorFilePath(String investigapptorFilePath) {"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"        this.investigapptorFilePath \u003d investigapptorFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"    public String getInvestigapptorName() {"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"        return investigapptorName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"    public void setInvestigapptorName(String investigapptorName) {"},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"        this.investigapptorName \u003d investigapptorName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 Objects.equals(investigapptorFilePath, o.investigapptorFilePath)"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 Objects.equals(investigapptorName, o.investigapptorName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"        return Objects.hash(guiSettings, investigapptorFilePath, investigapptorName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"        sb.append(\"\\nLocal data file location : \" + investigapptorFilePath);"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"        sb.append(\"\\nInvestigapptor name : \" + investigapptorName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":17,"-":61}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/StatusContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"pkaijun"},"content":"//@@author pkaijun"},{"lineNumber":7,"author":{"gitID":"pkaijun"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"pkaijun"},"content":" * Tests that a {@code CrimeCase}\u0027s {@code Status} matches any of the keywords given."},{"lineNumber":9,"author":{"gitID":"pkaijun"},"content":" */"},{"lineNumber":10,"author":{"gitID":"pkaijun"},"content":"public class StatusContainsKeywordsPredicate implements Predicate\u003cCrimeCase\u003e {"},{"lineNumber":11,"author":{"gitID":"pkaijun"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":12,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":13,"author":{"gitID":"pkaijun"},"content":"    public StatusContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":14,"author":{"gitID":"pkaijun"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":15,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":17,"author":{"gitID":"pkaijun"},"content":"    /* Returns true if keywords matches with any element in the set of status of a crimecase"},{"lineNumber":18,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"pkaijun"},"content":"    public boolean test(CrimeCase crimecase) {"},{"lineNumber":21,"author":{"gitID":"pkaijun"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"pkaijun"},"content":"                .anyMatch(crimecase.getStatus().toString()::contains);"},{"lineNumber":23,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":25,"author":{"gitID":"pkaijun"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"pkaijun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"pkaijun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"pkaijun"},"content":"                || (other instanceof StatusContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"pkaijun"},"content":"                \u0026\u0026 this.keywords.equals(((StatusContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"pkaijun"},"content":"}"}],"authorContributionMap":{"pkaijun":26,"quentinkhoo":1,"-":4}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/CaseContainsInvestigatorPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Marcus-cxc"},"content":"//@@author Marcus-cxc"},{"lineNumber":6,"author":{"gitID":"Marcus-cxc"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Marcus-cxc"},"content":" * Tests that a {@code CrimeCase}\u0027s {@code CaseName} matches any of the keywords given."},{"lineNumber":8,"author":{"gitID":"Marcus-cxc"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Marcus-cxc"},"content":"public class CaseContainsInvestigatorPredicate implements Predicate\u003cCrimeCase\u003e {"},{"lineNumber":10,"author":{"gitID":"Marcus-cxc"},"content":"    private final Integer hashcode;"},{"lineNumber":11,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":12,"author":{"gitID":"Marcus-cxc"},"content":"    public CaseContainsInvestigatorPredicate(Integer hashcode) {"},{"lineNumber":13,"author":{"gitID":"Marcus-cxc"},"content":"        this.hashcode \u003d hashcode;"},{"lineNumber":14,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":16,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean test(CrimeCase crimeCase) {"},{"lineNumber":18,"author":{"gitID":"Marcus-cxc"},"content":"        return hashcode \u003d\u003d crimeCase.getCurrentInvestigator().hashCode();"},{"lineNumber":19,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":21,"author":{"gitID":"Marcus-cxc"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":23,"author":{"gitID":"Marcus-cxc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":24,"author":{"gitID":"Marcus-cxc"},"content":"                || (other instanceof CaseContainsInvestigatorPredicate // instanceof handles nulls"},{"lineNumber":25,"author":{"gitID":"Marcus-cxc"},"content":"                \u0026\u0026 this.hashcode.equals(((CaseContainsInvestigatorPredicate) other).hashcode)); // state check"},{"lineNumber":26,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":28,"author":{"gitID":"Marcus-cxc"},"content":"}"}],"authorContributionMap":{"Marcus-cxc":24,"quentinkhoo":2,"-":2}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":8,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"leowweiching"},"content":" * Tests that a {@code CrimeCase}\u0027s {@code CaseName} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":11,"author":{"gitID":"leowweiching"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cCrimeCase\u003e {"},{"lineNumber":12,"author":{"gitID":"leowweiching"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":"    public boolean test(CrimeCase crimeCase) {"},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(crimeCase.getCaseName().crimeCaseName, keyword));"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":25,"quentinkhoo":2,"-":4}},{"path":"src/main/java/seedu/investigapptor/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":" * Represents a Tag in the investigapptor book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Get the raw tag string"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getRawString() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return tagName;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":3,"-":58}},{"path":"src/main/java/seedu/investigapptor/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Deletes a tag from the list."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void delete(Tag toDelete) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireNonNull(toDelete);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (contains(toDelete)) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            internalList.remove(toDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":4,"-":149}},{"path":"src/main/java/seedu/investigapptor/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TagNotFoundException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public TagNotFoundException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Tag does not exist\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"quentinkhoo":2,"-":10}},{"path":"src/main/java/seedu/investigapptor/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"quentinkhoo"},"content":"import static seedu.investigapptor.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorBackupEvent;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.commons.events.model.InvestigapptorChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.commons.events.ui.FilteredCrimeCaseListChangedEvent;"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.NoPasswordException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":" * Represents the in-memory model of the investigapptor book data."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    private final Investigapptor investigapptor;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cCrimeCase\u003e filteredCrimeCases;"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"    private Password password;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"     * Initializes a ModelManager with the given investigapptor and userPrefs."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"    public ModelManager(ReadOnlyInvestigapptor investigapptor, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":"        requireAllNonNull(investigapptor, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"        logger.fine(\"Initializing with investigapptor: \" + investigapptor + \" and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"        this.investigapptor \u003d new Investigapptor(investigapptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        filteredCrimeCases \u003d new FilteredList\u003c\u003e(this.investigapptor.getCrimeCaseList());"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.investigapptor.getPersonList());"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"        password \u003d this.investigapptor.getPassword();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"        this(new Investigapptor(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"    public void resetData(ReadOnlyInvestigapptor newData) {"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.resetData(newData);"},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    public ReadOnlyInvestigapptor getInvestigapptor() {"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"        return investigapptor;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"    private void indicateInvestigapptorChanged() {"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        raise(new InvestigapptorChangedEvent(investigapptor));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"pkaijun"},"content":"    //@@author pkaijun"},{"lineNumber":75,"author":{"gitID":"pkaijun"},"content":"    /** Raises an event to indicate the filtered crime cases list has changed */"},{"lineNumber":76,"author":{"gitID":"pkaijun"},"content":"    private void indicateFilteredCrimeCaseListChanged() {"},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"        raise(new FilteredCrimeCaseListChangedEvent(filteredCrimeCases));"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.removePerson(target);"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.addPerson(person);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.updatePerson(target, editedPerson);"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":104,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"leowweiching"},"content":"    public synchronized void deleteCrimeCase(CrimeCase target) throws CrimeCaseNotFoundException {"},{"lineNumber":106,"author":{"gitID":"leowweiching"},"content":"        investigapptor.removeCrimeCase(target);"},{"lineNumber":107,"author":{"gitID":"leowweiching"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":108,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":110,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":111,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"leowweiching"},"content":"    public synchronized void addCrimeCase(CrimeCase crimecase) throws DuplicateCrimeCaseException {"},{"lineNumber":113,"author":{"gitID":"leowweiching"},"content":"        investigapptor.addCrimeCase(crimecase);"},{"lineNumber":114,"author":{"gitID":"leowweiching"},"content":"        updateFilteredCrimeCaseList(PREDICATE_SHOW_ALL_CASES);"},{"lineNumber":115,"author":{"gitID":"leowweiching"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":116,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":118,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":119,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"leowweiching"},"content":"    public void updateCrimeCase(CrimeCase target, CrimeCase editedCase)"},{"lineNumber":121,"author":{"gitID":"leowweiching"},"content":"            throws DuplicateCrimeCaseException, CrimeCaseNotFoundException {"},{"lineNumber":122,"author":{"gitID":"leowweiching"},"content":"        requireAllNonNull(target, editedCase);"},{"lineNumber":123,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":124,"author":{"gitID":"leowweiching"},"content":"        investigapptor.updateCrimeCase(target, editedCase);"},{"lineNumber":125,"author":{"gitID":"leowweiching"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":126,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":128,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag toDelete) throws TagNotFoundException {"},{"lineNumber":131,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.deleteTag(toDelete);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void backUpInvestigapptor(String fileName) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        raise(new InvestigapptorBackupEvent(investigapptor, fileName));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":138,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":139,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"quentinkhoo"},"content":"    public void updatePassword(Password password) throws InvalidPasswordException {"},{"lineNumber":141,"author":{"gitID":"quentinkhoo"},"content":"        investigapptor.updatePassword(password);"},{"lineNumber":142,"author":{"gitID":"quentinkhoo"},"content":"        indicateInvestigapptorChanged();"},{"lineNumber":143,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":145,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"quentinkhoo"},"content":"    public void removePassword() throws NoPasswordException {"},{"lineNumber":147,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"quentinkhoo"},"content":"            investigapptor.removePassword();"},{"lineNumber":149,"author":{"gitID":"quentinkhoo"},"content":"            indicateInvestigapptorChanged();"},{"lineNumber":150,"author":{"gitID":"quentinkhoo"},"content":"        } catch (NoPasswordException npe) {"},{"lineNumber":151,"author":{"gitID":"quentinkhoo"},"content":"            throw new NoPasswordException(npe.getMessage());"},{"lineNumber":152,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":155,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":160,"author":{"gitID":"quentinkhoo"},"content":"     * {@code investigapptor}"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Cases List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":176,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"leowweiching"},"content":"     * Returns an unmodifiable view of the list of {@code CrimeCase} backed by the internal list of"},{"lineNumber":178,"author":{"gitID":"leowweiching"},"content":"     * {@code investigapptor}"},{"lineNumber":179,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"leowweiching"},"content":"    public ObservableList\u003cCrimeCase\u003e getFilteredCrimeCaseList() {"},{"lineNumber":182,"author":{"gitID":"leowweiching"},"content":"        return FXCollections.unmodifiableObservableList(filteredCrimeCases);"},{"lineNumber":183,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":185,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":186,"author":{"gitID":"leowweiching"},"content":"    public void updateFilteredCrimeCaseList(Predicate\u003cCrimeCase\u003e predicate) {"},{"lineNumber":187,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(predicate);"},{"lineNumber":188,"author":{"gitID":"leowweiching"},"content":"        filteredCrimeCases.setPredicate(predicate);"},{"lineNumber":189,"author":{"gitID":"leowweiching"},"content":"        indicateFilteredCrimeCaseListChanged();"},{"lineNumber":190,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":192,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"leowweiching"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":194,"author":{"gitID":"leowweiching"},"content":"        // short circuit if same object"},{"lineNumber":195,"author":{"gitID":"leowweiching"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":196,"author":{"gitID":"leowweiching"},"content":"            return true;"},{"lineNumber":197,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":199,"author":{"gitID":"leowweiching"},"content":"        // instanceof handles nulls"},{"lineNumber":200,"author":{"gitID":"leowweiching"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":201,"author":{"gitID":"leowweiching"},"content":"            return false;"},{"lineNumber":202,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":204,"author":{"gitID":"leowweiching"},"content":"        // state check"},{"lineNumber":205,"author":{"gitID":"leowweiching"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":206,"author":{"gitID":"leowweiching"},"content":"        return investigapptor.equals(other.investigapptor)"},{"lineNumber":207,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":208,"author":{"gitID":"leowweiching"},"content":"                \u0026\u0026 filteredCrimeCases.equals(other.filteredCrimeCases);"},{"lineNumber":209,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":211,"author":{"gitID":"leowweiching"},"content":"}"}],"authorContributionMap":{"leowweiching":63,"pkaijun":6,"quentinkhoo":57,"-":85}},{"path":"src/main/java/seedu/investigapptor/model/crimecase/CrimeCase.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model.crimecase;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.investigapptor.model.crimecase.Status.CASE_CLOSE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"leowweiching"},"content":"//@@author leowweiching"},{"lineNumber":14,"author":{"gitID":"leowweiching"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"leowweiching"},"content":" * Represents a Crime Case in the Investigapptor."},{"lineNumber":16,"author":{"gitID":"leowweiching"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitID":"leowweiching"},"content":" */"},{"lineNumber":18,"author":{"gitID":"leowweiching"},"content":"public class CrimeCase {"},{"lineNumber":19,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":20,"author":{"gitID":"leowweiching"},"content":"    private final CaseName name;"},{"lineNumber":21,"author":{"gitID":"leowweiching"},"content":"    private final Description description;"},{"lineNumber":22,"author":{"gitID":"leowweiching"},"content":"    private final StartDate startDate;"},{"lineNumber":23,"author":{"gitID":"leowweiching"},"content":"    private final EndDate endDate;"},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    private final Investigator currentInvestigator;"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    private final Status status;"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":29,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"leowweiching"},"content":"     * Every field must be present and not null"},{"lineNumber":31,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"leowweiching"},"content":"    public CrimeCase(CaseName name, Description description, Investigator currentInvestigator,"},{"lineNumber":33,"author":{"gitID":"leowweiching"},"content":"                     StartDate startDate, EndDate endDate, Status status, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitID":"leowweiching"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"leowweiching"},"content":"        this.description \u003d description;"},{"lineNumber":36,"author":{"gitID":"leowweiching"},"content":"        this.currentInvestigator \u003d new Investigator(currentInvestigator.getName(), currentInvestigator.getPhone(),"},{"lineNumber":37,"author":{"gitID":"leowweiching"},"content":"        currentInvestigator.getEmail(), currentInvestigator.getAddress(), currentInvestigator.getRank(),"},{"lineNumber":38,"author":{"gitID":"leowweiching"},"content":"                currentInvestigator.getTags());"},{"lineNumber":39,"author":{"gitID":"leowweiching"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":40,"author":{"gitID":"leowweiching"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":41,"author":{"gitID":"leowweiching"},"content":"        this.status \u003d status;"},{"lineNumber":42,"author":{"gitID":"leowweiching"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":43,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":45,"author":{"gitID":"leowweiching"},"content":"    public CaseName getCaseName() {"},{"lineNumber":46,"author":{"gitID":"leowweiching"},"content":"        return name;"},{"lineNumber":47,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":49,"author":{"gitID":"leowweiching"},"content":"    public Description getDescription() {"},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"        return description;"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    public Investigator getCurrentInvestigator() {"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"        return currentInvestigator;"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"    public StartDate getStartDate() {"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"        return startDate;"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"    public EndDate getEndDate() {"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"        return endDate;"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"    public Status getStatus() {"},{"lineNumber":66,"author":{"gitID":"leowweiching"},"content":"        return status;"},{"lineNumber":67,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":69,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"leowweiching"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":71,"author":{"gitID":"leowweiching"},"content":"     * if modification is attempted."},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":77,"author":{"gitID":"pkaijun"},"content":"    //@@author pkaijun"},{"lineNumber":78,"author":{"gitID":"pkaijun"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"pkaijun"},"content":"     * Returns an immutable tag set of type String"},{"lineNumber":80,"author":{"gitID":"pkaijun"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"pkaijun"},"content":"    public Set\u003cString\u003e getTagsRaw() {"},{"lineNumber":82,"author":{"gitID":"pkaijun"},"content":"        Set\u003cString\u003e rawTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":83,"author":{"gitID":"pkaijun"},"content":"        for (Tag s : tags) {"},{"lineNumber":84,"author":{"gitID":"pkaijun"},"content":"            rawTags.add(s.getRawString().toLowerCase());"},{"lineNumber":85,"author":{"gitID":"pkaijun"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"pkaijun"},"content":""},{"lineNumber":87,"author":{"gitID":"pkaijun"},"content":"        return rawTags;"},{"lineNumber":88,"author":{"gitID":"pkaijun"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"pkaijun"},"content":"    //@@author"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Deletes (@code toDelete) tag"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag toDelete) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        tags.delete(toDelete);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":"        if (!(other instanceof CrimeCase)) {"},{"lineNumber":105,"author":{"gitID":"quentinkhoo"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":108,"author":{"gitID":"quentinkhoo"},"content":"        CrimeCase otherCrimeCase \u003d (CrimeCase) other;"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"        return otherCrimeCase.getCaseName().equals(this.getCaseName())"},{"lineNumber":110,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 otherCrimeCase.getDescription().equals(this.getDescription())"},{"lineNumber":111,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 otherCrimeCase.getStartDate().equals(this.getStartDate());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return Objects.hash(name, startDate, status, tags);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":123,"author":{"gitID":"quentinkhoo"},"content":"        builder.append(getCaseName())"},{"lineNumber":124,"author":{"gitID":"quentinkhoo"},"content":"                .append(\" Description: \")"},{"lineNumber":125,"author":{"gitID":"quentinkhoo"},"content":"                .append(getDescription())"},{"lineNumber":126,"author":{"gitID":"quentinkhoo"},"content":"                .append(\" Current Investigator: \")"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                .append(getCurrentInvestigator().getName())"},{"lineNumber":128,"author":{"gitID":"quentinkhoo"},"content":"                .append(\" Status: \")"},{"lineNumber":129,"author":{"gitID":"quentinkhoo"},"content":"                .append(getStatus())"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .append(\" Start Date: \")"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .append(getStartDate());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (getStatus().toString().equals(CASE_CLOSE)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            builder.append(\" End Date: \")"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    .append(getEndDate());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        builder.append(\" Tags: \");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"leowweiching":64,"pkaijun":13,"quentinkhoo":23,"-":43}},{"path":"src/main/java/seedu/investigapptor/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.InvalidPasswordException;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.NoPasswordException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":25,"author":{"gitID":"leowweiching"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":26,"author":{"gitID":"leowweiching"},"content":"    Predicate\u003cCrimeCase\u003e PREDICATE_SHOW_ALL_CASES \u003d unused -\u003e true;"},{"lineNumber":27,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":28,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    void resetData(ReadOnlyInvestigapptor newData);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"    /** Returns the Investigapptor */"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    ReadOnlyInvestigapptor getInvestigapptor();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":51,"author":{"gitID":"leowweiching"},"content":"    /** Deletes the given case. */"},{"lineNumber":52,"author":{"gitID":"leowweiching"},"content":"    void deleteCrimeCase(CrimeCase target) throws CrimeCaseNotFoundException;"},{"lineNumber":53,"author":{"gitID":"leowweiching"},"content":"    /** Adds the given case */"},{"lineNumber":54,"author":{"gitID":"leowweiching"},"content":"    void addCrimeCase(CrimeCase crimecase) throws DuplicateCrimeCaseException;"},{"lineNumber":55,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"leowweiching"},"content":"     * Replaces the given case {@code target} with {@code editedCase}."},{"lineNumber":57,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"leowweiching"},"content":"     * @throws DuplicateCrimeCaseException if updating the crimecase\u0027s details causes the crimecase to be equivalent to"},{"lineNumber":59,"author":{"gitID":"leowweiching"},"content":"     *      another existing crimecase in the list."},{"lineNumber":60,"author":{"gitID":"leowweiching"},"content":"     * @throws CrimeCaseNotFoundException if {@code target} could not be found in the list."},{"lineNumber":61,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"leowweiching"},"content":"    void updateCrimeCase(CrimeCase target, CrimeCase editedCrimeCase)"},{"lineNumber":63,"author":{"gitID":"leowweiching"},"content":"            throws DuplicateCrimeCaseException, CrimeCaseNotFoundException;"},{"lineNumber":64,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":65,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered investigator list */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    //ObservableList\u003cInvestigator\u003e getFilteredInvestigatorList();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":73,"author":{"gitID":"leowweiching"},"content":"    /** Returns an unmodifiable view of the filtered case list */"},{"lineNumber":74,"author":{"gitID":"leowweiching"},"content":"    ObservableList\u003cCrimeCase\u003e getFilteredCrimeCaseList();"},{"lineNumber":75,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":84,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"leowweiching"},"content":"     * Updates the filter of the filtered case list to filter by the given {@code predicate}."},{"lineNumber":86,"author":{"gitID":"leowweiching"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":87,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"leowweiching"},"content":"    void updateFilteredCrimeCaseList(Predicate\u003cCrimeCase\u003e predicate);"},{"lineNumber":89,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":90,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Deletes given tag from system"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    void deleteTag(Tag toDelete)throws TagNotFoundException;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /** Save Investigapptor information as a new name */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    void backUpInvestigapptor(String fileName);"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":99,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"quentinkhoo"},"content":"     * Updates the password with the given password."},{"lineNumber":102,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"quentinkhoo"},"content":"    void updatePassword(Password password) throws InvalidPasswordException;"},{"lineNumber":104,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":105,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"quentinkhoo"},"content":"     * Removes the existing password"},{"lineNumber":107,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"quentinkhoo"},"content":"    void removePassword() throws NoPasswordException;"},{"lineNumber":109,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"leowweiching":34,"quentinkhoo":23,"-":53}},{"path":"src/main/java/seedu/investigapptor/model/Investigapptor.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.logic.commands.exceptions.NoPasswordException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.CrimeCase;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.UniqueCrimeCaseList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.CrimeCaseNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.investigapptor.model.crimecase.exceptions.DuplicateCrimeCaseException;"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.UniquePersonList;"},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.person.investigator.Investigator;"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.UniqueTagList;"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"import seedu.investigapptor.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":" * Wraps all data at the investigapptor-book level"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"public class Investigapptor implements ReadOnlyInvestigapptor {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniqueCrimeCaseList cases;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    private Password password;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        cases \u003d new UniqueCrimeCaseList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"    public Investigapptor() {"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"        this.password \u003d new Password();"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"    public Investigapptor(String password) {"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"     * Creates an Investigapptor using the Investigators, CrimeCases, Password and Tags in the {@code toBeCopied}"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    public Investigapptor(ReadOnlyInvestigapptor toBeCopied) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":77,"author":{"gitID":"leowweiching"},"content":"    public void setCrimeCases(List\u003cCrimeCase\u003e cases) throws DuplicateCrimeCaseException {"},{"lineNumber":78,"author":{"gitID":"leowweiching"},"content":"        this.cases.setCrimeCases(cases);"},{"lineNumber":79,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":81,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"    public void setPassword(String password) {"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"        String passwordHash \u003d Password.generatePasswordHash(password);"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"        this.password \u003d new Password(passwordHash);"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"    public void setPassword(Password password) {"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"        this.password \u003d password;"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"quentinkhoo"},"content":"     * Resets the existing data of this {@code Investigapptor} with {@code newData}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"quentinkhoo"},"content":"    public void resetData(ReadOnlyInvestigapptor newData) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cCrimeCase\u003e syncedCrimeCaseList \u003d newData.getCrimeCaseList().stream()"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            setCrimeCases(syncedCrimeCaseList);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Investigapptors should not have duplicate cases\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":117,"author":{"gitID":"quentinkhoo"},"content":"            throw new AssertionError(\"Investigapptor should not have duplicate investigators\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":120,"author":{"gitID":"quentinkhoo"},"content":"        setPassword(newData.getPassword());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"quentinkhoo"},"content":"     * Adds a person to the investigapptor book."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":140,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"Marcus-cxc"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":142,"author":{"gitID":"Marcus-cxc"},"content":"     * {@code Investigapptor}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":143,"author":{"gitID":"Marcus-cxc"},"content":"     *"},{"lineNumber":144,"author":{"gitID":"Marcus-cxc"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":145,"author":{"gitID":"Marcus-cxc"},"content":"     *                                  another existing person in the list."},{"lineNumber":146,"author":{"gitID":"Marcus-cxc"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":147,"author":{"gitID":"Marcus-cxc"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":148,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"Marcus-cxc"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":150,"author":{"gitID":"Marcus-cxc"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":151,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":152,"author":{"gitID":"Marcus-cxc"},"content":"        if (target instanceof Investigator) {"},{"lineNumber":153,"author":{"gitID":"Marcus-cxc"},"content":"            for (CrimeCase c : ((Investigator) target).getCrimeCases()) {"},{"lineNumber":154,"author":{"gitID":"Marcus-cxc"},"content":"                recreateCasesForInvestigator((Investigator) editedPerson, c);"},{"lineNumber":155,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"Marcus-cxc"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":158,"author":{"gitID":"Marcus-cxc"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":159,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"Marcus-cxc"},"content":"     * Converts {@code key} hashcode list of cases into CrimeCase object"},{"lineNumber":162,"author":{"gitID":"Marcus-cxc"},"content":"     * Throws AssertionError when duplicate case occur"},{"lineNumber":163,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"Marcus-cxc"},"content":"    private void recreateCasesForInvestigator(Investigator inv, CrimeCase c) {"},{"lineNumber":165,"author":{"gitID":"Marcus-cxc"},"content":"        CrimeCase newCase \u003d syncWithMasterTagList(new CrimeCase(c.getCaseName(), c.getDescription(), inv,"},{"lineNumber":166,"author":{"gitID":"Marcus-cxc"},"content":"                c.getStartDate(), c.getEndDate(), c.getStatus(), c.getTags()));"},{"lineNumber":167,"author":{"gitID":"Marcus-cxc"},"content":"        try {"},{"lineNumber":168,"author":{"gitID":"Marcus-cxc"},"content":"            cases.setCrimeCase(c, newCase);"},{"lineNumber":169,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":170,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"Duplicate Case when editing investigator\");"},{"lineNumber":171,"author":{"gitID":"Marcus-cxc"},"content":"        } catch (CrimeCaseNotFoundException e) {"},{"lineNumber":172,"author":{"gitID":"Marcus-cxc"},"content":"            throw new AssertionError(\"Case not found when editing investigator\");"},{"lineNumber":173,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"Marcus-cxc"},"content":"     * Removes {@code key} from this {@code Investigapptor}."},{"lineNumber":177,"author":{"gitID":"Marcus-cxc"},"content":"     *"},{"lineNumber":178,"author":{"gitID":"Marcus-cxc"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code Investigapptor}."},{"lineNumber":179,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"Marcus-cxc"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":181,"author":{"gitID":"Marcus-cxc"},"content":"        if (persons.remove(key)) {"},{"lineNumber":182,"author":{"gitID":"Marcus-cxc"},"content":"            return true;"},{"lineNumber":183,"author":{"gitID":"Marcus-cxc"},"content":"        } else {"},{"lineNumber":184,"author":{"gitID":"Marcus-cxc"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":185,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":188,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"Marcus-cxc"},"content":"     * Converts {@code key} hashcode list of cases into CrimeCase object"},{"lineNumber":190,"author":{"gitID":"Marcus-cxc"},"content":"     * Throws AssertionError when duplicate case occur"},{"lineNumber":191,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"Marcus-cxc"},"content":"    private void convertHashToCases(Investigator key) {"},{"lineNumber":193,"author":{"gitID":"Marcus-cxc"},"content":"        requireNonNull(key.getCaseListHashed());"},{"lineNumber":194,"author":{"gitID":"Marcus-cxc"},"content":"        for (Integer i : key.getCaseListHashed()) {"},{"lineNumber":195,"author":{"gitID":"Marcus-cxc"},"content":"            try {"},{"lineNumber":196,"author":{"gitID":"Marcus-cxc"},"content":"                addCaseFromHash(key, i);"},{"lineNumber":197,"author":{"gitID":"Marcus-cxc"},"content":"            } catch (DuplicateCrimeCaseException e) {"},{"lineNumber":198,"author":{"gitID":"Marcus-cxc"},"content":"                throw new AssertionError(\"Not possible, duplicate case while retrieving from xml\");"},{"lineNumber":199,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":200,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"Marcus-cxc"},"content":"     * Check {@code hash} if it matches to any CrimeCase in the cases list"},{"lineNumber":204,"author":{"gitID":"Marcus-cxc"},"content":"     * if match, add the CrimeCase to the investigator {@code key}"},{"lineNumber":205,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"Marcus-cxc"},"content":"    private void addCaseFromHash (Investigator key, int hash) throws DuplicateCrimeCaseException {"},{"lineNumber":207,"author":{"gitID":"Marcus-cxc"},"content":"        for (CrimeCase c : cases) {"},{"lineNumber":208,"author":{"gitID":"Marcus-cxc"},"content":"            if (c.hashCode() \u003d\u003d hash) {"},{"lineNumber":209,"author":{"gitID":"Marcus-cxc"},"content":"                key.addCrimeCase(c);"},{"lineNumber":210,"author":{"gitID":"Marcus-cxc"},"content":"            }"},{"lineNumber":211,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"Marcus-cxc"},"content":"    //// case-level operations"},{"lineNumber":214,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":215,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":216,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"leowweiching"},"content":"     * Adds a case to the investigapptor book."},{"lineNumber":218,"author":{"gitID":"leowweiching"},"content":"     * Also checks the new case\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":219,"author":{"gitID":"leowweiching"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":220,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":221,"author":{"gitID":"leowweiching"},"content":"     * @throws DuplicateCrimeCaseException if an equivalent case already exists."},{"lineNumber":222,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"leowweiching"},"content":"    public void addCrimeCase(CrimeCase c) throws DuplicateCrimeCaseException {"},{"lineNumber":224,"author":{"gitID":"leowweiching"},"content":"        CrimeCase crimeCase \u003d syncWithMasterTagList(c);"},{"lineNumber":225,"author":{"gitID":"leowweiching"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":226,"author":{"gitID":"leowweiching"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any case"},{"lineNumber":227,"author":{"gitID":"leowweiching"},"content":"        // in the case list."},{"lineNumber":228,"author":{"gitID":"leowweiching"},"content":"        if (cases.add(crimeCase)) {"},{"lineNumber":229,"author":{"gitID":"leowweiching"},"content":"            addCrimeCaseToInvestigator(crimeCase);"},{"lineNumber":230,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":233,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":234,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"leowweiching"},"content":"     * Replaces the given case {@code target} in the list with {@code editedCase}."},{"lineNumber":236,"author":{"gitID":"leowweiching"},"content":"     * {@code Investigapptor}\u0027s tag list will be updated with the tags of {@code editedCase}."},{"lineNumber":237,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":238,"author":{"gitID":"leowweiching"},"content":"     * @throws DuplicateCrimeCaseException if updating the crimeCase\u0027s details causes the crimeCase to be equivalent to"},{"lineNumber":239,"author":{"gitID":"leowweiching"},"content":"     *                                  another existing crimeCase in the list."},{"lineNumber":240,"author":{"gitID":"leowweiching"},"content":"     * @throws CrimeCaseNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":241,"author":{"gitID":"leowweiching"},"content":"     * @see #syncWithMasterTagList(CrimeCase)"},{"lineNumber":242,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"leowweiching"},"content":"    public void updateCrimeCase(CrimeCase target, CrimeCase editedCase)"},{"lineNumber":244,"author":{"gitID":"leowweiching"},"content":"            throws DuplicateCrimeCaseException, CrimeCaseNotFoundException {"},{"lineNumber":245,"author":{"gitID":"leowweiching"},"content":"        requireNonNull(editedCase);"},{"lineNumber":246,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":247,"author":{"gitID":"leowweiching"},"content":"        CrimeCase syncedEditedCrimeCase \u003d syncWithMasterTagList(editedCase);"},{"lineNumber":248,"author":{"gitID":"leowweiching"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":249,"author":{"gitID":"leowweiching"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":250,"author":{"gitID":"leowweiching"},"content":"        // in the crimeCase list."},{"lineNumber":251,"author":{"gitID":"leowweiching"},"content":"        removeCrimeCaseFromInvestigator(target);"},{"lineNumber":252,"author":{"gitID":"leowweiching"},"content":"        cases.setCrimeCase(target, syncedEditedCrimeCase);"},{"lineNumber":253,"author":{"gitID":"leowweiching"},"content":"        addCrimeCaseToInvestigator(syncedEditedCrimeCase);"},{"lineNumber":254,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":258,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"leowweiching"},"content":"     * Removes {@code key} from this {@code Investigapptor}."},{"lineNumber":260,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":261,"author":{"gitID":"leowweiching"},"content":"     * @throws CrimeCaseNotFoundException if the {@code key} is not in this {@code Investigapptor}."},{"lineNumber":262,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"leowweiching"},"content":"    public boolean removeCrimeCase(CrimeCase key) throws CrimeCaseNotFoundException {"},{"lineNumber":264,"author":{"gitID":"leowweiching"},"content":"        if (cases.remove(key)) {"},{"lineNumber":265,"author":{"gitID":"leowweiching"},"content":"            removeCrimeCaseFromInvestigator(key);"},{"lineNumber":266,"author":{"gitID":"leowweiching"},"content":"            return true;"},{"lineNumber":267,"author":{"gitID":"leowweiching"},"content":"        } else {"},{"lineNumber":268,"author":{"gitID":"leowweiching"},"content":"            throw new CrimeCaseNotFoundException();"},{"lineNumber":269,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":272,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":273,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"leowweiching"},"content":"     * Adds {@code crimeCase} to {@code Investigator}."},{"lineNumber":275,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":276,"author":{"gitID":"leowweiching"},"content":"     * @throws DuplicateCrimeCaseException if the {@code key} is not in this {@code Investigapptor}."},{"lineNumber":277,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"leowweiching"},"content":"    public void addCrimeCaseToInvestigator(CrimeCase key) throws DuplicateCrimeCaseException {"},{"lineNumber":279,"author":{"gitID":"leowweiching"},"content":"        if (key.getCurrentInvestigator() !\u003d null) {"},{"lineNumber":280,"author":{"gitID":"leowweiching"},"content":"            for (Person person : persons) {"},{"lineNumber":281,"author":{"gitID":"leowweiching"},"content":"                // Finds the independent Investigator object that was assigned under the case"},{"lineNumber":282,"author":{"gitID":"leowweiching"},"content":"                if (key.getCurrentInvestigator().equals(person)) {"},{"lineNumber":283,"author":{"gitID":"leowweiching"},"content":"                    Investigator investigator \u003d (Investigator) person;"},{"lineNumber":284,"author":{"gitID":"leowweiching"},"content":"                    investigator.addCrimeCase(key);"},{"lineNumber":285,"author":{"gitID":"leowweiching"},"content":"                    break;"},{"lineNumber":286,"author":{"gitID":"leowweiching"},"content":"                }"},{"lineNumber":287,"author":{"gitID":"leowweiching"},"content":"            }"},{"lineNumber":288,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":291,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":292,"author":{"gitID":"leowweiching"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"leowweiching"},"content":"     * Removes {@code key} from {@code Investigator}."},{"lineNumber":294,"author":{"gitID":"leowweiching"},"content":"     *"},{"lineNumber":295,"author":{"gitID":"leowweiching"},"content":"     * @throws CrimeCaseNotFoundException if the {@code key} is not in this {@code Investigapptor}."},{"lineNumber":296,"author":{"gitID":"leowweiching"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"leowweiching"},"content":"    public void removeCrimeCaseFromInvestigator(CrimeCase key) throws CrimeCaseNotFoundException {"},{"lineNumber":298,"author":{"gitID":"leowweiching"},"content":"        if (key.getCurrentInvestigator() !\u003d null) {"},{"lineNumber":299,"author":{"gitID":"leowweiching"},"content":"            for (Person person : persons) {"},{"lineNumber":300,"author":{"gitID":"leowweiching"},"content":"                // Finds the independent Investigator object that was assigned under the case"},{"lineNumber":301,"author":{"gitID":"leowweiching"},"content":"                if (key.getCurrentInvestigator().equals(person)) {"},{"lineNumber":302,"author":{"gitID":"leowweiching"},"content":"                    Investigator investigator \u003d (Investigator) person;"},{"lineNumber":303,"author":{"gitID":"leowweiching"},"content":"                    investigator.removeCrimeCase(key);"},{"lineNumber":304,"author":{"gitID":"leowweiching"},"content":"                    break;"},{"lineNumber":305,"author":{"gitID":"leowweiching"},"content":"                }"},{"lineNumber":306,"author":{"gitID":"leowweiching"},"content":"            }"},{"lineNumber":307,"author":{"gitID":"leowweiching"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":310,"author":{"gitID":"leowweiching"},"content":"    //// tag-level operations"},{"lineNumber":311,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":312,"author":{"gitID":"leowweiching"},"content":"    //@@author"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author Marcus-cxc"},{"lineNumber":317,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":318,"author":{"gitID":"Marcus-cxc"},"content":"     * Deletes {@code Investigapptor} from all person and UniqueTagList"},{"lineNumber":319,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"Marcus-cxc"},"content":"    public void deleteTag(Tag toDelete) throws TagNotFoundException {"},{"lineNumber":321,"author":{"gitID":"Marcus-cxc"},"content":"        if (tags.contains(toDelete)) {"},{"lineNumber":322,"author":{"gitID":"Marcus-cxc"},"content":"            tags.delete(toDelete);"},{"lineNumber":323,"author":{"gitID":"Marcus-cxc"},"content":"            persons.deleteTagFromPersons(toDelete);"},{"lineNumber":324,"author":{"gitID":"Marcus-cxc"},"content":"            cases.deleteTagFromCrimeCases(toDelete);"},{"lineNumber":325,"author":{"gitID":"Marcus-cxc"},"content":"        } else {"},{"lineNumber":326,"author":{"gitID":"Marcus-cxc"},"content":"            throw new TagNotFoundException();"},{"lineNumber":327,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":330,"author":{"gitID":"Marcus-cxc"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"Marcus-cxc"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":332,"author":{"gitID":"Marcus-cxc"},"content":"     *"},{"lineNumber":333,"author":{"gitID":"Marcus-cxc"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":334,"author":{"gitID":"Marcus-cxc"},"content":"     * list."},{"lineNumber":335,"author":{"gitID":"Marcus-cxc"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"Marcus-cxc"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":337,"author":{"gitID":"Marcus-cxc"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":338,"author":{"gitID":"Marcus-cxc"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":339,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":340,"author":{"gitID":"Marcus-cxc"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":341,"author":{"gitID":"Marcus-cxc"},"content":"        // used for checking person tag references"},{"lineNumber":342,"author":{"gitID":"Marcus-cxc"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":343,"author":{"gitID":"Marcus-cxc"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":344,"author":{"gitID":"Marcus-cxc"},"content":""},{"lineNumber":345,"author":{"gitID":"Marcus-cxc"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":346,"author":{"gitID":"Marcus-cxc"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":347,"author":{"gitID":"Marcus-cxc"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":348,"author":{"gitID":"Marcus-cxc"},"content":"        if (person instanceof Investigator) {"},{"lineNumber":349,"author":{"gitID":"Marcus-cxc"},"content":"            Investigator inv \u003d new Investigator(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":350,"author":{"gitID":"Marcus-cxc"},"content":"                    person.getAddress(), ((Investigator) person).getRank(),"},{"lineNumber":351,"author":{"gitID":"Marcus-cxc"},"content":"                    correctTagReferences, ((Investigator) person).getCaseListHashed());"},{"lineNumber":352,"author":{"gitID":"Marcus-cxc"},"content":"            convertHashToCases(inv);"},{"lineNumber":353,"author":{"gitID":"Marcus-cxc"},"content":"            return inv;"},{"lineNumber":354,"author":{"gitID":"Marcus-cxc"},"content":"        }"},{"lineNumber":355,"author":{"gitID":"Marcus-cxc"},"content":"        return new Person("},{"lineNumber":356,"author":{"gitID":"Marcus-cxc"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":357,"author":{"gitID":"Marcus-cxc"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"Marcus-cxc"},"content":"    //@@author"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":360,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code crimeCase} that are not in the list."},{"lineNumber":361,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":362,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code crimeCase} such that every tag in this case points to a Tag object in the master"},{"lineNumber":363,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":364,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":365,"author":{"gitID":"-"},"content":"    private CrimeCase syncWithMasterTagList(CrimeCase crimeCase) {"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        final UniqueTagList crimeCaseTags \u003d new UniqueTagList(crimeCase.getTags());"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        tags.mergeFrom(crimeCaseTags);"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":370,"author":{"gitID":"-"},"content":"        // used for checking case tag references"},{"lineNumber":371,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"        // Rebuild the list of case tags to point to the relevant tags in the master tag list."},{"lineNumber":375,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":376,"author":{"gitID":"-"},"content":"        crimeCaseTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":377,"author":{"gitID":"-"},"content":"        return new CrimeCase("},{"lineNumber":378,"author":{"gitID":"-"},"content":"                crimeCase.getCaseName(), crimeCase.getDescription(), crimeCase.getCurrentInvestigator(),"},{"lineNumber":379,"author":{"gitID":"-"},"content":"                crimeCase.getStartDate(), crimeCase.getEndDate(), crimeCase.getStatus(), correctTagReferences);"},{"lineNumber":380,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":382,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":383,"author":{"gitID":"quentinkhoo"},"content":"    ///password level operations"},{"lineNumber":384,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":385,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":386,"author":{"gitID":"quentinkhoo"},"content":"     * Updates the password of this {@code Investigapptor}."},{"lineNumber":387,"author":{"gitID":"quentinkhoo"},"content":"     * @param newPassword  will be the new password."},{"lineNumber":388,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":389,"author":{"gitID":"quentinkhoo"},"content":"    public void updatePassword(Password newPassword) {"},{"lineNumber":390,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":391,"author":{"gitID":"quentinkhoo"},"content":"            password.updatePassword(newPassword);"},{"lineNumber":392,"author":{"gitID":"quentinkhoo"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":393,"author":{"gitID":"quentinkhoo"},"content":"            setPassword(newPassword.getPassword());"},{"lineNumber":394,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":395,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":396,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":397,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":398,"author":{"gitID":"quentinkhoo"},"content":"     * Removes the password of this {@code Investigapptor}"},{"lineNumber":399,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":400,"author":{"gitID":"quentinkhoo"},"content":"    public void removePassword () throws NoPasswordException {"},{"lineNumber":401,"author":{"gitID":"quentinkhoo"},"content":"        if (this.password \u003d\u003d null || this.password.getPassword() \u003d\u003d null) {"},{"lineNumber":402,"author":{"gitID":"quentinkhoo"},"content":"            throw new NoPasswordException(\"No password in investigapptor\");"},{"lineNumber":403,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":404,"author":{"gitID":"quentinkhoo"},"content":"        this.password \u003d null;"},{"lineNumber":405,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":407,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":411,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":412,"author":{"gitID":"-"},"content":"        return cases.asObservableList().size() + \" cases, \""},{"lineNumber":413,"author":{"gitID":"-"},"content":"                + persons.asObservableList().size() + \" persons, \""},{"lineNumber":414,"author":{"gitID":"-"},"content":"                + tags.asObservableList().size() + \" tags\";"},{"lineNumber":415,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":418,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":419,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":420,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":423,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonOnlyList() {"},{"lineNumber":424,"author":{"gitID":"-"},"content":"        return persons.personOnlyList();"},{"lineNumber":425,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    public ObservableList\u003cInvestigator\u003e getInvestigatorList() {"},{"lineNumber":429,"author":{"gitID":"-"},"content":"        return persons.investigatorList();"},{"lineNumber":430,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"leowweiching"},"content":"    //@@author leowweiching"},{"lineNumber":433,"author":{"gitID":"leowweiching"},"content":"    @Override"},{"lineNumber":434,"author":{"gitID":"leowweiching"},"content":"    public ObservableList\u003cCrimeCase\u003e getCrimeCaseList() {"},{"lineNumber":435,"author":{"gitID":"leowweiching"},"content":"        return cases.asObservableList();"},{"lineNumber":436,"author":{"gitID":"leowweiching"},"content":"    }"},{"lineNumber":437,"author":{"gitID":"leowweiching"},"content":""},{"lineNumber":438,"author":{"gitID":"quentinkhoo"},"content":"    //@@author quentinkhoo"},{"lineNumber":439,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":440,"author":{"gitID":"quentinkhoo"},"content":"    public Password getPassword() {"},{"lineNumber":441,"author":{"gitID":"quentinkhoo"},"content":"        return password;"},{"lineNumber":442,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"quentinkhoo"},"content":"    //@@author"},{"lineNumber":444,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":446,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":447,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":448,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":451,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":452,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":453,"author":{"gitID":"quentinkhoo"},"content":"                || (other instanceof Investigapptor // instanceof handles nulls"},{"lineNumber":454,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.cases.equals(((Investigapptor) other).cases)"},{"lineNumber":455,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 this.persons.equals(((Investigapptor) other).persons)"},{"lineNumber":456,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((Investigapptor) other).tags));"},{"lineNumber":457,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":460,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":461,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":462,"author":{"gitID":"-"},"content":"        return Objects.hash(cases, persons, tags);"},{"lineNumber":463,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":464,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"leowweiching":109,"Marcus-cxc":119,"quentinkhoo":78,"-":158}},{"path":"src/main/java/seedu/investigapptor/model/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"quentinkhoo"},"content":"package seedu.investigapptor.model;"},{"lineNumber":2,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":3,"author":{"gitID":"quentinkhoo"},"content":"import static java.util.Objects.isNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":6,"author":{"gitID":"quentinkhoo"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":7,"author":{"gitID":"quentinkhoo"},"content":"import java.security.MessageDigest;"},{"lineNumber":8,"author":{"gitID":"quentinkhoo"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":9,"author":{"gitID":"quentinkhoo"},"content":"import java.util.Base64;"},{"lineNumber":10,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":11,"author":{"gitID":"quentinkhoo"},"content":"//@@author quentinkhoo"},{"lineNumber":12,"author":{"gitID":"quentinkhoo"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"quentinkhoo"},"content":" * Represents a Password in PartTimeManger"},{"lineNumber":14,"author":{"gitID":"quentinkhoo"},"content":" * Store password as hashCode"},{"lineNumber":15,"author":{"gitID":"quentinkhoo"},"content":" */"},{"lineNumber":16,"author":{"gitID":"quentinkhoo"},"content":"public class Password {"},{"lineNumber":17,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":18,"author":{"gitID":"quentinkhoo"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"quentinkhoo"},"content":"            \"Password must be at least 8 character and must not contain any spaces.\";"},{"lineNumber":20,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":21,"author":{"gitID":"quentinkhoo"},"content":"    public static final String INITIAL_VALUE \u003d \"IV\";"},{"lineNumber":22,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":23,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"quentinkhoo"},"content":"     * accept all password that do not have whitespaces and at least 8 characters."},{"lineNumber":25,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"quentinkhoo"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"^(?\u003d\\\\S+$).{8,}$\";"},{"lineNumber":27,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":28,"author":{"gitID":"quentinkhoo"},"content":"    private String passwordHash;"},{"lineNumber":29,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":30,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"quentinkhoo"},"content":"     * constructor for default password"},{"lineNumber":32,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"quentinkhoo"},"content":"    public Password() {"},{"lineNumber":34,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":35,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":37,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"quentinkhoo"},"content":"     * use this if hashcode is known"},{"lineNumber":39,"author":{"gitID":"quentinkhoo"},"content":"     * @param passwordHash"},{"lineNumber":40,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"quentinkhoo"},"content":"    public Password(String passwordHash) {"},{"lineNumber":42,"author":{"gitID":"quentinkhoo"},"content":"        this.passwordHash \u003d passwordHash;"},{"lineNumber":43,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":45,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"quentinkhoo"},"content":"     * @param test"},{"lineNumber":47,"author":{"gitID":"quentinkhoo"},"content":"     * @return true if password is of correct format"},{"lineNumber":48,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"quentinkhoo"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":50,"author":{"gitID":"quentinkhoo"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":51,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":53,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"quentinkhoo"},"content":"     * updates an original password to a new password"},{"lineNumber":55,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"quentinkhoo"},"content":"    public void updatePassword(Password newPassword) {"},{"lineNumber":57,"author":{"gitID":"quentinkhoo"},"content":"        requireNonNull(newPassword);"},{"lineNumber":58,"author":{"gitID":"quentinkhoo"},"content":"        this.passwordHash \u003d generatePasswordHash(newPassword.getPassword());"},{"lineNumber":59,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":61,"author":{"gitID":"quentinkhoo"},"content":"    public String getPassword() {"},{"lineNumber":62,"author":{"gitID":"quentinkhoo"},"content":"        return this.passwordHash;"},{"lineNumber":63,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":65,"author":{"gitID":"quentinkhoo"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"quentinkhoo"},"content":"     * Generate password hash given a password string"},{"lineNumber":67,"author":{"gitID":"quentinkhoo"},"content":"     * @param password"},{"lineNumber":68,"author":{"gitID":"quentinkhoo"},"content":"     * @return encodedHash in String"},{"lineNumber":69,"author":{"gitID":"quentinkhoo"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"quentinkhoo"},"content":"    public static String generatePasswordHash(String password) {"},{"lineNumber":71,"author":{"gitID":"quentinkhoo"},"content":"        String encodedHash \u003d null;"},{"lineNumber":72,"author":{"gitID":"quentinkhoo"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"quentinkhoo"},"content":"            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"},{"lineNumber":74,"author":{"gitID":"quentinkhoo"},"content":"            digest.update(INITIAL_VALUE.getBytes());"},{"lineNumber":75,"author":{"gitID":"quentinkhoo"},"content":"            if (!isNull(password)) {"},{"lineNumber":76,"author":{"gitID":"quentinkhoo"},"content":"                byte[] byteHash \u003d digest.digest(password.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":77,"author":{"gitID":"quentinkhoo"},"content":"                encodedHash \u003d Base64.getEncoder().encodeToString(byteHash);"},{"lineNumber":78,"author":{"gitID":"quentinkhoo"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"quentinkhoo"},"content":"        } catch (NoSuchAlgorithmException noSuchAlgoException) {"},{"lineNumber":80,"author":{"gitID":"quentinkhoo"},"content":"            System.out.println(\"Cannot generate hash: MessageDigest.getInstance\");"},{"lineNumber":81,"author":{"gitID":"quentinkhoo"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"quentinkhoo"},"content":"        return encodedHash;"},{"lineNumber":83,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":85,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"quentinkhoo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"quentinkhoo"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":88,"author":{"gitID":"quentinkhoo"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"quentinkhoo"},"content":"                \u0026\u0026 this.passwordHash.equals(((Password) other).passwordHash)); // state check"},{"lineNumber":90,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"quentinkhoo"},"content":""},{"lineNumber":92,"author":{"gitID":"quentinkhoo"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"quentinkhoo"},"content":"    public int hashCode() {"},{"lineNumber":94,"author":{"gitID":"quentinkhoo"},"content":"        return passwordHash.hashCode();"},{"lineNumber":95,"author":{"gitID":"quentinkhoo"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"quentinkhoo"},"content":"}"}],"authorContributionMap":{"quentinkhoo":95,"-":1}}]
